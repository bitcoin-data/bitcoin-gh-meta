[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24479](https://github.com/bitcoin/bitcoin/pull/24479) (Bugfix: util: Correctly handle Number value types in GetArg/GetBoolArg by luke-jr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-05-02T00:42:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-488521662",
      "id" : 488521662,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4ODUyMTY2Mg==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/488521662/reactions"
      },
      "updated_at" : "2022-05-20T21:52:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/488521662",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-05-18T10:23:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-493666091",
      "id" : 493666091,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MzY2NjA5MQ==",
      "updated_at" : "2019-05-18T10:23:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/493666091",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Travis compile error in https://travis-ci.org/bitcoin/bitcoin/jobs/620388014#L3988 seems to be due to a clang bug with macros and raw strings: https://reviews.llvm.org/D39279\r\n\r\n```\r\nqt/test/optiontests.cpp:56:100: warning: missing terminating '\"' character [-Winvalid-pp-token]\r\n)\", \"std::string(std::istreambuf_iterator<char>(file), std::istreambuf_iterator<char>()).c_str()\", \"R\\\"({\r\n                                                                                                   ^\r\nqt/test/optiontests.cpp:56:100: error: expected expression\r\n```\r\n\r\nMaybe can work around by adding parentheses, otherwise could declare temp variable.\r\n\r\n---\r\n\r\nOther travis error https://travis-ci.org/bitcoin/bitcoin/jobs/620388019#L2929 seems like a qsettings int value gets stringified on mac (doesn't happen on linux):\r\n\r\nActual: `\"dbcache\": \"600\",`\r\nExpected: `\"dbcache\": 600,`\r\n\r\nIt would probably be good to fix this by adding an explicit type argument to [`ToSetting`](https://github.com/ryanofsky/bitcoin/blob/955f7c00a161d6477172fa9760d1b2b5626d1761/src/qt/optionsmodel.cpp#L31-L40) instead of trying to guess the setting type from the variant type\r\n\r\n---\r\n\r\nRebased 0ab41dd770c1f13983df528b111cfc8a51fe016a -> 955f7c00a161d6477172fa9760d1b2b5626d1761 ([`pr/qtset.4`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.4) -> [`pr/qtset.5`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.5)) after #15934 merge\r\nRebased 955f7c00a161d6477172fa9760d1b2b5626d1761 -> 821268f1b8fedd3082c7e4872c2c03c35bc6f431 ([`pr/qtset.5`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.5) -> [`pr/qtset.6`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.6), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.5-rebase..pr/qtset.6)) due to conflicts with #17473, #17696, #17453, and #18914 and with attempted fixes for travis errors above\r\nUpdated 821268f1b8fedd3082c7e4872c2c03c35bc6f431 -> dc4da098498b910690b5ec3520c6d5446f08daf7 ([`pr/qtset.6`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.6) -> [`pr/qtset.7`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.6..pr/qtset.7)) with travis and appveyor fixes for https://travis-ci.org/github/bitcoin/bitcoin/jobs/694791815#L2411 and https://ci.appveyor.com/project/DrahtBot/bitcoin/builds/33325125#L55\r\nRebased dc4da098498b910690b5ec3520c6d5446f08daf7 -> ccd6331bec926edee571045dc0f5b4d88a089244 ([`pr/qtset.7`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.7) -> [`pr/qtset.8`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.8), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.7-rebase..pr/qtset.8)) due to conflict with #19233, on updated base pr #15935 pr/rwset.11\r\nRebased ccd6331bec926edee571045dc0f5b4d88a089244 -> 196f6661fc1938f862b6a2897e3ec66a25162698 ([`pr/qtset.8`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.8) -> [`pr/qtset.9`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.9), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.8-rebase..pr/qtset.9)) on top of #15934 pr/rwset.13\r\nRebased 196f6661fc1938f862b6a2897e3ec66a25162698 -> 1b216f0ae333ccbe95be7c66967ec8c3d1765c1c ([`pr/qtset.9`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.9) -> [`pr/qtset.10`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.10), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.9-rebase..pr/qtset.10)) after #19412 to fix TSAN feature_block timeout https://travis-ci.org/github/bitcoin/bitcoin/jobs/703174898\r\nRebased 1b216f0ae333ccbe95be7c66967ec8c3d1765c1c -> 9ad8ee9e41eb7660bb5f2e6c482171cd2ef9848d ([`pr/qtset.10`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.10) -> [`pr/qtset.11`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.11), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.10-rebase..pr/qtset.11)) on top of #15935 pr/rwset.14\r\nRebased 9ad8ee9e41eb7660bb5f2e6c482171cd2ef9848d -> 8aa59dbd667883836fcdaad284fcd7f1fc1b4a7f ([`pr/qtset.11`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.11) -> [`pr/qtset.12`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.12), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.11-rebase..pr/qtset.12)) after #15935 merge\r\nRebased 8aa59dbd667883836fcdaad284fcd7f1fc1b4a7f -> 6634f860f1ff57dffc1c608f427398e95914b5dc ([`pr/qtset.12`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.12) -> [`pr/qtset.13`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.13), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.12-rebase..pr/qtset.13)) due to conflict with https://github.com/bitcoin-core/gui/pull/35\r\nUpdated 6634f860f1ff57dffc1c608f427398e95914b5dc -> 1dd17b4f0ae97a756b4afd3fc5560dc86da92f17 ([`pr/qtset.13`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.13) -> [`pr/qtset.14`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.14), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.13..pr/qtset.14)) fixing missing #include and silent conflict with #15937\r\nUpdated 1dd17b4f0ae97a756b4afd3fc5560dc86da92f17 -> 15f341691b801caf10d353cd84206b1397711071 ([`pr/qtset.14`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.14) -> [`pr/qtset.15`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.15), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.14..pr/qtset.15)) fixing unit test error\r\nRebased 15f341691b801caf10d353cd84206b1397711071 -> 66ab29d052e0fdb4e5771908f2a46fa753d0ecb1 ([`pr/qtset.15`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.15) -> [`pr/qtset.16`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.16), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.15-rebase..pr/qtset.16)) due to conflicts with #18077, #20494, and #21531\r\nRebased 66ab29d052e0fdb4e5771908f2a46fa753d0ecb1 -> 9d4ff45ce5704a1e29bc328eb2d46d28c0f411e5 ([`pr/qtset.16`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.16) -> [`pr/qtset.17`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.17), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.16-rebase..pr/qtset.17)) due to conflicts with #21727 and #21850 (silent)\r\nRebased 9d4ff45ce5704a1e29bc328eb2d46d28c0f411e5 -> 46cef157aa50e1a5e25bfc8fc034a1151be57c93 ([`pr/qtset.17`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.17) -> [`pr/qtset.18`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.18), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.17-rebase..pr/qtset.18)) due to conflict with bitcoin-core/gui#313\r\nUpdated 46cef157aa50e1a5e25bfc8fc034a1151be57c93 -> ca1c704ac2dd6ba8cec4b2c42912211449d1aab9 ([`pr/qtset.18`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.18) -> [`pr/qtset.19`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.19), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.18..pr/qtset.19)) with a compile fix to fix the same conflict\r\nRebased ca1c704ac2dd6ba8cec4b2c42912211449d1aab9 -> c026213dda41e834b9883760d4d6b313c12eb683 ([`pr/qtset.19`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.19) -> [`pr/qtset.20`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.20), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.19-rebase..pr/qtset.20)) due to conflict with bitcoin-core/gui#4\r\nRebased c026213dda41e834b9883760d4d6b313c12eb683 -> 73b31c13d0ad6c6447a7ef43f275a163bf1a9c94 ([`pr/qtset.20`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.20) -> [`pr/qtset.21`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.21), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.20-rebase..pr/qtset.21)) due to conflict with bitcoin-core/gui#390\r\nRebased 73b31c13d0ad6c6447a7ef43f275a163bf1a9c94 -> 17fcdf51ab570eb55b46a7c44a2a631739462612 ([`pr/qtset.21`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.21) -> [`pr/qtset.22`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.22), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.21-rebase..pr/qtset.22)) due to conflict with #22219\r\n",
      "created_at" : "2019-12-04T02:31:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-561447787",
      "id" : 561447787,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTQ0Nzc4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-16T20:05:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561447787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-06-10T14:38:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-642053427",
      "id" : 642053427,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjA1MzQyNw==",
      "updated_at" : "2020-06-10T14:38:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642053427",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-06-21T10:25:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-647109165",
      "id" : 647109165,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NzEwOTE2NQ==",
      "updated_at" : "2020-06-21T10:25:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/647109165",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-07-11T08:36:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-657016080",
      "id" : 657016080,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzAxNjA4MA==",
      "updated_at" : "2020-07-11T08:36:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657016080",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-07-23T17:03:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-663121900",
      "id" : 663121900,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2MzEyMTkwMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-23T17:03:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/663121900",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-11-19T18:44:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-730565331",
      "id" : 730565331,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMDU2NTMzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-19T18:44:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/730565331",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-05T15:51:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-832805640",
      "id" : 832805640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjgwNTY0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T15:51:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832805640",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-26T14:08:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-848801024",
      "id" : 848801024,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0ODgwMTAyNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T14:08:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/848801024",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-06-09T07:49:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-857471176",
      "id" : 857471176,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1NzQ3MTE3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-09T07:49:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857471176",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-08-12T00:42:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-897259544",
      "id" : 897259544,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5841exgY",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-12T00:42:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/897259544",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-09-16T01:21:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-920501946",
      "id" : 920501946,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII58423b66",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-16T01:21:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/920501946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-09-29T10:53:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-930066840",
      "id" : 930066840,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843b7GY",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-29T10:53:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930066840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 17fcdf51ab570eb55b46a7c44a2a631739462612 -> ec7cc41c00ca93a8bbf92ec13101358f7472cd84 ([`pr/qtset.22`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.22) -> [`pr/qtset.23`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.23), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.22-rebase..pr/qtset.23)) due to conflict with bitcoin-core/gui#416",
      "created_at" : "2021-09-30T18:20:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-931557508",
      "id" : 931557508,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843hnCE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931557508/reactions"
      },
      "updated_at" : "2021-09-30T18:20:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931557508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\n",
      "created_at" : "2021-10-01T02:04:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-931835796",
      "id" : 931835796,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843iq-U",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931835796/reactions"
      },
      "updated_at" : "2021-10-01T02:04:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931835796",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-10-04T11:56:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-933410897",
      "id" : 933410897,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843orhR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933410897/reactions"
      },
      "updated_at" : "2021-10-04T11:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933410897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased ec7cc41c00ca93a8bbf92ec13101358f7472cd84 -> 4acc7fcbbcc63a25ac1e5368141dc9612a73c0d1 ([`pr/qtset.23`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.23) -> [`pr/qtset.24`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.24), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.23-rebase..pr/qtset.24)) due to conflict with #20452",
      "created_at" : "2021-10-04T15:12:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-933583483",
      "id" : 933583483,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843pVp7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933583483/reactions"
      },
      "updated_at" : "2021-10-04T15:12:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933583483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r721510711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721510711"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this needed, given that no version was released with this setting?",
      "commit_id" : "4acc7fcbbcc63a25ac1e5368141dc9612a73c0d1",
      "created_at" : "2021-10-04T16:08:20Z",
      "diff_hunk" : "@@ -606,4 +625,41 @@ void OptionsModel::checkAndMigrate()\n     if (settings.contains(\"addrSeparateProxyTor\") && settings.value(\"addrSeparateProxyTor\").toString().endsWith(\"%2\")) {\n         settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n     }\n+\n+    // Migrate and delete legacy GUI settings that have now moved to <datadir>/settings.json.\n+    auto migrate_setting = [&](OptionID option, const QString& qt_name, const std::string& name) {\n+        if (!settings.contains(qt_name)) return;\n+        QVariant value = settings.value(qt_name);\n+        if (node().getPersistentSetting(name).isNull()) {\n+            if (option == ProxyIP) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIP, parsed.ip);\n+                setOption(ProxyPort, parsed.port);\n+            } else if (option == ProxyIPTor) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIPTor, parsed.ip);\n+                setOption(ProxyPortTor, parsed.port);\n+            } else {\n+                setOption(option, value);\n+            }\n+        }\n+        settings.remove(qt_name);\n+    };\n+\n+    migrate_setting(DatabaseCache, \"nDatabaseCache\", \"dbcache\");\n+    migrate_setting(ThreadsScriptVerif, \"nThreadsScriptVerif\", \"par\");\n+#ifdef ENABLE_WALLET\n+    migrate_setting(SpendZeroConfChange, \"bSpendZeroConfChange\", \"spendzeroconfchange\");\n+    migrate_setting(ExternalSignerPath, \"external_signer_path\", \"signer\");\n+#endif\n+    migrate_setting(MapPortUPnP, \"fUseUPnP\", \"upnp\");\n+    migrate_setting(MapPortNatpmp, \"fUseNatpmp\", \"natpmp\");\n+    migrate_setting(Listen, \"fListen\", \"listen\");\n+    migrate_setting(Server, \"server\", \"server\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r721510711",
      "id" : 721510711,
      "line" : 658,
      "node_id" : "PRRC_kwDOABII584rAWE3",
      "original_commit_id" : "4acc7fcbbcc63a25ac1e5368141dc9612a73c0d1",
      "original_line" : 658,
      "original_position" : 803,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 803,
      "pull_request_review_id" : 770498004,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721510711/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-04T16:08:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721510711",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tried on Fedora and it doesn't work as expected.\r\n\r\n```\r\n[prayank@fedora bin]$ ./bitcoin-qt\r\nQSocketNotifier: Can only be used with threads started with QThread\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nI have `txindex=1` in bitcoin.conf, not a pruned node which works fine with `bitcoind`. It created a settings file on first launch of `bitcoin-qt` which failed with error that `txindex` doesn't work with pruning. Tried running with `prune=0` and it still doesn't work.\r\n\r\nI expect `bitcoin-qt` should use prune=0 by default if nothing is mentioned in config and also fix this segfault error.",
      "created_at" : "2021-10-04T19:17:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-933779768",
      "id" : 933779768,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843qFk4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933779768/reactions"
      },
      "updated_at" : "2021-10-04T19:17:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933779768",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r721918616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721918616"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Is this needed, given that no version was released with this setting?\r\n\r\nNot strictly needed, but it would be strange to remove this because removing it would treat this setting differently than all the other settings, it causes no harm, it is one line of code, removing it would introduce strange behaviors trying to revert and test this PR, and removing it would introduce a bug in the PR if there is any release before this PR is merged.",
      "commit_id" : "6e1c1ea20b8cf0bb6c24c81cda92e79dc14c31d5",
      "created_at" : "2021-10-05T06:15:26Z",
      "diff_hunk" : "@@ -606,4 +625,41 @@ void OptionsModel::checkAndMigrate()\n     if (settings.contains(\"addrSeparateProxyTor\") && settings.value(\"addrSeparateProxyTor\").toString().endsWith(\"%2\")) {\n         settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n     }\n+\n+    // Migrate and delete legacy GUI settings that have now moved to <datadir>/settings.json.\n+    auto migrate_setting = [&](OptionID option, const QString& qt_name, const std::string& name) {\n+        if (!settings.contains(qt_name)) return;\n+        QVariant value = settings.value(qt_name);\n+        if (node().getPersistentSetting(name).isNull()) {\n+            if (option == ProxyIP) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIP, parsed.ip);\n+                setOption(ProxyPort, parsed.port);\n+            } else if (option == ProxyIPTor) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIPTor, parsed.ip);\n+                setOption(ProxyPortTor, parsed.port);\n+            } else {\n+                setOption(option, value);\n+            }\n+        }\n+        settings.remove(qt_name);\n+    };\n+\n+    migrate_setting(DatabaseCache, \"nDatabaseCache\", \"dbcache\");\n+    migrate_setting(ThreadsScriptVerif, \"nThreadsScriptVerif\", \"par\");\n+#ifdef ENABLE_WALLET\n+    migrate_setting(SpendZeroConfChange, \"bSpendZeroConfChange\", \"spendzeroconfchange\");\n+    migrate_setting(ExternalSignerPath, \"external_signer_path\", \"signer\");\n+#endif\n+    migrate_setting(MapPortUPnP, \"fUseUPnP\", \"upnp\");\n+    migrate_setting(MapPortNatpmp, \"fUseNatpmp\", \"natpmp\");\n+    migrate_setting(Listen, \"fListen\", \"listen\");\n+    migrate_setting(Server, \"server\", \"server\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r721918616",
      "id" : 721918616,
      "in_reply_to_id" : 721510711,
      "line" : 658,
      "node_id" : "PRRC_kwDOABII584rB5qY",
      "original_commit_id" : "4acc7fcbbcc63a25ac1e5368141dc9612a73c0d1",
      "original_line" : 658,
      "original_position" : 803,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 803,
      "pull_request_review_id" : 771015359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721918616/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-05T06:31:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721918616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-10-05T08:19:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-934177749",
      "id" : 934177749,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843rmvV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934177749/reactions"
      },
      "updated_at" : "2021-10-05T08:19:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934177749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 6e1c1ea20b8cf0bb6c24c81cda92e79dc14c31d5 -> a4111bdc448af8f2b5a7126164fb7e5bb6c7f2b0 ([`pr/qtset.25`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.25) -> [`pr/qtset.26`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.26), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.25-rebase..pr/qtset.26)) due to conflict with #22951",
      "created_at" : "2021-10-05T16:16:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-934557457",
      "id" : 934557457,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843tDcR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934557457/reactions"
      },
      "updated_at" : "2021-10-05T16:16:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934557457",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for rebase. It compiled successfully on Fedora. I have few questions based on steps that I followed:\r\n\r\n1. `bitcoin-qt` had prune option unchecked in GUI. Relaunched `bitcoin-qt` with a data directory that has pruned node. Everything works fine and it automatically checked the prune option. Although GB mentioned in GUI was incorrect. I had saved prune=1024 in `bitcoin.conf` and GUI had 2 GB.\r\n\r\n2. `bitcoin-qt` had prune option checked in GUI from 1. Used data directory that has all blocks saved on disk. Everything works fine and it automatically unchecked the prune option in GUI.\r\n\r\n3. I wanted to check what happens if qt and bitcoin.conf are different. Restarted `bitcoin-qt` with data directory used in 1. Unchecked the prune option manually in GUI. This saved `\"prune\": 0` in `settings.json`. While `bitcoin.conf` for 1 still has `prune=1024`, started bitcoin-qt and I see this error:\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/136512056-5aed1a32-df6f-4362-b9c5-44316c8a0df0.png)\r\n\r\n4. Saved below things in `settings.json` for non-pruned node:\r\n    ```\r\n    {\r\n        \"prune\": 1024,\r\n        \"wallet\": [\r\n        ]\r\n       }\r\n    ```\r\n    `bitcoin.conf` had `txindex=1`\r\n\r\nand this is the error I get:\r\n\r\n![image](https://user-images.githubusercontent.com/13405205/136512913-86b75d70-0508-42d8-b14f-722272847a99.png)\r\n\r\n5. There is one more case which I wanted to reproduce but couldn't and also don't want to risk deleting my blocks for non-pruned node which is explained in https://github.com/bitcoin-core/gui/issues/245\r\n",
      "created_at" : "2021-10-08T07:09:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-938400093",
      "id" : 938400093,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII58437tld",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938400093/reactions"
      },
      "updated_at" : "2021-10-08T07:09:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938400093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the testing! In summary, I think all behavior described is expected (and improves on current behavior, even if could be improved more later).\r\n\r\n> 1. `bitcoin-qt` had prune option unchecked in GUI. Relaunched `bitcoin-qt` with a data directory that has pruned node. Everything works fine and it automatically checked the prune option. Although GB mentioned in GUI was incorrect. I had saved prune=1024 in `bitcoin.conf` and GUI had 2 GB.\r\n\r\nThe GUI prune setting is a whole number of GB so it's easier to change and understand than if it were MiB, and to avoid mistakes editing large numbers. 1024MiB is rounded up to 2GB in the display, even though 1024MiB should still be the effective pruning size until the user changes it again. The idea behind rounding up is that it would be bad if node used more disk space than the displayed amount, but ok if it's using less space than the displayed amount.\r\n\r\n> 2. `bitcoin-qt` had prune option checked in GUI from 1. Used data directory that has all blocks saved on disk. Everything works fine and it automatically unchecked the prune option in GUI.\r\n\r\nNice test. It's good to have confirmation that `bitcoin.conf` still takes precedence over `QSettings` so upgrading does not cause changed settings to be used. (Implementation note: the precedence for settings sources is `settings.json` > `bitcoin.conf` > `QSettings`)\r\n\r\n> 3. I wanted to check what happens if qt and bitcoin.conf are different. Restarted `bitcoin-qt` with data directory used in 1. Unchecked the prune option manually in GUI. This saved `\"prune\": 0` in `settings.json`. While `bitcoin.conf` for 1 still has `prune=1024`, started bitcoin-qt and I see this error: [Do you want to rebuild the block database now?]\r\n\r\nIdeally this would be shown as a question not an error, but the benefit of this PR is that when you uncheck the pruning option it now actually disables pruning. Disabling pruning does require reindexing, which is why it asks to reindex.\r\n\r\nSpeaking more generally, the idea behind settings precedence is that `settings.json` is intended to hold live, dynamic settings chosen by the user, and `bitcoin.conf` is supposed to hold static settings chosen by the packager or installer (who can disable live settings with `nosettings=1`). The cases where different settings sources provide different values are intended to be well defined, but also rare. There should be few use cases that require controlling the same setting from different places. In the most common cases, GUI users should not need any `bitcoin.conf` file at all. GUI users should have better options than creating a text file, learning a configuration syntax, and restarting their node to apply settings. Also, ideally more settings will be able to be applied live without restarts, and there will be a `config` RPC method to get and set arbitrary `settings.json` settings.\r\n\r\n> 4. Saved below things in `settings.json` for non-pruned node:\r\n>    ```\r\n>    {\r\n>        \"prune\": 1024,\r\n>        \"wallet\": [\r\n>        ]\r\n>       }\r\n>    ```\r\n>\r\n>    `bitcoin.conf` had `txindex=1`\r\n> \r\n> and this is the error I get: [Prune mode is incompatible with -txindex]\r\n\r\nThis is another good test, and I think it is straightforward that if you enable pruning and enable txindex you will see this error. Ideally this could show options for disabling pruning or disabling txindex, though.\r\n\r\n> 5. There is one more case which I wanted to reproduce but couldn't and also don't want to risk deleting my blocks for non-pruned node which is explained in [Pruning should be based on bitcoin.confÂ bitcoin-core/gui#245](https://github.com/bitcoin-core/gui/issues/245)\r\n\r\nI don't think there should be any direct interaction between this PR and what's described in [#245](https://github.com/bitcoin-core/gui/issues/245). With this PR the node will still prune if you enable pruning in the GUI, and still not prune if you disable pruning in the GUI. The other issue [#245](https://github.com/bitcoin-core/gui/issues/245) seems like it is requesting that the node avoids pruning even if pruning was requested, which does not make sense to me even though I agree we should have safeguards to prevent pruning from happening unintentionally. If you can describe in more detail how [#245](https://github.com/bitcoin-core/gui/issues/245) happened (how pruning got enabled in the GUI), maybe we could add some safeguard to prevent this.",
      "created_at" : "2021-10-08T19:35:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-939072224",
      "id" : 939072224,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843-Rrg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939072224/reactions"
      },
      "updated_at" : "2021-10-08T19:35:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939072224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> If you can describe in more detail how [#245](https://github.com/bitcoin-core/gui/issues/245) happened (how pruning got enabled in the GUI), maybe we could add some safeguard to prevent this.\r\n\r\nMaybe the GUI should have an extra prompt at startup if pruning is changing from disabled to enabled and blocks exist. In the opposite case we already have \"You need to rebuild the database using -reindex to go back to unpruned mode.  [...] Do you want to rebuild the block database now?\". In this case GUI could prompt \"Pruning setting has changed from disabled to enabled, which may discard previously downloaded blocks. Are you sure you want to enable pruning?\" Buttons could be [Enable pruning] [Disable pruning] [Abort].\" If this is a good idea to implement, probably it should be a separate GUI-only PR.",
      "created_at" : "2021-10-08T19:59:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-939084280",
      "id" : 939084280,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843-Un4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939084280/reactions"
      },
      "updated_at" : "2021-10-08T20:00:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939084280",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> If you can describe in more detail how #245 happened (how pruning got enabled in the GUI)\r\n\r\nIt was enabled when I first installed Bitcoin Core. Did not use GUI for months with non-pruned data directory. Never had issues with CLI. So restarting bitcoin-qt after a long time unaware of settings being different, it deleted all my blocks without any prompt.\r\n\r\n> In this case GUI could prompt \"Pruning setting has changed from disabled to enabled, which may discard previously downloaded blocks. Are you sure you want to enable pruning?\" Buttons could be [Enable pruning] [Disable pruning] [Abort].\" If this is a good idea to implement, probably it should be a separate GUI-only PR.\r\n\r\nAgree",
      "created_at" : "2021-10-09T00:59:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-939195436",
      "id" : 939195436,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5843-vws",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939195436/reactions"
      },
      "updated_at" : "2021-10-09T00:59:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/939195436",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-11-15T17:27:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-969140586",
      "id" : 969140586,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5845w-lq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/969140586/reactions"
      },
      "updated_at" : "2021-11-15T17:27:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/969140586",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased a4111bdc448af8f2b5a7126164fb7e5bb6c7f2b0 -> 32ef6cfa521b8a0615de3259d7b81383608ab8f3 ([`pr/qtset.26`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.26) -> [`pr/qtset.27`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.27), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.26-rebase..pr/qtset.27)) due to conflict with #23004.\r\n",
      "created_at" : "2021-11-29T22:41:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-982089338",
      "id" : 982089338,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5846iX56",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/982089338/reactions"
      },
      "updated_at" : "2021-11-29T22:42:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/982089338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "reACK https://github.com/bitcoin/bitcoin/commit/32ef6cfa521b8a0615de3259d7b81383608ab8f3\r\n\r\nOne user had some issues with prune settings today: https://bitcoin.stackexchange.com/questions/110994/bitcoin-core-just-deleted-my-350-gb-of-blockchain-data/",
      "created_at" : "2021-11-29T23:25:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-982126282",
      "id" : 982126282,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5846ig7K",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/982126282/reactions"
      },
      "updated_at" : "2021-11-29T23:25:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/982126282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-01-09T17:15:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1008338564",
      "id" : 1008338564,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5848GgaE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1008338564/reactions"
      },
      "updated_at" : "2022-01-09T17:15:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1008338564",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 32ef6cfa521b8a0615de3259d7b81383608ab8f3 -> 91d3b48508440a16818ee9606bf5bbdca82edf8a ([`pr/qtset.27`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.27) -> [`pr/qtset.28`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.28), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.27-rebase..pr/qtset.28)) due to conflict with bitcoin-core/gui#441",
      "created_at" : "2022-01-10T16:42:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1009093949",
      "id" : 1009093949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5848JY09",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1009093949/reactions"
      },
      "updated_at" : "2022-01-10T16:42:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1009093949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2022-01-12T20:16:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1011415476",
      "id" : 1011415476,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5848SPm0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011415476/reactions"
      },
      "updated_at" : "2022-01-12T20:16:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011415476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I was expecting to see `natpmp` instead of `fUseNatpmp`.\r\n\r\nThanks for the review, and good catch. I think this was a bug introduced during a rebase. I also fixed a similar problem with `-lang` flag / `language` setting, and split off a separate commit introducing the OptionsModel getOption/setOption methods to make the individual settings changes easier to see.\r\n\r\nUpdated 91d3b48508440a16818ee9606bf5bbdca82edf8a -> 79a0399c696b8212c11c868e1f45f9887aa71993 ([`pr/qtset.28`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.28) -> [`pr/qtset.29`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.29), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.28..pr/qtset.29)) fixing natpmp and language bugs and splitting the commit",
      "created_at" : "2022-01-13T22:50:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1012587863",
      "id" : 1012587863,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5848Wt1X",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1012587863/reactions"
      },
      "updated_at" : "2022-01-13T22:50:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1012587863",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Testing 79a0399c696b8212c11c868e1f45f9887aa71993\r\n\r\nOpening `settings.json` with a fresh Bitcoin-qt (I have some wallets in the directory).\r\n\r\n> \r\n> {\r\n>     \"wallet\": [\r\n>      \"1\",\r\n>      \"2\",\r\n>      \"Config\",\r\n>      \"1.6.22\"\r\n>     ]\r\n>    }\r\n\r\nOpen Bitcoin-qt, through the GUI set prune to 4GB.  Close Bitcoin-qt.  Open `settings.json` again:\r\n\r\n> {\r\n>     \"prune\": 3814,\r\n>     \"upnp\": false,\r\n>     \"wallet\": [\r\n>      \"1\",\r\n>      \"2\",\r\n>      \"Config\",\r\n>      \"1.6.22\"\r\n>     ]\r\n>    }\r\n\r\nUpnP is included because it is by default unselected in the GUI? I think that makes sense.\r\n\r\nI create a `bitcoin.conf` and set `blockfilterindex=1`.  I get an alert:\r\n\r\n> \r\nError: basic block filter index best block of the index goes beyond pruned data. Please disable the index or reindex (which will download the whole blockchain again)\r\n\r\nThis makes sense.  So I run `bitcoin-qt -reindex`\r\n\r\nHowever, I open `settings.json`, and it doesn't show blockfilterindex:\r\n\r\n> \r\n> {\r\n>     \"prune\": 3814,\r\n>     \"upnp\": false,\r\n>     \"wallet\": [\r\n>      \"1\",\r\n>      \"2\",\r\n>      \"Config\",\r\n>      \"1.6.22\"\r\n>     ]\r\n>    }\r\n\r\nAnd I open `bitcoin.conf` and it doesn't show any other settings besides `blockfilterindex=1`\r\n",
      "created_at" : "2022-01-14T04:49:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1012773648",
      "id" : 1012773648,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5848XbMQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1012773648/reactions"
      },
      "updated_at" : "2022-01-14T04:49:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1012773648",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rspigler, all of that behavior except the upnp part is working as designed. The goal of the PR is for bitcoin-qt and bitcoind to share the same dynamic settings, and to store those settings in the settings.json file instead of QT settings storage. The software will _never_ write or change bitcoin.conf because bitcoin.conf is for static settings, rather than dynamic ones. The ultimate goal (which is not fully realized here, but would be with a `bitcoin-cli settings` command) is that nobody should ever need to create or edit a `bitcoin.conf` file to change any setting. `bitcoin.conf` would be a way for distributions and packages to set configuration defaults, and for advanced users to be able switch between complicated configurations, or to track their configurations in git, or generate their configurations with deployment tools like docker, ansible, or nix. But everyday users would not know or care about `bitcoin.conf` and would just use the gui or command line to change settings dynamically (CLI would look like `bitcoin-cli settings set prune 4000`) with immediate feedback about invalid values, and not have to worry about creating a text file, or dealing with a configuration syntax, or stopping and restarting bitcoin to make sure the file is parsed and their settings are valid.\r\n\r\nHebasto, it appears there's another bug with natpmp/upnp settings, and I think I see what it is: the `OptionsModel::getOption` method is still returning `settings.value(\"fUseUPnP\")` and `settings.value(\"fUseNatpmp\")` for these settings instead of `ToQVariant(node().getPersistentSetting(\"upnp\"), DEFAULT_UPNP)` and `ToQVariant(node().getPersistentSetting(\"natpmp\"), DEFAULT_NATPMP)`. There may be additional bugs around these settings as well. The implementation of the nat settings changed a lot after this PR was opened, and while I rebased it and fixed explicit conflicts, I never really went through the implementation updating all the upnp/natpmp references that needed to be updated or tested this feature.",
      "created_at" : "2022-01-14T14:01:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1013142512",
      "id" : 1013142512,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII5848Y1Pw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1013142512/reactions"
      },
      "updated_at" : "2022-01-14T14:01:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1013142512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I have removed the VPN on my device. I hope it helps. ",
      "created_at" : "2022-03-07T00:04:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1060069784",
      "id" : 1060069784,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII584_L2GY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1060069784/reactions"
      },
      "updated_at" : "2022-03-07T00:04:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1060069784",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/100084680?v=4",
         "events_url" : "https://api.github.com/users/ClaraBara22/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ClaraBara22/followers",
         "following_url" : "https://api.github.com/users/ClaraBara22/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ClaraBara22/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ClaraBara22",
         "id" : 100084680,
         "login" : "ClaraBara22",
         "node_id" : "U_kgDOBfcryA",
         "organizations_url" : "https://api.github.com/users/ClaraBara22/orgs",
         "received_events_url" : "https://api.github.com/users/ClaraBara22/received_events",
         "repos_url" : "https://api.github.com/users/ClaraBara22/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ClaraBara22/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ClaraBara22/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ClaraBara22"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-03-09T17:08:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1063156658",
      "id" : 1063156658,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII584_Xnuy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1063156658/reactions"
      },
      "updated_at" : "2022-03-09T17:08:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1063156658",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated 7eb8fa3daf702d4f609ae0532dcfb61e4d26a173 -> 52438b033718afae375cea86ca349db3a878aef4 ([`pr/qtset.30`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.30) -> [`pr/qtset.31`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.31), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.30..pr/qtset.31)) switching some default literals to constants",
      "created_at" : "2022-03-16T21:27:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1069651999",
      "id" : 1069651999,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII584_wZgf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1069651999/reactions"
      },
      "updated_at" : "2022-03-16T21:27:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1069651999",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "FWIW, this PR (52438b033718afae375cea86ca349db3a878aef4) fixes the bitcoin-core/gui#567 regression.",
      "created_at" : "2022-03-23T11:59:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1076293409",
      "id" : 1076293409,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585AJu8h",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076293409/reactions"
      },
      "updated_at" : "2022-03-23T11:59:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076293409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2022-03-23T12:20:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1076312880",
      "id" : 1076312880,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585AJzsw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076312880/reactions"
      },
      "updated_at" : "2022-03-23T12:20:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076312880",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2022-03-23T13:39:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1076387217",
      "id" : 1076387217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585AKF2R",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076387217/reactions"
      },
      "updated_at" : "2022-03-23T13:39:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076387217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> FWIW, this PR ([52438b0](https://github.com/bitcoin/bitcoin/commit/52438b033718afae375cea86ca349db3a878aef4)) fixes the [bitcoin-core/gui#567](https://github.com/bitcoin-core/gui/issues/567) regression.\r\n\r\nI could be wrong, but I'm guessing this PR only partially fixes https://github.com/bitcoin-core/gui/issues/567. It should prevent the bug if someone disables listening with this PR applied, and then restarts bitcoin-qt. But I'm guessing if they turn off listening without this PR, then restart with this PR applied, the same \"Cannot set -listen=0 together with -listenonion=1\" error will happen, because migrate_settings code apply the setting too late after the InitParameterInteraction code has already run, but before the AppInitParameterInteraction code runs and triggers the error. But the bug should be more temporary and go away after the next restart after the setting is migrated.",
      "created_at" : "2022-03-23T15:24:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1076486677",
      "id" : 1076486677,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585AKeIV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076486677/reactions"
      },
      "updated_at" : "2022-03-23T15:24:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076486677",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 52438b033718afae375cea86ca349db3a878aef4 -> b81c22a2880a797ea86d9b793c58aa49c67b9cda ([`pr/qtset.31`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.31) -> [`pr/qtset.32`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.32), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.31-rebase..pr/qtset.32)) due to conflict with bitcoin-core/gui#568. Also cleaned up messy previous conflict resolution with #17696. No change in behavior except for a minor bugfix when the -prune command line option is given and the intro dialog is shown. In previous version of this PR, the intro dialog prune value would only be written to settings.json and not take precedence over the command line value. Now it takes precedence over the command line value.",
      "created_at" : "2022-03-23T20:24:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1076785187",
      "id" : 1076785187,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585ALnAj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076785187/reactions"
      },
      "updated_at" : "2022-03-23T20:24:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076785187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-04-04T16:00:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1087736046",
      "id" : 1087736046,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585A1Yju",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1087736046/reactions"
      },
      "updated_at" : "2022-04-04T16:00:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1087736046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842669457"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842669457"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\n```suggestion\r\nfiles), and the GUI settings will now be used if bitcoind is started\r\nsubsequently, rather than ignored.\r\n```",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-05T11:19:10Z",
      "diff_hunk" : "@@ -0,0 +1,8 @@\n+GUI changes\n+-----------\n+\n+Configuration changes made in the bitcoin GUI (such as the pruning setting,\n+proxy settings, UPNP preferences) are now saved to <datadir>/settings.json file\n+rather than to the Qt settings backend (windows registry or unix desktop config\n+files), and the GUI settings will now be used if bitcoind is started in\n+subsequently, rather than ignored.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842669457",
      "id" : 842669457,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yOh2R",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 8,
      "original_position" : 8,
      "original_start_line" : 7,
      "path" : "doc/release-notes-15936.md",
      "position" : null,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842669457/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T14:42:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842669457",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842680598"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842680598"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The `LocaleIndependentAtoi()`'s argument is `const std::string&`, no need to get the C-string:\r\n\r\n```suggestion\r\n    return LocaleIndependentAtoi<int>(value.get_str());\r\n```",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-05T11:34:06Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842680598",
      "id" : 842680598,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yOkkW",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 41,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842680598/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T14:42:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842680598",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842713069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842713069"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`get_str()` will throw if the value is not a string (`typ != VSTR`). I think it is strange to return `\"\"` for a boolean false value and throw for a boolean true. Will also throw for integers.",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-05T12:14:34Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842713069",
      "id" : 842713069,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yOsft",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 58,
      "original_position" : 33,
      "original_start_line" : 45,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842713069/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T14:42:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842713069",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842716913"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842716913"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    return QVariant::fromValue(value.get_str());\r\n```",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-05T12:19:16Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842716913",
      "id" : 842716913,
      "line" : 68,
      "node_id" : "PRRC_kwDOABII584yOtbx",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 68,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 52,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842716913/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T14:42:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842716913",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842723350"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842723350"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is it not possible to use `variant.Type()` and ditch the second argument to this function `QVariant::Type type`?",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-05T12:26:36Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert QSettings QVariant value to bitcoin setting.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type, const util::SettingsValue& fallback = {})\n+{\n+    if (!variant.isValid()) return fallback;\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842723350",
      "id" : 842723350,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yOvAW",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 66,
      "original_position" : 50,
      "original_start_line" : 62,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842723350/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T14:42:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842723350",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842726459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842726459"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here is the reverse of the above false->empty-string conversion. This code converts empty string to boolean false. This looks strange. Maybe in some cases we would like to keep the empty string as an empty string?",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-05T12:29:55Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert QSettings QVariant value to bitcoin setting.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type, const util::SettingsValue& fallback = {})\n+{\n+    if (!variant.isValid()) return fallback;\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    std::string str = variant.toString().toStdString();\n+    if (str.empty()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842726459",
      "id" : 842726459,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yOvw7",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 68,
      "original_position" : 52,
      "original_start_line" : 67,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842726459/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T14:42:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/842726459",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased b81c22a2880a797ea86d9b793c58aa49c67b9cda -> 8d50aba09faafa2329751a30d5ce6f63afdc52d0 ([`pr/qtset.32`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.32) -> [`pr/qtset.33`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.33), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.32-rebase..pr/qtset.33)) fixing conflict and test failure after bitcoin-core/gui#569",
      "created_at" : "2022-04-05T20:17:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1089288250",
      "id" : 1089288250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585A7Tg6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1089288250/reactions"
      },
      "updated_at" : "2022-04-05T20:17:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1089288250",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "https://api.cirrus-ci.com/v1/task/6080882288099328/logs/ci.log:\r\n```\r\nFAIL: qt/test/test_bitcoin-qt\r\n=============================\r\n\r\nQStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root'\r\n********* Start testing of AppTests *********\r\nConfig: Using QtTest library 5.15.3, Qt 5.15.3 (x86_64-little_endian-lp64 static release build; by Clang 8.0.0 (tags/RELEASE_800/final)), ubuntu 18.04\r\nPASS   : AppTests::initTestCase()\r\nQINFO  : AppTests::appTests() Backing up GUI settings to \"/tmp/test_common_Bitcoin Core/95f88467c15a125c7116b7e203b7386cf60ef5f9ce394165bee770ab2655162d/regtest/guisettings.ini.bak\"\r\nQDEBUG : AppTests::appTests() requestInitialize : Requesting initialize\r\nQDEBUG : AppTests::appTests() Running initialization in thread\r\nQDEBUG : AppTests::appTests() initializeResult : Initialization result:  true\r\nQINFO  : AppTests::appTests() Platform customization: \"other\"\r\nQWARN  : AppTests::appTests() This plugin does not support propagateSizeHints()\r\nQWARN  : AppTests::appTests() This plugin does not support raise()\r\nQWARN  : AppTests::appTests() This plugin does not support grabbing the keyboard\r\nQWARN  : AppTests::appTests() This plugin does not support propagateSizeHints()\r\nQDEBUG : AppTests::appTests() requestShutdown : Requesting shutdown\r\nQDEBUG : AppTests::appTests() Running Shutdown in thread\r\nQDEBUG : AppTests::appTests() Shutdown finished\r\nPASS   : AppTests::appTests()\r\nPASS   : AppTests::cleanupTestCase()\r\nTotals: 3 passed, 0 failed, 0 skipped, 0 blacklisted, 522ms\r\n********* Finished testing of AppTests *********\r\n********* Start testing of OptionTests *********\r\nConfig: Using QtTest library 5.15.3, Qt 5.15.3 (x86_64-little_endian-lp64 static release build; by Clang 8.0.0 (tags/RELEASE_800/final)), ubuntu 18.04\r\nPASS   : OptionTests::initTestCase()\r\nFAIL!  : OptionTests::migrateSettings() Caught unhandled exception\r\n   Loc: [qtestcase.cpp(1939)]\r\nTotals: 1 passed, 1 failed, 0 skipped, 0 blacklisted, 7ms\r\n********* Finished testing of OptionTests *********\r\nterminating with uncaught exception of type std::__1::__fs::filesystem::filesystem_error: filesystem error: in create_directory: Not a directory [/root/.bitcoin/regtest]\r\nFAIL qt/test/test_bitcoin-qt (exit status: 134)\r\n```",
      "created_at" : "2022-04-06T07:33:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1089924788",
      "id" : 1089924788,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585A9u60",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1089924788/reactions"
      },
      "updated_at" : "2022-04-06T07:33:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1089924788",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks! I think the errors should be fixed by the last push.\r\n\r\nUpdated 8d50aba09faafa2329751a30d5ce6f63afdc52d0 -> 73d7e74aa3201158a7f33daf07fc23a370d2b4b9 ([`pr/qtset.33`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.33) -> [`pr/qtset.34`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.34), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.33..pr/qtset.34)) to fix create_directory errors after OptionsTest caused by OptionsTest clearing the -datadir option set by BasicTestingSetup (https://cirrus-ci.com/task/4954982381256704?logs=ci#L3402, https://cirrus-ci.com/task/5377194846322688?logs=ci#L2727, https://cirrus-ci.com/task/4814244892901376?logs=ci#L3122, https://cirrus-ci.com/task/5236457357967360?logs=ci#L4040, https://cirrus-ci.com/task/4673507404546048?logs=ci#L3145, https://cirrus-ci.com/task/4954982381256704?logs=ci#L3402, https://cirrus-ci.com/task/6080882288099328?logs=ci#L2910)",
      "created_at" : "2022-04-06T20:22:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1090744615",
      "id" : 1090744615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585BA3En",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1090744615/reactions"
      },
      "updated_at" : "2022-04-06T20:22:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1090744615",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845068946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845068946"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "style:\r\n```suggestion\r\nbool OptionsModel::setData(const QModelIndex& index, const QVariant& value, int role)\r\n```",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T12:22:32Z",
      "diff_hunk" : "@@ -265,322 +256,337 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static QString ProxyString(bool is_set, QString ip, QString port)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return is_set ? ip + \":\" + port : QString{\"\"};\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const bool prune = prune_target_gb > 0;\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune, prune_target_gb);\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+    m_prune_size_gb = PruneSizeGB(new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845068946",
      "id" : 845068946,
      "line" : 329,
      "node_id" : "PRRC_kwDOABII584yXrqS",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 329,
      "original_position" : 346,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 356,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845068946/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T14:42:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845068946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845099650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845099650"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "style:\r\n```suggestion\r\n    bool setOption(OptionID option, const QVariant& value);\r\n```",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T12:54:05Z",
      "diff_hunk" : "@@ -79,6 +79,8 @@ class OptionsModel : public QAbstractListModel\n     int rowCount(const QModelIndex & parent = QModelIndex()) const override;\n     QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;\n     bool setData(const QModelIndex & index, const QVariant & value, int role = Qt::EditRole) override;\n+    QVariant getOption(OptionID option) const;\n+    bool setOption(OptionID option, const QVariant &value);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845099650",
      "id" : 845099650,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yXzKC",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 83,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.h",
      "position" : null,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845099650/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T14:42:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845099650",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845113214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845113214"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`node()` would assert if the node is not created. This adds an implicit ordering dependency of these methods in `src/qt/bitcoin.cpp`:\r\n\r\n```cpp\r\n    app.createNode(*init);\r\n    app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));\r\n```\r\n\r\nNot so nice, but I guess it is ok. It will crash immediately if the order if violated, can't remain unnoticed if somebody bricks it in the future.\r\n\r\nPS what about calling `createNode()` at the beginning of `createOptionsModel()`? The above is actually the only place where either method is called (ignoring tests).\r\n    ",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T13:07:16Z",
      "diff_hunk" : "@@ -259,7 +259,7 @@ void BitcoinApplication::createPaymentServer()\n \n void BitcoinApplication::createOptionsModel(bool resetSettings)\n {\n-    optionsModel = new OptionsModel(this, resetSettings);\n+    optionsModel = new OptionsModel(node(), this, resetSettings);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845113214",
      "id" : 845113214,
      "line" : 262,
      "node_id" : "PRRC_kwDOABII584yX2d-",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 262,
      "original_position" : 5,
      "original_start_line" : 260,
      "path" : "src/qt/bitcoin.cpp",
      "position" : 5,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845113214/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 260,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T14:42:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845113214",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845114077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845114077"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this comment is not correct anymore? The settings are no more in `QSettings`, right?",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T13:08:10Z",
      "diff_hunk" : "@@ -632,6 +632,7 @@ int GuiMain(int argc, char* argv[])\n     app.parameterSetup();\n     GUIUtil::LogQtInfo();\n     // Load GUI settings from QSettings",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845114077",
      "id" : 845114077,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yX2rd",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 634,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845114077/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T14:42:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845114077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845177487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845177487"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "equivalent, but shorter/simpler:\r\n```suggestion\r\n    m_splash = new SplashScreen(networkStyle);\r\n    m_splash->setNode(node());\r\n```",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T14:04:14Z",
      "diff_hunk" : "@@ -278,7 +278,9 @@ void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n     assert(!m_splash);\n+    assert(m_node);\n     m_splash = new SplashScreen(networkStyle);\n+    m_splash->setNode(*m_node);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845177487",
      "id" : 845177487,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yYGKP",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 283,
      "original_position" : 15,
      "original_start_line" : 281,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845177487/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T14:42:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845177487",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845213418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845213418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "style, here and elsewhere, it *must* be without spaces for some automated tool to pick it up:\r\n```suggestion\r\n        /*ignore_nonpersistent=*/true, /*get_chain_name=*/false);\r\n```",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T14:36:12Z",
      "diff_hunk" : "@@ -592,6 +592,13 @@ bool ArgsManager::WriteSettingsFile(std::vector<std::string>* errors) const\n     return true;\n }\n \n+util::SettingsValue ArgsManager::GetPersistentSetting(const std::string& name) const\n+{\n+    LOCK(cs_args);\n+    return util::GetSetting(m_settings, m_network, name, !UseDefaultSection(\"-\" + name),\n+        /* ignore_nonpersistent = */ true, /* get_chain_name= */ false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845213418",
      "id" : 845213418,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yYO7q",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 599,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 931692550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845213418/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T14:42:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845213418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for review vasild! I'll respond and push an update soon.\r\n\r\nI'm also looking into new MacOS test failure https://cirrus-ci.com/task/5754532419338240. Using cirrus's nice \"Re-run with Terminal Accessâ\" access feature I was able to get the following stack trace:\r\n\r\n```sh\r\nfind . -name test_bitcoin-qt\r\nlldb -- ci/scratch/out/x86_64-apple-darwin/bin/test_bitcoin-qt\r\n(lldb) run\r\n(lldb) bt\r\n* thread #1, name = 'b-test', queue = 'com.apple.main-thread', stop reason = hit program assert\r\n    frame #0: 0x00007ff819f6800e libsystem_kernel.dylib`__pthread_kill + 10\r\n    frame #1: 0x00007ff819f9e1ff libsystem_pthread.dylib`pthread_kill + 263\r\n    frame #2: 0x00007ff819ee9d24 libsystem_c.dylib`abort + 123\r\n    frame #3: 0x00007ff819ee90cb libsystem_c.dylib`__assert_rtn + 314\r\n  * frame #4: 0x00000001007db0c1 test_bitcoin-qt`fsbridge::AbsPathJoin(fs::path const&, fs::path const&) (.cold.1) at fs.cpp:39:5 [opt]\r\n    frame #5: 0x0000000100518efa test_bitcoin-qt`fsbridge::AbsPathJoin(base=0x0000000100e137d8, path=<unavailable>) at fs.cpp:39:5 [opt]\r\n    frame #6: 0x0000000100534734 test_bitcoin-qt`ArgsManager::GetSettingsPath(this=<unavailable>, filepath=0x00007ff7bfefd740, temp=false) const at system.cpp:536:21 [opt]\r\n    frame #7: 0x00000001005348e3 test_bitcoin-qt`ArgsManager::WriteSettingsFile(this=0x0000000100e13688, errors=0x0000000000000000) const at system.cpp:578:10 [opt]\r\n    frame #8: 0x00000001002627cf test_bitcoin-qt`node::(anonymous namespace)::NodeImpl::updateSetting(this=<unavailable>, name=\"dbcache\", value=0x00007ff7bfefd920) at interfaces.cpp:135:15 [opt]\r\n    frame #9: 0x000000010007b941 test_bitcoin-qt`OptionsModel::setOption(this=0x00007ff7bfefdc68, option=<unavailable>, value=0x00007ff7bfefda20) at optionsmodel.cpp:564:20 [opt]\r\n    frame #10: 0x000000010007f662 test_bitcoin-qt`OptionsModel::checkAndMigrate(this=0x00007ff7bfefdac0, option=DatabaseCache, qt_name=0x00007ff7bfefda90, name=\"dbcache\")::$_1::operator()(OptionsModel::OptionID, QString const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const at optionsmodel.cpp:661:17 [opt]\r\n    frame #11: 0x00000001000783e6 test_bitcoin-qt`OptionsModel::checkAndMigrate(this=0x00007ff7bfefdc68) at optionsmodel.cpp:667:5 [opt]\r\n    frame #12: 0x0000000100074bc6 test_bitcoin-qt`OptionsModel::Init(this=0x00007ff7bfefdc68, resetSettings=<unavailable>) at optionsmodel.cpp:134:5 [opt]\r\n    frame #13: 0x000000010007449d test_bitcoin-qt`OptionsModel::OptionsModel(this=0x00007ff7bfefdc68, node=0x00006000000084b0, parent=<unavailable>, resetSettings=<unavailable>) at optionsmodel.cpp:110:5 [opt]\r\n    frame #14: 0x000000010000e0cc test_bitcoin-qt`OptionTests::migrateSettings(this=0x00007ff7bfefe9b0) at optiontests.cpp:50:18 [opt]\r\n    frame #15: 0x000000010218eda0 QtCore`QMetaMethod::invoke(QObject*, Qt::ConnectionType, QGenericReturnArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument, QGenericArgument) const + 1472\r\n    frame #16: 0x0000000101769ff3 QtTest`___lldb_unnamed_symbol12$$QtTest + 819\r\n    frame #17: 0x000000010176ac02 QtTest`___lldb_unnamed_symbol14$$QtTest + 914\r\n    frame #18: 0x000000010176bacb QtTest`___lldb_unnamed_symbol17$$QtTest + 971\r\n    frame #19: 0x000000010176c027 QtTest`QTest::qRun() + 263\r\n    frame #20: 0x000000010176bcf4 QtTest`QTest::qExec(QObject*, int, char**) + 20\r\n    frame #21: 0x000000010001e282 test_bitcoin-qt`main(argc=<unavailable>, argv=<unavailable>) at test_main.cpp:94:9 [opt]\r\n    frame #22: 0x000000010140951e dyld`start + 462\r\n```",
      "created_at" : "2022-04-07T16:18:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1091947456",
      "id" : 1091947456,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585BFcvA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091947456/reactions"
      },
      "updated_at" : "2022-04-07T16:18:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091947456",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845353862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845353862"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"refactor: Add OptionsModel getOption/setOption methods\" (87c655ab07b2bddf50bfdc3fcceabd3ef46e436a)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845068946\r\n\r\n> style:\r\n\r\nThis line is actually just moving and I didn't change it. Would prefer not to change it here to avoid interfering with `git diff --color-moved`",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T16:35:11Z",
      "diff_hunk" : "@@ -265,322 +256,337 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static QString ProxyString(bool is_set, QString ip, QString port)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return is_set ? ip + \":\" + port : QString{\"\"};\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const bool prune = prune_target_gb > 0;\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune, prune_target_gb);\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+    m_prune_size_gb = PruneSizeGB(new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845353862",
      "id" : 845353862,
      "in_reply_to_id" : 845068946,
      "line" : 329,
      "node_id" : "PRRC_kwDOABII584yYxOG",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 329,
      "original_position" : 346,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 356,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845353862/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T21:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845353862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845357067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845357067"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"refactor: Add OptionsModel getOption/setOption methods\" (87c655ab07b2bddf50bfdc3fcceabd3ef46e436a)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845099650\r\n\r\n> style:\r\n\r\nThanks, updated",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T16:38:58Z",
      "diff_hunk" : "@@ -79,6 +79,8 @@ class OptionsModel : public QAbstractListModel\n     int rowCount(const QModelIndex & parent = QModelIndex()) const override;\n     QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;\n     bool setData(const QModelIndex & index, const QVariant & value, int role = Qt::EditRole) override;\n+    QVariant getOption(OptionID option) const;\n+    bool setOption(OptionID option, const QVariant &value);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845357067",
      "id" : 845357067,
      "in_reply_to_id" : 845099650,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yYyAL",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 83,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.h",
      "position" : null,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845357067/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T21:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845357067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845368254"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845368254"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"refactor: Pass interfaces::Node references to OptionsModel constructor\" (ae9a0987317e23d54c72d82787ef9690a2736595)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845113214\r\n\r\n> `node()` would assert if the node is not created.\r\n\r\nIt doesn't seem like a problem to me that `app.createOptionsModel()` and `app.createSpashScreen()` methods will fail if `app.createNode()` is not called before them. These are just normal function preconditions which are checked by asserts. If it is a problem, it's not a new one: the existing `app.createWindow()` and `app.baseInitialize()` functions both fail in exactly the same way as app.createOptionsModel() does if m_node is null.\r\n\r\nIf you have ideas about how to clean up this code generally, I'd be happy to review a PR. But I wouldn't want to make `createOptionsModel` a special case here different from the other create methods.",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T16:51:54Z",
      "diff_hunk" : "@@ -259,7 +259,7 @@ void BitcoinApplication::createPaymentServer()\n \n void BitcoinApplication::createOptionsModel(bool resetSettings)\n {\n-    optionsModel = new OptionsModel(this, resetSettings);\n+    optionsModel = new OptionsModel(node(), this, resetSettings);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845368254",
      "id" : 845368254,
      "in_reply_to_id" : 845113214,
      "line" : 262,
      "node_id" : "PRRC_kwDOABII584yY0u-",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 262,
      "original_position" : 5,
      "original_start_line" : 260,
      "path" : "src/qt/bitcoin.cpp",
      "position" : 5,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845368254/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 260,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T21:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845368254",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845368884"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845368884"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"refactor: Pass interfaces::Node references to OptionsModel constructor\" (ae9a0987317e23d54c72d82787ef9690a2736595)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845177487\r\n\r\n> equivalent, but shorter/simpler:\r\n\r\nThanks! Updated this",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T16:52:34Z",
      "diff_hunk" : "@@ -278,7 +278,9 @@ void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n     assert(!m_splash);\n+    assert(m_node);\n     m_splash = new SplashScreen(networkStyle);\n+    m_splash->setNode(*m_node);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845368884",
      "id" : 845368884,
      "in_reply_to_id" : 845177487,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yY040",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 283,
      "original_position" : 15,
      "original_start_line" : 281,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845368884/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T21:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845368884",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845369718"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845369718"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"refactor: Pass interfaces::Node references to OptionsModel constructor\" (ae9a0987317e23d54c72d82787ef9690a2736595)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845114077\r\n\r\n> I think this comment is not correct anymore? The settings are no more in `QSettings`, right?\r\n\r\nExpanded comment in later commit. GUI-only settings are still stored in QSettings, but shared bitcoind/bitcoin-qt settings will come from ArgsManager after this.",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T16:53:29Z",
      "diff_hunk" : "@@ -632,6 +632,7 @@ int GuiMain(int argc, char* argv[])\n     app.parameterSetup();\n     GUIUtil::LogQtInfo();\n     // Load GUI settings from QSettings",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845369718",
      "id" : 845369718,
      "in_reply_to_id" : 845114077,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yY1F2",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 634,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845369718/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T21:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845369718",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845412201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845412201"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"settings: Add update/getPersistent/isIgnored methods\" (ea8c5cb67ac2aef7b24a4d5765edaca2fa84207a)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845213418\r\n\r\n> style, here and elsewhere, it _must_ be without spaces for some automated tool to pick it up:\r\n\r\nThanks, updated new & changed lines",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T17:44:55Z",
      "diff_hunk" : "@@ -592,6 +592,13 @@ bool ArgsManager::WriteSettingsFile(std::vector<std::string>* errors) const\n     return true;\n }\n \n+util::SettingsValue ArgsManager::GetPersistentSetting(const std::string& name) const\n+{\n+    LOCK(cs_args);\n+    return util::GetSetting(m_settings, m_network, name, !UseDefaultSection(\"-\" + name),\n+        /* ignore_nonpersistent = */ true, /* get_chain_name= */ false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845412201",
      "id" : 845412201,
      "in_reply_to_id" : 845213418,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yY_dp",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 599,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845412201/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T21:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845412201",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845412486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845412486"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Unify bitcoin-qt and bitcoind persistent settings\" (8d50aba09faafa2329751a30d5ce6f63afdc52d0)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842669457\r\n\r\n> nit:\r\n\r\nThanks, updated",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T17:45:14Z",
      "diff_hunk" : "@@ -0,0 +1,8 @@\n+GUI changes\n+-----------\n+\n+Configuration changes made in the bitcoin GUI (such as the pruning setting,\n+proxy settings, UPNP preferences) are now saved to <datadir>/settings.json file\n+rather than to the Qt settings backend (windows registry or unix desktop config\n+files), and the GUI settings will now be used if bitcoind is started in\n+subsequently, rather than ignored.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845412486",
      "id" : 845412486,
      "in_reply_to_id" : 842669457,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yY_iG",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 8,
      "original_position" : 8,
      "original_start_line" : 7,
      "path" : "doc/release-notes-15936.md",
      "position" : null,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845412486/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T21:32:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845412486",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845412788"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845412788"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Unify bitcoin-qt and bitcoind persistent settings\" (8d50aba09faafa2329751a30d5ce6f63afdc52d0)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842680598\r\n\r\n> The `LocaleIndependentAtoi()`'s argument is `const std::string&`, no need to get the C-string:\r\n\r\nThanks, updated",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T17:45:37Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845412788",
      "id" : 845412788,
      "in_reply_to_id" : 842680598,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yY_m0",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 41,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845412788/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T21:32:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845412788",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845422060"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845422060"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Unify bitcoin-qt and bitcoind persistent settings\" (8d50aba09faafa2329751a30d5ce6f63afdc52d0)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842713069\r\n\r\n> `get_str()` will throw if the value is not a string (`typ != VSTR`). I think it is strange to return `\"\"` for a boolean false value and throw for a boolean true. Will also throw for integers.\r\n\r\nAdded comment. In general, I want this function to throw if an setting is saved with the wrong type, because our code should write to `settings.json` file with proper types, and wrong types are an indication of a corrupt or invalid settings file.\r\n\r\nThe `isNull()` and `isFalse()` cases are special just because `ArgsManager` treats them as special. Null values are used by `ArgsManager` to indicate unspecified settings values. False settings are settings that have been specified, but explicitly negated. There are some settings that don't make sense to negate, which is why we have `DISALLOW_NEGATION` flag, but the general approach is allow negations, and treat a negated `-nolist` as `[]`, treat `-nostring` as `\"\"`, `-noint` as `0`, `-nobool` as `false`.\r\n\r\nThe `ToQString` method is used for `-proxy` `-onion` and `-lang` settings and returning empty string for these does make sense when they are negated. For example, if no `-lang` value was specified you might want to use operating system language for translation, where if `-nolang` were specified you might want to disable translation.",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T17:56:48Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845422060",
      "id" : 845422060,
      "in_reply_to_id" : 842713069,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yZB3s",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 58,
      "original_position" : 33,
      "original_start_line" : 45,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845422060/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T21:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845422060",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845435090"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845435090"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Unify bitcoin-qt and bitcoind persistent settings\" (8d50aba09faafa2329751a30d5ce6f63afdc52d0)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842716913\r\n\r\nUsing `QVariant::fromValue` instead of `QString::fromStdString` would make this less clear, I think. Or I am not seeing the benefit. `fromValue` is a template method that doesn't have clearly documented behavior, while `fromStdString` is clearly documented to accept the UTF8 strings that `get_str` returns, and is already very commonly used in our Qt code.",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T18:09:31Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845435090",
      "id" : 845435090,
      "in_reply_to_id" : 842716913,
      "line" : 68,
      "node_id" : "PRRC_kwDOABII584yZFDS",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 68,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 52,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845435090/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T21:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845435090",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845438949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845438949"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Unify bitcoin-qt and bitcoind persistent settings\" (8d50aba09faafa2329751a30d5ce6f63afdc52d0)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842723350\r\n\r\n> Is it not possible to use `variant.Type()` and ditch the second argument to this function `QVariant::Type type`?\r\n\r\nI want to make sure settings are written to `settings.json` with correct types. I rearranged the functions and expanded the comment to make the design goals more clear.",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T18:14:33Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert QSettings QVariant value to bitcoin setting.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type, const util::SettingsValue& fallback = {})\n+{\n+    if (!variant.isValid()) return fallback;\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845438949",
      "id" : 845438949,
      "in_reply_to_id" : 842723350,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yZF_l",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 66,
      "original_position" : 50,
      "original_start_line" : 62,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845438949/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T21:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845438949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845440071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845440071"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Unify bitcoin-qt and bitcoind persistent settings\" (8d50aba09faafa2329751a30d5ce6f63afdc52d0)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842726459\r\n\r\n> Here is the reverse of the above false->empty-string conversion. This code converts empty string to boolean false. This looks strange. Maybe in some cases we would like to keep the empty string as an empty string?\r\n\r\nYou're right this was just strange, and I don't know what motivated it. This was only used for the `ExternalSignerPath` option which was a `QLineEdit` string and the `Language` option which was `QValueComboBox` also always set string values. There would no reason in either case to turn empty strings into booleans.",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-07T18:15:42Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert QSettings QVariant value to bitcoin setting.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type, const util::SettingsValue& fallback = {})\n+{\n+    if (!variant.isValid()) return fallback;\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    std::string str = variant.toString().toStdString();\n+    if (str.empty()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r845440071",
      "id" : 845440071,
      "in_reply_to_id" : 842726459,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yZGRH",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 68,
      "original_position" : 52,
      "original_start_line" : 67,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 935375578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845440071/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T21:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/845440071",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846010862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846010862"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this is the same as:\r\n```suggestion\r\n    m_prune_size_gb = prune_target_gb;\r\n```\r\nsince `new_value` is derived from `prune_target_gb`. I think there is no point to convert the GB (`prune_target_gb`) to MB (`new_value`) only to convert back to GB for `m_prune_size_gb`?",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-08T11:19:56Z",
      "diff_hunk" : "@@ -265,322 +266,337 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static QString ProxyString(bool is_set, QString ip, QString port)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return is_set ? ip + \":\" + port : QString{\"\"};\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const bool prune = prune_target_gb > 0;\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune, prune_target_gb);\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+    m_prune_size_gb = PruneSizeGB(new_value);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846010862",
      "id" : 846010862,
      "line" : 305,
      "node_id" : "PRRC_kwDOABII584ybRnu",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 305,
      "original_position" : 324,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 324,
      "pull_request_review_id" : 936298972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846010862/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-08T13:37:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846010862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846095972"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846095972"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This, in isolation, is (wrongly) ignoring the fact that values in [2, 550) are not allowed (`MIN_DISK_SPACE_FOR_BLOCK_FILES` -- 550 MiB). `init.cpp` would refuse to start with such a value.\r\n\r\nIn context, this is only called with values entered in the GUI which is accepting integer GB only, so it is impossible to enter e.g. 100 MiB. Or it could come from `settings.json` where the value is stored in MiB and the user may have edited it (they are not supposed to). I think it is ok because even if <550 is entered in `settings.json` the startup would gracefully fail with the proper message from `init.cpp`.",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-08T13:10:32Z",
      "diff_hunk" : "@@ -19,18 +19,103 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert QVariant value to bitcoin setting of specified type. Type is\n+//! explicitly required to make sure values written to settings.json are always\n+//! written with the right type, regardless of how the options dialog code sets\n+//! the QVariant.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type)\n+{\n+    assert(type == QVariant::Bool || type == QVariant::Int || type == QVariant::String);\n+    if (!variant.isValid()) return {};\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    return variant.toString().toStdString();\n+}\n+\n+//! Convert bitcoin setting to QVariant. This is used to interpret values from\n+//! settings.json, which have JSON types, and values from bitcoin.conf, which\n+//! are untyped strings. The return value is not guaranteed to have any\n+//! particular type, so if a specific type is required, ToQString() or ToInt()\n+//! methods below should be used instead of this.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QString. The setting must already be a string, or\n+//! it must be negated or unset. If it has another type like integer, bool,\n+//! array, or object, this will raise an exception.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback; // If string setting is unset, fall back to default.\n+    if (value.isFalse()) return \"\";      // If string setting is negated, treat it like \"\".\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to integer. The setting must already be an integer\n+//! or integer string, or it must be negated or unset. If it has another type,\n+//! this will raise an exception.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback; // If int setting is unset, fall back to default.\n+    if (value.isFalse()) return 0;       // If int setting is negated, treat it like 0.\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str());\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return ToInt(prune_setting) > 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846095972",
      "id" : 846095972,
      "line" : 86,
      "node_id" : "PRRC_kwDOABII584ybmZk",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 86,
      "original_position" : 70,
      "original_start_line" : 82,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 70,
      "pull_request_review_id" : 936298972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846095972/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 82,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-08T13:37:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846095972",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846126392"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846126392"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, leave it as is then.\r\n\r\nI mentioned it because this function has a return type `QVariant` and now it returns `QString`. This, I guess, implicitly calls the `QVariant(const QString &string)` contructor. Where is `QString::fromStdString()` documented? Is the constructor `QVariant(const QString &string)` documented too? I do not see any comments in Qt headers.",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-08T13:44:08Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846126392",
      "id" : 846126392,
      "in_reply_to_id" : 842716913,
      "line" : 68,
      "node_id" : "PRRC_kwDOABII584ybt04",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 68,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 52,
      "pull_request_review_id" : 936462575,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846126392/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-08T13:44:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846126392",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846126955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846126955"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ok",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-08T13:44:41Z",
      "diff_hunk" : "@@ -265,322 +256,337 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static QString ProxyString(bool is_set, QString ip, QString port)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return is_set ? ip + \":\" + port : QString{\"\"};\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const bool prune = prune_target_gb > 0;\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune, prune_target_gb);\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+    m_prune_size_gb = PruneSizeGB(new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846126955",
      "id" : 846126955,
      "in_reply_to_id" : 845068946,
      "line" : 329,
      "node_id" : "PRRC_kwDOABII584ybt9r",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 329,
      "original_position" : 346,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 356,
      "pull_request_review_id" : 936463378,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846126955/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-08T13:44:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846126955",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846129996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846129996"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, leave it as is for the purposes of this PR.\r\n\r\nThere was some subtle bug recently caused by some not-obvious dependency during startup, but the difference with this code here is that here we have an `assert()`, so it will not remain unnoticed.",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-08T13:47:55Z",
      "diff_hunk" : "@@ -259,7 +259,7 @@ void BitcoinApplication::createPaymentServer()\n \n void BitcoinApplication::createOptionsModel(bool resetSettings)\n {\n-    optionsModel = new OptionsModel(this, resetSettings);\n+    optionsModel = new OptionsModel(node(), this, resetSettings);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846129996",
      "id" : 846129996,
      "in_reply_to_id" : 845113214,
      "line" : 262,
      "node_id" : "PRRC_kwDOABII584ybutM",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 262,
      "original_position" : 5,
      "original_start_line" : 260,
      "path" : "src/qt/bitcoin.cpp",
      "position" : 5,
      "pull_request_review_id" : 936467788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846129996/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 260,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-08T13:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846129996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846130295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846130295"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ok",
      "commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "created_at" : "2022-04-08T13:48:12Z",
      "diff_hunk" : "@@ -632,6 +632,7 @@ int GuiMain(int argc, char* argv[])\n     app.parameterSetup();\n     GUIUtil::LogQtInfo();\n     // Load GUI settings from QSettings",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846130295",
      "id" : 846130295,
      "in_reply_to_id" : 845114077,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584ybux3",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 634,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 936468198,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846130295/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-08T13:48:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846130295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846151187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846151187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r842716913\r\n\r\n> Where is `QString::fromStdString()` documented? Is the constructor `QVariant(const QString &string)` documented too? I do not see any comments in Qt headers.\r\n\r\nThanks, to answer question I think I just googled \"fromStdString\" and was looking at https://doc.qt.io/qt-5/qstring.html#fromStdString which describes the locale conversion. There also seem to be around ~100 other uses of fromStdString in our codebase, so probably developers will be familiar with it.",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-08T14:09:01Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846151187",
      "id" : 846151187,
      "in_reply_to_id" : 842716913,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584ybz4T",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 67,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 936501716,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846151187/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-12T20:47:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846151187",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847102383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847102383"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: use doxygen's `@throws`\r\n\r\n```suggestion\r\n//! @throws std::runtime_error if it has non-string type like integer, bool, array, or object.\r\n```\r\n",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-11T09:02:48Z",
      "diff_hunk" : "@@ -19,18 +19,103 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert QVariant value to bitcoin setting of specified type. Type is\n+//! explicitly required to make sure values written to settings.json are always\n+//! written with the right type, regardless of how the options dialog code sets\n+//! the QVariant.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type)\n+{\n+    assert(type == QVariant::Bool || type == QVariant::Int || type == QVariant::String);\n+    if (!variant.isValid()) return {};\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    return variant.toString().toStdString();\n+}\n+\n+//! Convert bitcoin setting to QVariant. This is used to interpret values from\n+//! settings.json, which have JSON types, and values from bitcoin.conf, which\n+//! are untyped strings. The return value is not guaranteed to have any\n+//! particular type, so if a specific type is required, ToQString() or ToInt()\n+//! methods below should be used instead of this.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QString. The setting must already be a string, or\n+//! it must be negated or unset. If it has another type like integer, bool,\n+//! array, or object, this will raise an exception.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847102383",
      "id" : 847102383,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yfcGv",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 63,
      "original_position" : 47,
      "original_start_line" : 62,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 937685759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847102383/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-11T10:18:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847102383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847113490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847113490"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I was about to suggest to remove the `is_set` member and use `std::optional`, but I noticed that none of the callers of `ParseProxyString()` bothers to check the `is_set` member, so it is set-but-never-used. Thus it can be removed:\r\n\r\n```suggestion\r\nstruct ProxySetting {\r\n    QString ip;\r\n    QString port;\r\n};\r\nstatic ProxySetting ParseProxyString(const QString& proxy);\r\n```",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-11T09:15:08Z",
      "diff_hunk" : "@@ -19,18 +19,103 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert QVariant value to bitcoin setting of specified type. Type is\n+//! explicitly required to make sure values written to settings.json are always\n+//! written with the right type, regardless of how the options dialog code sets\n+//! the QVariant.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type)\n+{\n+    assert(type == QVariant::Bool || type == QVariant::Int || type == QVariant::String);\n+    if (!variant.isValid()) return {};\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    return variant.toString().toStdString();\n+}\n+\n+//! Convert bitcoin setting to QVariant. This is used to interpret values from\n+//! settings.json, which have JSON types, and values from bitcoin.conf, which\n+//! are untyped strings. The return value is not guaranteed to have any\n+//! particular type, so if a specific type is required, ToQString() or ToInt()\n+//! methods below should be used instead of this.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QString. The setting must already be a string, or\n+//! it must be negated or unset. If it has another type like integer, bool,\n+//! array, or object, this will raise an exception.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback; // If string setting is unset, fall back to default.\n+    if (value.isFalse()) return \"\";      // If string setting is negated, treat it like \"\".\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to integer. The setting must already be an integer\n+//! or integer string, or it must be negated or unset. If it has another type,\n+//! this will raise an exception.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback; // If int setting is unset, fall back to default.\n+    if (value.isFalse()) return 0;       // If int setting is negated, treat it like 0.\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str());\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return ToInt(prune_setting) > 1;\n+}\n+\n+//! Get pruning size value to show in GUI from bitcoin -prune setting. If\n+//! pruning is not enabled, just show default recommended pruning size (2GB).\n+static int PruneSizeGB(const util::SettingsValue& prune_setting)\n+{\n+    int value = ToInt(prune_setting);\n+    return value > 1 ? PruneMiBtoGB(value) : DEFAULT_PRUNE_TARGET_GB;\n+}\n+\n+//! Convert enabled/size values to bitcoin -prune setting.\n+static util::SettingsValue PruneSetting(bool prune_enabled, int prune_size_gb)\n+{\n+    assert(!prune_enabled || prune_size_gb >= 1); // PruneSizeGB and ParsePruneSizeGB never return less\n+    return prune_enabled ? PruneGBtoMiB(prune_size_gb) : 0;\n+}\n+\n+//! Interpret pruning size value provided by user in GUI or loaded from a legacy\n+//! QSettings source (windows registry key or qt .conf file). Smallest value\n+//! that the GUI can display is 1 GB, so round up if anything less is parsed.\n+static int ParsePruneSizeGB(const QVariant& prune_size) { return std::max(1, prune_size.toInt()); }\n+\n+struct ProxySetting {\n+    bool is_set;\n+    QString ip;\n+    QString port;\n+};\n+static ProxySetting ParseProxyString(const QString& proxy);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847113490",
      "id" : 847113490,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yfe0S",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 113,
      "original_position" : 98,
      "original_start_line" : 109,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 937685759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847113490/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-11T10:18:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847113490",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847115429"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847115429"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If the `is_set` member is removed, then this becomes:\r\n\r\n```suggestion\r\n    static const ProxySetting default_val = {DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\r\n```\r\n\r\nand also, a few lines below:\r\n\r\n```diff\r\n-return {true, ip_port.at(0), ip_port.at(1)};\r\n+return {ip_port.at(0), ip_port.at(1)};\r\n```",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-11T09:17:03Z",
      "diff_hunk" : "@@ -265,322 +266,337 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847115429",
      "id" : 847115429,
      "line" : 230,
      "node_id" : "PRRC_kwDOABII584yffSl",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 230,
      "original_position" : 275,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 231,
      "pull_request_review_id" : 937685759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847115429/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-11T10:18:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847115429",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847659019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847659019"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Unify bitcoin-qt and bitcoind persistent settings\" (8d50aba09faafa2329751a30d5ce6f63afdc52d0)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847102383\r\n\r\n> nit: use doxygen's `@throws`\r\n\r\nThanks, changed.",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-11T19:20:20Z",
      "diff_hunk" : "@@ -19,18 +19,103 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert QVariant value to bitcoin setting of specified type. Type is\n+//! explicitly required to make sure values written to settings.json are always\n+//! written with the right type, regardless of how the options dialog code sets\n+//! the QVariant.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type)\n+{\n+    assert(type == QVariant::Bool || type == QVariant::Int || type == QVariant::String);\n+    if (!variant.isValid()) return {};\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    return variant.toString().toStdString();\n+}\n+\n+//! Convert bitcoin setting to QVariant. This is used to interpret values from\n+//! settings.json, which have JSON types, and values from bitcoin.conf, which\n+//! are untyped strings. The return value is not guaranteed to have any\n+//! particular type, so if a specific type is required, ToQString() or ToInt()\n+//! methods below should be used instead of this.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QString. The setting must already be a string, or\n+//! it must be negated or unset. If it has another type like integer, bool,\n+//! array, or object, this will raise an exception.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847659019",
      "id" : 847659019,
      "in_reply_to_id" : 847102383,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yhkAL",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 63,
      "original_position" : 47,
      "original_start_line" : 62,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 936501716,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847659019/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-12T20:47:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847659019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847673483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847673483"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846095972\r\n\r\n> This, in isolation, is (wrongly) ignoring the fact that values in [2, 550) are not allowed \r\n\r\nThis is all technically correct, and I agree with everything you wrote except for the word \"wrongly\". I would say this is rightly not depending on details of the pruning implementation, and only commenting on the one special manual pruning case that does need to be handled here. Still would be open to suggestions to clarify this or maybe point to the `-prune` argument documentation for more background.",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-11T19:40:33Z",
      "diff_hunk" : "@@ -19,18 +19,103 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert QVariant value to bitcoin setting of specified type. Type is\n+//! explicitly required to make sure values written to settings.json are always\n+//! written with the right type, regardless of how the options dialog code sets\n+//! the QVariant.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type)\n+{\n+    assert(type == QVariant::Bool || type == QVariant::Int || type == QVariant::String);\n+    if (!variant.isValid()) return {};\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    return variant.toString().toStdString();\n+}\n+\n+//! Convert bitcoin setting to QVariant. This is used to interpret values from\n+//! settings.json, which have JSON types, and values from bitcoin.conf, which\n+//! are untyped strings. The return value is not guaranteed to have any\n+//! particular type, so if a specific type is required, ToQString() or ToInt()\n+//! methods below should be used instead of this.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QString. The setting must already be a string, or\n+//! it must be negated or unset. If it has another type like integer, bool,\n+//! array, or object, this will raise an exception.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback; // If string setting is unset, fall back to default.\n+    if (value.isFalse()) return \"\";      // If string setting is negated, treat it like \"\".\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to integer. The setting must already be an integer\n+//! or integer string, or it must be negated or unset. If it has another type,\n+//! this will raise an exception.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback; // If int setting is unset, fall back to default.\n+    if (value.isFalse()) return 0;       // If int setting is negated, treat it like 0.\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str());\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return ToInt(prune_setting) > 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847673483",
      "id" : 847673483,
      "in_reply_to_id" : 846095972,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yhniL",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 85,
      "original_position" : 70,
      "original_start_line" : 82,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 936501716,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847673483/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-12T20:47:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847673483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847680815"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847680815"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Unify bitcoin-qt and bitcoind persistent settings\" (8d50aba09faafa2329751a30d5ce6f63afdc52d0)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847113490\r\n\r\n> I was about to suggest to remove the `is_set` member and use `std::optional`, but I noticed that none of the callers of `ParseProxyString()` bothers to check the `is_set` member, so it is set-but-never-used. Thus it can be removed.\r\n\r\nNice catch. This struct definition is just moving not changing, but you're right I wasn't taking advantage of the is_used member in getOption code, and it is nicer to do that.",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-11T19:49:37Z",
      "diff_hunk" : "@@ -19,18 +19,103 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert QVariant value to bitcoin setting of specified type. Type is\n+//! explicitly required to make sure values written to settings.json are always\n+//! written with the right type, regardless of how the options dialog code sets\n+//! the QVariant.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type)\n+{\n+    assert(type == QVariant::Bool || type == QVariant::Int || type == QVariant::String);\n+    if (!variant.isValid()) return {};\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    return variant.toString().toStdString();\n+}\n+\n+//! Convert bitcoin setting to QVariant. This is used to interpret values from\n+//! settings.json, which have JSON types, and values from bitcoin.conf, which\n+//! are untyped strings. The return value is not guaranteed to have any\n+//! particular type, so if a specific type is required, ToQString() or ToInt()\n+//! methods below should be used instead of this.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QString. The setting must already be a string, or\n+//! it must be negated or unset. If it has another type like integer, bool,\n+//! array, or object, this will raise an exception.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback; // If string setting is unset, fall back to default.\n+    if (value.isFalse()) return \"\";      // If string setting is negated, treat it like \"\".\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to integer. The setting must already be an integer\n+//! or integer string, or it must be negated or unset. If it has another type,\n+//! this will raise an exception.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback; // If int setting is unset, fall back to default.\n+    if (value.isFalse()) return 0;       // If int setting is negated, treat it like 0.\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str());\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return ToInt(prune_setting) > 1;\n+}\n+\n+//! Get pruning size value to show in GUI from bitcoin -prune setting. If\n+//! pruning is not enabled, just show default recommended pruning size (2GB).\n+static int PruneSizeGB(const util::SettingsValue& prune_setting)\n+{\n+    int value = ToInt(prune_setting);\n+    return value > 1 ? PruneMiBtoGB(value) : DEFAULT_PRUNE_TARGET_GB;\n+}\n+\n+//! Convert enabled/size values to bitcoin -prune setting.\n+static util::SettingsValue PruneSetting(bool prune_enabled, int prune_size_gb)\n+{\n+    assert(!prune_enabled || prune_size_gb >= 1); // PruneSizeGB and ParsePruneSizeGB never return less\n+    return prune_enabled ? PruneGBtoMiB(prune_size_gb) : 0;\n+}\n+\n+//! Interpret pruning size value provided by user in GUI or loaded from a legacy\n+//! QSettings source (windows registry key or qt .conf file). Smallest value\n+//! that the GUI can display is 1 GB, so round up if anything less is parsed.\n+static int ParsePruneSizeGB(const QVariant& prune_size) { return std::max(1, prune_size.toInt()); }\n+\n+struct ProxySetting {\n+    bool is_set;\n+    QString ip;\n+    QString port;\n+};\n+static ProxySetting ParseProxyString(const QString& proxy);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847680815",
      "id" : 847680815,
      "in_reply_to_id" : 847113490,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yhpUv",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 113,
      "original_position" : 98,
      "original_start_line" : 109,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 936501716,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847680815/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-12T20:47:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847680815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847694342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847694342"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Unify bitcoin-qt and bitcoind persistent settings\" (8d50aba09faafa2329751a30d5ce6f63afdc52d0)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847115429\r\n\r\n> If the `is_set` member is removed, then this becomes:\r\n\r\nThanks, now make better use of the is_set member and ParseProxyString function.",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-11T20:08:21Z",
      "diff_hunk" : "@@ -265,322 +266,337 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847694342",
      "id" : 847694342,
      "in_reply_to_id" : 847115429,
      "line" : 230,
      "node_id" : "PRRC_kwDOABII584yhsoG",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 230,
      "original_position" : 275,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 231,
      "pull_request_review_id" : 936501716,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847694342/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-12T20:47:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847694342",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847695418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847695418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r846010862\r\n\r\nIn commit \"Unify bitcoin-qt and bitcoind persistent settings\" (8d50aba09faafa2329751a30d5ce6f63afdc52d0)\r\n\r\n> I think there is no point to convert the GB (`prune_target_gb`) to MB (`new_value`) only to convert back to GB for `m_prune_size_gb`?\r\n\r\nNice suggestion, updated",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-11T20:09:47Z",
      "diff_hunk" : "@@ -265,322 +266,337 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static QString ProxyString(bool is_set, QString ip, QString port)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return is_set ? ip + \":\" + port : QString{\"\"};\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const bool prune = prune_target_gb > 0;\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune, prune_target_gb);\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+    m_prune_size_gb = PruneSizeGB(new_value);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r847695418",
      "id" : 847695418,
      "in_reply_to_id" : 846010862,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yhs46",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 305,
      "original_position" : 324,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 936501716,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847695418/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-12T20:47:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/847695418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I updated this to drop all the ToSetting/ToQVariant/ToQString/ToInt functions. These were supposed to help make optionsmodel code simpler, but I think in practice I think they were only obfuscating it. They were also duplicating type conversion logic in ArgsManager, which I think is just better to expose directly.\r\n\r\nUpdated 1a8ac5bb1baf555003580db96d619f4a9c23089a -> 9b78c241e5e3af50eec732fb044183331fd0c756 ([`pr/qtset.36`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.36) -> [`pr/qtset.37`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.37), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.36..pr/qtset.37)) fixing missing univalue include.\r\nUpdated 9b78c241e5e3af50eec732fb044183331fd0c756 -> 7966254822e179798d6a375ac3183321ee541733 ([`pr/qtset.37`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.37) -> [`pr/qtset.38`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.38), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.37..pr/qtset.38)) dropping setting conversion functions and cleaning up implementation and tests in other small ways.",
      "created_at" : "2022-04-14T04:04:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1098687435",
      "id" : 1098687435,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585BfKPL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1098687435/reactions"
      },
      "updated_at" : "2022-04-14T04:04:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1098687435",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850190114"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850190114"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This was ok before because the supplied `SettingsValue` to `GetBoolArg()` was always of type string (`VSTR`) (right?). But now this code may be called with values coming from `settings.json` and thus it could be number as well which would trigger `get_str()` to `throw`.\r\n\r\nFor example, if `\"listen\": false` in `settings.json` is changed to `\"listen\": 0`, then `bitcoin-qt` crashes at startup:\r\n\r\n```sh\r\n$ bitcoin-qt\r\nAbort trap (core dumped)\r\n$\r\n```\r\n\r\nThis looks easy to overcome:\r\n\r\n```diff\r\n-    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\r\n+    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.getValStr());\r\n```\r\n\r\n_(putting many things in one line makes a diff harder to read)_",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-14T08:05:54Z",
      "diff_hunk" : "@@ -600,18 +607,33 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n+    return SettingToString(value, strDefault);\n+}\n+\n+std::string SettingToString(const util::SettingsValue& value, const std::string& strDefault)\n+{\n     return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.isNum() ? value.getValStr() : value.get_str();\n }\n \n int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n+    return SettingToInt(value, nDefault);\n+}\n+\n+int64_t SettingToInt(const util::SettingsValue& value, int64_t nDefault)\n+{\n     return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : LocaleIndependentAtoi<int64_t>(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n+    return SettingToBool(value, fDefault);\n+}\n+\n+bool SettingToBool(const util::SettingsValue& value, bool fDefault)\n+{\n     return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850190114",
      "id" : 850190114,
      "line" : 638,
      "node_id" : "PRRC_kwDOABII584yrN8i",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 638,
      "original_position" : 46,
      "original_start_line" : 635,
      "path" : "src/util/system.cpp",
      "position" : 46,
      "pull_request_review_id" : 941930442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850190114/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 635,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-14T15:45:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850190114",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850206286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850206286"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `toInt()` returns `int`, thus this would limit `dbcache` to max `2^31`. It is in megabytes, but still, `int64_t` is used for it elsewhere:\r\n\r\n```suggestion\r\n            node().updateSetting(\"dbcache\", static_cast<int64_t>(value.toLongLong()));\r\n```",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-14T08:25:07Z",
      "diff_hunk" : "@@ -265,322 +225,342 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static ProxySetting ParseProxyString(const std::string& proxy)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return ParseProxyString(QString::fromStdString(proxy));\n+}\n+\n+static std::string ProxyString(bool is_set, QString ip, QString port)\n+{\n+    return is_set ? QString(ip + \":\" + port).toStdString() : \"\";\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune_target_gb > 0, prune_target_gb);\n+\n+    m_prune_size_gb = prune_target_gb;\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n+    bool successful = true; /* set to false on parse error */\n     if(role == Qt::EditRole)\n     {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            return GUIUtil::GetStartOnSystemStartup();\n-        case ShowTrayIcon:\n-            return m_show_tray_icon;\n-        case MinimizeToTray:\n-            return fMinimizeToTray;\n-        case MapPortUPnP:\n+        successful = setOption(OptionID(index.row()), value);\n+    }\n+\n+    Q_EMIT dataChanged(index, index);\n+\n+    return successful;\n+}\n+\n+QVariant OptionsModel::getOption(OptionID option) const\n+{\n+    QSettings settings;\n+    switch (option) {\n+    case StartAtStartup:\n+        return GUIUtil::GetStartOnSystemStartup();\n+    case ShowTrayIcon:\n+        return m_show_tray_icon;\n+    case MinimizeToTray:\n+        return fMinimizeToTray;\n+    case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\");\n+        return SettingToBool(node().getPersistentSetting(\"upnp\"), DEFAULT_UPNP);\n #else\n-            return false;\n+        return false;\n #endif // USE_UPNP\n-        case MapPortNatpmp:\n+    case MapPortNatpmp:\n #ifdef USE_NATPMP\n-            return settings.value(\"fUseNatpmp\");\n+        return SettingToBool(node().getPersistentSetting(\"natpmp\"), DEFAULT_NATPMP);\n #else\n-            return false;\n+        return false;\n #endif // USE_NATPMP\n-        case MinimizeOnClose:\n-            return fMinimizeOnClose;\n-\n-        // default proxy\n-        case ProxyUse:\n-            return settings.value(\"fUseProxy\", false);\n-        case ProxyIP:\n-            return GetProxySetting(settings, \"addrProxy\").ip;\n-        case ProxyPort:\n-            return GetProxySetting(settings, \"addrProxy\").port;\n-\n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n-        case ProxyPortTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n+    case MinimizeOnClose:\n+        return fMinimizeOnClose;\n+\n+    // default proxy\n+    case ProxyUse:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"proxy\"), \"\")).is_set;\n+    case ProxyIP:\n+        return m_proxy_ip;\n+    case ProxyPort:\n+        return m_proxy_port;\n+\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"onion\"), \"\")).is_set;\n+    case ProxyIPTor:\n+        return m_onion_ip;\n+    case ProxyPortTor:\n+        return m_onion_port;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            return settings.value(\"bSpendZeroConfChange\");\n-        case ExternalSignerPath:\n-            return settings.value(\"external_signer_path\");\n-        case SubFeeFromAmount:\n-            return m_sub_fee_from_amount;\n+    case SpendZeroConfChange:\n+        return SettingToBool(node().getPersistentSetting(\"spendzeroconfchange\"), wallet::DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    case ExternalSignerPath:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"signer\"), \"\"));\n+    case SubFeeFromAmount:\n+        return m_sub_fee_from_amount;\n #endif\n-        case DisplayUnit:\n-            return nDisplayUnit;\n-        case ThirdPartyTxUrls:\n-            return strThirdPartyTxUrls;\n-        case Language:\n-            return settings.value(\"language\");\n-        case UseEmbeddedMonospacedFont:\n-            return m_use_embedded_monospaced_font;\n-        case CoinControlFeatures:\n-            return fCoinControlFeatures;\n-        case EnablePSBTControls:\n-            return settings.value(\"enable_psbt_controls\");\n-        case Prune:\n-            return settings.value(\"bPrune\");\n-        case PruneSize:\n-            return settings.value(\"nPruneSize\");\n-        case DatabaseCache:\n-            return settings.value(\"nDatabaseCache\");\n-        case ThreadsScriptVerif:\n-            return settings.value(\"nThreadsScriptVerif\");\n-        case Listen:\n-            return settings.value(\"fListen\");\n-        case Server:\n-            return settings.value(\"server\");\n-        default:\n-            return QVariant();\n-        }\n+    case DisplayUnit:\n+        return nDisplayUnit;\n+    case ThirdPartyTxUrls:\n+        return strThirdPartyTxUrls;\n+    case Language:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"lang\"), \"\"));\n+    case UseEmbeddedMonospacedFont:\n+        return m_use_embedded_monospaced_font;\n+    case CoinControlFeatures:\n+        return fCoinControlFeatures;\n+    case EnablePSBTControls:\n+        return settings.value(\"enable_psbt_controls\");\n+    case Prune:\n+        return PruneEnabled(node().getPersistentSetting(\"prune\"));\n+    case PruneSize:\n+        return m_prune_size_gb;\n+    case DatabaseCache:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"dbcache\"), (qint64)nDefaultDbCache));\n+    case ThreadsScriptVerif:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"par\"), DEFAULT_SCRIPTCHECK_THREADS));\n+    case Listen:\n+        return SettingToBool(node().getPersistentSetting(\"listen\"), DEFAULT_LISTEN);\n+    case Server:\n+        return SettingToBool(node().getPersistentSetting(\"server\"), false);\n+    default:\n+        return QVariant();\n     }\n-    return QVariant();\n }\n \n-// write QSettings values\n-bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n+bool OptionsModel::setOption(OptionID option, const QVariant& value)\n {\n+    auto changed = [&] { return value.isValid() && value != getOption(option); };\n+\n     bool successful = true; /* set to false on parse error */\n-    if(role == Qt::EditRole)\n-    {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n-            break;\n-        case ShowTrayIcon:\n-            m_show_tray_icon = value.toBool();\n-            settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n-            Q_EMIT showTrayIconChanged(m_show_tray_icon);\n-            break;\n-        case MinimizeToTray:\n-            fMinimizeToTray = value.toBool();\n-            settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n-            break;\n-        case MapPortUPnP: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseUPnP\", value.toBool());\n-            break;\n-        case MapPortNatpmp: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseNatpmp\", value.toBool());\n-            break;\n-        case MinimizeOnClose:\n-            fMinimizeOnClose = value.toBool();\n-            settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n-            break;\n-\n-        // default proxy\n-        case ProxyUse:\n-            if (settings.value(\"fUseProxy\") != value) {\n-                settings.setValue(\"fUseProxy\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIP: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    QSettings settings;\n+\n+    switch (option) {\n+    case StartAtStartup:\n+        successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n+        break;\n+    case ShowTrayIcon:\n+        m_show_tray_icon = value.toBool();\n+        settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n+        Q_EMIT showTrayIconChanged(m_show_tray_icon);\n+        break;\n+    case MinimizeToTray:\n+        fMinimizeToTray = value.toBool();\n+        settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n+        break;\n+    case MapPortUPnP: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"upnp\", value.toBool());\n+            node().mapPort(value.toBool(), getOption(MapPortNatpmp).toBool());\n+        }\n+        break;\n+    case MapPortNatpmp: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"natpmp\", value.toBool());\n+            node().mapPort(getOption(MapPortUPnP).toBool(), value.toBool());\n+        }\n+        break;\n+    case MinimizeOnClose:\n+        fMinimizeOnClose = value.toBool();\n+        settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n+        break;\n+\n+    // default proxy\n+    case ProxyUse:\n+        if (changed()) {\n+            node().updateSetting(\"proxy\", ProxyString(value.toBool(), m_proxy_ip, m_proxy_port));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ProxyIP:\n+        if (changed()) {\n+            m_proxy_ip = value.toString();\n+            if (getOption(ProxyUse).toBool()) {\n+                node().updateSetting(\"proxy\", ProxyString(true, m_proxy_ip, m_proxy_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n-        case ProxyPort: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.port != value.toString()) {\n-                ip_port.port = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    case ProxyPort:\n+        if (changed()) {\n+            m_proxy_port = value.toString();\n+            if (getOption(ProxyUse).toBool()) {\n+                node().updateSetting(\"proxy\", ProxyString(true, m_proxy_ip, m_proxy_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n \n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            if (settings.value(\"fUseSeparateProxyTor\") != value) {\n-                settings.setValue(\"fUseSeparateProxyTor\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIPTor: {\n-            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        if (changed()) {\n+            node().updateSetting(\"onion\", ProxyString(value.toBool(), m_onion_ip, m_onion_port));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ProxyIPTor:\n+        if (changed()) {\n+            m_onion_ip = value.toString();\n+            if (getOption(ProxyUseTor).toBool()) {\n+                node().updateSetting(\"onion\", ProxyString(true, m_onion_ip, m_onion_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n-        case ProxyPortTor: {\n-            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n-            if (!ip_port.is_set || ip_port.port != value.toString()) {\n-                ip_port.port = value.toString();\n-                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n+    case ProxyPortTor:\n+        if (changed()) {\n+            m_onion_port = value.toString();\n+            if (getOption(ProxyUseTor).toBool()) {\n+                node().updateSetting(\"onion\", ProxyString(true, m_onion_ip, m_onion_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            if (settings.value(\"bSpendZeroConfChange\") != value) {\n-                settings.setValue(\"bSpendZeroConfChange\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ExternalSignerPath:\n-            if (settings.value(\"external_signer_path\") != value.toString()) {\n-                settings.setValue(\"external_signer_path\", value.toString());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case SubFeeFromAmount:\n-            m_sub_fee_from_amount = value.toBool();\n-            settings.setValue(\"SubFeeFromAmount\", m_sub_fee_from_amount);\n-            break;\n+    case SpendZeroConfChange:\n+        if (changed()) {\n+            node().updateSetting(\"spendzeroconfchange\", value.toBool());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ExternalSignerPath:\n+        if (changed()) {\n+            node().updateSetting(\"signer\", value.toString().toStdString());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case SubFeeFromAmount:\n+        m_sub_fee_from_amount = value.toBool();\n+        settings.setValue(\"SubFeeFromAmount\", m_sub_fee_from_amount);\n+        break;\n #endif\n-        case DisplayUnit:\n-            setDisplayUnit(value);\n-            break;\n-        case ThirdPartyTxUrls:\n-            if (strThirdPartyTxUrls != value.toString()) {\n-                strThirdPartyTxUrls = value.toString();\n-                settings.setValue(\"strThirdPartyTxUrls\", strThirdPartyTxUrls);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Language:\n-            if (settings.value(\"language\") != value) {\n-                settings.setValue(\"language\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case UseEmbeddedMonospacedFont:\n-            m_use_embedded_monospaced_font = value.toBool();\n-            settings.setValue(\"UseEmbeddedMonospacedFont\", m_use_embedded_monospaced_font);\n-            Q_EMIT useEmbeddedMonospacedFontChanged(m_use_embedded_monospaced_font);\n-            break;\n-        case CoinControlFeatures:\n-            fCoinControlFeatures = value.toBool();\n-            settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n-            Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n-            break;\n-        case EnablePSBTControls:\n-            m_enable_psbt_controls = value.toBool();\n-            settings.setValue(\"enable_psbt_controls\", m_enable_psbt_controls);\n-            break;\n-        case Prune:\n-            if (settings.value(\"bPrune\") != value) {\n-                settings.setValue(\"bPrune\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case PruneSize:\n-            if (settings.value(\"nPruneSize\") != value) {\n-                settings.setValue(\"nPruneSize\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case DatabaseCache:\n-            if (settings.value(\"nDatabaseCache\") != value) {\n-                settings.setValue(\"nDatabaseCache\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ThreadsScriptVerif:\n-            if (settings.value(\"nThreadsScriptVerif\") != value) {\n-                settings.setValue(\"nThreadsScriptVerif\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Listen:\n-            if (settings.value(\"fListen\") != value) {\n-                settings.setValue(\"fListen\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Server:\n-            if (settings.value(\"server\") != value) {\n-                settings.setValue(\"server\", value);\n+    case DisplayUnit:\n+        setDisplayUnit(value);\n+        break;\n+    case ThirdPartyTxUrls:\n+        if (strThirdPartyTxUrls != value.toString()) {\n+            strThirdPartyTxUrls = value.toString();\n+            settings.setValue(\"strThirdPartyTxUrls\", strThirdPartyTxUrls);\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case Language:\n+        if (changed()) {\n+            node().updateSetting(\"lang\", value.toString().toStdString());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case UseEmbeddedMonospacedFont:\n+        m_use_embedded_monospaced_font = value.toBool();\n+        settings.setValue(\"UseEmbeddedMonospacedFont\", m_use_embedded_monospaced_font);\n+        Q_EMIT useEmbeddedMonospacedFontChanged(m_use_embedded_monospaced_font);\n+        break;\n+    case CoinControlFeatures:\n+        fCoinControlFeatures = value.toBool();\n+        settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n+        Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n+        break;\n+    case EnablePSBTControls:\n+        m_enable_psbt_controls = value.toBool();\n+        settings.setValue(\"enable_psbt_controls\", m_enable_psbt_controls);\n+        break;\n+    case Prune:\n+        if (changed()) {\n+            node().updateSetting(\"prune\", PruneSetting(value.toBool(), m_prune_size_gb));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case PruneSize:\n+        if (changed()) {\n+            m_prune_size_gb = ParsePruneSizeGB(value);\n+            if (getOption(Prune).toBool()) {\n+                node().updateSetting(\"prune\", PruneSetting(true, m_prune_size_gb));\n                 setRestartRequired(true);\n             }\n-            break;\n-        default:\n-            break;\n         }\n+        break;\n+    case DatabaseCache:\n+        if (changed()) {\n+            node().updateSetting(\"dbcache\", value.toInt());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850206286",
      "id" : 850206286,
      "line" : 538,
      "node_id" : "PRRC_kwDOABII584yrR5O",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 538,
      "original_position" : 775,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 775,
      "pull_request_review_id" : 941930442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850206286/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-14T15:45:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850206286",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850408058"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850408058"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why is it necessary to call `mapPort()` from here? In the previous code it was not called from here.",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-14T12:47:22Z",
      "diff_hunk" : "@@ -265,322 +225,342 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static ProxySetting ParseProxyString(const std::string& proxy)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return ParseProxyString(QString::fromStdString(proxy));\n+}\n+\n+static std::string ProxyString(bool is_set, QString ip, QString port)\n+{\n+    return is_set ? QString(ip + \":\" + port).toStdString() : \"\";\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune_target_gb > 0, prune_target_gb);\n+\n+    m_prune_size_gb = prune_target_gb;\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n+    bool successful = true; /* set to false on parse error */\n     if(role == Qt::EditRole)\n     {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            return GUIUtil::GetStartOnSystemStartup();\n-        case ShowTrayIcon:\n-            return m_show_tray_icon;\n-        case MinimizeToTray:\n-            return fMinimizeToTray;\n-        case MapPortUPnP:\n+        successful = setOption(OptionID(index.row()), value);\n+    }\n+\n+    Q_EMIT dataChanged(index, index);\n+\n+    return successful;\n+}\n+\n+QVariant OptionsModel::getOption(OptionID option) const\n+{\n+    QSettings settings;\n+    switch (option) {\n+    case StartAtStartup:\n+        return GUIUtil::GetStartOnSystemStartup();\n+    case ShowTrayIcon:\n+        return m_show_tray_icon;\n+    case MinimizeToTray:\n+        return fMinimizeToTray;\n+    case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\");\n+        return SettingToBool(node().getPersistentSetting(\"upnp\"), DEFAULT_UPNP);\n #else\n-            return false;\n+        return false;\n #endif // USE_UPNP\n-        case MapPortNatpmp:\n+    case MapPortNatpmp:\n #ifdef USE_NATPMP\n-            return settings.value(\"fUseNatpmp\");\n+        return SettingToBool(node().getPersistentSetting(\"natpmp\"), DEFAULT_NATPMP);\n #else\n-            return false;\n+        return false;\n #endif // USE_NATPMP\n-        case MinimizeOnClose:\n-            return fMinimizeOnClose;\n-\n-        // default proxy\n-        case ProxyUse:\n-            return settings.value(\"fUseProxy\", false);\n-        case ProxyIP:\n-            return GetProxySetting(settings, \"addrProxy\").ip;\n-        case ProxyPort:\n-            return GetProxySetting(settings, \"addrProxy\").port;\n-\n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n-        case ProxyPortTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n+    case MinimizeOnClose:\n+        return fMinimizeOnClose;\n+\n+    // default proxy\n+    case ProxyUse:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"proxy\"), \"\")).is_set;\n+    case ProxyIP:\n+        return m_proxy_ip;\n+    case ProxyPort:\n+        return m_proxy_port;\n+\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"onion\"), \"\")).is_set;\n+    case ProxyIPTor:\n+        return m_onion_ip;\n+    case ProxyPortTor:\n+        return m_onion_port;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            return settings.value(\"bSpendZeroConfChange\");\n-        case ExternalSignerPath:\n-            return settings.value(\"external_signer_path\");\n-        case SubFeeFromAmount:\n-            return m_sub_fee_from_amount;\n+    case SpendZeroConfChange:\n+        return SettingToBool(node().getPersistentSetting(\"spendzeroconfchange\"), wallet::DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    case ExternalSignerPath:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"signer\"), \"\"));\n+    case SubFeeFromAmount:\n+        return m_sub_fee_from_amount;\n #endif\n-        case DisplayUnit:\n-            return nDisplayUnit;\n-        case ThirdPartyTxUrls:\n-            return strThirdPartyTxUrls;\n-        case Language:\n-            return settings.value(\"language\");\n-        case UseEmbeddedMonospacedFont:\n-            return m_use_embedded_monospaced_font;\n-        case CoinControlFeatures:\n-            return fCoinControlFeatures;\n-        case EnablePSBTControls:\n-            return settings.value(\"enable_psbt_controls\");\n-        case Prune:\n-            return settings.value(\"bPrune\");\n-        case PruneSize:\n-            return settings.value(\"nPruneSize\");\n-        case DatabaseCache:\n-            return settings.value(\"nDatabaseCache\");\n-        case ThreadsScriptVerif:\n-            return settings.value(\"nThreadsScriptVerif\");\n-        case Listen:\n-            return settings.value(\"fListen\");\n-        case Server:\n-            return settings.value(\"server\");\n-        default:\n-            return QVariant();\n-        }\n+    case DisplayUnit:\n+        return nDisplayUnit;\n+    case ThirdPartyTxUrls:\n+        return strThirdPartyTxUrls;\n+    case Language:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"lang\"), \"\"));\n+    case UseEmbeddedMonospacedFont:\n+        return m_use_embedded_monospaced_font;\n+    case CoinControlFeatures:\n+        return fCoinControlFeatures;\n+    case EnablePSBTControls:\n+        return settings.value(\"enable_psbt_controls\");\n+    case Prune:\n+        return PruneEnabled(node().getPersistentSetting(\"prune\"));\n+    case PruneSize:\n+        return m_prune_size_gb;\n+    case DatabaseCache:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"dbcache\"), (qint64)nDefaultDbCache));\n+    case ThreadsScriptVerif:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"par\"), DEFAULT_SCRIPTCHECK_THREADS));\n+    case Listen:\n+        return SettingToBool(node().getPersistentSetting(\"listen\"), DEFAULT_LISTEN);\n+    case Server:\n+        return SettingToBool(node().getPersistentSetting(\"server\"), false);\n+    default:\n+        return QVariant();\n     }\n-    return QVariant();\n }\n \n-// write QSettings values\n-bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n+bool OptionsModel::setOption(OptionID option, const QVariant& value)\n {\n+    auto changed = [&] { return value.isValid() && value != getOption(option); };\n+\n     bool successful = true; /* set to false on parse error */\n-    if(role == Qt::EditRole)\n-    {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n-            break;\n-        case ShowTrayIcon:\n-            m_show_tray_icon = value.toBool();\n-            settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n-            Q_EMIT showTrayIconChanged(m_show_tray_icon);\n-            break;\n-        case MinimizeToTray:\n-            fMinimizeToTray = value.toBool();\n-            settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n-            break;\n-        case MapPortUPnP: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseUPnP\", value.toBool());\n-            break;\n-        case MapPortNatpmp: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseNatpmp\", value.toBool());\n-            break;\n-        case MinimizeOnClose:\n-            fMinimizeOnClose = value.toBool();\n-            settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n-            break;\n-\n-        // default proxy\n-        case ProxyUse:\n-            if (settings.value(\"fUseProxy\") != value) {\n-                settings.setValue(\"fUseProxy\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIP: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    QSettings settings;\n+\n+    switch (option) {\n+    case StartAtStartup:\n+        successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n+        break;\n+    case ShowTrayIcon:\n+        m_show_tray_icon = value.toBool();\n+        settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n+        Q_EMIT showTrayIconChanged(m_show_tray_icon);\n+        break;\n+    case MinimizeToTray:\n+        fMinimizeToTray = value.toBool();\n+        settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n+        break;\n+    case MapPortUPnP: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"upnp\", value.toBool());\n+            node().mapPort(value.toBool(), getOption(MapPortNatpmp).toBool());\n+        }\n+        break;\n+    case MapPortNatpmp: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"natpmp\", value.toBool());\n+            node().mapPort(getOption(MapPortUPnP).toBool(), value.toBool());\n+        }\n+        break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850408058",
      "id" : 850408058,
      "line" : 415,
      "node_id" : "PRRC_kwDOABII584ysDJ6",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 415,
      "original_position" : 548,
      "original_start_line" : 404,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 548,
      "pull_request_review_id" : 941930442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850408058/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 404,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-14T15:45:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850408058",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850439973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850439973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It is strange to migrate two different options (`ProxyIP` and `ProxyUse`) into the same option (`proxy`). What happens under the hood is that `node().updateSetting(\"proxy\", ...)` is called 3 times (when it can/should be called 1 time) with the last call relying on `m_proxy_ip` and `m_proxy_port` being set already, so the order in which `migrate_setting()` is called matters. This is not obvious.\r\n\r\nThis would resolve itself if the \"use proxy\" GUI option is stored explicitly in `settings.json`.",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-14T13:23:33Z",
      "diff_hunk" : "@@ -637,4 +617,49 @@ void OptionsModel::checkAndMigrate()\n     if (settings.contains(\"addrSeparateProxyTor\") && settings.value(\"addrSeparateProxyTor\").toString().endsWith(\"%2\")) {\n         settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n     }\n+\n+    // Migrate and delete legacy GUI settings that have now moved to <datadir>/settings.json.\n+    auto migrate_setting = [&](OptionID option, const QString& qt_name, const std::string& name) {\n+        if (!settings.contains(qt_name)) return;\n+        QVariant value = settings.value(qt_name);\n+        if (node().getPersistentSetting(name).isNull()) {\n+            if (option == ProxyIP) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIP, parsed.ip);\n+                setOption(ProxyPort, parsed.port);\n+            } else if (option == ProxyIPTor) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIPTor, parsed.ip);\n+                setOption(ProxyPortTor, parsed.port);\n+            } else {\n+                setOption(option, value);\n+            }\n+        }\n+        settings.remove(qt_name);\n+    };\n+\n+    migrate_setting(DatabaseCache, \"nDatabaseCache\", \"dbcache\");\n+    migrate_setting(ThreadsScriptVerif, \"nThreadsScriptVerif\", \"par\");\n+#ifdef ENABLE_WALLET\n+    migrate_setting(SpendZeroConfChange, \"bSpendZeroConfChange\", \"spendzeroconfchange\");\n+    migrate_setting(ExternalSignerPath, \"external_signer_path\", \"signer\");\n+#endif\n+    migrate_setting(MapPortUPnP, \"fUseUPnP\", \"upnp\");\n+    migrate_setting(MapPortNatpmp, \"fUseNatpmp\", \"natpmp\");\n+    migrate_setting(Listen, \"fListen\", \"listen\");\n+    migrate_setting(Server, \"server\", \"server\");\n+    migrate_setting(PruneSize, \"nPruneSize\", \"prune\");\n+    migrate_setting(Prune, \"bPrune\", \"prune\");\n+    migrate_setting(ProxyIP, \"addrProxy\", \"proxy\");\n+    migrate_setting(ProxyUse, \"fUseProxy\", \"proxy\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850439973",
      "id" : 850439973,
      "line" : 654,
      "node_id" : "PRRC_kwDOABII584ysK8l",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 654,
      "original_position" : 844,
      "original_start_line" : 653,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 844,
      "pull_request_review_id" : 941930442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850439973/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 653,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-14T15:45:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850439973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850548018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850548018"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This migration may silently drop configs from `.config/Bitcoin/Bitcoin-Qt.conf` with unexpected effects. Before this PR, values in `Bitcoin-Qt.conf` were overriding values from `bitcoin.conf`. So, for example, if one had:\r\n\r\n`bitcoin.conf`: `listen=1`\r\n`Bitcoin-Qt.conf `: `fListen=false`\r\n\r\nthen `bitcoin-qt` would not be listening and \"Allow incoming connections\" will be unchecked in the GUI (correct).\r\n\r\nHowever, once the migration happens, it would leave the configs in this state:\r\n\r\n`bitcoin.conf`: `listen=1`\r\n`Bitcoin-Qt.conf `: (no fListen is present)\r\n`settings.json`: (no listen is present)\r\n\r\nwhich will cause `bitcoin-qt` to start listening, silently, when it was not listening before.",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-14T15:14:11Z",
      "diff_hunk" : "@@ -637,4 +617,49 @@ void OptionsModel::checkAndMigrate()\n     if (settings.contains(\"addrSeparateProxyTor\") && settings.value(\"addrSeparateProxyTor\").toString().endsWith(\"%2\")) {\n         settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n     }\n+\n+    // Migrate and delete legacy GUI settings that have now moved to <datadir>/settings.json.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850548018",
      "id" : 850548018,
      "line" : 621,
      "node_id" : "PRRC_kwDOABII584yslUy",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 621,
      "original_position" : 811,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 811,
      "pull_request_review_id" : 941930442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850548018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-14T15:47:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850548018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850568749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850568749"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "_(continuing the proxy [discussion](https://github.com/bitcoin/bitcoin/pull/15936#pullrequestreview-937685759) here so that it is in its own thread, not in the main PR comments and so that it can be closed when resolved eventually)_\r\n\r\nThis applies to the options that have a user-input value and an additional checkbox to disable them: `prune`, `proxy` and `onion`. Naturally there are two things per option - the value typed by the user and the boolean checkbox (denoting enabled/disabled).\r\n\r\nThis PR uses a dummy value in `settings.json` to denote the \"disabled\" state: `0` for `prune` and `\"\"` for `proxy`. The problem with this approach is that this loses the value typed by the user. This is surprising and annoying (having to re-enter it after temporary disabling it). Also, it is not consistent behavior:\r\n\r\n* closing the config window and re-opening it => the values are still there, greyed out\r\n* restarting `bitcoin-qt` => the values are deleted\r\n\r\nFirefox for example has a proxy-config and it acts in a consistent way - the values, when disabled, are preserved (greyed out) even after restart. IMO this is [less surprising](https://en.wikipedia.org/wiki/Principle_of_least_astonishment).\r\n\r\nI would suggest to save the \"use prune\", \"use proxy\" and \"use proxy for tor\" as explicit boolean entities in `settings.json` and preserve the user-entered values in `prune`, `proxy` and `onion`.\r\n\r\nActually, for `prune` the behavior is even a bit more confusing:\r\n* enter 5 in the GUI config (some arbitrary value)\r\n* disable the checkbox (5 remains in the box, greyed out)\r\n* restart\r\n* enable the checkbox\r\n* surprise! the value is not 5, but 2",
      "commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "created_at" : "2022-04-14T15:36:32Z",
      "diff_hunk" : "@@ -19,18 +19,59 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert enabled/size values to bitcoin -prune setting.\n+static util::SettingsValue PruneSetting(bool prune_enabled, int prune_size_gb)\n+{\n+    assert(!prune_enabled || prune_size_gb >= 1); // PruneSizeGB and ParsePruneSizeGB never return less\n+    return prune_enabled ? PruneGBtoMiB(prune_size_gb) : 0;\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return SettingToInt(prune_setting, 0) > 1;\n+}\n+\n+//! Get pruning size value to show in GUI from bitcoin -prune setting. If\n+//! pruning is not enabled, just show default recommended pruning size (2GB).\n+static int PruneSizeGB(const util::SettingsValue& prune_setting)\n+{\n+    int value = SettingToInt(prune_setting, 0);\n+    return value > 1 ? PruneMiBtoGB(value) : DEFAULT_PRUNE_TARGET_GB;\n+}\n+\n+//! Parse pruning size value provided by user in GUI or loaded from a legacy\n+//! QSettings source (windows registry key or qt .conf file). Smallest value\n+//! that the GUI can display is 1 GB, so round up if anything less is parsed.\n+static int ParsePruneSizeGB(const QVariant& prune_size)\n+{\n+    return std::max(1, prune_size.toInt());\n+}\n+\n+struct ProxySetting {\n+    bool is_set;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850568749",
      "id" : 850568749,
      "line" : 66,
      "node_id" : "PRRC_kwDOABII584ysqYt",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 66,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 50,
      "pull_request_review_id" : 941930442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850568749/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-14T15:49:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850568749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850648896"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850648896"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850190114\r\n\r\n> This was ok before because the supplied `SettingsValue` to `GetBoolArg()` was always of type string (`VSTR`) (right?). But now this code may be called with values coming from `settings.json` and thus it could be number as well which would trigger `get_str()` to `throw`.\r\n\r\nYou are right and the problem is even broader than described, because in general settings.json file is supposed to be strongly typed. If   a settings.json file ever has string for an int value, or a int for a bool value, or vice versa, etc it means the file is corrupt and bitcoin should not continue running using a configuration that may be buggy or incomplete.\r\n\r\nBut of course it shouldn't abort with an uncaught exception either, so I added code to handle this with more clarity. \r\n\r\nRelated: There are tests for what's expected to happen when you set an integer in the settings.json file here:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/cf0a8b9c4870cc88254a757286140d9632e7b70c/src/test/getarg_tests.cpp#L99-L104",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-14T17:17:20Z",
      "diff_hunk" : "@@ -600,18 +607,33 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n+    return SettingToString(value, strDefault);\n+}\n+\n+std::string SettingToString(const util::SettingsValue& value, const std::string& strDefault)\n+{\n     return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.isNum() ? value.getValStr() : value.get_str();\n }\n \n int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n+    return SettingToInt(value, nDefault);\n+}\n+\n+int64_t SettingToInt(const util::SettingsValue& value, int64_t nDefault)\n+{\n     return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : LocaleIndependentAtoi<int64_t>(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n+    return SettingToBool(value, fDefault);\n+}\n+\n+bool SettingToBool(const util::SettingsValue& value, bool fDefault)\n+{\n     return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850648896",
      "id" : 850648896,
      "in_reply_to_id" : 850190114,
      "line" : 638,
      "node_id" : "PRRC_kwDOABII584ys99A",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 638,
      "original_position" : 46,
      "original_start_line" : 635,
      "path" : "src/util/system.cpp",
      "position" : 46,
      "pull_request_review_id" : 942573325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850648896/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 635,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T01:15:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850648896",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850649271"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850649271"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850568749\r\n\r\n> _(continuing the proxy [discussion](https://github.com/bitcoin/bitcoin/pull/15936#pullrequestreview-937685759) here so that it is in its own thread, not in the main PR comments and so that it can be closed when resolved eventually)_\r\n\r\nI'll try to implement a patch which implements the previous behavior you seem to like. But honestly, I think storing unused settings values after a restart is just as likely to harm users as to help them. And even if it does help some users I think it make application behavior more opaque and settings format more complicated to keep around unused settings.\r\n\r\nI think it's ok to clear pruning or proxy values after a users disables pruning or proxying and then restarts. I agree with you that if the user frequently toggles pruning or proxying off and on through the GUI, this may be less convenient. But probably in the more common case, when a user is turning pruning or proxying on for the first time, or turning it on after a long interval, the default values provided by the GUI (2GB for pruning and tor for the proxy), are more likely to be useful and actually work than previous values which may be old or completely invalid or never worked. Our proxy setting is different from firefox's proxy setting because we actually do provide a default working value using tor, where firefox just has a blank default value that would never be worth resetting to.\r\n\r\nAlso our UI is very simple, and the default values that will be applied when pruning or proxying are enabled are clearly visible, so I feel like your description exaggerates the amount of surprise or confusion they could cause. I'd agree that that it would be bad and confusing behavior to reset the proxy and values to defaults if a user only toggled the settings off and without restarting to apply the settings. But once you're restarted with pruning or proxying disabled, I don't think it's essential to show old pruning and proxy values the next time you want to enable them. Especially since we have good defaults and don't have a good way of knowing if the old values are currently valid or were ever valid.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-14T17:17:52Z",
      "diff_hunk" : "@@ -19,18 +19,59 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert enabled/size values to bitcoin -prune setting.\n+static util::SettingsValue PruneSetting(bool prune_enabled, int prune_size_gb)\n+{\n+    assert(!prune_enabled || prune_size_gb >= 1); // PruneSizeGB and ParsePruneSizeGB never return less\n+    return prune_enabled ? PruneGBtoMiB(prune_size_gb) : 0;\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return SettingToInt(prune_setting, 0) > 1;\n+}\n+\n+//! Get pruning size value to show in GUI from bitcoin -prune setting. If\n+//! pruning is not enabled, just show default recommended pruning size (2GB).\n+static int PruneSizeGB(const util::SettingsValue& prune_setting)\n+{\n+    int value = SettingToInt(prune_setting, 0);\n+    return value > 1 ? PruneMiBtoGB(value) : DEFAULT_PRUNE_TARGET_GB;\n+}\n+\n+//! Parse pruning size value provided by user in GUI or loaded from a legacy\n+//! QSettings source (windows registry key or qt .conf file). Smallest value\n+//! that the GUI can display is 1 GB, so round up if anything less is parsed.\n+static int ParsePruneSizeGB(const QVariant& prune_size)\n+{\n+    return std::max(1, prune_size.toInt());\n+}\n+\n+struct ProxySetting {\n+    bool is_set;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850649271",
      "id" : 850649271,
      "in_reply_to_id" : 850568749,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII584ys-C3",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 89,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 73,
      "pull_request_review_id" : 942573325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850649271/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T01:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850649271",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850649412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850649412"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850408058\r\n\r\n> Why is it necessary to call `mapPort()` from here? In the previous code it was not called from here.\r\n\r\nAdded a commit message comment about this, and also removed other mapPort call this is supposed to replace. When this PR was first opened, mapPort() was called here, but 58e8364dcdc4e57b0caac09f8402e6535301de9b from #18077 removed it, adding an external call in OptionsDialog. I think it's a good thing to move the mapPort() call back here, because for all other options, calling setOption completely applies the setting (either updating state immediately or calling restartRequired) instead of half-applying it.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-14T17:18:01Z",
      "diff_hunk" : "@@ -265,322 +225,342 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static ProxySetting ParseProxyString(const std::string& proxy)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return ParseProxyString(QString::fromStdString(proxy));\n+}\n+\n+static std::string ProxyString(bool is_set, QString ip, QString port)\n+{\n+    return is_set ? QString(ip + \":\" + port).toStdString() : \"\";\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune_target_gb > 0, prune_target_gb);\n+\n+    m_prune_size_gb = prune_target_gb;\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n+    bool successful = true; /* set to false on parse error */\n     if(role == Qt::EditRole)\n     {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            return GUIUtil::GetStartOnSystemStartup();\n-        case ShowTrayIcon:\n-            return m_show_tray_icon;\n-        case MinimizeToTray:\n-            return fMinimizeToTray;\n-        case MapPortUPnP:\n+        successful = setOption(OptionID(index.row()), value);\n+    }\n+\n+    Q_EMIT dataChanged(index, index);\n+\n+    return successful;\n+}\n+\n+QVariant OptionsModel::getOption(OptionID option) const\n+{\n+    QSettings settings;\n+    switch (option) {\n+    case StartAtStartup:\n+        return GUIUtil::GetStartOnSystemStartup();\n+    case ShowTrayIcon:\n+        return m_show_tray_icon;\n+    case MinimizeToTray:\n+        return fMinimizeToTray;\n+    case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\");\n+        return SettingToBool(node().getPersistentSetting(\"upnp\"), DEFAULT_UPNP);\n #else\n-            return false;\n+        return false;\n #endif // USE_UPNP\n-        case MapPortNatpmp:\n+    case MapPortNatpmp:\n #ifdef USE_NATPMP\n-            return settings.value(\"fUseNatpmp\");\n+        return SettingToBool(node().getPersistentSetting(\"natpmp\"), DEFAULT_NATPMP);\n #else\n-            return false;\n+        return false;\n #endif // USE_NATPMP\n-        case MinimizeOnClose:\n-            return fMinimizeOnClose;\n-\n-        // default proxy\n-        case ProxyUse:\n-            return settings.value(\"fUseProxy\", false);\n-        case ProxyIP:\n-            return GetProxySetting(settings, \"addrProxy\").ip;\n-        case ProxyPort:\n-            return GetProxySetting(settings, \"addrProxy\").port;\n-\n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n-        case ProxyPortTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n+    case MinimizeOnClose:\n+        return fMinimizeOnClose;\n+\n+    // default proxy\n+    case ProxyUse:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"proxy\"), \"\")).is_set;\n+    case ProxyIP:\n+        return m_proxy_ip;\n+    case ProxyPort:\n+        return m_proxy_port;\n+\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"onion\"), \"\")).is_set;\n+    case ProxyIPTor:\n+        return m_onion_ip;\n+    case ProxyPortTor:\n+        return m_onion_port;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            return settings.value(\"bSpendZeroConfChange\");\n-        case ExternalSignerPath:\n-            return settings.value(\"external_signer_path\");\n-        case SubFeeFromAmount:\n-            return m_sub_fee_from_amount;\n+    case SpendZeroConfChange:\n+        return SettingToBool(node().getPersistentSetting(\"spendzeroconfchange\"), wallet::DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    case ExternalSignerPath:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"signer\"), \"\"));\n+    case SubFeeFromAmount:\n+        return m_sub_fee_from_amount;\n #endif\n-        case DisplayUnit:\n-            return nDisplayUnit;\n-        case ThirdPartyTxUrls:\n-            return strThirdPartyTxUrls;\n-        case Language:\n-            return settings.value(\"language\");\n-        case UseEmbeddedMonospacedFont:\n-            return m_use_embedded_monospaced_font;\n-        case CoinControlFeatures:\n-            return fCoinControlFeatures;\n-        case EnablePSBTControls:\n-            return settings.value(\"enable_psbt_controls\");\n-        case Prune:\n-            return settings.value(\"bPrune\");\n-        case PruneSize:\n-            return settings.value(\"nPruneSize\");\n-        case DatabaseCache:\n-            return settings.value(\"nDatabaseCache\");\n-        case ThreadsScriptVerif:\n-            return settings.value(\"nThreadsScriptVerif\");\n-        case Listen:\n-            return settings.value(\"fListen\");\n-        case Server:\n-            return settings.value(\"server\");\n-        default:\n-            return QVariant();\n-        }\n+    case DisplayUnit:\n+        return nDisplayUnit;\n+    case ThirdPartyTxUrls:\n+        return strThirdPartyTxUrls;\n+    case Language:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"lang\"), \"\"));\n+    case UseEmbeddedMonospacedFont:\n+        return m_use_embedded_monospaced_font;\n+    case CoinControlFeatures:\n+        return fCoinControlFeatures;\n+    case EnablePSBTControls:\n+        return settings.value(\"enable_psbt_controls\");\n+    case Prune:\n+        return PruneEnabled(node().getPersistentSetting(\"prune\"));\n+    case PruneSize:\n+        return m_prune_size_gb;\n+    case DatabaseCache:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"dbcache\"), (qint64)nDefaultDbCache));\n+    case ThreadsScriptVerif:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"par\"), DEFAULT_SCRIPTCHECK_THREADS));\n+    case Listen:\n+        return SettingToBool(node().getPersistentSetting(\"listen\"), DEFAULT_LISTEN);\n+    case Server:\n+        return SettingToBool(node().getPersistentSetting(\"server\"), false);\n+    default:\n+        return QVariant();\n     }\n-    return QVariant();\n }\n \n-// write QSettings values\n-bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n+bool OptionsModel::setOption(OptionID option, const QVariant& value)\n {\n+    auto changed = [&] { return value.isValid() && value != getOption(option); };\n+\n     bool successful = true; /* set to false on parse error */\n-    if(role == Qt::EditRole)\n-    {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n-            break;\n-        case ShowTrayIcon:\n-            m_show_tray_icon = value.toBool();\n-            settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n-            Q_EMIT showTrayIconChanged(m_show_tray_icon);\n-            break;\n-        case MinimizeToTray:\n-            fMinimizeToTray = value.toBool();\n-            settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n-            break;\n-        case MapPortUPnP: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseUPnP\", value.toBool());\n-            break;\n-        case MapPortNatpmp: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseNatpmp\", value.toBool());\n-            break;\n-        case MinimizeOnClose:\n-            fMinimizeOnClose = value.toBool();\n-            settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n-            break;\n-\n-        // default proxy\n-        case ProxyUse:\n-            if (settings.value(\"fUseProxy\") != value) {\n-                settings.setValue(\"fUseProxy\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIP: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    QSettings settings;\n+\n+    switch (option) {\n+    case StartAtStartup:\n+        successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n+        break;\n+    case ShowTrayIcon:\n+        m_show_tray_icon = value.toBool();\n+        settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n+        Q_EMIT showTrayIconChanged(m_show_tray_icon);\n+        break;\n+    case MinimizeToTray:\n+        fMinimizeToTray = value.toBool();\n+        settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n+        break;\n+    case MapPortUPnP: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"upnp\", value.toBool());\n+            node().mapPort(value.toBool(), getOption(MapPortNatpmp).toBool());\n+        }\n+        break;\n+    case MapPortNatpmp: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"natpmp\", value.toBool());\n+            node().mapPort(getOption(MapPortUPnP).toBool(), value.toBool());\n+        }\n+        break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850649412",
      "id" : 850649412,
      "in_reply_to_id" : 850408058,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584ys-FE",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 445,
      "original_position" : 548,
      "original_start_line" : 404,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 942573325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850649412/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T01:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850649412",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850649655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850649655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850206286\r\n\r\n> nit: `toInt()` returns `int`, thus this would limit `dbcache` to max `2^31`. It is in megabytes, but still, `int64_t` is used for it elsewhere:\r\n\r\nGood catch. I've cleaned up the integer conversions here and elsewhere.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-14T17:18:21Z",
      "diff_hunk" : "@@ -265,322 +225,342 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static ProxySetting ParseProxyString(const std::string& proxy)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return ParseProxyString(QString::fromStdString(proxy));\n+}\n+\n+static std::string ProxyString(bool is_set, QString ip, QString port)\n+{\n+    return is_set ? QString(ip + \":\" + port).toStdString() : \"\";\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune_target_gb > 0, prune_target_gb);\n+\n+    m_prune_size_gb = prune_target_gb;\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n+    bool successful = true; /* set to false on parse error */\n     if(role == Qt::EditRole)\n     {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            return GUIUtil::GetStartOnSystemStartup();\n-        case ShowTrayIcon:\n-            return m_show_tray_icon;\n-        case MinimizeToTray:\n-            return fMinimizeToTray;\n-        case MapPortUPnP:\n+        successful = setOption(OptionID(index.row()), value);\n+    }\n+\n+    Q_EMIT dataChanged(index, index);\n+\n+    return successful;\n+}\n+\n+QVariant OptionsModel::getOption(OptionID option) const\n+{\n+    QSettings settings;\n+    switch (option) {\n+    case StartAtStartup:\n+        return GUIUtil::GetStartOnSystemStartup();\n+    case ShowTrayIcon:\n+        return m_show_tray_icon;\n+    case MinimizeToTray:\n+        return fMinimizeToTray;\n+    case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\");\n+        return SettingToBool(node().getPersistentSetting(\"upnp\"), DEFAULT_UPNP);\n #else\n-            return false;\n+        return false;\n #endif // USE_UPNP\n-        case MapPortNatpmp:\n+    case MapPortNatpmp:\n #ifdef USE_NATPMP\n-            return settings.value(\"fUseNatpmp\");\n+        return SettingToBool(node().getPersistentSetting(\"natpmp\"), DEFAULT_NATPMP);\n #else\n-            return false;\n+        return false;\n #endif // USE_NATPMP\n-        case MinimizeOnClose:\n-            return fMinimizeOnClose;\n-\n-        // default proxy\n-        case ProxyUse:\n-            return settings.value(\"fUseProxy\", false);\n-        case ProxyIP:\n-            return GetProxySetting(settings, \"addrProxy\").ip;\n-        case ProxyPort:\n-            return GetProxySetting(settings, \"addrProxy\").port;\n-\n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n-        case ProxyPortTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n+    case MinimizeOnClose:\n+        return fMinimizeOnClose;\n+\n+    // default proxy\n+    case ProxyUse:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"proxy\"), \"\")).is_set;\n+    case ProxyIP:\n+        return m_proxy_ip;\n+    case ProxyPort:\n+        return m_proxy_port;\n+\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"onion\"), \"\")).is_set;\n+    case ProxyIPTor:\n+        return m_onion_ip;\n+    case ProxyPortTor:\n+        return m_onion_port;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            return settings.value(\"bSpendZeroConfChange\");\n-        case ExternalSignerPath:\n-            return settings.value(\"external_signer_path\");\n-        case SubFeeFromAmount:\n-            return m_sub_fee_from_amount;\n+    case SpendZeroConfChange:\n+        return SettingToBool(node().getPersistentSetting(\"spendzeroconfchange\"), wallet::DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    case ExternalSignerPath:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"signer\"), \"\"));\n+    case SubFeeFromAmount:\n+        return m_sub_fee_from_amount;\n #endif\n-        case DisplayUnit:\n-            return nDisplayUnit;\n-        case ThirdPartyTxUrls:\n-            return strThirdPartyTxUrls;\n-        case Language:\n-            return settings.value(\"language\");\n-        case UseEmbeddedMonospacedFont:\n-            return m_use_embedded_monospaced_font;\n-        case CoinControlFeatures:\n-            return fCoinControlFeatures;\n-        case EnablePSBTControls:\n-            return settings.value(\"enable_psbt_controls\");\n-        case Prune:\n-            return settings.value(\"bPrune\");\n-        case PruneSize:\n-            return settings.value(\"nPruneSize\");\n-        case DatabaseCache:\n-            return settings.value(\"nDatabaseCache\");\n-        case ThreadsScriptVerif:\n-            return settings.value(\"nThreadsScriptVerif\");\n-        case Listen:\n-            return settings.value(\"fListen\");\n-        case Server:\n-            return settings.value(\"server\");\n-        default:\n-            return QVariant();\n-        }\n+    case DisplayUnit:\n+        return nDisplayUnit;\n+    case ThirdPartyTxUrls:\n+        return strThirdPartyTxUrls;\n+    case Language:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"lang\"), \"\"));\n+    case UseEmbeddedMonospacedFont:\n+        return m_use_embedded_monospaced_font;\n+    case CoinControlFeatures:\n+        return fCoinControlFeatures;\n+    case EnablePSBTControls:\n+        return settings.value(\"enable_psbt_controls\");\n+    case Prune:\n+        return PruneEnabled(node().getPersistentSetting(\"prune\"));\n+    case PruneSize:\n+        return m_prune_size_gb;\n+    case DatabaseCache:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"dbcache\"), (qint64)nDefaultDbCache));\n+    case ThreadsScriptVerif:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"par\"), DEFAULT_SCRIPTCHECK_THREADS));\n+    case Listen:\n+        return SettingToBool(node().getPersistentSetting(\"listen\"), DEFAULT_LISTEN);\n+    case Server:\n+        return SettingToBool(node().getPersistentSetting(\"server\"), false);\n+    default:\n+        return QVariant();\n     }\n-    return QVariant();\n }\n \n-// write QSettings values\n-bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n+bool OptionsModel::setOption(OptionID option, const QVariant& value)\n {\n+    auto changed = [&] { return value.isValid() && value != getOption(option); };\n+\n     bool successful = true; /* set to false on parse error */\n-    if(role == Qt::EditRole)\n-    {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n-            break;\n-        case ShowTrayIcon:\n-            m_show_tray_icon = value.toBool();\n-            settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n-            Q_EMIT showTrayIconChanged(m_show_tray_icon);\n-            break;\n-        case MinimizeToTray:\n-            fMinimizeToTray = value.toBool();\n-            settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n-            break;\n-        case MapPortUPnP: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseUPnP\", value.toBool());\n-            break;\n-        case MapPortNatpmp: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseNatpmp\", value.toBool());\n-            break;\n-        case MinimizeOnClose:\n-            fMinimizeOnClose = value.toBool();\n-            settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n-            break;\n-\n-        // default proxy\n-        case ProxyUse:\n-            if (settings.value(\"fUseProxy\") != value) {\n-                settings.setValue(\"fUseProxy\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIP: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    QSettings settings;\n+\n+    switch (option) {\n+    case StartAtStartup:\n+        successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n+        break;\n+    case ShowTrayIcon:\n+        m_show_tray_icon = value.toBool();\n+        settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n+        Q_EMIT showTrayIconChanged(m_show_tray_icon);\n+        break;\n+    case MinimizeToTray:\n+        fMinimizeToTray = value.toBool();\n+        settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n+        break;\n+    case MapPortUPnP: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"upnp\", value.toBool());\n+            node().mapPort(value.toBool(), getOption(MapPortNatpmp).toBool());\n+        }\n+        break;\n+    case MapPortNatpmp: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"natpmp\", value.toBool());\n+            node().mapPort(getOption(MapPortUPnP).toBool(), value.toBool());\n+        }\n+        break;\n+    case MinimizeOnClose:\n+        fMinimizeOnClose = value.toBool();\n+        settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n+        break;\n+\n+    // default proxy\n+    case ProxyUse:\n+        if (changed()) {\n+            node().updateSetting(\"proxy\", ProxyString(value.toBool(), m_proxy_ip, m_proxy_port));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ProxyIP:\n+        if (changed()) {\n+            m_proxy_ip = value.toString();\n+            if (getOption(ProxyUse).toBool()) {\n+                node().updateSetting(\"proxy\", ProxyString(true, m_proxy_ip, m_proxy_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n-        case ProxyPort: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.port != value.toString()) {\n-                ip_port.port = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    case ProxyPort:\n+        if (changed()) {\n+            m_proxy_port = value.toString();\n+            if (getOption(ProxyUse).toBool()) {\n+                node().updateSetting(\"proxy\", ProxyString(true, m_proxy_ip, m_proxy_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n \n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            if (settings.value(\"fUseSeparateProxyTor\") != value) {\n-                settings.setValue(\"fUseSeparateProxyTor\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIPTor: {\n-            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        if (changed()) {\n+            node().updateSetting(\"onion\", ProxyString(value.toBool(), m_onion_ip, m_onion_port));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ProxyIPTor:\n+        if (changed()) {\n+            m_onion_ip = value.toString();\n+            if (getOption(ProxyUseTor).toBool()) {\n+                node().updateSetting(\"onion\", ProxyString(true, m_onion_ip, m_onion_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n-        case ProxyPortTor: {\n-            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n-            if (!ip_port.is_set || ip_port.port != value.toString()) {\n-                ip_port.port = value.toString();\n-                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n+    case ProxyPortTor:\n+        if (changed()) {\n+            m_onion_port = value.toString();\n+            if (getOption(ProxyUseTor).toBool()) {\n+                node().updateSetting(\"onion\", ProxyString(true, m_onion_ip, m_onion_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            if (settings.value(\"bSpendZeroConfChange\") != value) {\n-                settings.setValue(\"bSpendZeroConfChange\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ExternalSignerPath:\n-            if (settings.value(\"external_signer_path\") != value.toString()) {\n-                settings.setValue(\"external_signer_path\", value.toString());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case SubFeeFromAmount:\n-            m_sub_fee_from_amount = value.toBool();\n-            settings.setValue(\"SubFeeFromAmount\", m_sub_fee_from_amount);\n-            break;\n+    case SpendZeroConfChange:\n+        if (changed()) {\n+            node().updateSetting(\"spendzeroconfchange\", value.toBool());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ExternalSignerPath:\n+        if (changed()) {\n+            node().updateSetting(\"signer\", value.toString().toStdString());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case SubFeeFromAmount:\n+        m_sub_fee_from_amount = value.toBool();\n+        settings.setValue(\"SubFeeFromAmount\", m_sub_fee_from_amount);\n+        break;\n #endif\n-        case DisplayUnit:\n-            setDisplayUnit(value);\n-            break;\n-        case ThirdPartyTxUrls:\n-            if (strThirdPartyTxUrls != value.toString()) {\n-                strThirdPartyTxUrls = value.toString();\n-                settings.setValue(\"strThirdPartyTxUrls\", strThirdPartyTxUrls);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Language:\n-            if (settings.value(\"language\") != value) {\n-                settings.setValue(\"language\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case UseEmbeddedMonospacedFont:\n-            m_use_embedded_monospaced_font = value.toBool();\n-            settings.setValue(\"UseEmbeddedMonospacedFont\", m_use_embedded_monospaced_font);\n-            Q_EMIT useEmbeddedMonospacedFontChanged(m_use_embedded_monospaced_font);\n-            break;\n-        case CoinControlFeatures:\n-            fCoinControlFeatures = value.toBool();\n-            settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n-            Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n-            break;\n-        case EnablePSBTControls:\n-            m_enable_psbt_controls = value.toBool();\n-            settings.setValue(\"enable_psbt_controls\", m_enable_psbt_controls);\n-            break;\n-        case Prune:\n-            if (settings.value(\"bPrune\") != value) {\n-                settings.setValue(\"bPrune\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case PruneSize:\n-            if (settings.value(\"nPruneSize\") != value) {\n-                settings.setValue(\"nPruneSize\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case DatabaseCache:\n-            if (settings.value(\"nDatabaseCache\") != value) {\n-                settings.setValue(\"nDatabaseCache\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ThreadsScriptVerif:\n-            if (settings.value(\"nThreadsScriptVerif\") != value) {\n-                settings.setValue(\"nThreadsScriptVerif\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Listen:\n-            if (settings.value(\"fListen\") != value) {\n-                settings.setValue(\"fListen\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Server:\n-            if (settings.value(\"server\") != value) {\n-                settings.setValue(\"server\", value);\n+    case DisplayUnit:\n+        setDisplayUnit(value);\n+        break;\n+    case ThirdPartyTxUrls:\n+        if (strThirdPartyTxUrls != value.toString()) {\n+            strThirdPartyTxUrls = value.toString();\n+            settings.setValue(\"strThirdPartyTxUrls\", strThirdPartyTxUrls);\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case Language:\n+        if (changed()) {\n+            node().updateSetting(\"lang\", value.toString().toStdString());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case UseEmbeddedMonospacedFont:\n+        m_use_embedded_monospaced_font = value.toBool();\n+        settings.setValue(\"UseEmbeddedMonospacedFont\", m_use_embedded_monospaced_font);\n+        Q_EMIT useEmbeddedMonospacedFontChanged(m_use_embedded_monospaced_font);\n+        break;\n+    case CoinControlFeatures:\n+        fCoinControlFeatures = value.toBool();\n+        settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n+        Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n+        break;\n+    case EnablePSBTControls:\n+        m_enable_psbt_controls = value.toBool();\n+        settings.setValue(\"enable_psbt_controls\", m_enable_psbt_controls);\n+        break;\n+    case Prune:\n+        if (changed()) {\n+            node().updateSetting(\"prune\", PruneSetting(value.toBool(), m_prune_size_gb));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case PruneSize:\n+        if (changed()) {\n+            m_prune_size_gb = ParsePruneSizeGB(value);\n+            if (getOption(Prune).toBool()) {\n+                node().updateSetting(\"prune\", PruneSetting(true, m_prune_size_gb));\n                 setRestartRequired(true);\n             }\n-            break;\n-        default:\n-            break;\n         }\n+        break;\n+    case DatabaseCache:\n+        if (changed()) {\n+            node().updateSetting(\"dbcache\", value.toInt());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850649655",
      "id" : 850649655,
      "in_reply_to_id" : 850206286,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584ys-I3",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 538,
      "original_position" : 775,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 942573325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850649655/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T01:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850649655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850651022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850651022"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850548018\r\n\r\n> This migration may silently drop configs from `.config/Bitcoin/Bitcoin-Qt.conf` with unexpected effects. Before this PR, values in `Bitcoin-Qt.conf` were overriding values from `bitcoin.conf`. So, for example, if one had:\r\n> \r\n> `bitcoin.conf`: `listen=1` `Bitcoin-Qt.conf `: `fListen=false`\r\n> \r\n> then `bitcoin-qt` would not be listening and \"Allow incoming connections\" will be unchecked in the GUI (correct).\r\n> \r\n> However, once the migration happens, it would leave the configs in this state:\r\n> \r\n> `bitcoin.conf`: `listen=1` `Bitcoin-Qt.conf `: (no fListen is present) `settings.json`: (no listen is present)\r\n> \r\n> which will cause `bitcoin-qt` to start listening, silently, when it was not listening before.\r\n\r\nI don't think this is describing the previous behavior accurately. With `listen=1` in `bitcoin.conf` it should be listening before and after this PR, no matter what is in `Bitcoin-Qt.conf `, because QSettings have lower priority than `bitcoin.conf` (now and previously).\r\n\r\nIf you try setting `fListen=false` before this PR, you should see that bitcoin is listening, and there is an \"Options set in this dialog are overridden by the command line or in the configuration file: -listen=1\"\r\n\r\nIf you try setting `fListen=false` after this PR, you should see that bitcoin is still listening and the setting is \"migrated\" by being deleted, since it was already being ignored anyway.\r\n\r\nThis PR does add the ability for *new* GUI setting changes to override `bitcoin.conf` settings, (because by design `settings.json` has a higher priority than `bitcoin.conf`), but migration is one-time occurrence, and existing *migrated* settings are interpreted with the same lower priority before and after this PR.\r\n\r\nThe goal for this PR, assuming this PR is merged before 0.24, is that if you switch back and forth between 0.23 and 0.24 you should never see settings changed or interpreted differently unless you actually intervene and edit something to change them.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-14T17:19:59Z",
      "diff_hunk" : "@@ -637,4 +617,49 @@ void OptionsModel::checkAndMigrate()\n     if (settings.contains(\"addrSeparateProxyTor\") && settings.value(\"addrSeparateProxyTor\").toString().endsWith(\"%2\")) {\n         settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n     }\n+\n+    // Migrate and delete legacy GUI settings that have now moved to <datadir>/settings.json.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850651022",
      "id" : 850651022,
      "in_reply_to_id" : 850548018,
      "line" : 648,
      "node_id" : "PRRC_kwDOABII584ys-eO",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 648,
      "original_position" : 811,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 849,
      "pull_request_review_id" : 942573325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850651022/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T01:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850651022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850651127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850651127"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re : https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850439973\r\n\r\n> It is strange to migrate two different options (`ProxyIP` and `ProxyUse`) into the same option (`proxy`). What happens under the hood is that `node().updateSetting(\"proxy\", ...)` is called 3 times (when it can/should be called 1 time) with the last call relying on `m_proxy_ip` and `m_proxy_port` being set already, so the order in which `migrate_setting()` is called matters. This is not obvious.\r\n> \r\n> This would resolve itself if the \"use proxy\" GUI option is stored explicitly in `settings.json`.\r\n\r\nThis is all true, but intentional. The migration code is pretty dumb and inefficient like you described, but it is also brief and self-contained. The PR is intentionally not adding any new settings fields to settings.json that current versions of bitcoind and bitcoin-qt don't understand, and intentionally not making any behavior changes to bitcoind, only bitcoin-qt. It's only trying to migrate existing settings values, so node and wallet settings are stored completely within the datadir, and current and new versions of bitcoind and bitcoin-qt all share the same configurations instead of seeing different realities.\r\n\r\nI could probably add some comments to the migration code if it's not clear enough, but I think it's ok for the code to be inefficient, and even ok for it to have a bit of extra complexity, if that is the tradeoff for keeping the settings format unchanged, and keeping bitcoind unchanged here.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-14T17:20:10Z",
      "diff_hunk" : "@@ -637,4 +617,49 @@ void OptionsModel::checkAndMigrate()\n     if (settings.contains(\"addrSeparateProxyTor\") && settings.value(\"addrSeparateProxyTor\").toString().endsWith(\"%2\")) {\n         settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n     }\n+\n+    // Migrate and delete legacy GUI settings that have now moved to <datadir>/settings.json.\n+    auto migrate_setting = [&](OptionID option, const QString& qt_name, const std::string& name) {\n+        if (!settings.contains(qt_name)) return;\n+        QVariant value = settings.value(qt_name);\n+        if (node().getPersistentSetting(name).isNull()) {\n+            if (option == ProxyIP) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIP, parsed.ip);\n+                setOption(ProxyPort, parsed.port);\n+            } else if (option == ProxyIPTor) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIPTor, parsed.ip);\n+                setOption(ProxyPortTor, parsed.port);\n+            } else {\n+                setOption(option, value);\n+            }\n+        }\n+        settings.remove(qt_name);\n+    };\n+\n+    migrate_setting(DatabaseCache, \"nDatabaseCache\", \"dbcache\");\n+    migrate_setting(ThreadsScriptVerif, \"nThreadsScriptVerif\", \"par\");\n+#ifdef ENABLE_WALLET\n+    migrate_setting(SpendZeroConfChange, \"bSpendZeroConfChange\", \"spendzeroconfchange\");\n+    migrate_setting(ExternalSignerPath, \"external_signer_path\", \"signer\");\n+#endif\n+    migrate_setting(MapPortUPnP, \"fUseUPnP\", \"upnp\");\n+    migrate_setting(MapPortNatpmp, \"fUseNatpmp\", \"natpmp\");\n+    migrate_setting(Listen, \"fListen\", \"listen\");\n+    migrate_setting(Server, \"server\", \"server\");\n+    migrate_setting(PruneSize, \"nPruneSize\", \"prune\");\n+    migrate_setting(Prune, \"bPrune\", \"prune\");\n+    migrate_setting(ProxyIP, \"addrProxy\", \"proxy\");\n+    migrate_setting(ProxyUse, \"fUseProxy\", \"proxy\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850651127",
      "id" : 850651127,
      "in_reply_to_id" : 850439973,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584ys-f3",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 654,
      "original_position" : 844,
      "original_start_line" : 653,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 942573325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850651127/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T01:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/850651127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-04-15T11:56:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1100062638",
      "id" : 1100062638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585BkZ-u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100062638/reactions"
      },
      "updated_at" : "2022-04-15T11:56:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100062638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852785723"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852785723"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This diff is now in commit ce530d566f `Migrate -prune setting from QSettings to settings.json`, but it has to be amended to commit dd3d146f72 `Migrate -proxy and -onion settings from QSettings to settings.json`\r\n\r\n<details>\r\n<summary>diff</summary>\r\n\r\n```diff\r\n--- a/src/qt/optionsmodel.cpp\r\n+++ b/src/qt/optionsmodel.cpp\r\n@@ -338,21 +364,21 @@ QVariant OptionsModel::getOption(OptionID option) const\r\n #endif // USE_NATPMP\r\n     case MinimizeOnClose:\r\n         return fMinimizeOnClose;\r\n \r\n     // default proxy\r\n     case ProxyUse:\r\n-        return ParseProxyString(SettingToString(node().getPersistentSetting(\"proxy\"), \"\")).is_set;\r\n+        return ParseProxyString(SettingToString(setting(), \"\")).is_set;\r\n     case ProxyIP:\r\n         return m_proxy_ip;\r\n     case ProxyPort:\r\n         return m_proxy_port;\r\n \r\n     // separate Tor proxy\r\n     case ProxyUseTor:\r\n-        return ParseProxyString(SettingToString(node().getPersistentSetting(\"onion\"), \"\")).is_set;\r\n+        return ParseProxyString(SettingToString(setting(), \"\")).is_set;\r\n     case ProxyIPTor:\r\n         return m_onion_ip;\r\n     case ProxyPortTor:\r\n         return m_onion_port;\r\n \r\n #ifdef ENABLE_WALLET\r\n@@ -430,56 +456,56 @@ bool OptionsModel::setOption(OptionID option, const QVariant& value)\r\n         settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\r\n         break;\r\n \r\n     // default proxy\r\n     case ProxyUse:\r\n         if (changed()) {\r\n-            node().updateSetting(\"proxy\", ProxyString(value.toBool(), m_proxy_ip, m_proxy_port));\r\n+            update(ProxyString(value.toBool(), m_proxy_ip, m_proxy_port));\r\n             setRestartRequired(true);\r\n         }\r\n         break;\r\n     case ProxyIP:\r\n         if (changed()) {\r\n             m_proxy_ip = value.toString();\r\n             if (getOption(ProxyUse).toBool()) {\r\n-                node().updateSetting(\"proxy\", ProxyString(true, m_proxy_ip, m_proxy_port));\r\n+                update(ProxyString(true, m_proxy_ip, m_proxy_port));\r\n                 setRestartRequired(true);\r\n             }\r\n         }\r\n         break;\r\n     case ProxyPort:\r\n         if (changed()) {\r\n             m_proxy_port = value.toString();\r\n             if (getOption(ProxyUse).toBool()) {\r\n-                node().updateSetting(\"proxy\", ProxyString(true, m_proxy_ip, m_proxy_port));\r\n+                update(ProxyString(true, m_proxy_ip, m_proxy_port));\r\n                 setRestartRequired(true);\r\n             }\r\n         }\r\n         break;\r\n \r\n     // separate Tor proxy\r\n     case ProxyUseTor:\r\n         if (changed()) {\r\n-            node().updateSetting(\"onion\", ProxyString(value.toBool(), m_onion_ip, m_onion_port));\r\n+            update(ProxyString(value.toBool(), m_onion_ip, m_onion_port));\r\n             setRestartRequired(true);\r\n         }\r\n         break;\r\n     case ProxyIPTor:\r\n         if (changed()) {\r\n             m_onion_ip = value.toString();\r\n             if (getOption(ProxyUseTor).toBool()) {\r\n-                node().updateSetting(\"onion\", ProxyString(true, m_onion_ip, m_onion_port));\r\n+                update(ProxyString(true, m_onion_ip, m_onion_port));\r\n                 setRestartRequired(true);\r\n             }\r\n         }\r\n         break;\r\n     case ProxyPortTor:\r\n         if (changed()) {\r\n             m_onion_port = value.toString();\r\n             if (getOption(ProxyUseTor).toBool()) {\r\n-                node().updateSetting(\"onion\", ProxyString(true, m_onion_ip, m_onion_port));\r\n+                update(ProxyString(true, m_onion_ip, m_onion_port));\r\n                 setRestartRequired(true);\r\n             }\r\n         }\r\n         break;\r\n \r\n #ifdef ENABLE_WALLET\r\n```\r\n</details>\r\n",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T09:01:05Z",
      "diff_hunk" : "@@ -273,322 +252,345 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static ProxySetting ParseProxyString(const std::string& proxy)\n+{\n+    return ParseProxyString(QString::fromStdString(proxy));\n+}\n+\n+static std::string ProxyString(bool is_set, QString ip, QString port)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return is_set ? QString(ip + \":\" + port).toStdString() : \"\";\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune_target_gb > 0, prune_target_gb);\n+\n+    m_prune_size_gb = prune_target_gb;\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n+    bool successful = true; /* set to false on parse error */\n     if(role == Qt::EditRole)\n     {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            return GUIUtil::GetStartOnSystemStartup();\n-        case ShowTrayIcon:\n-            return m_show_tray_icon;\n-        case MinimizeToTray:\n-            return fMinimizeToTray;\n-        case MapPortUPnP:\n+        successful = setOption(OptionID(index.row()), value);\n+    }\n+\n+    Q_EMIT dataChanged(index, index);\n+\n+    return successful;\n+}\n+\n+QVariant OptionsModel::getOption(OptionID option) const\n+{\n+    auto setting = [&]{ return node().getPersistentSetting(SettingName(option)); };\n+\n+    QSettings settings;\n+    switch (option) {\n+    case StartAtStartup:\n+        return GUIUtil::GetStartOnSystemStartup();\n+    case ShowTrayIcon:\n+        return m_show_tray_icon;\n+    case MinimizeToTray:\n+        return fMinimizeToTray;\n+    case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\");\n+        return SettingToBool(setting(), DEFAULT_UPNP);\n #else\n-            return false;\n+        return false;\n #endif // USE_UPNP\n-        case MapPortNatpmp:\n+    case MapPortNatpmp:\n #ifdef USE_NATPMP\n-            return settings.value(\"fUseNatpmp\");\n+        return SettingToBool(setting(), DEFAULT_NATPMP);\n #else\n-            return false;\n+        return false;\n #endif // USE_NATPMP\n-        case MinimizeOnClose:\n-            return fMinimizeOnClose;\n-\n-        // default proxy\n-        case ProxyUse:\n-            return settings.value(\"fUseProxy\", false);\n-        case ProxyIP:\n-            return GetProxySetting(settings, \"addrProxy\").ip;\n-        case ProxyPort:\n-            return GetProxySetting(settings, \"addrProxy\").port;\n-\n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n-        case ProxyPortTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n+    case MinimizeOnClose:\n+        return fMinimizeOnClose;\n+\n+    // default proxy\n+    case ProxyUse:\n+        return ParseProxyString(SettingToString(setting(), \"\")).is_set;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852785723",
      "id" : 852785723,
      "line" : 362,
      "node_id" : "PRRC_kwDOABII584y1Ho7",
      "original_commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "original_line" : 362,
      "original_position" : 427,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 427,
      "pull_request_review_id" : 945331840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852785723/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T12:02:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852785723",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852842327"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852842327"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This can be marked as resolved. I cannot do that for some reason even though I opened it.\r\n\r\n_Is not the author of a suggestion the best one to judge whether it is resolved or not, github `~!(@*(*~!=&/_*`_",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T09:57:11Z",
      "diff_hunk" : "@@ -0,0 +1,8 @@\n+GUI changes\n+-----------\n+\n+Configuration changes made in the bitcoin GUI (such as the pruning setting,\n+proxy settings, UPNP preferences) are now saved to <datadir>/settings.json file\n+rather than to the Qt settings backend (windows registry or unix desktop config\n+files), and the GUI settings will now be used if bitcoind is started in\n+subsequently, rather than ignored.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852842327",
      "id" : 852842327,
      "in_reply_to_id" : 842669457,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1VdX",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 8,
      "original_position" : 8,
      "original_start_line" : 7,
      "path" : "doc/release-notes-15936.md",
      "position" : null,
      "pull_request_review_id" : 945419960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852842327/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T09:57:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852842327",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852843335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852843335"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T09:57:58Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852843335",
      "id" : 852843335,
      "in_reply_to_id" : 842680598,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1VtH",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 41,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 945420965,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852843335/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T09:57:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852843335",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852844114"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852844114"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T09:58:32Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852844114",
      "id" : 852844114,
      "in_reply_to_id" : 842713069,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1V5S",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 56,
      "original_position" : 33,
      "original_start_line" : 45,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 945421676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852844114/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T09:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852844114",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852844794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852844794"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T09:59:04Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert QSettings QVariant value to bitcoin setting.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type, const util::SettingsValue& fallback = {})\n+{\n+    if (!variant.isValid()) return fallback;\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852844794",
      "id" : 852844794,
      "in_reply_to_id" : 842723350,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1WD6",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 66,
      "original_position" : 50,
      "original_start_line" : 62,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 945422369,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852844794/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T09:59:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852844794",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852845018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852845018"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T09:59:15Z",
      "diff_hunk" : "@@ -19,18 +19,93 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert bitcoin settings value to integer.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str().c_str());\n+}\n+\n+//! Convert bitcoin settings value to QString.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isFalse()) return \"\";\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QVariant.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert QSettings QVariant value to bitcoin setting.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type, const util::SettingsValue& fallback = {})\n+{\n+    if (!variant.isValid()) return fallback;\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    std::string str = variant.toString().toStdString();\n+    if (str.empty()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852845018",
      "id" : 852845018,
      "in_reply_to_id" : 842726459,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1WHa",
      "original_commit_id" : "b81c22a2880a797ea86d9b793c58aa49c67b9cda",
      "original_line" : 68,
      "original_position" : 52,
      "original_start_line" : 67,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 945422617,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852845018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T09:59:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852845018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852845703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852845703"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T09:59:47Z",
      "diff_hunk" : "@@ -79,6 +79,8 @@ class OptionsModel : public QAbstractListModel\n     int rowCount(const QModelIndex & parent = QModelIndex()) const override;\n     QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;\n     bool setData(const QModelIndex & index, const QVariant & value, int role = Qt::EditRole) override;\n+    QVariant getOption(OptionID option) const;\n+    bool setOption(OptionID option, const QVariant &value);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852845703",
      "id" : 852845703,
      "in_reply_to_id" : 845099650,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1WSH",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 83,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.h",
      "position" : null,
      "pull_request_review_id" : 945423291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852845703/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T09:59:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852845703",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852846246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852846246"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T10:00:09Z",
      "diff_hunk" : "@@ -632,6 +632,7 @@ int GuiMain(int argc, char* argv[])\n     app.parameterSetup();\n     GUIUtil::LogQtInfo();\n     // Load GUI settings from QSettings",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852846246",
      "id" : 852846246,
      "in_reply_to_id" : 845114077,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1Wam",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 634,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 945423783,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852846246/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T10:00:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852846246",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852846532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852846532"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T10:00:22Z",
      "diff_hunk" : "@@ -278,7 +278,9 @@ void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n     assert(!m_splash);\n+    assert(m_node);\n     m_splash = new SplashScreen(networkStyle);\n+    m_splash->setNode(*m_node);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852846532",
      "id" : 852846532,
      "in_reply_to_id" : 845177487,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1WfE",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 283,
      "original_position" : 15,
      "original_start_line" : 281,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 945424034,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852846532/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T10:00:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852846532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852846971"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852846971"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T10:00:41Z",
      "diff_hunk" : "@@ -592,6 +592,13 @@ bool ArgsManager::WriteSettingsFile(std::vector<std::string>* errors) const\n     return true;\n }\n \n+util::SettingsValue ArgsManager::GetPersistentSetting(const std::string& name) const\n+{\n+    LOCK(cs_args);\n+    return util::GetSetting(m_settings, m_network, name, !UseDefaultSection(\"-\" + name),\n+        /* ignore_nonpersistent = */ true, /* get_chain_name= */ false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852846971",
      "id" : 852846971,
      "in_reply_to_id" : 845213418,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1Wl7",
      "original_commit_id" : "73d7e74aa3201158a7f33daf07fc23a370d2b4b9",
      "original_line" : 599,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 945424436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852846971/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T10:00:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852846971",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852849364"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852849364"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T10:02:31Z",
      "diff_hunk" : "@@ -265,322 +266,337 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static QString ProxyString(bool is_set, QString ip, QString port)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return is_set ? ip + \":\" + port : QString{\"\"};\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const bool prune = prune_target_gb > 0;\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune, prune_target_gb);\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+    m_prune_size_gb = PruneSizeGB(new_value);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852849364",
      "id" : 852849364,
      "in_reply_to_id" : 846010862,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1XLU",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 305,
      "original_position" : 324,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 945426712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852849364/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T10:02:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852849364",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852849678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852849678"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T10:02:47Z",
      "diff_hunk" : "@@ -19,18 +19,103 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert QVariant value to bitcoin setting of specified type. Type is\n+//! explicitly required to make sure values written to settings.json are always\n+//! written with the right type, regardless of how the options dialog code sets\n+//! the QVariant.\n+static util::SettingsValue ToSetting(const QVariant& variant, QVariant::Type type)\n+{\n+    assert(type == QVariant::Bool || type == QVariant::Int || type == QVariant::String);\n+    if (!variant.isValid()) return {};\n+    if (type == QVariant::Bool) return variant.toBool();\n+    if (type == QVariant::Int) return variant.toInt();\n+    return variant.toString().toStdString();\n+}\n+\n+//! Convert bitcoin setting to QVariant. This is used to interpret values from\n+//! settings.json, which have JSON types, and values from bitcoin.conf, which\n+//! are untyped strings. The return value is not guaranteed to have any\n+//! particular type, so if a specific type is required, ToQString() or ToInt()\n+//! methods below should be used instead of this.\n+static QVariant ToQVariant(const util::SettingsValue& value, const QVariant& fallback = {})\n+{\n+    if (value.isNull()) return fallback;\n+    if (value.isBool()) return value.get_bool();\n+    if (value.isNum()) return value.get_int();\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to QString. The setting must already be a string, or\n+//! it must be negated or unset. If it has another type like integer, bool,\n+//! array, or object, this will raise an exception.\n+static QString ToQString(const util::SettingsValue& value, const QString& fallback = {})\n+{\n+    if (value.isNull()) return fallback; // If string setting is unset, fall back to default.\n+    if (value.isFalse()) return \"\";      // If string setting is negated, treat it like \"\".\n+    return QString::fromStdString(value.get_str());\n+}\n+\n+//! Convert bitcoin setting to integer. The setting must already be an integer\n+//! or integer string, or it must be negated or unset. If it has another type,\n+//! this will raise an exception.\n+static int ToInt(const util::SettingsValue& value, int fallback = 0)\n+{\n+    if (value.isNull()) return fallback; // If int setting is unset, fall back to default.\n+    if (value.isFalse()) return 0;       // If int setting is negated, treat it like 0.\n+    if (value.isNum()) return value.get_int();\n+    return LocaleIndependentAtoi<int>(value.get_str());\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return ToInt(prune_setting) > 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852849678",
      "id" : 852849678,
      "in_reply_to_id" : 846095972,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1XQO",
      "original_commit_id" : "88ead7707dea2e31ce1245daee7d23be3f72e041",
      "original_line" : 85,
      "original_position" : 70,
      "original_start_line" : 82,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 945427049,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852849678/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T10:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852849678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852853087"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852853087"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T10:05:22Z",
      "diff_hunk" : "@@ -600,18 +607,33 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n+    return SettingToString(value, strDefault);\n+}\n+\n+std::string SettingToString(const util::SettingsValue& value, const std::string& strDefault)\n+{\n     return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.isNum() ? value.getValStr() : value.get_str();\n }\n \n int64_t ArgsManager::GetIntArg(const std::string& strArg, int64_t nDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n+    return SettingToInt(value, nDefault);\n+}\n+\n+int64_t SettingToInt(const util::SettingsValue& value, int64_t nDefault)\n+{\n     return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : LocaleIndependentAtoi<int64_t>(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n     const util::SettingsValue value = GetSetting(strArg);\n+    return SettingToBool(value, fDefault);\n+}\n+\n+bool SettingToBool(const util::SettingsValue& value, bool fDefault)\n+{\n     return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852853087",
      "id" : 852853087,
      "in_reply_to_id" : 850190114,
      "line" : 638,
      "node_id" : "PRRC_kwDOABII584y1YFf",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 638,
      "original_position" : 46,
      "original_start_line" : 635,
      "path" : "src/util/system.cpp",
      "position" : 46,
      "pull_request_review_id" : 945430293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852853087/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 635,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T10:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852853087",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852853347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852853347"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T10:05:34Z",
      "diff_hunk" : "@@ -265,322 +225,342 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static ProxySetting ParseProxyString(const std::string& proxy)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return ParseProxyString(QString::fromStdString(proxy));\n+}\n+\n+static std::string ProxyString(bool is_set, QString ip, QString port)\n+{\n+    return is_set ? QString(ip + \":\" + port).toStdString() : \"\";\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune_target_gb > 0, prune_target_gb);\n+\n+    m_prune_size_gb = prune_target_gb;\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n+    bool successful = true; /* set to false on parse error */\n     if(role == Qt::EditRole)\n     {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            return GUIUtil::GetStartOnSystemStartup();\n-        case ShowTrayIcon:\n-            return m_show_tray_icon;\n-        case MinimizeToTray:\n-            return fMinimizeToTray;\n-        case MapPortUPnP:\n+        successful = setOption(OptionID(index.row()), value);\n+    }\n+\n+    Q_EMIT dataChanged(index, index);\n+\n+    return successful;\n+}\n+\n+QVariant OptionsModel::getOption(OptionID option) const\n+{\n+    QSettings settings;\n+    switch (option) {\n+    case StartAtStartup:\n+        return GUIUtil::GetStartOnSystemStartup();\n+    case ShowTrayIcon:\n+        return m_show_tray_icon;\n+    case MinimizeToTray:\n+        return fMinimizeToTray;\n+    case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\");\n+        return SettingToBool(node().getPersistentSetting(\"upnp\"), DEFAULT_UPNP);\n #else\n-            return false;\n+        return false;\n #endif // USE_UPNP\n-        case MapPortNatpmp:\n+    case MapPortNatpmp:\n #ifdef USE_NATPMP\n-            return settings.value(\"fUseNatpmp\");\n+        return SettingToBool(node().getPersistentSetting(\"natpmp\"), DEFAULT_NATPMP);\n #else\n-            return false;\n+        return false;\n #endif // USE_NATPMP\n-        case MinimizeOnClose:\n-            return fMinimizeOnClose;\n-\n-        // default proxy\n-        case ProxyUse:\n-            return settings.value(\"fUseProxy\", false);\n-        case ProxyIP:\n-            return GetProxySetting(settings, \"addrProxy\").ip;\n-        case ProxyPort:\n-            return GetProxySetting(settings, \"addrProxy\").port;\n-\n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n-        case ProxyPortTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n+    case MinimizeOnClose:\n+        return fMinimizeOnClose;\n+\n+    // default proxy\n+    case ProxyUse:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"proxy\"), \"\")).is_set;\n+    case ProxyIP:\n+        return m_proxy_ip;\n+    case ProxyPort:\n+        return m_proxy_port;\n+\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"onion\"), \"\")).is_set;\n+    case ProxyIPTor:\n+        return m_onion_ip;\n+    case ProxyPortTor:\n+        return m_onion_port;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            return settings.value(\"bSpendZeroConfChange\");\n-        case ExternalSignerPath:\n-            return settings.value(\"external_signer_path\");\n-        case SubFeeFromAmount:\n-            return m_sub_fee_from_amount;\n+    case SpendZeroConfChange:\n+        return SettingToBool(node().getPersistentSetting(\"spendzeroconfchange\"), wallet::DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    case ExternalSignerPath:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"signer\"), \"\"));\n+    case SubFeeFromAmount:\n+        return m_sub_fee_from_amount;\n #endif\n-        case DisplayUnit:\n-            return nDisplayUnit;\n-        case ThirdPartyTxUrls:\n-            return strThirdPartyTxUrls;\n-        case Language:\n-            return settings.value(\"language\");\n-        case UseEmbeddedMonospacedFont:\n-            return m_use_embedded_monospaced_font;\n-        case CoinControlFeatures:\n-            return fCoinControlFeatures;\n-        case EnablePSBTControls:\n-            return settings.value(\"enable_psbt_controls\");\n-        case Prune:\n-            return settings.value(\"bPrune\");\n-        case PruneSize:\n-            return settings.value(\"nPruneSize\");\n-        case DatabaseCache:\n-            return settings.value(\"nDatabaseCache\");\n-        case ThreadsScriptVerif:\n-            return settings.value(\"nThreadsScriptVerif\");\n-        case Listen:\n-            return settings.value(\"fListen\");\n-        case Server:\n-            return settings.value(\"server\");\n-        default:\n-            return QVariant();\n-        }\n+    case DisplayUnit:\n+        return nDisplayUnit;\n+    case ThirdPartyTxUrls:\n+        return strThirdPartyTxUrls;\n+    case Language:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"lang\"), \"\"));\n+    case UseEmbeddedMonospacedFont:\n+        return m_use_embedded_monospaced_font;\n+    case CoinControlFeatures:\n+        return fCoinControlFeatures;\n+    case EnablePSBTControls:\n+        return settings.value(\"enable_psbt_controls\");\n+    case Prune:\n+        return PruneEnabled(node().getPersistentSetting(\"prune\"));\n+    case PruneSize:\n+        return m_prune_size_gb;\n+    case DatabaseCache:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"dbcache\"), (qint64)nDefaultDbCache));\n+    case ThreadsScriptVerif:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"par\"), DEFAULT_SCRIPTCHECK_THREADS));\n+    case Listen:\n+        return SettingToBool(node().getPersistentSetting(\"listen\"), DEFAULT_LISTEN);\n+    case Server:\n+        return SettingToBool(node().getPersistentSetting(\"server\"), false);\n+    default:\n+        return QVariant();\n     }\n-    return QVariant();\n }\n \n-// write QSettings values\n-bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n+bool OptionsModel::setOption(OptionID option, const QVariant& value)\n {\n+    auto changed = [&] { return value.isValid() && value != getOption(option); };\n+\n     bool successful = true; /* set to false on parse error */\n-    if(role == Qt::EditRole)\n-    {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n-            break;\n-        case ShowTrayIcon:\n-            m_show_tray_icon = value.toBool();\n-            settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n-            Q_EMIT showTrayIconChanged(m_show_tray_icon);\n-            break;\n-        case MinimizeToTray:\n-            fMinimizeToTray = value.toBool();\n-            settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n-            break;\n-        case MapPortUPnP: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseUPnP\", value.toBool());\n-            break;\n-        case MapPortNatpmp: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseNatpmp\", value.toBool());\n-            break;\n-        case MinimizeOnClose:\n-            fMinimizeOnClose = value.toBool();\n-            settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n-            break;\n-\n-        // default proxy\n-        case ProxyUse:\n-            if (settings.value(\"fUseProxy\") != value) {\n-                settings.setValue(\"fUseProxy\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIP: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    QSettings settings;\n+\n+    switch (option) {\n+    case StartAtStartup:\n+        successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n+        break;\n+    case ShowTrayIcon:\n+        m_show_tray_icon = value.toBool();\n+        settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n+        Q_EMIT showTrayIconChanged(m_show_tray_icon);\n+        break;\n+    case MinimizeToTray:\n+        fMinimizeToTray = value.toBool();\n+        settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n+        break;\n+    case MapPortUPnP: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"upnp\", value.toBool());\n+            node().mapPort(value.toBool(), getOption(MapPortNatpmp).toBool());\n+        }\n+        break;\n+    case MapPortNatpmp: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"natpmp\", value.toBool());\n+            node().mapPort(getOption(MapPortUPnP).toBool(), value.toBool());\n+        }\n+        break;\n+    case MinimizeOnClose:\n+        fMinimizeOnClose = value.toBool();\n+        settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n+        break;\n+\n+    // default proxy\n+    case ProxyUse:\n+        if (changed()) {\n+            node().updateSetting(\"proxy\", ProxyString(value.toBool(), m_proxy_ip, m_proxy_port));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ProxyIP:\n+        if (changed()) {\n+            m_proxy_ip = value.toString();\n+            if (getOption(ProxyUse).toBool()) {\n+                node().updateSetting(\"proxy\", ProxyString(true, m_proxy_ip, m_proxy_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n-        case ProxyPort: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.port != value.toString()) {\n-                ip_port.port = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    case ProxyPort:\n+        if (changed()) {\n+            m_proxy_port = value.toString();\n+            if (getOption(ProxyUse).toBool()) {\n+                node().updateSetting(\"proxy\", ProxyString(true, m_proxy_ip, m_proxy_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n \n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            if (settings.value(\"fUseSeparateProxyTor\") != value) {\n-                settings.setValue(\"fUseSeparateProxyTor\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIPTor: {\n-            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        if (changed()) {\n+            node().updateSetting(\"onion\", ProxyString(value.toBool(), m_onion_ip, m_onion_port));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ProxyIPTor:\n+        if (changed()) {\n+            m_onion_ip = value.toString();\n+            if (getOption(ProxyUseTor).toBool()) {\n+                node().updateSetting(\"onion\", ProxyString(true, m_onion_ip, m_onion_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n-        case ProxyPortTor: {\n-            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\n-            if (!ip_port.is_set || ip_port.port != value.toString()) {\n-                ip_port.port = value.toString();\n-                SetProxySetting(settings, \"addrSeparateProxyTor\", ip_port);\n+    case ProxyPortTor:\n+        if (changed()) {\n+            m_onion_port = value.toString();\n+            if (getOption(ProxyUseTor).toBool()) {\n+                node().updateSetting(\"onion\", ProxyString(true, m_onion_ip, m_onion_port));\n                 setRestartRequired(true);\n             }\n         }\n         break;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            if (settings.value(\"bSpendZeroConfChange\") != value) {\n-                settings.setValue(\"bSpendZeroConfChange\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ExternalSignerPath:\n-            if (settings.value(\"external_signer_path\") != value.toString()) {\n-                settings.setValue(\"external_signer_path\", value.toString());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case SubFeeFromAmount:\n-            m_sub_fee_from_amount = value.toBool();\n-            settings.setValue(\"SubFeeFromAmount\", m_sub_fee_from_amount);\n-            break;\n+    case SpendZeroConfChange:\n+        if (changed()) {\n+            node().updateSetting(\"spendzeroconfchange\", value.toBool());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case ExternalSignerPath:\n+        if (changed()) {\n+            node().updateSetting(\"signer\", value.toString().toStdString());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case SubFeeFromAmount:\n+        m_sub_fee_from_amount = value.toBool();\n+        settings.setValue(\"SubFeeFromAmount\", m_sub_fee_from_amount);\n+        break;\n #endif\n-        case DisplayUnit:\n-            setDisplayUnit(value);\n-            break;\n-        case ThirdPartyTxUrls:\n-            if (strThirdPartyTxUrls != value.toString()) {\n-                strThirdPartyTxUrls = value.toString();\n-                settings.setValue(\"strThirdPartyTxUrls\", strThirdPartyTxUrls);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Language:\n-            if (settings.value(\"language\") != value) {\n-                settings.setValue(\"language\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case UseEmbeddedMonospacedFont:\n-            m_use_embedded_monospaced_font = value.toBool();\n-            settings.setValue(\"UseEmbeddedMonospacedFont\", m_use_embedded_monospaced_font);\n-            Q_EMIT useEmbeddedMonospacedFontChanged(m_use_embedded_monospaced_font);\n-            break;\n-        case CoinControlFeatures:\n-            fCoinControlFeatures = value.toBool();\n-            settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n-            Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n-            break;\n-        case EnablePSBTControls:\n-            m_enable_psbt_controls = value.toBool();\n-            settings.setValue(\"enable_psbt_controls\", m_enable_psbt_controls);\n-            break;\n-        case Prune:\n-            if (settings.value(\"bPrune\") != value) {\n-                settings.setValue(\"bPrune\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case PruneSize:\n-            if (settings.value(\"nPruneSize\") != value) {\n-                settings.setValue(\"nPruneSize\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case DatabaseCache:\n-            if (settings.value(\"nDatabaseCache\") != value) {\n-                settings.setValue(\"nDatabaseCache\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ThreadsScriptVerif:\n-            if (settings.value(\"nThreadsScriptVerif\") != value) {\n-                settings.setValue(\"nThreadsScriptVerif\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Listen:\n-            if (settings.value(\"fListen\") != value) {\n-                settings.setValue(\"fListen\", value);\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case Server:\n-            if (settings.value(\"server\") != value) {\n-                settings.setValue(\"server\", value);\n+    case DisplayUnit:\n+        setDisplayUnit(value);\n+        break;\n+    case ThirdPartyTxUrls:\n+        if (strThirdPartyTxUrls != value.toString()) {\n+            strThirdPartyTxUrls = value.toString();\n+            settings.setValue(\"strThirdPartyTxUrls\", strThirdPartyTxUrls);\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case Language:\n+        if (changed()) {\n+            node().updateSetting(\"lang\", value.toString().toStdString());\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case UseEmbeddedMonospacedFont:\n+        m_use_embedded_monospaced_font = value.toBool();\n+        settings.setValue(\"UseEmbeddedMonospacedFont\", m_use_embedded_monospaced_font);\n+        Q_EMIT useEmbeddedMonospacedFontChanged(m_use_embedded_monospaced_font);\n+        break;\n+    case CoinControlFeatures:\n+        fCoinControlFeatures = value.toBool();\n+        settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n+        Q_EMIT coinControlFeaturesChanged(fCoinControlFeatures);\n+        break;\n+    case EnablePSBTControls:\n+        m_enable_psbt_controls = value.toBool();\n+        settings.setValue(\"enable_psbt_controls\", m_enable_psbt_controls);\n+        break;\n+    case Prune:\n+        if (changed()) {\n+            node().updateSetting(\"prune\", PruneSetting(value.toBool(), m_prune_size_gb));\n+            setRestartRequired(true);\n+        }\n+        break;\n+    case PruneSize:\n+        if (changed()) {\n+            m_prune_size_gb = ParsePruneSizeGB(value);\n+            if (getOption(Prune).toBool()) {\n+                node().updateSetting(\"prune\", PruneSetting(true, m_prune_size_gb));\n                 setRestartRequired(true);\n             }\n-            break;\n-        default:\n-            break;\n         }\n+        break;\n+    case DatabaseCache:\n+        if (changed()) {\n+            node().updateSetting(\"dbcache\", value.toInt());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852853347",
      "id" : 852853347,
      "in_reply_to_id" : 850206286,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1YJj",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 538,
      "original_position" : 775,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 945430531,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852853347/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T10:05:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852853347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852857701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852857701"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The commit message of 58e8364dcdc4e57b0caac09f8402e6535301de9b says \"It is a prerequisite for NAT-PMP support\" but it does not explain why is it a prerequisite. Here we revert it. I don't see what could go wrong, but maybe better to have @hebasto confirm that this change/reversal is ok.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T10:08:48Z",
      "diff_hunk" : "@@ -265,322 +225,342 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static ProxySetting ParseProxyString(const std::string& proxy)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return ParseProxyString(QString::fromStdString(proxy));\n+}\n+\n+static std::string ProxyString(bool is_set, QString ip, QString port)\n+{\n+    return is_set ? QString(ip + \":\" + port).toStdString() : \"\";\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune_target_gb > 0, prune_target_gb);\n+\n+    m_prune_size_gb = prune_target_gb;\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n+    bool successful = true; /* set to false on parse error */\n     if(role == Qt::EditRole)\n     {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            return GUIUtil::GetStartOnSystemStartup();\n-        case ShowTrayIcon:\n-            return m_show_tray_icon;\n-        case MinimizeToTray:\n-            return fMinimizeToTray;\n-        case MapPortUPnP:\n+        successful = setOption(OptionID(index.row()), value);\n+    }\n+\n+    Q_EMIT dataChanged(index, index);\n+\n+    return successful;\n+}\n+\n+QVariant OptionsModel::getOption(OptionID option) const\n+{\n+    QSettings settings;\n+    switch (option) {\n+    case StartAtStartup:\n+        return GUIUtil::GetStartOnSystemStartup();\n+    case ShowTrayIcon:\n+        return m_show_tray_icon;\n+    case MinimizeToTray:\n+        return fMinimizeToTray;\n+    case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\");\n+        return SettingToBool(node().getPersistentSetting(\"upnp\"), DEFAULT_UPNP);\n #else\n-            return false;\n+        return false;\n #endif // USE_UPNP\n-        case MapPortNatpmp:\n+    case MapPortNatpmp:\n #ifdef USE_NATPMP\n-            return settings.value(\"fUseNatpmp\");\n+        return SettingToBool(node().getPersistentSetting(\"natpmp\"), DEFAULT_NATPMP);\n #else\n-            return false;\n+        return false;\n #endif // USE_NATPMP\n-        case MinimizeOnClose:\n-            return fMinimizeOnClose;\n-\n-        // default proxy\n-        case ProxyUse:\n-            return settings.value(\"fUseProxy\", false);\n-        case ProxyIP:\n-            return GetProxySetting(settings, \"addrProxy\").ip;\n-        case ProxyPort:\n-            return GetProxySetting(settings, \"addrProxy\").port;\n-\n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n-        case ProxyPortTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n+    case MinimizeOnClose:\n+        return fMinimizeOnClose;\n+\n+    // default proxy\n+    case ProxyUse:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"proxy\"), \"\")).is_set;\n+    case ProxyIP:\n+        return m_proxy_ip;\n+    case ProxyPort:\n+        return m_proxy_port;\n+\n+    // separate Tor proxy\n+    case ProxyUseTor:\n+        return ParseProxyString(SettingToString(node().getPersistentSetting(\"onion\"), \"\")).is_set;\n+    case ProxyIPTor:\n+        return m_onion_ip;\n+    case ProxyPortTor:\n+        return m_onion_port;\n \n #ifdef ENABLE_WALLET\n-        case SpendZeroConfChange:\n-            return settings.value(\"bSpendZeroConfChange\");\n-        case ExternalSignerPath:\n-            return settings.value(\"external_signer_path\");\n-        case SubFeeFromAmount:\n-            return m_sub_fee_from_amount;\n+    case SpendZeroConfChange:\n+        return SettingToBool(node().getPersistentSetting(\"spendzeroconfchange\"), wallet::DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    case ExternalSignerPath:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"signer\"), \"\"));\n+    case SubFeeFromAmount:\n+        return m_sub_fee_from_amount;\n #endif\n-        case DisplayUnit:\n-            return nDisplayUnit;\n-        case ThirdPartyTxUrls:\n-            return strThirdPartyTxUrls;\n-        case Language:\n-            return settings.value(\"language\");\n-        case UseEmbeddedMonospacedFont:\n-            return m_use_embedded_monospaced_font;\n-        case CoinControlFeatures:\n-            return fCoinControlFeatures;\n-        case EnablePSBTControls:\n-            return settings.value(\"enable_psbt_controls\");\n-        case Prune:\n-            return settings.value(\"bPrune\");\n-        case PruneSize:\n-            return settings.value(\"nPruneSize\");\n-        case DatabaseCache:\n-            return settings.value(\"nDatabaseCache\");\n-        case ThreadsScriptVerif:\n-            return settings.value(\"nThreadsScriptVerif\");\n-        case Listen:\n-            return settings.value(\"fListen\");\n-        case Server:\n-            return settings.value(\"server\");\n-        default:\n-            return QVariant();\n-        }\n+    case DisplayUnit:\n+        return nDisplayUnit;\n+    case ThirdPartyTxUrls:\n+        return strThirdPartyTxUrls;\n+    case Language:\n+        return QString::fromStdString(SettingToString(node().getPersistentSetting(\"lang\"), \"\"));\n+    case UseEmbeddedMonospacedFont:\n+        return m_use_embedded_monospaced_font;\n+    case CoinControlFeatures:\n+        return fCoinControlFeatures;\n+    case EnablePSBTControls:\n+        return settings.value(\"enable_psbt_controls\");\n+    case Prune:\n+        return PruneEnabled(node().getPersistentSetting(\"prune\"));\n+    case PruneSize:\n+        return m_prune_size_gb;\n+    case DatabaseCache:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"dbcache\"), (qint64)nDefaultDbCache));\n+    case ThreadsScriptVerif:\n+        return qlonglong(SettingToInt(node().getPersistentSetting(\"par\"), DEFAULT_SCRIPTCHECK_THREADS));\n+    case Listen:\n+        return SettingToBool(node().getPersistentSetting(\"listen\"), DEFAULT_LISTEN);\n+    case Server:\n+        return SettingToBool(node().getPersistentSetting(\"server\"), false);\n+    default:\n+        return QVariant();\n     }\n-    return QVariant();\n }\n \n-// write QSettings values\n-bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n+bool OptionsModel::setOption(OptionID option, const QVariant& value)\n {\n+    auto changed = [&] { return value.isValid() && value != getOption(option); };\n+\n     bool successful = true; /* set to false on parse error */\n-    if(role == Qt::EditRole)\n-    {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n-            break;\n-        case ShowTrayIcon:\n-            m_show_tray_icon = value.toBool();\n-            settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n-            Q_EMIT showTrayIconChanged(m_show_tray_icon);\n-            break;\n-        case MinimizeToTray:\n-            fMinimizeToTray = value.toBool();\n-            settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n-            break;\n-        case MapPortUPnP: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseUPnP\", value.toBool());\n-            break;\n-        case MapPortNatpmp: // core option - can be changed on-the-fly\n-            settings.setValue(\"fUseNatpmp\", value.toBool());\n-            break;\n-        case MinimizeOnClose:\n-            fMinimizeOnClose = value.toBool();\n-            settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n-            break;\n-\n-        // default proxy\n-        case ProxyUse:\n-            if (settings.value(\"fUseProxy\") != value) {\n-                settings.setValue(\"fUseProxy\", value.toBool());\n-                setRestartRequired(true);\n-            }\n-            break;\n-        case ProxyIP: {\n-            auto ip_port = GetProxySetting(settings, \"addrProxy\");\n-            if (!ip_port.is_set || ip_port.ip != value.toString()) {\n-                ip_port.ip = value.toString();\n-                SetProxySetting(settings, \"addrProxy\", ip_port);\n+    QSettings settings;\n+\n+    switch (option) {\n+    case StartAtStartup:\n+        successful = GUIUtil::SetStartOnSystemStartup(value.toBool());\n+        break;\n+    case ShowTrayIcon:\n+        m_show_tray_icon = value.toBool();\n+        settings.setValue(\"fHideTrayIcon\", !m_show_tray_icon);\n+        Q_EMIT showTrayIconChanged(m_show_tray_icon);\n+        break;\n+    case MinimizeToTray:\n+        fMinimizeToTray = value.toBool();\n+        settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n+        break;\n+    case MapPortUPnP: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"upnp\", value.toBool());\n+            node().mapPort(value.toBool(), getOption(MapPortNatpmp).toBool());\n+        }\n+        break;\n+    case MapPortNatpmp: // core option - can be changed on-the-fly\n+        if (changed()) {\n+            node().updateSetting(\"natpmp\", value.toBool());\n+            node().mapPort(getOption(MapPortUPnP).toBool(), value.toBool());\n+        }\n+        break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852857701",
      "id" : 852857701,
      "in_reply_to_id" : 850408058,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1ZNl",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 445,
      "original_position" : 548,
      "original_start_line" : 404,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 945434877,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852857701/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T10:08:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852857701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852925676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852925676"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Alright, if this PR settles as it is (to store \"use proxy\" implicitly), then this is ok IMO. If it is decided to store \"use proxy\" explicitly then this will be changed anyway.\r\n\r\nCan be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T11:21:51Z",
      "diff_hunk" : "@@ -637,4 +617,49 @@ void OptionsModel::checkAndMigrate()\n     if (settings.contains(\"addrSeparateProxyTor\") && settings.value(\"addrSeparateProxyTor\").toString().endsWith(\"%2\")) {\n         settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n     }\n+\n+    // Migrate and delete legacy GUI settings that have now moved to <datadir>/settings.json.\n+    auto migrate_setting = [&](OptionID option, const QString& qt_name, const std::string& name) {\n+        if (!settings.contains(qt_name)) return;\n+        QVariant value = settings.value(qt_name);\n+        if (node().getPersistentSetting(name).isNull()) {\n+            if (option == ProxyIP) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIP, parsed.ip);\n+                setOption(ProxyPort, parsed.port);\n+            } else if (option == ProxyIPTor) {\n+                ProxySetting parsed = ParseProxyString(value.toString());\n+                setOption(ProxyIPTor, parsed.ip);\n+                setOption(ProxyPortTor, parsed.port);\n+            } else {\n+                setOption(option, value);\n+            }\n+        }\n+        settings.remove(qt_name);\n+    };\n+\n+    migrate_setting(DatabaseCache, \"nDatabaseCache\", \"dbcache\");\n+    migrate_setting(ThreadsScriptVerif, \"nThreadsScriptVerif\", \"par\");\n+#ifdef ENABLE_WALLET\n+    migrate_setting(SpendZeroConfChange, \"bSpendZeroConfChange\", \"spendzeroconfchange\");\n+    migrate_setting(ExternalSignerPath, \"external_signer_path\", \"signer\");\n+#endif\n+    migrate_setting(MapPortUPnP, \"fUseUPnP\", \"upnp\");\n+    migrate_setting(MapPortNatpmp, \"fUseNatpmp\", \"natpmp\");\n+    migrate_setting(Listen, \"fListen\", \"listen\");\n+    migrate_setting(Server, \"server\", \"server\");\n+    migrate_setting(PruneSize, \"nPruneSize\", \"prune\");\n+    migrate_setting(Prune, \"bPrune\", \"prune\");\n+    migrate_setting(ProxyIP, \"addrProxy\", \"proxy\");\n+    migrate_setting(ProxyUse, \"fUseProxy\", \"proxy\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852925676",
      "id" : 852925676,
      "in_reply_to_id" : 850439973,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y1pzs",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 654,
      "original_position" : 844,
      "original_start_line" : 653,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 945520073,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852925676/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-19T11:21:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852925676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852972116"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852972116"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the elaborate explanation! I was wrong, sorry for the noise.\r\n\r\nCan be marked as resolved.",
      "commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "created_at" : "2022-04-19T12:01:25Z",
      "diff_hunk" : "@@ -637,4 +617,49 @@ void OptionsModel::checkAndMigrate()\n     if (settings.contains(\"addrSeparateProxyTor\") && settings.value(\"addrSeparateProxyTor\").toString().endsWith(\"%2\")) {\n         settings.setValue(\"addrSeparateProxyTor\", GetDefaultProxyAddress());\n     }\n+\n+    // Migrate and delete legacy GUI settings that have now moved to <datadir>/settings.json.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852972116",
      "id" : 852972116,
      "in_reply_to_id" : 850548018,
      "line" : 648,
      "node_id" : "PRRC_kwDOABII584y11JU",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 648,
      "original_position" : 811,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 849,
      "pull_request_review_id" : 945581871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852972116/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T12:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852972116",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852998379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852998379"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I'll try to implement a patch which implements the previous behavior you seem to like.\r\n\r\nHmm, I shouldn't be forcing my view here. I could be nuts and totally disconnected from realit:space_invader: Maybe at this point it makes sense to poke other reviewers for opinion. Anyone?\r\n\r\n> I think it's ok to clear pruning or proxy values after a users disables pruning or proxying and then restarts.\r\n\r\nI think it would be less surprising and more obvious what is going on if we clear the values after the user disables the option. Like, immediately after the click on the checkbox. Then the behavior will be consistent between \"close & re-open the config dialog box\" and \"close & re-open the app\".\r\n\r\nTo summarize, there are 3 approaches for when an option is disabled (sorted in order of my preference):\r\n\r\n1. _(this is how it works in master, before this PR)_ Preserve the value (greyed out) through config dialog re-open and through app restart. To achieve this, store an explicit `use_proxy: false` in `settings.json` and keep the proxy address in `proxy: \"...\"`. This means that a config which `bitcoind` does not recognize will appear in `settings.json` which will require a tweak here: https://github.com/bitcoin/bitcoin/blob/b297b945f7610772434817181ad12067b2832565/src/util/system.cpp#L569\r\n\r\n2. Delete the value immediately after the checkbox is unchecked. This will make it obvious that the value is gone and will be consistent wrt open/close config dialog and open/close app.\r\n\r\n3. _(this is how this PR works (99b4ce266f62afc8a37575527d82ac6048f50f75))_ Preserve the value (greyed out) through config dialog re-open, but delete it through an app restart.",
      "commit_id" : "633596af152ddc893269787b227d2ea3f9c1c899",
      "created_at" : "2022-04-19T12:26:33Z",
      "diff_hunk" : "@@ -19,18 +19,59 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert enabled/size values to bitcoin -prune setting.\n+static util::SettingsValue PruneSetting(bool prune_enabled, int prune_size_gb)\n+{\n+    assert(!prune_enabled || prune_size_gb >= 1); // PruneSizeGB and ParsePruneSizeGB never return less\n+    return prune_enabled ? PruneGBtoMiB(prune_size_gb) : 0;\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return SettingToInt(prune_setting, 0) > 1;\n+}\n+\n+//! Get pruning size value to show in GUI from bitcoin -prune setting. If\n+//! pruning is not enabled, just show default recommended pruning size (2GB).\n+static int PruneSizeGB(const util::SettingsValue& prune_setting)\n+{\n+    int value = SettingToInt(prune_setting, 0);\n+    return value > 1 ? PruneMiBtoGB(value) : DEFAULT_PRUNE_TARGET_GB;\n+}\n+\n+//! Parse pruning size value provided by user in GUI or loaded from a legacy\n+//! QSettings source (windows registry key or qt .conf file). Smallest value\n+//! that the GUI can display is 1 GB, so round up if anything less is parsed.\n+static int ParsePruneSizeGB(const QVariant& prune_size)\n+{\n+    return std::max(1, prune_size.toInt());\n+}\n+\n+struct ProxySetting {\n+    bool is_set;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852998379",
      "id" : 852998379,
      "in_reply_to_id" : 850568749,
      "line" : 91,
      "node_id" : "PRRC_kwDOABII584y17jr",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 91,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 75,
      "pull_request_review_id" : 945617307,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852998379/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T14:54:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852998379",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "[Coverage report](https://people.freebsd.org/~vd/pr15936_99b4ce266f_coverage/modified_and_not_covered.html) for modified lines by this PR and not covered by tests (`test_bitcoin`, `test_bitcoin-qt`, functional tests).\r\n",
      "created_at" : "2022-04-21T13:31:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1105209965",
      "id" : 1105209965,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585B4Cpt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1105209965/reactions"
      },
      "updated_at" : "2022-04-21T13:31:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1105209965",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r855859230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855859230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Given that `m_node` is always initialized in the constructor, it can never be nullptr/uninitialized. It is better to make this explicit by changing the type of the member variable from pointer to reference. Here is a patch to amend into f384d4d935 `refactor: Pass interfaces::Node references to OptionsModel constructor`:\r\n\r\n<details>\r\n<summary>diff</summary>\r\n\r\n```diff\r\ndiff --git i/src/qt/optionsmodel.cpp w/src/qt/optionsmodel.cpp\r\nindex a83c61ffcc..0bde4407ca 100644\r\n--- i/src/qt/optionsmodel.cpp\r\n+++ w/src/qt/optionsmodel.cpp\r\n@@ -91,13 +91,13 @@ struct ProxySetting {\r\n     QString port;\r\n };\r\n static ProxySetting ParseProxyString(const std::string& proxy);\r\n static std::string ProxyString(bool is_set, QString ip, QString port);\r\n \r\n OptionsModel::OptionsModel(interfaces::Node& node, QObject *parent) :\r\n-    QAbstractListModel(parent), m_node(&node)\r\n+    QAbstractListModel(parent), m_node{node}\r\n {\r\n }\r\n \r\n void OptionsModel::addOverriddenOption(const std::string &option)\r\n {\r\n     strOverriddenByCommandLine += QString::fromStdString(option) + \"=\" + QString::fromStdString(gArgs.GetArg(option, \"\")) + \" \";\r\ndiff --git i/src/qt/optionsmodel.h w/src/qt/optionsmodel.h\r\nindex 4ee0d77a8e..5a4da8a72d 100644\r\n--- i/src/qt/optionsmodel.h\r\n+++ w/src/qt/optionsmodel.h\r\n@@ -102,16 +102,16 @@ public:\r\n     void SetPruneTargetGB(int prune_target_gb);\r\n \r\n     /* Restart flag helper */\r\n     void setRestartRequired(bool fRequired);\r\n     bool isRestartRequired() const;\r\n \r\n-    interfaces::Node& node() const { assert(m_node); return *m_node; }\r\n+    interfaces::Node& node() const { return m_node; }\r\n \r\n private:\r\n-    interfaces::Node* m_node = nullptr;\r\n+    interfaces::Node& m_node;\r\n     /* Qt-only settings */\r\n     bool m_show_tray_icon;\r\n     bool fMinimizeToTray;\r\n     bool fMinimizeOnClose;\r\n     QString language;\r\n     BitcoinUnit m_display_bitcoin_unit;\r\n```\r\n</details>\r\n",
      "commit_id" : "633596af152ddc893269787b227d2ea3f9c1c899",
      "created_at" : "2022-04-22T07:41:18Z",
      "diff_hunk" : "@@ -96,15 +99,13 @@ class OptionsModel : public QAbstractListModel\n     const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n \n     /* Explicit setters */\n-    void SetPruneEnabled(bool prune, bool force = false);\n-    void SetPruneTargetGB(int prune_target_gb, bool force = false);\n+    void SetPruneTargetGB(int prune_target_gb);\n \n     /* Restart flag helper */\n     void setRestartRequired(bool fRequired);\n     bool isRestartRequired() const;\n \n     interfaces::Node& node() const { assert(m_node); return *m_node; }\n-    void setNode(interfaces::Node& node) { assert(!m_node); m_node = &node; }\n \n private:\n     interfaces::Node* m_node = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r855859230",
      "id" : 855859230,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584zA2Ae",
      "original_commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "original_line" : 111,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.h",
      "position" : null,
      "pull_request_review_id" : 949569082,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855859230/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-22T13:44:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855859230",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r855878011"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855878011"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It turns out that now this is the only place where the constructor of `SplashScreen` is called and it is immediately followed by an unconditional call to `setNode()`. So it would be better to pass the node to the constructor and ditch the `setNode()` method. This also allows to make the `SplashSceen::m_node` member a reference, so that it is obvious that it will always be initialized.\r\n\r\nHere is a diff to amend into f384d4d9350f94043518d1cba98f4054cd54b325 `refactor: Pass interfaces::Node references to OptionsModel constructor` or maybe that deserves a separate commit or maybe even a followup PR:\r\n\r\n<details>\r\n<summary>diff</summary>\r\n\r\n```diff\r\ndiff --git i/src/qt/bitcoin.cpp w/src/qt/bitcoin.cpp\r\nindex 324f1c7ce0..ad6a7a129d 100644\r\n--- i/src/qt/bitcoin.cpp\r\n+++ w/src/qt/bitcoin.cpp\r\n@@ -292,14 +292,13 @@ void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\r\n     });\r\n }\r\n \r\n void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\r\n {\r\n     assert(!m_splash);\r\n-    m_splash = new SplashScreen(networkStyle);\r\n-    m_splash->setNode(node());\r\n+    m_splash = new SplashScreen(node(), networkStyle);\r\n     // We don't hold a direct pointer to the splash screen after creation, but the splash\r\n     // screen will take care of deleting itself when finish() happens.\r\n     m_splash->show();\r\n     connect(this, &BitcoinApplication::splashFinished, m_splash, &SplashScreen::finish);\r\n     connect(this, &BitcoinApplication::requestedShutdown, m_splash, &QWidget::close);\r\n }\r\ndiff --git i/src/qt/splashscreen.cpp w/src/qt/splashscreen.cpp\r\nindex a4dfffa387..de99e36ad0 100644\r\n--- i/src/qt/splashscreen.cpp\r\n+++ w/src/qt/splashscreen.cpp\r\n@@ -24,14 +24,14 @@\r\n #include <QCloseEvent>\r\n #include <QPainter>\r\n #include <QRadialGradient>\r\n #include <QScreen>\r\n \r\n \r\n-SplashScreen::SplashScreen(const NetworkStyle* networkStyle)\r\n-    : QWidget(), curAlignment(0)\r\n+SplashScreen::SplashScreen(interfaces::Node& node, const NetworkStyle* networkStyle)\r\n+    : QWidget(), curAlignment(0), m_node{node}\r\n {\r\n     // set reference point, paddings\r\n     int paddingRight            = 50;\r\n     int paddingTop              = 50;\r\n     int titleVersionVSpace      = 17;\r\n     int titleCopyrightVSpace    = 40;\r\n@@ -127,31 +127,25 @@ SplashScreen::SplashScreen(const NetworkStyle* networkStyle)\r\n     setFixedSize(r.size());\r\n     move(QGuiApplication::primaryScreen()->geometry().center() - r.center());\r\n \r\n     installEventFilter(this);\r\n \r\n     GUIUtil::handleCloseWindowShortcut(this);\r\n-}\r\n \r\n-SplashScreen::~SplashScreen()\r\n-{\r\n-    if (m_node) unsubscribeFromCoreSignals();\r\n+    subscribeToCoreSignals();\r\n }\r\n \r\n-void SplashScreen::setNode(interfaces::Node& node)\r\n+SplashScreen::~SplashScreen()\r\n {\r\n-    assert(!m_node);\r\n-    m_node = &node;\r\n-    subscribeToCoreSignals();\r\n-    if (m_shutdown) m_node->startShutdown();\r\n+    unsubscribeFromCoreSignals();\r\n }\r\n \r\n void SplashScreen::shutdown()\r\n {\r\n     m_shutdown = true;\r\n-    if (m_node) m_node->startShutdown();\r\n+    m_node.startShutdown();\r\n }\r\n \r\n bool SplashScreen::eventFilter(QObject * obj, QEvent * ev) {\r\n     if (ev->type() == QEvent::KeyPress) {\r\n         QKeyEvent *keyEvent = static_cast<QKeyEvent *>(ev);\r\n         if (keyEvent->key() == Qt::Key_Q) {\r\n@@ -189,22 +183,22 @@ static void ShowProgress(SplashScreen *splash, const std::string &title, int nPr\r\n             strprintf(\"\\n%d\", nProgress) + \"%\");\r\n }\r\n \r\n void SplashScreen::subscribeToCoreSignals()\r\n {\r\n     // Connect signals to client\r\n-    m_handler_init_message = m_node->handleInitMessage(std::bind(InitMessage, this, std::placeholders::_1));\r\n-    m_handler_show_progress = m_node->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\r\n-    m_handler_init_wallet = m_node->handleInitWallet([this]() { handleLoadWallet(); });\r\n+    m_handler_init_message = m_node.handleInitMessage(std::bind(InitMessage, this, std::placeholders::_1));\r\n+    m_handler_show_progress = m_node.handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3));\r\n+    m_handler_init_wallet = m_node.handleInitWallet([this]() { handleLoadWallet(); });\r\n }\r\n \r\n void SplashScreen::handleLoadWallet()\r\n {\r\n #ifdef ENABLE_WALLET\r\n     if (!WalletModel::isWalletEnabled()) return;\r\n-    m_handler_load_wallet = m_node->walletLoader().handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) {\r\n+    m_handler_load_wallet = m_node.walletLoader().handleLoadWallet([this](std::unique_ptr<interfaces::Wallet> wallet) {\r\n         m_connected_wallet_handlers.emplace_back(wallet->handleShowProgress(std::bind(ShowProgress, this, std::placeholders::_1, std::placeholders::_2, false)));\r\n         m_connected_wallets.emplace_back(std::move(wallet));\r\n     });\r\n #endif\r\n }\r\n \r\ndiff --git i/src/qt/splashscreen.h w/src/qt/splashscreen.h\r\nindex c14fc521a7..e9879e835b 100644\r\n--- i/src/qt/splashscreen.h\r\n+++ w/src/qt/splashscreen.h\r\n@@ -25,15 +25,14 @@ class Wallet;\r\n  */\r\n class SplashScreen : public QWidget\r\n {\r\n     Q_OBJECT\r\n \r\n public:\r\n-    explicit SplashScreen(const NetworkStyle *networkStyle);\r\n+    explicit SplashScreen(interfaces::Node& node, const NetworkStyle* networkStyle);\r\n     ~SplashScreen();\r\n-    void setNode(interfaces::Node& node);\r\n \r\n protected:\r\n     void paintEvent(QPaintEvent *event) override;\r\n     void closeEvent(QCloseEvent *event) override;\r\n \r\n public Q_SLOTS:\r\n@@ -59,13 +58,13 @@ private:\r\n \r\n     QPixmap pixmap;\r\n     QString curMessage;\r\n     QColor curColor;\r\n     int curAlignment;\r\n \r\n-    interfaces::Node* m_node = nullptr;\r\n+    interfaces::Node& m_node;\r\n     bool m_shutdown = false;\r\n     std::unique_ptr<interfaces::Handler> m_handler_init_message;\r\n     std::unique_ptr<interfaces::Handler> m_handler_show_progress;\r\n     std::unique_ptr<interfaces::Handler> m_handler_init_wallet;\r\n     std::unique_ptr<interfaces::Handler> m_handler_load_wallet;\r\n     std::list<std::unique_ptr<interfaces::Wallet>> m_connected_wallets;\r\n```\r\n</details>\r\n",
      "commit_id" : "633596af152ddc893269787b227d2ea3f9c1c899",
      "created_at" : "2022-04-22T07:58:44Z",
      "diff_hunk" : "@@ -281,6 +296,7 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n     assert(!m_splash);\n     m_splash = new SplashScreen(networkStyle);\n+    m_splash->setNode(node());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r855878011",
      "id" : 855878011,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584zA6l7",
      "original_commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "original_line" : 299,
      "original_position" : 31,
      "original_start_line" : 298,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 949569082,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855878011/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-22T13:44:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855878011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r856617199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856617199"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r855878011\r\n\r\n> It turns out that now this is the only place where the constructor of `SplashScreen` is called and it is immediately followed by an unconditional call to `setNode()`. So it would be better to pass the node to the constructor and ditch the `setNode()` method. This also allows to make the `SplashSceen::m_node` member a reference, so that it is obvious that it will always be initialized.\r\n\r\nThanks, applied this change",
      "commit_id" : "633596af152ddc893269787b227d2ea3f9c1c899",
      "created_at" : "2022-04-22T22:37:58Z",
      "diff_hunk" : "@@ -281,6 +296,7 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n     assert(!m_splash);\n     m_splash = new SplashScreen(networkStyle);\n+    m_splash->setNode(node());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r856617199",
      "id" : 856617199,
      "in_reply_to_id" : 855878011,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584zDvDv",
      "original_commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "original_line" : 299,
      "original_position" : 31,
      "original_start_line" : 298,
      "path" : "src/qt/bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 950646131,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856617199/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-23T00:48:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856617199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r856617253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856617253"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r855859230\r\n\r\n> Given that `m_node` is always initialized in the constructor, it can never be nullptr/uninitialized. It is better to make this explicit by changing the type of the member variable from pointer to reference. Here is a patch to amend into [f384d4d](https://github.com/bitcoin/bitcoin/commit/f384d4d9350f94043518d1cba98f4054cd54b325) `refactor: Pass interfaces::Node references to OptionsModel constructor`:\r\n\r\nMakes sense. Added this change.",
      "commit_id" : "633596af152ddc893269787b227d2ea3f9c1c899",
      "created_at" : "2022-04-22T22:38:13Z",
      "diff_hunk" : "@@ -96,15 +99,13 @@ class OptionsModel : public QAbstractListModel\n     const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n \n     /* Explicit setters */\n-    void SetPruneEnabled(bool prune, bool force = false);\n-    void SetPruneTargetGB(int prune_target_gb, bool force = false);\n+    void SetPruneTargetGB(int prune_target_gb);\n \n     /* Restart flag helper */\n     void setRestartRequired(bool fRequired);\n     bool isRestartRequired() const;\n \n     interfaces::Node& node() const { assert(m_node); return *m_node; }\n-    void setNode(interfaces::Node& node) { assert(!m_node); m_node = &node; }\n \n private:\n     interfaces::Node* m_node = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r856617253",
      "id" : 856617253,
      "in_reply_to_id" : 855859230,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584zDvEl",
      "original_commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "original_line" : 111,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.h",
      "position" : null,
      "pull_request_review_id" : 950646131,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856617253/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-23T00:48:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856617253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r856618296"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856618296"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852998379\r\n\r\n> > I'll try to implement a patch which implements the previous behavior you seem to like.\r\n> \r\n> Hmm, I shouldn't be forcing my view here. I could be nuts and totally disconnected from realitspace_invader Maybe at this point it makes sense to poke other reviewers for opinion. Anyone?\r\n\r\nAs a proof of concept I implemented the behavior you requested here: ~https://github.com/ryanofsky/bitcoin/commit/0f29583a903fd8ffa69abe7ae005acac340faa5c~. UPDATE: [4e86ab5dfc9bf40502aca0f9e3a4690f6f5dfc19](https://github.com/ryanofsky/bitcoin/commit/4e86ab5dfc9bf40502aca0f9e3a4690f6f5dfc19) is a better version that incorporates #24830 bugfix.\r\n\r\nI don't think that behavior is nuts but I think the alternative is perfectly fine and each behavior has advantages and disadvantages. For purpose of this PR I'm preferring behavior that has simplest possible implementation, and is completely backwards compatible (i.e, existing `bitcoin-qt` and `bitcoind` versions will correctly interpret `settings.json` files written by new `bitcoin-qt` versions).  As commit https://github.com/ryanofsky/bitcoin/commit/4e86ab5dfc9bf40502aca0f9e3a4690f6f5dfc19 demonstrates, our options for the future are open here. We don't need to fixate on this one minor behavior. We can start off with the simplest behavior, and change it if there is any desire for more complicated solutions in the future.\r\n\r\n> I think it would be less surprising and more obvious what is going on if we clear the values after the user disables the option. Like, immediately after the click on the checkbox. Then the behavior will be consistent between \"close & re-open the config dialog box\" and \"close & re-open the app\".\r\n\r\nIIUC this will require modifying OptionsDialog as well as OptionsModel, and will make interactions between the classes more involved. It may be also be worse for the user if it clears settings before restart while they are still in use. But again, the differences between all these behaviors are small and I don't think any actual user will have much reason to care about them. I'm just trying to start off with the simplest possible implementation and mental model.\r\n\r\n> To achieve this, store an explicit `use_proxy: false` in `settings.json` and keep the proxy address in `proxy: \"...\"`. This means that a config which `bitcoind` does not recognize will appear in `settings.json` which will require a tweak \r\n\r\nI'm opposed to changing the setting.json format in this way, or any way that will cause previous versions of bitcoin-qt and bitcoind to not interpret settings correctly. Doing this is not necessary to get the behavior you are requesting with the storing previous values (as https://github.com/ryanofsky/bitcoin/commit/4e86ab5dfc9bf40502aca0f9e3a4690f6f5dfc19 demonstrates). If we do want to change the settnngs.json in a backwards incompatible way in the future, I think we can do that, but it's not a line I want to be cross here in this PR.",
      "commit_id" : "633596af152ddc893269787b227d2ea3f9c1c899",
      "created_at" : "2022-04-22T22:41:51Z",
      "diff_hunk" : "@@ -19,18 +19,59 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert enabled/size values to bitcoin -prune setting.\n+static util::SettingsValue PruneSetting(bool prune_enabled, int prune_size_gb)\n+{\n+    assert(!prune_enabled || prune_size_gb >= 1); // PruneSizeGB and ParsePruneSizeGB never return less\n+    return prune_enabled ? PruneGBtoMiB(prune_size_gb) : 0;\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return SettingToInt(prune_setting, 0) > 1;\n+}\n+\n+//! Get pruning size value to show in GUI from bitcoin -prune setting. If\n+//! pruning is not enabled, just show default recommended pruning size (2GB).\n+static int PruneSizeGB(const util::SettingsValue& prune_setting)\n+{\n+    int value = SettingToInt(prune_setting, 0);\n+    return value > 1 ? PruneMiBtoGB(value) : DEFAULT_PRUNE_TARGET_GB;\n+}\n+\n+//! Parse pruning size value provided by user in GUI or loaded from a legacy\n+//! QSettings source (windows registry key or qt .conf file). Smallest value\n+//! that the GUI can display is 1 GB, so round up if anything less is parsed.\n+static int ParsePruneSizeGB(const QVariant& prune_size)\n+{\n+    return std::max(1, prune_size.toInt());\n+}\n+\n+struct ProxySetting {\n+    bool is_set;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r856618296",
      "id" : 856618296,
      "in_reply_to_id" : 850568749,
      "line" : 91,
      "node_id" : "PRRC_kwDOABII584zDvU4",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 91,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 75,
      "pull_request_review_id" : 950646131,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856618296/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T15:53:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856618296",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r856618406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856618406"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852785723\r\n\r\n> This diff is now in commit [ce530d5](https://github.com/bitcoin/bitcoin/commit/ce530d566f7600af70317e51b502f73ba929983e) `Migrate -prune setting from QSettings to settings.json`, but it has to be amended to commit [dd3d146](https://github.com/bitcoin/bitcoin/commit/dd3d146f72a9fe9446a2c1fdb95e008e8d96cae9) `Migrate -proxy and -onion settings from QSettings to settings.json`\r\n> diff\r\n\r\nGood catch. Now moved changes to the right commit.",
      "commit_id" : "633596af152ddc893269787b227d2ea3f9c1c899",
      "created_at" : "2022-04-22T22:42:17Z",
      "diff_hunk" : "@@ -273,322 +252,345 @@ int OptionsModel::rowCount(const QModelIndex & parent) const\n     return OptionIDRowCount;\n }\n \n-struct ProxySetting {\n-    bool is_set;\n-    QString ip;\n-    QString port;\n-};\n-\n-static ProxySetting GetProxySetting(QSettings &settings, const QString &name)\n+static ProxySetting ParseProxyString(const QString& proxy)\n {\n     static const ProxySetting default_val = {false, DEFAULT_GUI_PROXY_HOST, QString(\"%1\").arg(DEFAULT_GUI_PROXY_PORT)};\n     // Handle the case that the setting is not set at all\n-    if (!settings.contains(name)) {\n+    if (proxy.isEmpty()) {\n         return default_val;\n     }\n     // contains IP at index 0 and port at index 1\n-    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(settings.value(name).toString(), \":\");\n+    QStringList ip_port = GUIUtil::SplitSkipEmptyParts(proxy, \":\");\n     if (ip_port.size() == 2) {\n         return {true, ip_port.at(0), ip_port.at(1)};\n     } else { // Invalid: return default\n         return default_val;\n     }\n }\n \n-static void SetProxySetting(QSettings &settings, const QString &name, const ProxySetting &ip_port)\n+static ProxySetting ParseProxyString(const std::string& proxy)\n+{\n+    return ParseProxyString(QString::fromStdString(proxy));\n+}\n+\n+static std::string ProxyString(bool is_set, QString ip, QString port)\n {\n-    settings.setValue(name, QString{ip_port.ip + QLatin1Char(':') + ip_port.port});\n+    return is_set ? QString(ip + \":\" + port).toStdString() : \"\";\n }\n \n static const QString GetDefaultProxyAddress()\n {\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPruneEnabled(bool prune, bool force)\n+void OptionsModel::SetPruneTargetGB(int prune_target_gb)\n {\n-    QSettings settings;\n-    settings.setValue(\"bPrune\", prune);\n-    const int64_t prune_target_mib = PruneGBtoMiB(settings.value(\"nPruneSize\").toInt());\n-    std::string prune_val = prune ? ToString(prune_target_mib) : \"0\";\n-    if (force) {\n-        gArgs.ForceSetArg(\"-prune\", prune_val);\n-        return;\n-    }\n-    if (!gArgs.SoftSetArg(\"-prune\", prune_val)) {\n-        addOverriddenOption(\"-prune\");\n+    const util::SettingsValue cur_value = node().getPersistentSetting(\"prune\");\n+    const util::SettingsValue new_value = PruneSetting(prune_target_gb > 0, prune_target_gb);\n+\n+    m_prune_size_gb = prune_target_gb;\n+\n+    // Force setting to take effect. It is still safe to change the value at\n+    // this point because this function is only called after the intro screen is\n+    // shown, before the node starts.\n+    node().forceSetting(\"prune\", new_value);\n+\n+    // Update settings.json if value configured in intro screen is different\n+    // from saved value. Avoid writing settings.json if bitcoin.conf value\n+    // doesn't need to be overridden.\n+    if (PruneEnabled(cur_value) != PruneEnabled(new_value) ||\n+        PruneSizeGB(cur_value) != PruneSizeGB(new_value)) {\n+        // Call updateSetting() instead of setOption() to avoid setting\n+        // RestartRequired flag\n+        node().updateSetting(\"prune\", new_value);\n     }\n }\n \n-void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+// read QSettings values and return them\n+QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n-    const bool prune = prune_target_gb > 0;\n-    if (prune) {\n-        QSettings settings;\n-        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    if(role == Qt::EditRole)\n+    {\n+        return getOption(OptionID(index.row()));\n     }\n-    SetPruneEnabled(prune, force);\n+    return QVariant();\n }\n \n-// read QSettings values and return them\n-QVariant OptionsModel::data(const QModelIndex & index, int role) const\n+// write QSettings values\n+bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n+    bool successful = true; /* set to false on parse error */\n     if(role == Qt::EditRole)\n     {\n-        QSettings settings;\n-        switch(index.row())\n-        {\n-        case StartAtStartup:\n-            return GUIUtil::GetStartOnSystemStartup();\n-        case ShowTrayIcon:\n-            return m_show_tray_icon;\n-        case MinimizeToTray:\n-            return fMinimizeToTray;\n-        case MapPortUPnP:\n+        successful = setOption(OptionID(index.row()), value);\n+    }\n+\n+    Q_EMIT dataChanged(index, index);\n+\n+    return successful;\n+}\n+\n+QVariant OptionsModel::getOption(OptionID option) const\n+{\n+    auto setting = [&]{ return node().getPersistentSetting(SettingName(option)); };\n+\n+    QSettings settings;\n+    switch (option) {\n+    case StartAtStartup:\n+        return GUIUtil::GetStartOnSystemStartup();\n+    case ShowTrayIcon:\n+        return m_show_tray_icon;\n+    case MinimizeToTray:\n+        return fMinimizeToTray;\n+    case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\");\n+        return SettingToBool(setting(), DEFAULT_UPNP);\n #else\n-            return false;\n+        return false;\n #endif // USE_UPNP\n-        case MapPortNatpmp:\n+    case MapPortNatpmp:\n #ifdef USE_NATPMP\n-            return settings.value(\"fUseNatpmp\");\n+        return SettingToBool(setting(), DEFAULT_NATPMP);\n #else\n-            return false;\n+        return false;\n #endif // USE_NATPMP\n-        case MinimizeOnClose:\n-            return fMinimizeOnClose;\n-\n-        // default proxy\n-        case ProxyUse:\n-            return settings.value(\"fUseProxy\", false);\n-        case ProxyIP:\n-            return GetProxySetting(settings, \"addrProxy\").ip;\n-        case ProxyPort:\n-            return GetProxySetting(settings, \"addrProxy\").port;\n-\n-        // separate Tor proxy\n-        case ProxyUseTor:\n-            return settings.value(\"fUseSeparateProxyTor\", false);\n-        case ProxyIPTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").ip;\n-        case ProxyPortTor:\n-            return GetProxySetting(settings, \"addrSeparateProxyTor\").port;\n+    case MinimizeOnClose:\n+        return fMinimizeOnClose;\n+\n+    // default proxy\n+    case ProxyUse:\n+        return ParseProxyString(SettingToString(setting(), \"\")).is_set;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r856618406",
      "id" : 856618406,
      "in_reply_to_id" : 852785723,
      "line" : 364,
      "node_id" : "PRRC_kwDOABII584zDvWm",
      "original_commit_id" : "99b4ce266f62afc8a37575527d82ac6048f50f75",
      "original_line" : 364,
      "original_position" : 427,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 429,
      "pull_request_review_id" : 950646131,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856618406/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-23T00:48:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856618406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "633596af152ddc893269787b227d2ea3f9c1c899 looks ok, modulo the [vanishing proxy values](https://github.com/bitcoin/bitcoin/pull/15936#discussion_r852998379), I have to think more about this. I will also test a bit further. Thanks!",
      "created_at" : "2022-04-27T10:04:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1110814375",
      "id" : 1110814375,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585CNa6n",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110814375/reactions"
      },
      "updated_at" : "2022-04-27T10:04:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110814375",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r861893286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861893286"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850568749\r\n\r\nI opened https://github.com/bitcoin-core/gui/issues/596 to continue discussion from this thread and try to resolve this",
      "commit_id" : "633596af152ddc893269787b227d2ea3f9c1c899",
      "created_at" : "2022-04-29T15:03:59Z",
      "diff_hunk" : "@@ -19,18 +19,59 @@\n #include <txdb.h>       // for -dbcache defaults\n #include <util/string.h>\n #include <validation.h> // For DEFAULT_SCRIPTCHECK_THREADS\n+#include <wallet/wallet.h> // For DEFAULT_SPEND_ZEROCONF_CHANGE\n \n #include <QDebug>\n #include <QLatin1Char>\n #include <QSettings>\n #include <QStringList>\n \n+#include <univalue.h>\n+\n const char *DEFAULT_GUI_PROXY_HOST = \"127.0.0.1\";\n \n static const QString GetDefaultProxyAddress();\n \n-OptionsModel::OptionsModel(QObject *parent, bool resetSettings) :\n-    QAbstractListModel(parent)\n+//! Convert enabled/size values to bitcoin -prune setting.\n+static util::SettingsValue PruneSetting(bool prune_enabled, int prune_size_gb)\n+{\n+    assert(!prune_enabled || prune_size_gb >= 1); // PruneSizeGB and ParsePruneSizeGB never return less\n+    return prune_enabled ? PruneGBtoMiB(prune_size_gb) : 0;\n+}\n+\n+//! Get pruning enabled value to show in GUI from bitcoin -prune setting.\n+static bool PruneEnabled(const util::SettingsValue& prune_setting)\n+{\n+    // -prune=1 setting is manual pruning mode, so disabled for purposes of the gui\n+    return SettingToInt(prune_setting, 0) > 1;\n+}\n+\n+//! Get pruning size value to show in GUI from bitcoin -prune setting. If\n+//! pruning is not enabled, just show default recommended pruning size (2GB).\n+static int PruneSizeGB(const util::SettingsValue& prune_setting)\n+{\n+    int value = SettingToInt(prune_setting, 0);\n+    return value > 1 ? PruneMiBtoGB(value) : DEFAULT_PRUNE_TARGET_GB;\n+}\n+\n+//! Parse pruning size value provided by user in GUI or loaded from a legacy\n+//! QSettings source (windows registry key or qt .conf file). Smallest value\n+//! that the GUI can display is 1 GB, so round up if anything less is parsed.\n+static int ParsePruneSizeGB(const QVariant& prune_size)\n+{\n+    return std::max(1, prune_size.toInt());\n+}\n+\n+struct ProxySetting {\n+    bool is_set;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r861893286",
      "id" : 861893286,
      "in_reply_to_id" : 850568749,
      "line" : 91,
      "node_id" : "PRRC_kwDOABII584zX3Km",
      "original_commit_id" : "7966254822e179798d6a375ac3183321ee541733",
      "original_line" : 91,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 75,
      "pull_request_review_id" : 957873130,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861893286/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T15:12:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861893286",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r861989364"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861989364"
         }
      },
      "author_association" : "MEMBER",
      "body" : "68a4f322e93e413cb8f1f1b998a2b2ee63df9b9d: how can you trigger this error?",
      "commit_id" : "633596af152ddc893269787b227d2ea3f9c1c899",
      "created_at" : "2022-04-29T17:03:57Z",
      "diff_hunk" : "@@ -98,7 +104,17 @@ void OptionsModel::Init(bool resetSettings)\n \n     // These are shared with the core or have a command-line parameter\n     // and we want command-line parameters to overwrite the GUI settings.\n-    //\n+    for (OptionID option : {DatabaseCache}) {\n+        std::string setting = SettingName(option);\n+        if (node().isSettingIgnored(setting)) addOverriddenOption(\"-\" + setting);\n+        try {\n+            getOption(option);\n+        } catch (const std::runtime_error& e) {\n+            error = strprintf(_(\"Could not read setting \\\"%s\\\", %s.\"), setting, e.what());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r861989364",
      "id" : 861989364,
      "line" : 179,
      "node_id" : "PRRC_kwDOABII584zYOn0",
      "original_commit_id" : "68a4f322e93e413cb8f1f1b998a2b2ee63df9b9d",
      "original_line" : 113,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 50,
      "pull_request_review_id" : 958013757,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861989364/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T17:46:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861989364",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r862657763"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862657763"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The only way to throw from `getOption()` is if `SettingName()` (called from `getOption()`) throws. However, `SettingName(option)` (same argument) is also called just before this `try/catch` without `try/catch`. So, if `SettingName()` is going to throw it will do so before this `try/catch` and so this code will never be reached.\r\n\r\nTo trigger that `SettingName()` to throw the source code must be modified. Cannot be triggered by wrong user input or corrupted config file.",
      "commit_id" : "633596af152ddc893269787b227d2ea3f9c1c899",
      "created_at" : "2022-05-02T08:00:33Z",
      "diff_hunk" : "@@ -98,7 +104,17 @@ void OptionsModel::Init(bool resetSettings)\n \n     // These are shared with the core or have a command-line parameter\n     // and we want command-line parameters to overwrite the GUI settings.\n-    //\n+    for (OptionID option : {DatabaseCache}) {\n+        std::string setting = SettingName(option);\n+        if (node().isSettingIgnored(setting)) addOverriddenOption(\"-\" + setting);\n+        try {\n+            getOption(option);\n+        } catch (const std::runtime_error& e) {\n+            error = strprintf(_(\"Could not read setting \\\"%s\\\", %s.\"), setting, e.what());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r862657763",
      "id" : 862657763,
      "in_reply_to_id" : 861989364,
      "line" : 179,
      "node_id" : "PRRC_kwDOABII584zaxzj",
      "original_commit_id" : "68a4f322e93e413cb8f1f1b998a2b2ee63df9b9d",
      "original_line" : 113,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : 50,
      "pull_request_review_id" : 958808074,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862657763/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-02T08:00:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862657763",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r862955339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862955339"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r861989364\r\n\r\n> To trigger that `SettingName()` to throw the source code must be modified. Cannot be triggered by wrong user input or corrupted config file.\r\n\r\nI added a comment to clarify, but this is not the case! The catch is supposed to deal with `runtime_error` exceptions thrown by univalue, related to the ones you reported https://github.com/bitcoin/bitcoin/pull/15936#discussion_r850190114. You can trigger it by adding a nonsense line like `\"upnp\": 37` to the settings file.\r\n",
      "commit_id" : "3340286c752d2b8ace594f7ae179c290b3687a37",
      "created_at" : "2022-05-02T15:39:58Z",
      "diff_hunk" : "@@ -98,7 +104,17 @@ void OptionsModel::Init(bool resetSettings)\n \n     // These are shared with the core or have a command-line parameter\n     // and we want command-line parameters to overwrite the GUI settings.\n-    //\n+    for (OptionID option : {DatabaseCache}) {\n+        std::string setting = SettingName(option);\n+        if (node().isSettingIgnored(setting)) addOverriddenOption(\"-\" + setting);\n+        try {\n+            getOption(option);\n+        } catch (const std::runtime_error& e) {\n+            error = strprintf(_(\"Could not read setting \\\"%s\\\", %s.\"), setting, e.what());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r862955339",
      "id" : 862955339,
      "in_reply_to_id" : 861989364,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584zb6dL",
      "original_commit_id" : "68a4f322e93e413cb8f1f1b998a2b2ee63df9b9d",
      "original_line" : 198,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/qt/optionsmodel.cpp",
      "position" : null,
      "pull_request_review_id" : 959227416,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862955339/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-02T18:20:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862955339",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "While testing this, 22.x crashes if `settings.json` contains `\"prune\": 1234` due to https://github.com/bitcoin/bitcoin/pull/24498 which was fixed in 23.0. So, if this PR is included in 24.x and a user upgrades to 24.x and then downgrades to 22.x his 22.x would crash at startup. Is that acceptable?",
      "created_at" : "2022-05-03T11:28:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1115992866",
      "id" : 1115992866,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585ChLMi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1115992866/reactions"
      },
      "updated_at" : "2022-05-03T11:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1115992866",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> While testing this, 22.x crashes if `settings.json` contains `\"prune\": 1234` due to #24498 which was fixed in 23.0. So, if this PR is included in 24.x and a user upgrades to 24.x and then downgrades to 22.x his 22.x would crash at startup. Is that acceptable?\r\n\r\nWhat a mess. I guess I'll just write a string instead of an int to avoid this. Maybe will try to backport #24498, too, since it's a one-line fix and would make 22.x less fragile in general. Thanks for testing this! It is pretty important for this PR to be backwards compatible.\r\n\r\nUPDATE: Same issue will probably happen with the \"dbcache\" and \"par\" int settings, so I will address these too. But the \"prune\" setting is most likely to trigger this since that is most likely to be changed from the default.",
      "created_at" : "2022-05-03T12:02:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1116020233",
      "id" : 1116020233,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585ChR4J",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116020233/reactions"
      },
      "updated_at" : "2022-05-03T12:09:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116020233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1116020233\r\n\r\n> What a mess. I guess I'll just write a string instead of an int to avoid this\r\n\r\nUpdated so this now writes 22.x int settings as strings to avoid triggering uncaught exceptions if there is a downgrade. I also added a new commit to clear settings.json file when the reset button is pressed, after @Rspigler's comment https://github.com/bitcoin-core/gui/issues/596#issuecomment-1115233031\r\n\r\nUpdated 2f77c49174ca3932988f74faf75c8838dd95ec82 -> 616b95a061ae4b9de171277da1e97d3d6543b0b0 ([`pr/qtset.41`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.41) -> [`pr/qtset.42`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.42), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.41..pr/qtset.42)) with 22.x compatibility and reset button fixes\r\n",
      "created_at" : "2022-05-16T19:14:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1128039933",
      "id" : 1128039933,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585DPIX9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128039933/reactions"
      },
      "updated_at" : "2022-05-16T19:14:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128039933",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated 616b95a061ae4b9de171277da1e97d3d6543b0b0 -> e4ef0b6f78cc7c6ac148674b9c8ac40bd7e5f30d ([`pr/qtset.42`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.42) -> [`pr/qtset.43`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.43), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.42..pr/qtset.43)) to settings migrate test https://cirrus-ci.com/task/6271609857114112?logs=ci#L2726, https://cirrus-ci.com/task/5708659903692800?logs=ci#L3089, https://cirrus-ci.com/task/6553084833824768?logs=ci#L3820, https://cirrus-ci.com/task/5990134880403456?logs=ci#L2954, https://cirrus-ci.com/task/5849397392048128?logs=ci#L3419, https://cirrus-ci.com/task/5286447438626816?logs=ci#L2913, https://cirrus-ci.com/task/5004972461916160?logs=ci#L2304",
      "created_at" : "2022-05-17T03:55:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1128380671",
      "id" : 1128380671,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585DQbj_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128380671/reactions"
      },
      "updated_at" : "2022-05-17T03:55:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128380671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This PR needs more ACKs, but it has been reviewed extensively and tested to death. I'd really appreciate any new review and testing, but also updates from people who commented previously. Summary of feedback so far:\r\n\r\n- _jonasschnelli_ concept ACK https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-493666091\r\n- _marcofalke_ review https://github.com/bitcoin/bitcoin/pull/15936#pullrequestreview-770498004\r\n- _prayank23_ ACK https://github.com/bitcoin/bitcoin/pull/15936#pullrequestreview-775523650 and testing https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-938400093\r\n- _hebasto_ approach ACK https://github.com/bitcoin/bitcoin/pull/15936#pullrequestreview-852203064 and testing https://github.com/bitcoin/bitcoin/pull/15936#pullrequestreview-852727704\r\n- _rspigler_ testing https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1012773648\r\n- _jonatack_ concept ACK https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1076312880\r\n- _vasild_ numerous reviews, closest to ACK https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1110814375\r\n- _sjors_ partial review https://github.com/bitcoin/bitcoin/pull/15936#pullrequestreview-958013757\r\n",
      "created_at" : "2022-05-17T15:58:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1129046363",
      "id" : 1129046363,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585DS-Fb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129046363/reactions"
      },
      "updated_at" : "2022-05-17T15:58:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129046363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-05-19T16:41:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1131945543",
      "id" : 1131945543,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585DeB5H",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1131945543/reactions"
      },
      "updated_at" : "2022-05-19T16:41:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1131945543",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased e4ef0b6f78cc7c6ac148674b9c8ac40bd7e5f30d -> 084b888ef1934f4ef88da33f72ffdd321af7c6b7 ([`pr/qtset.43`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.43) -> [`pr/qtset.44`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.44), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.43-rebase..pr/qtset.44)) due to conflict with #25153",
      "created_at" : "2022-05-19T18:51:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1132077757",
      "id" : 1132077757,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585DeiK9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1132077757/reactions"
      },
      "updated_at" : "2022-05-19T18:51:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1132077757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated 084b888ef1934f4ef88da33f72ffdd321af7c6b7 -> 02ce0badbe3fd50a508b1c189082c91bff420c60 ([`pr/qtset.44`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.44) -> [`pr/qtset.45`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.45), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.44..pr/qtset.45)) dropping the GUI changes from this PR and moving them to https://github.com/bitcoin-core/gui/pull/602. This should make the node changes here, and the GUI changes over there both easier to review",
      "created_at" : "2022-05-19T20:29:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1132174765",
      "id" : 1132174765,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585De52t",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1132174765/reactions"
      },
      "updated_at" : "2022-05-19T20:29:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1132174765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r877545412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/877545412"
         }
      },
      "author_association" : "MEMBER",
      "body" : "02ce0badbe3fd50a508b1c189082c91bff420c60, style nit\r\n\r\n```suggestion\r\n    if (!GetSettingsPath(&path, /*temp=*/false, backup) || !GetSettingsPath(&path_tmp, /*temp=*/true, backup)) {\r\n```",
      "commit_id" : "3340286c752d2b8ace594f7ae179c290b3687a37",
      "created_at" : "2022-05-19T21:12:37Z",
      "diff_hunk" : "@@ -572,10 +575,10 @@ bool ArgsManager::ReadSettingsFile(std::vector<std::string>* errors)\n     return true;\n }\n \n-bool ArgsManager::WriteSettingsFile(std::vector<std::string>* errors) const\n+bool ArgsManager::WriteSettingsFile(std::vector<std::string>* errors, bool backup) const\n {\n     fs::path path, path_tmp;\n-    if (!GetSettingsPath(&path, /* temp= */ false) || !GetSettingsPath(&path_tmp, /* temp= */ true)) {\n+    if (!GetSettingsPath(&path, /* temp= */ false, backup) || !GetSettingsPath(&path_tmp, /* temp= */ true, backup)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r877545412",
      "id" : 877545412,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5840TkfE",
      "original_commit_id" : "02ce0badbe3fd50a508b1c189082c91bff420c60",
      "original_line" : 581,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 979270076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/877545412/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-19T21:16:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/877545412",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the review!\r\n\r\nUpdated 02ce0badbe3fd50a508b1c189082c91bff420c60 -> 3340286c752d2b8ace594f7ae179c290b3687a37 ([`pr/qtset.45`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.45) -> [`pr/qtset.46`](https://github.com/ryanofsky/bitcoin/commits/pr/qtset.46), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/qtset.45..pr/qtset.46)) just tweaking some comments, including the parameter name one that was suggested.\r\n",
      "created_at" : "2022-05-19T21:51:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1132239940",
      "id" : 1132239940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585DfJxE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1132239940/reactions"
      },
      "updated_at" : "2022-05-19T21:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1132239940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I will re-test tomorrow.  Thanks for keeping this up!",
      "created_at" : "2022-05-20T03:32:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1132422382",
      "id" : 1132422382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585Df2Tu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1132422382/reactions"
      },
      "updated_at" : "2022-05-20T03:32:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1132422382",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "tACK 3340286c752d2b8ace594f7ae179c290b3687a37\r\n\r\nTested with various changes to `settings.json`, `bitcoin.conf`, and the GUI.  Everything behaved as it should.\r\n\r\nPrevious issues people reported are resolved (including https://github.com/bitcoin/bitcoin/issues/24457).\r\n\r\nOnly other issue is solved by https://github.com/bitcoin-core/gui/pull/603\r\n",
      "created_at" : "2022-05-21T04:19:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1133527849",
      "id" : 1133527849,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585DkEMp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1133527849/reactions"
      },
      "updated_at" : "2022-05-21T04:19:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1133527849",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r878685831"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/878685831"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be?\r\n```cpp\r\nupdateRwSetting(name, value, /* write = */ true)\r\n```",
      "commit_id" : "3340286c752d2b8ace594f7ae179c290b3687a37",
      "created_at" : "2022-05-21T11:37:23Z",
      "diff_hunk" : "@@ -112,6 +112,38 @@ class NodeImpl : public Node\n         }\n     }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n+    bool isSettingIgnored(const std::string& name) override\n+    {\n+        bool ignored = false;\n+        gArgs.LockSettings([&](util::Settings& settings) {\n+            if (auto* options = util::FindKey(settings.command_line_options, name)) {\n+                ignored = !options->empty();\n+            }\n+        });\n+        return ignored;\n+    }\n+    util::SettingsValue getPersistentSetting(const std::string& name) override { return gArgs.GetPersistentSetting(name); }\n+    void updateSetting(const std::string& name, const util::SettingsValue& value) override\n+    {\n+        gArgs.LockSettings([&](util::Settings& settings) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r878685831",
      "id" : 878685831,
      "line" : 128,
      "node_id" : "PRRC_kwDOABII5840X66H",
      "original_commit_id" : "e58b932f58427ae959be5be14689bc67865a7fae",
      "original_line" : 128,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/node/interfaces.cpp",
      "position" : 17,
      "pull_request_review_id" : 980819894,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/878685831/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-21T11:40:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/878685831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "tACK https://github.com/bitcoin/bitcoin/commit/3340286c752d2b8ace594f7ae179c290b3687a37 all tests pass",
      "created_at" : "2022-05-22T01:11:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#issuecomment-1133794781",
      "id" : 1133794781,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15936",
      "node_id" : "IC_kwDOABII585DlFXd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1133794781/reactions"
      },
      "updated_at" : "2022-05-22T01:11:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1133794781",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r879597046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/879597046"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15936#discussion_r878685831\r\n\r\n> ```c++\r\n> updateRwSetting(name, value, /* write = */ true)\r\n> ```\r\n\r\nThanks renamed to `updateRwSetting` to be consistent with the Chain interface",
      "commit_id" : "f9fdcec7e932843a91ddf7f377e00bd2a6efb82a",
      "created_at" : "2022-05-23T15:32:12Z",
      "diff_hunk" : "@@ -112,6 +112,38 @@ class NodeImpl : public Node\n         }\n     }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n+    bool isSettingIgnored(const std::string& name) override\n+    {\n+        bool ignored = false;\n+        gArgs.LockSettings([&](util::Settings& settings) {\n+            if (auto* options = util::FindKey(settings.command_line_options, name)) {\n+                ignored = !options->empty();\n+            }\n+        });\n+        return ignored;\n+    }\n+    util::SettingsValue getPersistentSetting(const std::string& name) override { return gArgs.GetPersistentSetting(name); }\n+    void updateSetting(const std::string& name, const util::SettingsValue& value) override\n+    {\n+        gArgs.LockSettings([&](util::Settings& settings) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15936#discussion_r879597046",
      "id" : 879597046,
      "in_reply_to_id" : 878685831,
      "line" : 128,
      "node_id" : "PRRC_kwDOABII5840bZX2",
      "original_commit_id" : "e58b932f58427ae959be5be14689bc67865a7fae",
      "original_line" : 128,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/node/interfaces.cpp",
      "position" : 17,
      "pull_request_review_id" : 981980050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15936",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/879597046/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-23T15:35:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/879597046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
