[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16451](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16451.html) (Remove CMerkleTx by jnewbery)\n* [#16341](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16341.html) (Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes) by achow101)\n* [#15931](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15931.html) (Remove GetDepthInMainChain dependency on locked chain interface by ariard)\n* [#15709](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15709.html) (Do not add setting as unknown by Bushstar)\n* [#9381](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/9381.html) (Remove CWalletTx merging logic from AddToWallet by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-07-27T22:25:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515717703",
      "id" : 515717703,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16475",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNTcxNzcwMw==",
      "updated_at" : "2019-07-27T22:25:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/515717703",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. This seems like an improvement to code self-documentation.\r\n\r\nI think this would be even more helpful if the `DBKeys` namespace had documentation for each of the keys and what they're used for.\r\n\r\nWe could go further and change this to an enum, which would ensure that only known keys are read/written, and would allow us to tidy the long sequence of if-else statments in `ReadKeyValue()` into a switch statement.",
      "created_at" : "2019-07-28T19:14:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515787564",
      "id" : 515787564,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16475",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNTc4NzU2NA==",
      "updated_at" : "2019-07-28T19:14:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/515787564",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308018873"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16475"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308018873"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fa6f22bf44c0f741285f27f27ac18e9679802e5e\r\n\r\nCould go further and just implement `Unserialize`?",
      "commit_id" : "fa6f22bf44c0f741285f27f27ac18e9679802e5e",
      "created_at" : "2019-07-28T21:22:50Z",
      "diff_hunk" : "@@ -676,23 +676,18 @@ class COutput\n     }\n };\n \n-/** Private key that includes an expiration date in case it never gets used. */\n-class CWalletKey\n-{\n-public:\n+/** Private key that was serialized by an old wallet (only used for deserialization) */\n+struct OldKey {\n     CPrivKey vchPrivKey;\n-    int64_t nTimeCreated;\n-    int64_t nTimeExpires;\n-    std::string strComment;\n-    // todo: add something to note what created it (user, getnewaddress, change)\n-    //   maybe should have a map<string, string> property map\n-\n-    explicit CWalletKey(int64_t nExpires=0);\n-\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308018873",
      "id" : 308018873,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODAxODg3Mw==",
      "original_commit_id" : "fa6f22bf44c0f741285f27f27ac18e9679802e5e",
      "original_position" : 22,
      "path" : "src/wallet/wallet.h",
      "position" : 22,
      "pull_request_review_id" : 267523114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16475",
      "updated_at" : "2019-07-28T21:35:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308018873",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308204789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16475"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308204789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I kept the changes to a minimum. Happy to add a commit for this, if other think it is useful.",
      "commit_id" : "fa6f22bf44c0f741285f27f27ac18e9679802e5e",
      "created_at" : "2019-07-29T12:36:40Z",
      "diff_hunk" : "@@ -676,23 +676,18 @@ class COutput\n     }\n };\n \n-/** Private key that includes an expiration date in case it never gets used. */\n-class CWalletKey\n-{\n-public:\n+/** Private key that was serialized by an old wallet (only used for deserialization) */\n+struct OldKey {\n     CPrivKey vchPrivKey;\n-    int64_t nTimeCreated;\n-    int64_t nTimeExpires;\n-    std::string strComment;\n-    // todo: add something to note what created it (user, getnewaddress, change)\n-    //   maybe should have a map<string, string> property map\n-\n-    explicit CWalletKey(int64_t nExpires=0);\n-\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308204789",
      "id" : 308204789,
      "in_reply_to_id" : 308018873,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODIwNDc4OQ==",
      "original_commit_id" : "fa6f22bf44c0f741285f27f27ac18e9679802e5e",
      "original_position" : 22,
      "path" : "src/wallet/wallet.h",
      "position" : 22,
      "pull_request_review_id" : 267751750,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16475",
      "updated_at" : "2019-07-29T12:36:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308204789",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> why not use an enum\r\n\r\nThe underlying type on an enum in cpp can only be integer, not `std::string`.\r\n\r\nI could switch it to an enum and then add helper methods for `std::string -> enum` and `enum -> std::string`, but I don't see the benefit.\r\n\r\n> We could go further and change this to an enum, which would ensure that only known keys are read/written\r\n\r\nI don't understand how this would prevent anyone from inlining a string literal (bypassing the enum).",
      "created_at" : "2019-07-29T13:08:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515984039",
      "id" : 515984039,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16475",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNTk4NDAzOQ==",
      "updated_at" : "2019-07-29T13:08:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/515984039",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> and would allow us to tidy the long sequence of if-else statments in ReadKeyValue() into a switch statement.\r\n\r\nYou'd still have to do the if-else statements elsewhere, so I don't see the benefit. I know a log(N) map lookup would also work, but I think the computational complexity shouldn't be a concern here.",
      "created_at" : "2019-07-29T13:11:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515985121",
      "id" : 515985121,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16475",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNTk4NTEyMQ==",
      "updated_at" : "2019-07-29T13:11:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/515985121",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK fa6f22bf44c0f741285f27f27ac18e9679802e5e, I'm a big fan of this kind of change as it prevents typos, which can happen with 'magic' strings in the code.",
      "created_at" : "2019-07-29T13:31:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515992131",
      "id" : 515992131,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16475",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNTk5MjEzMQ==",
      "updated_at" : "2019-07-29T13:31:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/515992131",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't understand how this would prevent anyone from inlining a string literal (bypassing the enum).\r\n\r\nThe idea would be to change `WriteIC` and `EraseIC` to take the enum rather than a string.\r\n\r\nChanging this to an enum was a suggested follow-up. This PR is a useful change by itself.",
      "created_at" : "2019-07-29T13:50:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-515999624",
      "id" : 515999624,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16475",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNTk5OTYyNA==",
      "updated_at" : "2019-07-29T13:50:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/515999624",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308244486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16475"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308244486"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(maybe for a followup) I think it would be better to define a const set of the types that are unused but kept around to avoid triggering unknown record warnings. Then we could change this if to be checking membership in that set.",
      "commit_id" : "fa6f22bf44c0f741285f27f27ac18e9679802e5e",
      "created_at" : "2019-07-29T13:58:03Z",
      "diff_hunk" : "@@ -386,33 +387,27 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: LoadCScript failed\";\n                 return false;\n             }\n-        }\n-        else if (strType == \"orderposnext\")\n-        {\n+        } else if (strType == DBKeys::ORDERPOSNEXT) {\n             ssValue >> pwallet->nOrderPosNext;\n-        }\n-        else if (strType == \"destdata\")\n-        {\n+        } else if (strType == DBKeys::DESTDATA) {\n             std::string strAddress, strKey, strValue;\n             ssKey >> strAddress;\n             ssKey >> strKey;\n             ssValue >> strValue;\n             pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n-        }\n-        else if (strType == \"hdchain\")\n-        {\n+        } else if (strType == DBKeys::HDCHAIN) {\n             CHDChain chain;\n             ssValue >> chain;\n             pwallet->SetHDChain(chain, true);\n-        } else if (strType == \"flags\") {\n+        } else if (strType == DBKeys::FLAGS) {\n             uint64_t flags;\n             ssValue >> flags;\n             if (!pwallet->SetWalletFlags(flags, true)) {\n                 strErr = \"Error reading wallet database: Unknown non-tolerable wallet flags found\";\n                 return false;\n             }\n-        } else if (strType != \"bestblock\" && strType != \"bestblock_nomerkle\" &&\n-                strType != \"minversion\" && strType != \"acentry\" && strType != \"version\") {\n+        } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308244486",
      "id" : 308244486,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODI0NDQ4Ng==",
      "original_commit_id" : "fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f",
      "original_position" : 359,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 361,
      "pull_request_review_id" : 267800722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16475",
      "updated_at" : "2019-07-29T13:59:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308244486",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308244845"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16475"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308244845"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(maybe for a followup) I think it would be better to define a const set of the types that are keys. Then we could change this function to be returning membership in that set.",
      "commit_id" : "fa6f22bf44c0f741285f27f27ac18e9679802e5e",
      "created_at" : "2019-07-29T13:58:41Z",
      "diff_hunk" : "@@ -431,8 +426,8 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n bool WalletBatch::IsKeyType(const std::string& strType)\n {\n-    return (strType== \"key\" || strType == \"wkey\" ||\n-            strType == \"mkey\" || strType == \"ckey\");\n+    return (strType == DBKeys::KEY || strType == DBKeys::OLD_KEY ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#discussion_r308244845",
      "id" : 308244845,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODI0NDg0NQ==",
      "original_commit_id" : "fa6dc7fa5fdfd76c6dd5f7ae693a2fb4e37e271f",
      "original_position" : 370,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 372,
      "pull_request_review_id" : 267800722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16475",
      "updated_at" : "2019-07-29T13:59:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308244845",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the plethora of suggestions of follow-up refactorings. To not invalidate the ACKs and to not scope creep this change, which should be minimal, but still an improvement, I will leave them for later.",
      "created_at" : "2019-07-29T22:38:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16475#issuecomment-516188836",
      "id" : 516188836,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16475",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNjE4ODgzNg==",
      "updated_at" : "2019-07-29T22:38:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516188836",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
