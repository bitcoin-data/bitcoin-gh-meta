[
   {
      "author_association" : "MEMBER",
      "body" : "I managed to install a newer version of gdb (just `pkg install gdb` really), which valiantly generates a stack trace...\n\n```\n#0  0x000000000103d710 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__insert_node_at(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*) (__parent=<optimized out>, __child=<optimized out>, \n    __new_node=<optimized out>, this=<optimized out>, __parent=<optimized out>, __child=<optimized out>, __new_node=<optimized out>) at /usr/include/c++/v1/__tree:1715\n#1  std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__node_insert_unique(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, void*>*) (\n    this=<optimized out>, this=<optimized out>, __nd=<optimized out>) at /usr/include/c++/v1/__tree:1928\n#2  std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__insert_unique<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > >(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >&&) (this=0x130a358 <benchmark::BenchRunner::benchmarks>, __v=<optimized out>)\n    at /usr/include/c++/v1/__tree:1805\n#3  0x000000000103c149 in benchmark::BenchRunner::BenchRunner (this=<optimized out>, name=..., func=...) at /usr/local/include/boost/function/function_template.hpp:909\n#4  0x000000000103f287 in global constructors keyed to a ()\n#5  0x00000000010d5752 in __do_global_ctors_aux ()\n#6  0x000000000103b1d6 in _init ()\n```\n\nI have the feeling is is as useless as it is intimidating, though. Will get one without optimization.\n",
      "created_at" : "2016-10-13T06:36:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/8910#issuecomment-253426785",
      "id" : 253426785,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8910",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI1MzQyNjc4NQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/253426785/reactions"
      },
      "updated_at" : "2016-10-13T06:36:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/253426785",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\n#0  0x0000000001042096 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__insert_node_at(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*) (this=0x13ac378 <benchmark::BenchRunner::benchmarks>, \n    __parent=0x13ac380 <benchmark::BenchRunner::benchmarks+8>, __child=@0x13ac380: 0x804431080, __new_node=0x804431080) at /usr/include/c++/v1/__tree:1715\n#1  0x0000000001040ea4 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__node_insert_unique(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, void*>*) (this=0x13ac378 <benchmark::BenchRunner::benchmarks>, __nd=0x804431080) at /usr/include/c++/v1/__tree:1928\n#2  0x000000000104009c in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__insert_unique<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > >(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >&&) (this=0x13ac378 <benchmark::BenchRunner::benchmarks>, \n    __v=<unknown type in /usr/home/user/bitcoin/src/bench/bench_bitcoin, CU 0x3857, DIE 0xc501>) at /usr/include/c++/v1/__tree:1805\n#3  0x000000000103cfa8 in benchmark::BenchRunner::BenchRunner (this=0x13ac3d8 <bench_54Base58Encode>, name=..., func=...) at /usr/include/c++/v1/utility:308\n```\n\nThat didn't really help, except that we can see that at least the _this_ pointers aren't 0.\n\nAdding an \"upstream\" tag. It's becoming clear at least that this is an upstream bug. Whether in the compiler or boost is not apparent to me.\n",
      "created_at" : "2016-10-13T06:51:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/8910#issuecomment-253429014",
      "id" : 253429014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8910",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI1MzQyOTAxNA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/253429014/reactions"
      },
      "updated_at" : "2016-10-13T06:51:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/253429014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj looks like boost::function indeed has some static init races: https://github.com/boostorg/function/blob/develop/include/boost/function/function_template.hpp#L931\n\nDoes https://github.com/theuni/bitcoin/commit/69cb789c19733904e9023fb87d35df27ce5fd6ae fix the problem, by any chance?\n",
      "created_at" : "2016-10-24T18:15:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/8910#issuecomment-255821117",
      "id" : 255821117,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8910",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI1NTgyMTExNw==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/255821117/reactions"
      },
      "updated_at" : "2016-10-24T18:15:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/255821117",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks!\nBut unfortunately no, with that patch it still segfaults:\n\n```\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000001074fe6 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::function<void (benchmark::State&)> > > >::__insert_node_at(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*) (this=0x1d23e78 <benchmark::BenchRunner::benchmarks>, __parent=0x1d23e80 <benchmark::BenchRunner::benchmarks+8>, \n    __child=@0x1d23e80: 0x805187080, __new_node=0x805187080) at /usr/include/c++/v1/__tree:1715\n1715        if (__begin_node()->__left_ != nullptr)\n...\n#3  0x0000000001071678 in benchmark::BenchRunner::BenchRunner (this=0x1d23fe0 <bench_62CoinSelection>, name=..., func=...)\n    at /usr/include/c++/v1/utility:308\n#4  0x000000000109ddfd in __cxx_global_var_init12 () at bench/coin_selection.cpp:62\n#5  0x000000000109eba5 in global constructors keyed to a () at ./bench/coin_selection.cpp:355\n#6  0x000000000195dc72 in __do_global_ctors_aux ()\n#7  0x000000000106ec3e in _init ()\n#8  0x00007fffffffe050 in ?? ()\n#9  0x0000000801d16a9f in ?? () from /libexec/ld-elf.so.1\n#10 0x0000000801d160ee in ?? () from /libexec/ld-elf.so.1\n#11 0x0000000801d14439 in ?? () from /libexec/ld-elf.so.1\n#12 0x0000000000000000 in ?? ()`\n```\n",
      "created_at" : "2016-10-24T18:39:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/8910#issuecomment-255827766",
      "id" : 255827766,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8910",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI1NTgyNzc2Ng==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/255827766/reactions"
      },
      "updated_at" : "2016-10-24T18:39:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/255827766",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think this is an upstream bug.\n\nThe `BENCHMARK` macro is used at namespace scope, so the `BenchRunner` variables it declares (in various files) have static storage duration. `BenchRunner`'s ctor requires `benchmarks` to have been initialized, but `benchmarks` is also a static variable. Initialization order of static variables declared in different translation units is unspecified. This would only work for compilers that happen to perform the initializations from `bench.cpp` (including initializing `benchmarks`) before the initializations of any translation unit that initializes `BenchRunner`s.\n",
      "created_at" : "2016-10-26T22:12:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/8910#issuecomment-256492709",
      "id" : 256492709,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8910",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI1NjQ5MjcwOQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/256492709/reactions"
      },
      "updated_at" : "2016-10-26T22:12:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/256492709",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1047859?v=4",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "node_id" : "MDQ6VXNlcjEwNDc4NTk=",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Yes, would probably be better to just add a list of benchmarks in `bench.cpp` and skip on the boost magic completely.\n",
      "created_at" : "2016-10-27T06:58:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/8910#issuecomment-256562129",
      "id" : 256562129,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8910",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI1NjU2MjEyOQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/256562129/reactions"
      },
      "updated_at" : "2016-10-27T06:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/256562129",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Still the case as of `FreeBSD 11.0-RELEASE-p2` with current master, boost 1_63.\r\nAlso fails on `OpenBSD 6.0`.",
      "created_at" : "2017-02-07T13:36:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/8910#issuecomment-278001303",
      "id" : 278001303,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8910",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI3ODAwMTMwMw==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278001303/reactions"
      },
      "updated_at" : "2017-02-07T14:26:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278001303",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
