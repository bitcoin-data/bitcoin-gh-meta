{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Arm Pointer Authentication (PAC) is a method of hardening code from Return Oriented Programming (ROP) attacks. It uses a tag in a pointer to sign and verify pointers. Branch Target Identification (BTI) is another code hardening method, where the branch/jump target is identified with a special landing pad instruction. Outside of some system support in glibc+kernel, packages gain the additional hardening by compiling with the `-mbranch-protection=flag` available in recent versions of GCC. In particular [-mbranch-protection=standard](https://gcc.gnu.org/onlinedocs/gcc-9.1.0/gcc/AArch64-Options.html) enables both BTI and PAC, with backwards compatible to `armv8.0` code sequences that activate on `v8.3` (PAC) & `v8.5` (BTI) enabled Arm machines. ([taken from Fedora](https://fedoraproject.org/wiki/Changes/Aarch64_PointerAuthentication)). \r\n\r\nRequirements for building/running with these features:\r\n* Compiler support for `-mbranch-protection=` flag:\r\n    * Introduced in GCC 9.1 (our minimum required is 8). GCC 8 has a (now deprecated) `msign-return-address` flag.\r\n    * Introduced in Clang 8  (our minimum required is 7).\r\n* (maybe) Linker support for `-force-bti` && `-pac-plt`:\r\n    * binutils ld has supported both since it's [2.33.1 release](https://lists.gnu.org/archive/html/info-gnu/2019-10/msg00006.html).\r\n    * LLVM 9 lld had a `--pac-plt`, which became `-z,pac-plt` in LLVM 10. [More info](https://developer.arm.com/tools-and-software/open-source-software/developer-tools/llvm-toolchain/pointer-authentication).\r\n* TODO: Kernel / runtime requirements?\r\n\r\nCreation of a BTI enabled binary also requires that everything being linked in be BTI enabled. This means you currently cannot, for example, cross-compile using a Ubuntu based aarch64 toolchain, if you're wanting to use this feature. This can be shown using `-Wl,z,force-bti`, which will emit warnings for linked objects that are not BTI enabled (this is used in configure to detect when to disable using the flags). i.e:\r\n```cpp\r\nint main() { return 0; }\r\n```\r\n\r\n```bash\r\n# gcc version 9.3.0 (Ubuntu 9.3.0-17ubuntu1~20.04)\r\naarch64-linux-gnu-g++ test.cpp -mbranch-protection=standard -Wl,-z,force-bti\r\n/usr/lib/gcc-cross/aarch64-linux-gnu/9/../../../../aarch64-linux-gnu/bin/ld: /usr/lib/gcc-cross/aarch64-linux-gnu/9/../../../../aarch64-linux-gnu/lib/../lib/Scrt1.o: warning: BTI turned on by -z force-bti when all inputs do not have BTI in NOTE section.\r\n/usr/lib/gcc-cross/aarch64-linux-gnu/9/../../../../aarch64-linux-gnu/bin/ld: /usr/lib/gcc-cross/aarch64-linux-gnu/9/../../../../aarch64-linux-gnu/lib/../lib/crti.o: warning: BTI turned on by -z force-bti when all inputs do not have BTI in NOTE section.\r\n/usr/lib/gcc-cross/aarch64-linux-gnu/9/../../../../aarch64-linux-gnu/bin/ld: /usr/lib/gcc-cross/aarch64-linux-gnu/9/crtbeginS.o: warning: BTI turned on by -z force-bti when all inputs do not have BTI in NOTE section.\r\n/usr/lib/gcc-cross/aarch64-linux-gnu/9/../../../../aarch64-linux-gnu/bin/ld: /usr/aarch64-linux-gnu/lib/libc_nonshared.a(elf-init.oS): warning: BTI turned on by -z force-bti when all inputs do not have BTI in NOTE section.\r\n/usr/lib/gcc-cross/aarch64-linux-gnu/9/../../../../aarch64-linux-gnu/bin/ld: /usr/lib/gcc-cross/aarch64-linux-gnu/9/crtendS.o: warning: BTI turned on by -z force-bti when all inputs do not have BTI in NOTE section.\r\n/usr/lib/gcc-cross/aarch64-linux-gnu/9/../../../../aarch64-linux-gnu/bin/ld: /usr/lib/gcc-cross/aarch64-linux-gnu/9/../../../../aarch64-linux-gnu/lib/../lib/crtn.o: warning: BTI turned on by -z force-bti when all inputs do not have BTI in NOTE section.\r\n```\r\n\r\nHowever, if you compile on a system where the toolchain has been built with the additional hardening, i.e [Fedora 33 and onwards](https://fedoraproject.org/wiki/Security_Features_Matrix):\r\n```bash\r\n# gcc version 11.2.1 20210728 (Red Hat 11.2.1-1) (GCC)\r\naarch64-redhat-linux-g++ test.cpp -mbranch-protection=standard -Wl,-z,force-bti\r\n...\r\n# readelf -n a.out \r\n\r\nDisplaying notes found in: .note.gnu.property\r\n  Owner                Data size \tDescription\r\n  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\r\n      Properties: AArch64 feature: BTI, PAC\r\n```\r\n\r\nNote the BTI and PAC properties. More about Fedora use of `-mbranch-protection=standard` by throughout it's packages can be seen in the rpc repos. i.e:\r\n[Part of the base compiler flags for aarch64](https://src.fedoraproject.org/rpms/redhat-rpm-config/blob/rawhide/f/rpmrc#_77) && [Used by default when building glibc](https://src.fedoraproject.org/rpms/glibc/blob/rawhide/f/glibc.spec#_1090).\r\n\r\nI've built and tested binaries on an aarch64 machine, (Neoverse-N1, Armv8.2-A) running Fedora 34.\r\n\r\n```bash\r\nmake -C depends/ -j5 NO_QT=1 NO_WALLET=1 NO_ZMQ=1 NO_UPNP=1 NO_NATPMP=1\r\n./autogen.sh\r\nCONFIG_SITE=/home/fedora/bitcoin/depends/aarch64-unknown-linux-gnu/share/config.site ./configure\r\nmake -j9\r\n...\r\n/usr/bin/ld: secp256k1/.libs/libsecp256k1.a(libsecp256k1_la-secp256k1.o): warning: BTI turned on by -z force-bti when all inputs do not have BTI in NOTE section.\r\n/usr/bin/ld: secp256k1/.libs/libsecp256k1.a(libsecp256k1_la-secp256k1.o): warning: BTI turned on by -z force-bti when all inputs do not have BTI in NOTE section.\r\n```\r\n\r\nUnit and functional tests pass. Note section contains (not no PAC):\r\n```bash\r\nreadelf -n src/bitcoind\r\n...\r\n  Owner                Data size \tDescription\r\n  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\r\n      Properties: AArch64 feature: BTI\r\n```\r\n\r\nI am running a sync with `-assumevalid=0`. However given that this machine does not support PAC or BTI, as it's `Armv8.2`, I'll have to find some newer aarch64 hardware to test other things on. Although this is still a demonstration that the PAC / BTI instructions are nops when running on older hardware.\r\n\r\nFurther reading:\r\nhttps://fedoraproject.org/wiki/Changes/Aarch64_PointerAuthentication\r\nhttps://developer.arm.com/documentation/102433/latest/Return-oriented-programming\r\nhttps://lwn.net/Articles/789370/\r\n\r\nRelated to #19075. Still a WIP. Haven't looked at anything similar for arm64 (M1).",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24123/comments",
   "created_at" : "2022-01-21T13:43:03Z",
   "draft" : true,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24123/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/24123",
   "id" : 1110485614,
   "labels" : [
      {
         "color" : "770000",
         "default" : false,
         "description" : null,
         "id" : 234878,
         "name" : "Linux/Unix",
         "node_id" : "MDU6TGFiZWwyMzQ4Nzg=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Linux/Unix"
      },
      {
         "color" : "5319e7",
         "default" : false,
         "description" : null,
         "id" : 61889416,
         "name" : "Build system",
         "node_id" : "MDU6TGFiZWw2MTg4OTQxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24123/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII584xYoWv",
   "number" : 24123,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/24123.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24123",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/24123.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24123"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24123/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24123/timeline",
   "title" : "[POC] build: enable Pointer Authentication and Branch Target Identification for aarch64 (Linux)",
   "updated_at" : "2022-01-21T13:43:03Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24123",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   }
}
