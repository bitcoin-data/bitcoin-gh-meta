[
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for reviewing!\r\n\r\n> From a practical perspective, I wonder if this change (or changes like it) would see a performance gain, or if the goal is more about clean code.\r\n\r\nI think the goal is to remove any unneeded locks for performance, while using locks where needed for thread safety. If you launch bitcoind with `debug=lock` (or run `bitcoin-cli logging [] '[\"lock\"]'` on a bitcoind instance) you'll see how much time is spent in lock contention, and in some cases it is significant. Even in faster or non-hotspot cases, taking a lock, if contended, isn't particularly cheap so it seems best to not do so needlessly.\r\n\r\n> I also wonder if it is will result in future changes that are sub-optimal. What are the odds that something will want to call this function in the future that is not already locking cs_main?\r\n\r\nIn this case, thanks to the thread safety annotation the compiler would give a warning, and the run-time assertion may be hit, both of which would serve to warn that a missing lock is needed. At this time, however, `LoadBlockIndexGuts()` only has one caller in the codebase.\r\n\r\nMore information about Clang thread safety analysis, if helpful:\r\n    - https://clang.llvm.org/docs/ThreadSafetyAnalysis.html\r\n    - https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#lockingmutex-usage-notes\r\n    - https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#threads-and-synchronization",
      "created_at" : "2022-01-30T16:06:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24197#issuecomment-1025175163",
      "id" : 1025175163,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24197",
      "node_id" : "IC_kwDOABII5849Gu57",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1025175163/reactions"
      },
      "updated_at" : "2022-01-31T12:43:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1025175163",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the response @jonatack completely agree with minimizing the time spent in critical sections (and doing so saftely)\r\n\r\nI have a few questions if you'd be so kind :)\r\n\r\nHow expensive is locking a RecursiveMutex, if the same thread already has acquired it? Is it the same cost as acquiring an unlocked recursive mutex, or basically a no-op?\r\n\r\nMy concern is not a future caller would trigger a data-race / thread insafety, the annotations / assertions prevent that. My question is more along the line of, if we introduce a call in the future in some function `WITH_LOCK(::cs_main, LoadBlockIndexGuts...);` then the scope of the cs_main lock will be broader than needed correct? IE, inside of LoadBlockIndexGuts, only four lines required the cs_main lock, but we were forced to lock cs_main for the entire function call. Does that make sense?\r\n\r\nThanks",
      "created_at" : "2022-01-31T07:22:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24197#issuecomment-1025447820",
      "id" : 1025447820,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24197",
      "node_id" : "IC_kwDOABII5849HxeM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1025447820/reactions"
      },
      "updated_at" : "2022-01-31T07:22:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1025447820",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This is only called once in init, which already holds cs_main. It doesn't really make sense to call this anywhere in a hot loop",
      "created_at" : "2022-01-31T07:41:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24197#issuecomment-1025457605",
      "id" : 1025457605,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24197",
      "node_id" : "IC_kwDOABII5849Hz3F",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1025457605/reactions"
      },
      "updated_at" : "2022-01-31T07:41:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1025457605",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@PastaPastaPasta if you'd like to dive deeper, have a look at `src/sync.{h,cpp}`, https://preshing.com/20111118/locks-arent-slow-lock-contention-is/, and maybe the other links in https://github.com/bitcoin/bitcoin/pull/22736#issuecomment-902851054. I updated my reply above to mention contention. There are also system calls, memory/cache coherency and fences, and wait queues, for example, in addition to lock contentions.",
      "created_at" : "2022-01-31T12:45:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24197#issuecomment-1025702467",
      "id" : 1025702467,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24197",
      "node_id" : "IC_kwDOABII5849IvpD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1025702467/reactions"
      },
      "updated_at" : "2022-01-31T12:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1025702467",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
