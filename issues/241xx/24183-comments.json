[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r794440465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794440465"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "There is a whitespace here, you have to remove it to pass the linter.",
      "commit_id" : "f2d7c82abff5185b0f3883559ae9002e31b128bf",
      "created_at" : "2022-01-28T11:54:22Z",
      "diff_hunk" : "@@ -52,73 +48,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             self.log.debug('Preparing transaction #{}...'.format(i))\n             # Prepare inputs.\n             if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+                parent_utxo = miniwallet.get_utxo()\n             else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n+                parent_utxo = miniwallet.get_utxo(txid=tx_id[i-1]['txid'])\n \n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n+            tx = miniwallet.send_self_transfer(from_node=node, utxo_to_spend=parent_utxo, sequence=SEQUENCE_FINAL)\n+            tx_id.append(tx)\n \n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getmempoolentry(tx_id[-1])['vsize'])\n+            vsize = node.getrawmempool(True)[tx['txid']]['vsize']\n+            tx_size.append(vsize)\n \n+            tx_count = i + 1\n             if tx_count in n_tx_to_mine:\n                 # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.generate(self.nodes[0], 1)[0]\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n+                block_hash = self.generate(node, 1)[0]\n                 if not first_block_hash:\n                     first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n             elif tx_count == size:\n                 # At the end all of the mined blocks are invalidated, and all of the created\n                 # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n+                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n                 start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n+                node.invalidateblock(first_block_hash)\n                 end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n+                assert_equal(len(node.getrawmempool()), size)\n                 self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n \n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n         for k, tx in enumerate(tx_id):\n             self.log.debug('Check transaction #{}.'.format(k))\n-            entry = self.nodes[0].getmempoolentry(tx)\n+            entry = node.getrawmempool(True)[tx['txid']]\n             assert_equal(entry['descendantcount'], size - k)\n             assert_equal(entry['descendantsize'], sum(tx_size[k:size]))\n             assert_equal(entry['ancestorcount'], k + 1)\n             assert_equal(entry['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n         # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        self.transaction_list_test(size=100, n_tx_to_mine=[25, 50, 75])\n \n \n if __name__ == '__main__':\n     MempoolUpdateFromBlockTest().main()\n+    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r794440465",
      "id" : 794440465,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584vWjMR",
      "original_commit_id" : "f2d7c82abff5185b0f3883559ae9002e31b128bf",
      "original_line" : 96,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 138,
      "pull_request_review_id" : 866050227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794440465/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-28T11:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794440465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r794919813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794919813"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks. Fixed. Don't know why the linter now complains about the spelling errors in unchanged files.\r\n\r\n^---- failure generated from test/lint/lint-python.sh\r\nsrc/random.h:92: occuring ==> occurring\r\nsrc/rpc/blockchain.cpp:794: nWe ==> new\r\nsrc/util/syscall_sandbox.cpp:128: creat ==> create\r\ntest/functional/data/rpc_decodescript.json:81: ba ==> by, be\r\ntest/functional/data/rpc_decodescript.json:84: ba ==> by, be\r\n^ Warning: codespell identified likely spelling errors. Any false positives? Add them to the list of ignored words in test/lint/lint-spelling.ignore-words.txt",
      "commit_id" : "47e8d66dc61d53632445d4bdbf4cee588884ce3d",
      "created_at" : "2022-01-28T22:06:20Z",
      "diff_hunk" : "@@ -52,73 +48,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             self.log.debug('Preparing transaction #{}...'.format(i))\n             # Prepare inputs.\n             if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+                parent_utxo = miniwallet.get_utxo()\n             else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n+                parent_utxo = miniwallet.get_utxo(txid=tx_id[i-1]['txid'])\n \n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n+            tx = miniwallet.send_self_transfer(from_node=node, utxo_to_spend=parent_utxo, sequence=SEQUENCE_FINAL)\n+            tx_id.append(tx)\n \n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getmempoolentry(tx_id[-1])['vsize'])\n+            vsize = node.getrawmempool(True)[tx['txid']]['vsize']\n+            tx_size.append(vsize)\n \n+            tx_count = i + 1\n             if tx_count in n_tx_to_mine:\n                 # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.generate(self.nodes[0], 1)[0]\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n+                block_hash = self.generate(node, 1)[0]\n                 if not first_block_hash:\n                     first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n             elif tx_count == size:\n                 # At the end all of the mined blocks are invalidated, and all of the created\n                 # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n+                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n                 start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n+                node.invalidateblock(first_block_hash)\n                 end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n+                assert_equal(len(node.getrawmempool()), size)\n                 self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n \n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n         for k, tx in enumerate(tx_id):\n             self.log.debug('Check transaction #{}.'.format(k))\n-            entry = self.nodes[0].getmempoolentry(tx)\n+            entry = node.getrawmempool(True)[tx['txid']]\n             assert_equal(entry['descendantcount'], size - k)\n             assert_equal(entry['descendantsize'], sum(tx_size[k:size]))\n             assert_equal(entry['ancestorcount'], k + 1)\n             assert_equal(entry['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n         # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        self.transaction_list_test(size=100, n_tx_to_mine=[25, 50, 75])\n \n \n if __name__ == '__main__':\n     MempoolUpdateFromBlockTest().main()\n+    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r794919813",
      "id" : 794919813,
      "in_reply_to_id" : 794440465,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vYYOF",
      "original_commit_id" : "f2d7c82abff5185b0f3883559ae9002e31b128bf",
      "original_line" : 96,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 866751751,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794919813/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-28T22:06:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794919813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r794921510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794921510"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Cool, now you should squash the commits. See: https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits",
      "commit_id" : "47e8d66dc61d53632445d4bdbf4cee588884ce3d",
      "created_at" : "2022-01-28T22:10:07Z",
      "diff_hunk" : "@@ -52,73 +48,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             self.log.debug('Preparing transaction #{}...'.format(i))\n             # Prepare inputs.\n             if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+                parent_utxo = miniwallet.get_utxo()\n             else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n+                parent_utxo = miniwallet.get_utxo(txid=tx_id[i-1]['txid'])\n \n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n+            tx = miniwallet.send_self_transfer(from_node=node, utxo_to_spend=parent_utxo, sequence=SEQUENCE_FINAL)\n+            tx_id.append(tx)\n \n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getmempoolentry(tx_id[-1])['vsize'])\n+            vsize = node.getrawmempool(True)[tx['txid']]['vsize']\n+            tx_size.append(vsize)\n \n+            tx_count = i + 1\n             if tx_count in n_tx_to_mine:\n                 # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.generate(self.nodes[0], 1)[0]\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n+                block_hash = self.generate(node, 1)[0]\n                 if not first_block_hash:\n                     first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n             elif tx_count == size:\n                 # At the end all of the mined blocks are invalidated, and all of the created\n                 # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n+                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n                 start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n+                node.invalidateblock(first_block_hash)\n                 end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n+                assert_equal(len(node.getrawmempool()), size)\n                 self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n \n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n         for k, tx in enumerate(tx_id):\n             self.log.debug('Check transaction #{}.'.format(k))\n-            entry = self.nodes[0].getmempoolentry(tx)\n+            entry = node.getrawmempool(True)[tx['txid']]\n             assert_equal(entry['descendantcount'], size - k)\n             assert_equal(entry['descendantsize'], sum(tx_size[k:size]))\n             assert_equal(entry['ancestorcount'], k + 1)\n             assert_equal(entry['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n         # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        self.transaction_list_test(size=100, n_tx_to_mine=[25, 50, 75])\n \n \n if __name__ == '__main__':\n     MempoolUpdateFromBlockTest().main()\n+    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r794921510",
      "id" : 794921510,
      "in_reply_to_id" : 794440465,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vYYom",
      "original_commit_id" : "f2d7c82abff5185b0f3883559ae9002e31b128bf",
      "original_line" : 96,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 866754135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794921510/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-28T22:10:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794921510",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r795100376"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/795100376"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks. Done.",
      "commit_id" : "934d09e023b22aaee4a0d066b9b8c5be357e190b",
      "created_at" : "2022-01-29T22:36:30Z",
      "diff_hunk" : "@@ -52,73 +48,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             self.log.debug('Preparing transaction #{}...'.format(i))\n             # Prepare inputs.\n             if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+                parent_utxo = miniwallet.get_utxo()\n             else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n+                parent_utxo = miniwallet.get_utxo(txid=tx_id[i-1]['txid'])\n \n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n+            tx = miniwallet.send_self_transfer(from_node=node, utxo_to_spend=parent_utxo, sequence=SEQUENCE_FINAL)\n+            tx_id.append(tx)\n \n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getmempoolentry(tx_id[-1])['vsize'])\n+            vsize = node.getrawmempool(True)[tx['txid']]['vsize']\n+            tx_size.append(vsize)\n \n+            tx_count = i + 1\n             if tx_count in n_tx_to_mine:\n                 # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.generate(self.nodes[0], 1)[0]\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n+                block_hash = self.generate(node, 1)[0]\n                 if not first_block_hash:\n                     first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n             elif tx_count == size:\n                 # At the end all of the mined blocks are invalidated, and all of the created\n                 # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n+                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n                 start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n+                node.invalidateblock(first_block_hash)\n                 end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n+                assert_equal(len(node.getrawmempool()), size)\n                 self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n \n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n         for k, tx in enumerate(tx_id):\n             self.log.debug('Check transaction #{}.'.format(k))\n-            entry = self.nodes[0].getmempoolentry(tx)\n+            entry = node.getrawmempool(True)[tx['txid']]\n             assert_equal(entry['descendantcount'], size - k)\n             assert_equal(entry['descendantsize'], sum(tx_size[k:size]))\n             assert_equal(entry['ancestorcount'], k + 1)\n             assert_equal(entry['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n         # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        self.transaction_list_test(size=100, n_tx_to_mine=[25, 50, 75])\n \n \n if __name__ == '__main__':\n     MempoolUpdateFromBlockTest().main()\n+    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r795100376",
      "id" : 795100376,
      "in_reply_to_id" : 794440465,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vZETY",
      "original_commit_id" : "f2d7c82abff5185b0f3883559ae9002e31b128bf",
      "original_line" : 96,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 867015360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/795100376/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-29T22:36:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/795100376",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r795104848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/795104848"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The problem of the linter now is \"test/functional/mempool_updatefromblock.py:12:1: F401 'decimal.Decimal' imported but unused\" - this PR removes all uses.",
      "commit_id" : "934d09e023b22aaee4a0d066b9b8c5be357e190b",
      "created_at" : "2022-01-29T23:39:24Z",
      "diff_hunk" : "@@ -52,73 +48,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             self.log.debug('Preparing transaction #{}...'.format(i))\n             # Prepare inputs.\n             if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+                parent_utxo = miniwallet.get_utxo()\n             else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n+                parent_utxo = miniwallet.get_utxo(txid=tx_id[i-1]['txid'])\n \n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n+            tx = miniwallet.send_self_transfer(from_node=node, utxo_to_spend=parent_utxo, sequence=SEQUENCE_FINAL)\n+            tx_id.append(tx)\n \n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getmempoolentry(tx_id[-1])['vsize'])\n+            vsize = node.getrawmempool(True)[tx['txid']]['vsize']\n+            tx_size.append(vsize)\n \n+            tx_count = i + 1\n             if tx_count in n_tx_to_mine:\n                 # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.generate(self.nodes[0], 1)[0]\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n+                block_hash = self.generate(node, 1)[0]\n                 if not first_block_hash:\n                     first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n             elif tx_count == size:\n                 # At the end all of the mined blocks are invalidated, and all of the created\n                 # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n+                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n                 start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n+                node.invalidateblock(first_block_hash)\n                 end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n+                assert_equal(len(node.getrawmempool()), size)\n                 self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n \n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n         for k, tx in enumerate(tx_id):\n             self.log.debug('Check transaction #{}.'.format(k))\n-            entry = self.nodes[0].getmempoolentry(tx)\n+            entry = node.getrawmempool(True)[tx['txid']]\n             assert_equal(entry['descendantcount'], size - k)\n             assert_equal(entry['descendantsize'], sum(tx_size[k:size]))\n             assert_equal(entry['ancestorcount'], k + 1)\n             assert_equal(entry['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n         # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        self.transaction_list_test(size=100, n_tx_to_mine=[25, 50, 75])\n \n \n if __name__ == '__main__':\n     MempoolUpdateFromBlockTest().main()\n+    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r795104848",
      "id" : 795104848,
      "in_reply_to_id" : 794440465,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vZFZQ",
      "original_commit_id" : "f2d7c82abff5185b0f3883559ae9002e31b128bf",
      "original_line" : 96,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 867018676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/795104848/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-29T23:39:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/795104848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Are you still working on this?",
      "created_at" : "2022-02-22T11:50:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#issuecomment-1047717086",
      "id" : 1047717086,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24183",
      "node_id" : "IC_kwDOABII584-cuTe",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047717086/reactions"
      },
      "updated_at" : "2022-02-22T11:50:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047717086",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Are you still working on this?\r\n\r\nYes. Read mzumsande's comment too quickly and didn't realize it was a request to change. Will fix soon.",
      "created_at" : "2022-02-27T14:12:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#issuecomment-1053567859",
      "id" : 1053567859,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24183",
      "node_id" : "IC_kwDOABII584-zCtz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1053567859/reactions"
      },
      "updated_at" : "2022-02-27T14:12:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1053567859",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "The linter problem is fixed.",
      "created_at" : "2022-02-28T02:40:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#issuecomment-1053817255",
      "id" : 1053817255,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24183",
      "node_id" : "IC_kwDOABII584-z_mn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1053817255/reactions"
      },
      "updated_at" : "2022-02-28T02:40:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1053817255",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r831907570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831907570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is this changed?",
      "commit_id" : "4b8eb3c7faaf6d1bf10aa55b0abe6f02c3b2e6ed",
      "created_at" : "2022-03-22T08:47:57Z",
      "diff_hunk" : "@@ -109,7 +81,7 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n         for k, tx in enumerate(tx_id):\n             self.log.debug('Check transaction #{}.'.format(k))\n-            entry = self.nodes[0].getmempoolentry(tx)\n+            entry = self.nodes[0].getrawmempool(True)[tx['txid']]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r831907570",
      "id" : 831907570,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xleby",
      "original_commit_id" : "203a3e065ecd0ec8a9fb84f4deb512ef2b66cdf7",
      "original_line" : 84,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 93,
      "pull_request_review_id" : 916851273,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831907570/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T08:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831907570",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r831907865"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831907865"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why does this need `SEQUENCE_FINAL`?",
      "commit_id" : "4b8eb3c7faaf6d1bf10aa55b0abe6f02c3b2e6ed",
      "created_at" : "2022-03-22T08:48:16Z",
      "diff_hunk" : "@@ -52,42 +49,17 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             self.log.debug('Preparing transaction #{}...'.format(i))\n             # Prepare inputs.\n             if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+                parent_utxo = miniwallet.get_utxo()\n             else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n+                parent_utxo = miniwallet.get_utxo(txid=tx_id[i-1]['txid'])\n \n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n+            tx = miniwallet.send_self_transfer(from_node=self.nodes[0], utxo_to_spend=parent_utxo, sequence=SEQUENCE_FINAL)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r831907865",
      "id" : 831907865,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xlegZ",
      "original_commit_id" : "203a3e065ecd0ec8a9fb84f4deb512ef2b66cdf7",
      "original_line" : 56,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 73,
      "pull_request_review_id" : 916851273,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831907865/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T08:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831907865",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r831908872"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831908872"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is this changed? (from getmempoolentry to getrawmempool)?",
      "commit_id" : "7be943f0813c2578b66dd628ddcb122745166556",
      "created_at" : "2022-03-22T08:49:19Z",
      "diff_hunk" : "@@ -52,42 +49,17 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             self.log.debug('Preparing transaction #{}...'.format(i))\n             # Prepare inputs.\n             if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+                parent_utxo = miniwallet.get_utxo()\n             else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n+                parent_utxo = miniwallet.get_utxo(txid=tx_id[i-1]['txid'])\n \n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n+            tx = miniwallet.send_self_transfer(from_node=self.nodes[0], utxo_to_spend=parent_utxo, sequence=SEQUENCE_FINAL)\n+            tx_id.append(tx)\n \n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getmempoolentry(tx_id[-1])['vsize'])\n+            vsize = self.nodes[0].getrawmempool(True)[tx['txid']]['vsize']",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r831908872",
      "id" : 831908872,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xlewI",
      "original_commit_id" : "203a3e065ecd0ec8a9fb84f4deb512ef2b66cdf7",
      "original_line" : 59,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 916851273,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831908872/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T09:06:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/831908872",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r832769942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832769942"
         }
      },
      "author_association" : "NONE",
      "body" : "Changed back to `getmempoolentry`.\r\n\r\nI chose `getrawmempool` over `getmempoolentry` to follow some existing functional test files. After a closer look at those two RPCs, I agree the existing `getmempoolentry` here is better as it indicates the \"query using a transaction id\" intention.",
      "commit_id" : "7be943f0813c2578b66dd628ddcb122745166556",
      "created_at" : "2022-03-23T01:54:42Z",
      "diff_hunk" : "@@ -109,7 +81,7 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n         for k, tx in enumerate(tx_id):\n             self.log.debug('Check transaction #{}.'.format(k))\n-            entry = self.nodes[0].getmempoolentry(tx)\n+            entry = self.nodes[0].getrawmempool(True)[tx['txid']]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r832769942",
      "id" : 832769942,
      "in_reply_to_id" : 831907570,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xow-W",
      "original_commit_id" : "203a3e065ecd0ec8a9fb84f4deb512ef2b66cdf7",
      "original_line" : 84,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 918080227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832769942/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-23T01:54:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832769942",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r832771023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832771023"
         }
      },
      "author_association" : "NONE",
      "body" : "Changed back to `getmempoolentry`.",
      "commit_id" : "7be943f0813c2578b66dd628ddcb122745166556",
      "created_at" : "2022-03-23T01:57:07Z",
      "diff_hunk" : "@@ -52,42 +49,17 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             self.log.debug('Preparing transaction #{}...'.format(i))\n             # Prepare inputs.\n             if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+                parent_utxo = miniwallet.get_utxo()\n             else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n+                parent_utxo = miniwallet.get_utxo(txid=tx_id[i-1]['txid'])\n \n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n+            tx = miniwallet.send_self_transfer(from_node=self.nodes[0], utxo_to_spend=parent_utxo, sequence=SEQUENCE_FINAL)\n+            tx_id.append(tx)\n \n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getmempoolentry(tx_id[-1])['vsize'])\n+            vsize = self.nodes[0].getrawmempool(True)[tx['txid']]['vsize']",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r832771023",
      "id" : 832771023,
      "in_reply_to_id" : 831908872,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xoxPP",
      "original_commit_id" : "203a3e065ecd0ec8a9fb84f4deb512ef2b66cdf7",
      "original_line" : 59,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 918081557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832771023/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-23T01:57:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832771023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r832789291"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832789291"
         }
      },
      "author_association" : "NONE",
      "body" : "Without `SEQUENCE_FINAL`, the test broke at `assert_equal(len(node.getrawmempool()), size)` after the first block is invalidated, as the mempool has 26 transactions instead of the expected 100.\r\n\r\nIn a simpler example with fewer transactions without `SEQUENCE_FINAL`, I can see after the block is invalidated, transactions are removed from the mempool because of this place: https://github.com/bitcoin/bitcoin/blob/f05cf59d91eb03857dd9bdcc77607764da0349d2/src/consensus/tx_verify.cpp#L53",
      "commit_id" : "7be943f0813c2578b66dd628ddcb122745166556",
      "created_at" : "2022-03-23T02:26:51Z",
      "diff_hunk" : "@@ -52,42 +49,17 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             self.log.debug('Preparing transaction #{}...'.format(i))\n             # Prepare inputs.\n             if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+                parent_utxo = miniwallet.get_utxo()\n             else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n-\n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n-\n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n+                parent_utxo = miniwallet.get_utxo(txid=tx_id[i-1]['txid'])\n \n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n+            tx = miniwallet.send_self_transfer(from_node=self.nodes[0], utxo_to_spend=parent_utxo, sequence=SEQUENCE_FINAL)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r832789291",
      "id" : 832789291,
      "in_reply_to_id" : 831907865,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584xo1sr",
      "original_commit_id" : "203a3e065ecd0ec8a9fb84f4deb512ef2b66cdf7",
      "original_line" : 56,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : null,
      "pull_request_review_id" : 918106401,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832789291/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-23T02:26:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832789291",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "You'll need to do the changes from yesterday in the first commit, not in the second.",
      "created_at" : "2022-03-23T08:42:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#issuecomment-1076093176",
      "id" : 1076093176,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24183",
      "node_id" : "IC_kwDOABII585AI-D4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076093176/reactions"
      },
      "updated_at" : "2022-03-23T08:42:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1076093176",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Fixed. Thank you @MarcoFalke.",
      "created_at" : "2022-03-25T16:10:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#issuecomment-1079178425",
      "id" : 1079178425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24183",
      "node_id" : "IC_kwDOABII585AUvS5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1079178425/reactions"
      },
      "updated_at" : "2022-03-25T16:10:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1079178425",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Can you explain why it is ok to \"flatten\" the tournament into a linked list?",
      "created_at" : "2022-03-30T14:32:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#issuecomment-1083215664",
      "id" : 1083215664,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24183",
      "node_id" : "IC_kwDOABII585AkI8w",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083215664/reactions"
      },
      "updated_at" : "2022-03-30T14:32:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083215664",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r841291638"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/841291638"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think these conditions hold true after this PR",
      "commit_id" : "72ad8add4c9523b6946e7fac5b45c5746c288e21",
      "created_at" : "2022-04-03T23:11:17Z",
      "diff_hunk" : "@@ -9,41 +9,36 @@\n \"\"\"\n import time\n \n-from decimal import Decimal\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n+from test_framework.messages import (\n+    SEQUENCE_FINAL,\n+)\n \n \n class MempoolUpdateFromBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-limitdescendantsize=1000', '-limitancestorsize=1000', '-limitancestorcount=100']]\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n-    def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', end_address='', fee=Decimal(0.00100000)):\n-        \"\"\"Create an acyclic tournament (a type of directed graph) of transactions and use it for testing.\n+    def transaction_list_test(self, size, n_tx_to_mine=None):\n+        \"\"\"Create a singly linked list of transactions and use it for testing.\n \n         Keyword arguments:\n-        size -- the order N of the tournament which is equal to the number of the created transactions\n+        size -- the number of the created transactions\n         n_tx_to_mine -- the number of transaction that should be mined into a block\n \n         If all of the N created transactions tx[0]..tx[N-1] reside in the mempool,\n         the following holds:\n             the tx[K] transaction:\n             - has N-K descendants (including this one), and\n             - has K+1 ancestors (including this one)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r841291638",
      "id" : 841291638,
      "line" : 36,
      "node_id" : "PRRC_kwDOABII584yJRd2",
      "original_commit_id" : "72ad8add4c9523b6946e7fac5b45c5746c288e21",
      "original_line" : 36,
      "original_position" : 35,
      "original_start_line" : 32,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 35,
      "pull_request_review_id" : 929733165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/841291638/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 32,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-03T23:43:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/841291638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK - I think this is a valuable test and it'll be good to update it so that it's not skipped when the wallet isn't compiled. My suggestion would be to minimize changes as much as possible to make it work w/ MiniWallet - and implementing this test as-is w/ MiniWallet will probably be difficult! But I think it'll be a good exercise, and I think MiniWallet can probably support what this test needs without any internal code changes to it (although I'm not totally sure bc I haven't looked at that code in a while)",
      "created_at" : "2022-04-03T23:47:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#issuecomment-1086976669",
      "id" : 1086976669,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24183",
      "node_id" : "IC_kwDOABII585AyfKd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1086976669/reactions"
      },
      "updated_at" : "2022-04-03T23:47:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1086976669",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thank you so much @mjdietzx for the review with the context and insights. I am changing this to draft status, to explore how to keep the graph structure.",
      "created_at" : "2022-04-07T00:57:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#issuecomment-1090970825",
      "id" : 1090970825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24183",
      "node_id" : "IC_kwDOABII585BBuTJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1090970825/reactions"
      },
      "updated_at" : "2022-04-07T00:57:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1090970825",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91135419?v=4",
         "events_url" : "https://api.github.com/users/pg156/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pg156/followers",
         "following_url" : "https://api.github.com/users/pg156/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pg156/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pg156",
         "id" : 91135419,
         "login" : "pg156",
         "node_id" : "MDQ6VXNlcjkxMTM1NDE5",
         "organizations_url" : "https://api.github.com/users/pg156/orgs",
         "received_events_url" : "https://api.github.com/users/pg156/received_events",
         "repos_url" : "https://api.github.com/users/pg156/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pg156/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pg156/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pg156"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25525](https://github.com/bitcoin/bitcoin/pull/25525) (test: remove wallet dependency  from mempool_updatefromblock.py by ayush933)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-07-02T04:50:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#issuecomment-1172834156",
      "id" : 1172834156,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24183",
      "node_id" : "IC_kwDOABII585F6Ads",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1172834156/reactions"
      },
      "updated_at" : "2022-07-02T04:50:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1172834156",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
