{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "So far, we effectively have two levels of \"solvability\" in descriptors:\r\n* `addr()` and `raw()` which can encode scriptPubKey with effectively no solvability information at all\r\n* Everything else, which encodes scriptPubKeys that are fully solvable.\r\n\r\nI've long held that there shouldn't be any level in between, in the sense that you shouldn't be using a descriptor if you don't know everything about its construction. I'm starting to think that's not a tenable position:\r\n* Already, key origin information - which may be no less critical than other parts of descriptors for certain roles - is optional. There is no way to force that information to be included, because it may not exist (for non-BIP32-derived keys, for example), but it may also simply be omitted.\r\n* #23480 proposes the introduction of a descriptor like `tr()`, except it encodes the post-tweak key rather than the inner key. This too may be because the information doesn't exist, but it cannot prevent situations where it is simply omitted.\r\n* It has been suggested before (though I can't find a reference now) to permit `tr()` descriptors to contain hashes for omitted script subtrees. That too could represent non-existent information (Merkle path entries that are chosen rather than actual hashes), or omitted information. And it is useful - there are certainly scenarios where one might want to participate in, and sign for, taproot outputs for which certain subtrees are not known.\r\n* If we're going to accept that the previous 3 examples will occur, we might as well bite the bullet and also add a way to encode \"pkh with known keyhash, but not known key\".\r\n\r\nIf all these mechanisms become permitted in descriptors (and miniscript), we get the nice logistical benefit of being able to represent all information extracted from PSBT/SPKM/scripts/... into a descriptor regardless of what is present or missing. I believe this would logistically simplify things later on too: Miniscript would not need separate instantiations for its descriptor-decoding use case and its signing/solving use case. Perhaps even further out, this can mean that many fields in `SignatureData` are replaced with just a descriptor object (everything except signatures/preimages), and the signing logic becomes a descriptor method.\r\n\r\nStraw man proposal:\r\n* Do #23480 (adding `rawtr(KEY)`), for P2TR outputs with specified tweaked key, but no specified internal key or script tree.\r\n* Add a `rawnode(HEX)` fragment, only usable inside P2TR script tree expressions, indicating a tree node with specified hash, but no specified subtree.\r\n* Add a `rawpkh(HEX)` fragment, usable wherever `pkh(KEY)` is usable, indicating a PKH script (`DUP HASH160 <hex> EQUALVERIFY CHECKSIG`), without specified public key. Post-miniscript this would also add a `rawpk_h(HEX)` fragment, corresponding to `pk_h(KEY)`.\r\n\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24114/comments",
   "created_at" : "2022-01-20T16:39:22Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24114/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/24114",
   "id" : 1109525819,
   "labels" : [
      {
         "color" : "7cf575",
         "default" : false,
         "description" : null,
         "id" : 64583,
         "name" : "Feature",
         "node_id" : "MDU6TGFiZWw2NDU4Mw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24114/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII585CIgU7",
   "number" : 24114,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24114/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24114/timeline",
   "title" : "Feature discussion: partial descriptors/miniscript",
   "updated_at" : "2022-01-20T16:51:49Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24114",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
      "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
      "followers_url" : "https://api.github.com/users/sipa/followers",
      "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/sipa",
      "id" : 548488,
      "login" : "sipa",
      "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
      "organizations_url" : "https://api.github.com/users/sipa/orgs",
      "received_events_url" : "https://api.github.com/users/sipa/received_events",
      "repos_url" : "https://api.github.com/users/sipa/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/sipa"
   }
}
