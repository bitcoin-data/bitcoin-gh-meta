[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26438](https://github.com/bitcoin/bitcoin/pull/26438) (Remove mempoolfullrbf option by sdaftuar)\n* [#25600](https://github.com/bitcoin/bitcoin/pull/25600) (p2p: Advertise `NODE_FULL_RBF` and connect to 4 outbound full-rbf peers if `-mempoolfullrbf` is set by ariard)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-10-10T16:33:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1273565300",
      "id" : 1273565300,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585L6RB0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1273565300/reactions"
      },
      "updated_at" : "2022-11-02T07:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1273565300",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK fa1fff466d6f05b00bf97ccf571b7c440734ad6b\r\n\r\nMight be worthwhile making the default be true for test chains -- make it easier to observe full rbf behaviour on testnet/signet well in advance of actually enabling it on mainnet?",
      "created_at" : "2022-10-11T08:04:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1274265041",
      "id" : 1274265041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585L873R",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274265041/reactions"
      },
      "updated_at" : "2022-10-11T08:04:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274265041",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26287#discussion_r992500165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26287"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992500165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            return strprintf(Untranslated(\"The -mempoolfullrbf configuration option is currently not supported for the %s chain\"), chainparams.NetworkIDString());\r\n```\r\n\r\n----\r\n\r\nMaybe consider removing or updating `-mempoolfullrbf` here as well:\r\n\r\n```diff\r\n--- a/doc/policy/mempool-replacements.md\r\n+++ b/doc/policy/mempool-replacements.md\r\n@@ -15,8 +15,6 @@ other consensus and policy rules, each of the following conditions are met:\r\n \r\n    *Rationale*: See [BIP125\r\n    explanation](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki#motivation).\r\n-   Use the (`-mempoolfullrbf`) configuration option to allow transaction replacement without enforcement of the\r\n-   opt-in signaling rule.\r\n \r\n 2. The replacement transaction only include an unconfirmed input if that input was included in\r\n    one of the directly conflicting transactions. An unconfirmed input spends an output from a\r\n```\r\n",
      "commit_id" : "fa1fff466d6f05b00bf97ccf571b7c440734ad6b",
      "created_at" : "2022-10-11T15:44:05Z",
      "diff_hunk" : "@@ -92,7 +92,12 @@ std::optional<bilingual_str> ApplyArgsManOptions(const ArgsManager& argsman, con\n         return strprintf(Untranslated(\"acceptnonstdtxn is not currently supported for %s chain\"), chainparams.NetworkIDString());\n     }\n \n-    mempool_opts.full_rbf = argsman.GetBoolArg(\"-mempoolfullrbf\", mempool_opts.full_rbf);\n+    if (const auto fullrbf{argsman.GetBoolArg(\"-mempoolfullrbf\")}) {\n+        if (!chainparams.IsTestChain()) {\n+            return strprintf(Untranslated(\"The mempoolfullrbf setting is currently not supported for the %s chain\"), chainparams.NetworkIDString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#discussion_r992500165",
      "id" : 992500165,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII5847KFnF",
      "original_commit_id" : "fa1fff466d6f05b00bf97ccf571b7c440734ad6b",
      "original_line" : 97,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/node/mempool_args.cpp",
      "position" : 7,
      "pull_request_review_id" : 1137756756,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26287",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992500165/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-11T15:51:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992500165",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it shows good faith for this PR to exist, but I don't know how well it would address the concerns if at all.\r\n\r\nBlaming the default false `-mempoolfullrbf` option for a full RBF network would be holding Bitcoin Core developers responsible for the decisions of individual node operators and miners. I don't think having the option (again, *default false*) can directly cause a full RBF network, and likewise, I don't think removing this option removes the \"risk\" of a full RBF network. Said \"risk\" is also a misunderstanding, but that's a different conversation. AFAIK Bitcoin Core isn't doing any \"advertising\" or encouraging users to use this config option, it just exists. Any user that wanted full RBF (e.g. because they want more fees) for the past 7 years could have run a patch or Knots or something else.",
      "created_at" : "2022-10-11T16:15:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1274949400",
      "id" : 1274949400,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585L_i8Y",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274949400/reactions"
      },
      "updated_at" : "2022-10-11T16:15:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274949400",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "NACK\r\n\r\nThis is a default false option. There is likely to be a negligible difference in the number of nodes relaying full rbf transactions regardless of whether this option exists given it is default false (as few people even bother to change the defaults). Furthermore, there are other nodes that do full rbf (and have existed for nearly a decade) in addition to the fact that node operators could still revert this change. I would expect the number of people who would do such a revert is on par with the number of people who would explicitly set the option, namely very few.",
      "created_at" : "2022-10-11T16:19:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1274953204",
      "id" : 1274953204,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585L_j30",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274953204/reactions"
      },
      "updated_at" : "2022-10-11T16:19:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274953204",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "NACK\r\n\r\nWe've been talking about full-rbf for seven years. It is well-established that zero-conf subsists on nobody deciding to try to sidestep it, and it has been long communicated that anyone using zero-conf should be aware that it is a bad practice.\r\n\r\nNot having full replaceability is causing a variety of issues and we are at a point where instant payment options exist that can be used where people rely on quick payments. This concrete change has been discussed for the last 18 months, I don't see how it comes as a surprise.\r\n\r\nI would posit that now is an excellent time to start thinking about how a business is going to work in a full-rbf environment.",
      "created_at" : "2022-10-12T16:28:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1276444078",
      "id" : 1276444078,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585MFP2u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276444078/reactions"
      },
      "updated_at" : "2022-10-12T16:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276444078",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It should be noted that current `mempoolfullrbf` setting default to false, therefore the existence of full-rbf transaction-relay paths during the coming months rely solely on a significant number of full-node users deviating from the default. Social inertia being what it is, I think zero conf services operators have few months of buffer before there is effective full-rbf transaction-relay paths. Moreover it would require few miners turning on `mempoolfullrbf`. In anyway, from my understanding the operational risk sounds low enough to not justify neutralizing #25353, which would have the downside to set a low-grounded precedent in our release process.",
      "created_at" : "2022-10-12T20:12:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1276682043",
      "id" : 1276682043,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585MGJ87",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276682043/reactions"
      },
      "updated_at" : "2022-10-12T20:12:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276682043",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I know this is closed, but I think a partial reversion of #25353 is warranted given:\r\n\r\n1. There's a reasonable argument that the inclusion of the option may significantly change network behavior in a way that would be harmful to some current users.  Specifically, that it only takes one large mining pool with a publicly known IP to enable full RBF to make it practical to replace any pending transaction.  Providing a configuration option in Bitcoin Core that miners can easily use without obtaining third-party patches or running alternative node software significantly lowers the barrier to enabling full RBF on a mining pool's backend node.\r\n2. That the above risk was not considered in the discussion of #25353, so it's possible some or all of its ACKs were based on an incomplete consideration of its consequences.\r\n3. That the above risk was not adequately communicated to the affected users six months in advance of the change (which is the project's usual non-emergency deprecation period).\r\n\r\nI think that we have a chance through partially reverting #25353 to reconsider the benefit of a default-off option and better communicate to users the project's plan for future replacement behavior, giving them at least the customary six months to prepare for a major non-emergency change in Bitcoin Core.",
      "created_at" : "2022-10-25T02:42:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1289901007",
      "id" : 1289901007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585M4lPP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1289901007/reactions"
      },
      "updated_at" : "2022-10-25T02:42:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1289901007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/61096?v=4",
         "events_url" : "https://api.github.com/users/harding/events{/privacy}",
         "followers_url" : "https://api.github.com/users/harding/followers",
         "following_url" : "https://api.github.com/users/harding/following{/other_user}",
         "gists_url" : "https://api.github.com/users/harding/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/harding",
         "id" : 61096,
         "login" : "harding",
         "node_id" : "MDQ6VXNlcjYxMDk2",
         "organizations_url" : "https://api.github.com/users/harding/orgs",
         "received_events_url" : "https://api.github.com/users/harding/received_events",
         "repos_url" : "https://api.github.com/users/harding/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/harding/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/harding/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/harding"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Definitely willing to reconsider a closed PR/revert something we ACKed if it makes sense\r\n\r\n> There's a reasonable argument that the inclusion of the option may significantly change network behavior in a way that would be harmful to some current users. Specifically, that it only takes one large mining pool with a publicly known IP to enable full RBF to make it practical to replace any pending transaction.\r\n\r\nI understand this argument theoretically, but haven't found any evidence suggesting that any miner will do so and on what timescale. I've been trying to ask miners what they plan to do wrt full RBF but haven't had much luck so far. Will keep trying.\r\n\r\nThe only thing evident to me so far is that miners employ the policy they want, even if it means running a patch instead of Bitcoin Core. In that case, if miners want to use full RBF and do, mempools requiring signaling will blind their users to higher-feerate replacements, potentially causing them to get double-spent. And so I imagine we'd need to emergency-add a `-mempoolfullrbf` option then. That's one of the reasons I think it makes more sense to keep the option than not.\r\n\r\nGiven that the risk is speculative, would one solution be to add a \"use caution!\" to the helpstring, or warn when a user changes the default? Or add a section in the release notes?",
      "created_at" : "2022-10-25T10:25:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1290324918",
      "id" : 1290324918,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585M6Mu2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1290324918/reactions"
      },
      "updated_at" : "2022-10-25T10:25:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1290324918",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> In that case, if miners want to use full RBF and do, mempools requiring signaling will blind their users to higher-feerate replacements, potentially causing them to get double-spent. And so I imagine we'd need to emergency-add a `-mempoolfullrbf` option then. That's one of the reasons I think it makes more sense to keep the option than not.\r\n\r\nIf we were worried about that scenario (where some minority of users and miners are doing full rbf and nodes that aren't doing aren't seeing those transactions until they're mined), then the `-mempoolfullrbf` option isn't sufficient; you also need to be connected to other peers running the same option to see those txs before they're mined.",
      "created_at" : "2022-10-25T11:39:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1290412728",
      "id" : 1290412728,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585M6iK4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1290412728/reactions"
      },
      "updated_at" : "2022-10-25T11:39:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1290412728",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Providing a configuration option in Bitcoin Core that miners can easily use without obtaining third-party patches or running alternative node software significantly lowers the barrier to enabling full RBF on a mining pool's backend node.\r\n\r\nErecting artificial barriers to prevent or make it difficult for users to do what they want to do, is not appropriate behaviour.",
      "created_at" : "2022-10-25T15:08:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1290721905",
      "id" : 1290721905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585M7tpx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1290721905/reactions"
      },
      "updated_at" : "2022-10-25T15:08:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1290721905",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "On the argument the mempoolfullrbf setting may significantly increase the risk exposure of 0confs applications and service, I believe it should be weighed in the light of two factors. The first, most of 0confs applications and services announce to have additional layers of security to protect themselves against double-spends attempts [0]. AFAIU, they should provide some security against conflicting transactions, even in the presence of full-rbf nodes. The second, I empathize for the affected 0confs services/users though delaying or freezing the progress on full-rbf deployment isn't free of security consequences for contracting protocols and multi-party applications. We could have tomorrow all the coinjoins implementations censor without that much countermeasures at the client-level, at the exception of setting private-relay to miners. Lastly, in the presence of a well-reviewed and functional patch already deployed, \"the cat is already out of the bag\", in the sense of a miner motivated to enable full rbf would have minimal engineering effort to do so. As of today, from my  understanding, engineering barriers are at the equilibrium, reverting the mempoolfullrbf setting would be more like the Bitcoin Core project throwing social opprobium on the usage. And I don't think we're all agree on here.\r\n\r\n[0] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021112.html\r\n\r\nOn the second argument, while all the interdependency risks where not raised in the public discussion, especially the FX risk, the immediate concerns on 0confs applications have been underscored. Even if the full depth and width were uncertain from a protocol dev viewpoint, it should be recalled some dimensions are application specific. It is yet unclear what should be the risk scope in the design considerations of Bitcoin Core development (i.e \"Is FX risk better solved at this layer, or in which proportion ?\"). \r\n\r\nOn the third argument, it should be noted current patch doesn't deprecate opt-in rbf as such, and the spirit design of this patch and #25600 were to offer the flexibility to the node operators to \"vote\" with their economic traffic. Indeed, in a presence of a \"split\" situation, where we have two classes of use-cases with conflicting policy requirements we might have to consider out of the sphere of Bitcoin Core decision-making what should be the policy default. If we have rough consensus on full-rbf itself, though we have more in the process of converging on a deprecation timeline, I think the conversation should be rather pursued on the mailing list or during meetings.",
      "created_at" : "2022-10-25T17:19:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1290890943",
      "id" : 1290890943,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585M8W6_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1290890943/reactions"
      },
      "updated_at" : "2022-10-25T17:19:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1290890943",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thank y'all for the replies!\r\n\r\n@glozow \r\n\r\n> I understand this argument theoretically, but haven't found any evidence suggesting that any miner will do so and on what timescale. I've been trying to ask miners what they plan to do wrt full RBF but haven't had much luck so far. Will keep trying.\r\n\r\nThank you for attempting to query miners!  Let's imagine every miner replied \"no, we don't plan to enable full RBF this release cycle\".  What could we do to support that decision and also provide additional assurance to services that currently expect first-seen-safe behavior?  I think there are two options:\r\n\r\n1. This PR, temporarily disable `mempoolfullrbf` for mainchain\r\n2. Disable the `getblocktemplate` RPC on any node that has `mempoolfullrbf` set to true\r\n\r\n> The only thing evident to me so far is that miners employ the policy they want, even if it means running a patch instead of Bitcoin Core.\r\n\r\nThat's their right, of course, and I'd personally be happy to see them enabling full RBF on their own.  I know some miners have done that in the past, most notably f2pool in 2015 IIRC.\r\n\r\nI think an essential part of this issue is that Bitcoin Core should give appropriate notice to affected users when making changes that have a reasonable chance of disrupting existing operations.  We haven't provided that notice for 24.x, and to actually provide that notice and maintain our high degree of professionalism and regard for users, all we need to do is wait six months for 25.x.\r\n\r\n> if miners want to use full RBF and do, mempools requiring signaling will blind their users to higher-feerate replacements, potentially causing them to get double-spent. And so I imagine we'd need to emergency-add a -mempoolfullrbf option then. That's one of the reasons I think it makes more sense to keep the option than not.\r\n\r\nIn addition to what @ajtowns wrote, if all we wanted to do is notify users that replacements might be circulating, we could probably pass the list of conflicting transactions when the `txn-mempool-conflict` error is sent via `-debug=mempoolrej`.  That way anyone could receive notification about double spends being relayed by their peers.\r\n\r\n> Given that the risk is speculative, would one solution be to add a \"use caution!\" to the helpstring, or warn when a user changes the default? Or add a section in the release notes?\r\n\r\nThe people at risk aren't the people enabling the option, so I'm not sure changes to the helpstring or logging help.  We should certainly provide a detailed release note about this situation no matter what action (or inaction) we decide to take.\r\n\r\n@luke-jr\r\n\r\n> Erecting artificial barriers to prevent or make it difficult for users to do what they want to do, is not appropriate behaviour.\r\n\r\nI agree in principle, but I also don't think it's appropriate to potentially undermine the operations of some of our users because we're unwilling to announce our intent six months in advance, as we have done historically.\r\n\r\n@ariard \r\n\r\n> most of 0confs applications and services announce to have additional layers of security to protect themselves against double-spends attempts [0]\r\n\r\nIt seems to me that the email you linked only describes countermeasures against separate propagation of conflicting transactions and that those countermeasures would be ineffectual against a replacement that was sent more than a few seconds after the original transaction.\r\n\r\n> I empathize for the affected 0confs services/users though delaying or freezing the progress on full-rbf deployment isn't free of security consequences for contracting protocols and multi-party applications.\r\n\r\nIf removing this option will significantly delay or freeze the progress of full-RBF deployment, that seems to me to be a statement that you believe zero-conf services are at increased risk, which I think conflicts with statements made by several reviewers on the original PR about this being, \"uncontroversial, given that the default is 'unchanged'\".\r\n\r\nAgain, if we are changing a policy that users and businesses rely on, we should strive to provide advance warning.\r\n\r\n> a miner motivated to enable full rbf would have minimal engineering effort to do so\r\n\r\nPatches for enabling full RBF have been available since at least 2015 and have even previously been deployed by miners.  That's fine; zero-conf services and those worried about free options have always been exposed to that risk.  But just because others *can* break an existing system doesn't mean that we should treat it as broken now.\r\n\r\n> reverting the mempoolfullrbf setting would be more like the Bitcoin Core project throwing social opprobium on the usage. And I don't think we're all agree on here.\r\n\r\nI don't think we need to worry about people misinterpreting our actions when we can explain what we're doing, and why we're doing it, in the 24.0 release notes.\r\n\r\n> On the second argument, while all the interdependency risks where not raised in the public discussion, especially the FX risk, the immediate concerns on 0confs applications have been underscored. Even if the full depth and width were uncertain from a protocol dev viewpoint, it should be recalled some dimensions are application specific. It is yet unclear what should be the risk scope in the design considerations of Bitcoin Core development (i.e \"Is FX risk better solved at this layer, or in which proportion ?\").\r\n\r\nI read the above as you agreeing that reviewers were unaware of all the risks when they gave their ACKs.  If that's the case, I don't see why it's a matter of significant debate to partially revert this *unreleased* PR so that it can be reconsidered with all of its consequences made explicit.\r\n\r\n> On the third argument, it should be noted current patch doesn't deprecate opt-in rbf as such\r\n\r\nThis patch makes it possible for people running unmodified Bitcoin Core to change a longstanding network policy that is used by multiple businesses serving thousands of users.  Whether that's technically deprecation or not, I think it warrants giving businesses a warning about the impending change.\r\n\r\n---\r\n\r\nAll: I think it would be a credit to the project and to ourselves if we remove this option for just the 24.x series and take the next six months to explain what we plan to do and how it may affect users and business.  That additionally gives us time to consider the new information we've received and potentially use it to improve the deployment of full RBF (e.g. I think #26323's simultaneous activation of full-RBF is much nicer than an uncoordinated deployment, such as in maximizing the efficiency of compact block filters and erlay).",
      "created_at" : "2022-10-26T01:49:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1291378812",
      "id" : 1291378812,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585M-OB8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1291378812/reactions"
      },
      "updated_at" : "2022-10-26T01:49:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1291378812",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/61096?v=4",
         "events_url" : "https://api.github.com/users/harding/events{/privacy}",
         "followers_url" : "https://api.github.com/users/harding/followers",
         "following_url" : "https://api.github.com/users/harding/following{/other_user}",
         "gists_url" : "https://api.github.com/users/harding/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/harding",
         "id" : 61096,
         "login" : "harding",
         "node_id" : "MDQ6VXNlcjYxMDk2",
         "organizations_url" : "https://api.github.com/users/harding/orgs",
         "received_events_url" : "https://api.github.com/users/harding/received_events",
         "repos_url" : "https://api.github.com/users/harding/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/harding/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/harding/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/harding"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Happy to reopen this, but I'll abstain from the discussion.",
      "created_at" : "2022-10-26T08:06:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1291652802",
      "id" : 1291652802,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585M_Q7C",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1291652802/reactions"
      },
      "updated_at" : "2022-10-26T08:06:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1291652802",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @harding for articulating the reasoning.\r\n\r\nI have tried my best to summarize people's concerns from the ML / here / #26287 / #26305 in [these notes](https://github.com/glozow/bitcoin-notes/blob/full-rbf/full-rbf.md). I would understand if people changed their minds but, so far, my read is that there is strong opposition to this PR and thus would not feel comfortable merging it.\r\n\r\nPinging those who reviewed #25353 but haven't commented here @petertodd @instagibbs @naumenkogs @darosior @dergoegge @mzumsande. Pinging @achow101 @Xekyo who nacked before this was closed and reopened. Would appreciate a comment here if your views have changed.",
      "created_at" : "2022-10-26T12:38:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1291970514",
      "id" : 1291970514,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NAefS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1291970514/reactions"
      },
      "updated_at" : "2022-10-26T12:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1291970514",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've commented on the \"defer\" PR, I'm in general against removing options. The only caveat here being that it has yet to be in a Core release, so it's not a regression per se.\r\n\r\nMy gut worry is that we will remove the option, effectively forever, and conversations on solving the American free option problem will be the next thing we have to solve before we give users control back.\r\n\r\nIf, by merging this, we agree to an upper-bound window to reverting and switching to default true, I'm less wary of it. For example, we pick some block time 3 years in the future that will be checked into the codebase for 25.0+, then if we get later feedback that 3 years is too much for merchants, we can move it up, optionally, before 25.0 release.\r\n\r\nSorry if this sounds like horse trading, but there has to be a stronger motivation for removing user choices, *especially* when the time horizon to restoring them is unbounded.",
      "created_at" : "2022-10-26T13:24:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292030700",
      "id" : 1292030700,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NAtLs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292030700/reactions"
      },
      "updated_at" : "2022-10-26T13:27:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292030700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it should be fine to revert on master right after this pull request is merged to clarify that the change is only temporary for the 24.0 release. (Obviously out of scope here, but the revert could be backported to 24.(0+x) if needed, based on how the discussions progress)",
      "created_at" : "2022-10-26T13:36:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292055292",
      "id" : 1292055292,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NAzL8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292055292/reactions"
      },
      "updated_at" : "2022-10-26T13:36:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292055292",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Strong NACK.\n\nFirst of all, from a practical point of view it's often better to test things on mainnet. The cost of transactions isn't a big deal when you're paying devs for their time, and the overall behavior is of course mainnet with it's quirks. Personally I often test things not covered by unit tests on mainnet. So taking this option away is annoying.\n\nSecondly, disabling this option for mainnet sets a dangerous precedent that 1) zeroconf transactions have a degree of safety, and 2) we're responsible for that safety.\n\nMuun created their reckless reliance on zero conf years after the dangers of it were widely understood. Delaying this further just creates more opportunities for new Muuns to get developed.\n\nOn October 26, 2022 2:38:27 PM GMT+02:00, Gloria Zhao ***@***.***> wrote:\n>Thanks @harding for articulating the reasoning.\n>\n>I have tried my best to summarize people's concerns from the ML / here / #26287 / #26305 in [these notes](https://github.com/glozow/bitcoin-notes/blob/full-rbf/full-rbf.md). I would understand if people changed their minds but, so far, my read is that there is strong opposition to this PR and thus would not feel comfortable merging it.\n>\n>Pinging those who reviewed #25353 but haven't commented here @petertodd @instagibbs @naumenkogs @darosior @dergoegge @mzumsande. Pinging @achow101 @Xekyo who nacked before this was closed and reopened. Would appreciate a comment here if your views have changed.\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1291970514\n>You are receiving this because you were mentioned.\n>\n>Message ID: ***@***.***>",
      "created_at" : "2022-10-26T14:17:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292124489",
      "id" : 1292124489,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NBEFJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292124489/reactions"
      },
      "updated_at" : "2022-10-26T14:17:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292124489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "NACK from me as well.",
      "created_at" : "2022-10-26T14:21:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292130045",
      "id" : 1292130045,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NBFb9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292130045/reactions"
      },
      "updated_at" : "2022-10-26T14:21:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292130045",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "While we're at it, I should point out that zeroconf being extremely insecure is the natural state of being in what we keep saying is the future of Bitcoin: mempools (literally) overflowing with transactions paying fees.\n\nWhen mempools are full, and transactions are being discarded frequently due to overflows and high minimum fees, there's always lots of opportunities to play games to get transactions double spent. It's just natural that mempools won't have any solid consensus because they won't be synced up perfectly.\n\nOur current state with nearly empty mempools is very artificial and unsustainable if we're to reply on tx fees only to fund mining.\n\n\nAgain, delaying full rbf yet again makes it more likely that yet more companies will build systems that depend on it. As keeps happening.\n\nOn October 26, 2022 2:38:27 PM GMT+02:00, Gloria Zhao ***@***.***> wrote:\n>Thanks @harding for articulating the reasoning.\n>\n>I have tried my best to summarize people's concerns from the ML / here / #26287 / #26305 in [these notes](https://github.com/glozow/bitcoin-notes/blob/full-rbf/full-rbf.md). I would understand if people changed their minds but, so far, my read is that there is strong opposition to this PR and thus would not feel comfortable merging it.\n>\n>Pinging those who reviewed #25353 but haven't commented here @petertodd @instagibbs @naumenkogs @darosior @dergoegge @mzumsande. Pinging @achow101 @Xekyo who nacked before this was closed and reopened. Would appreciate a comment here if your views have changed.\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1291970514\n>You are receiving this because you were mentioned.\n>\n>Message ID: ***@***.***>",
      "created_at" : "2022-10-26T14:25:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292135655",
      "id" : 1292135655,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NBGzn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292135655/reactions"
      },
      "updated_at" : "2022-10-26T14:25:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292135655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "NACK for the same reasons I gave above.",
      "created_at" : "2022-10-26T15:12:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292201640",
      "id" : 1292201640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NBW6o",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292201640/reactions"
      },
      "updated_at" : "2022-10-26T15:12:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292201640",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thank you @harding for helping trying to make progress here.\r\n\r\nFirst let me comment on two of your points:\r\n\r\n> There's a reasonable argument that the inclusion of the option may significantly change network behavior in a way that would be harmful to some current users. Specifically, that it only takes one large mining pool with a publicly known IP to enable full RBF to make it practical to replace any pending transaction.\r\n\r\nI don't think the argument is that reasonable. I buy the part that it would then realistically be easier / more reasonable for a mining pool to enable RBF for all transactions. Even though as Antoine notes i'm not convinced removing the option would make it substantially harder for them since they can just apply the well reviewed a7f3479ba3fda4c9fb29bd7080165744c02ee921 patch on top of the release.\r\nI don't buy the part that it's substantially safer to accept unconfirmed transactions as final today, due to some magic protection mechanism in place (and apparently closed source? Has anyone seen it and could vouch for its efficiency, that non-signaling RBF would break?).\r\n\r\n> so it's possible some or all of its ACKs were based on an incomplete consideration of its consequences\r\n\r\nMine was based on the correctness of the code plus the consequences:\r\n- As a software project we don't take side in the \"gentleman agreement\" (is there any or is it just blind trust?) between businesses relying on first-seen-safe and miners of not replacing non BIP125-signaling transactions: we just provide the option to do both.\r\n- The default for that option is conservatively set to the previous behaviour of the node. There is a reasonable argument that setting the default to `true` would significantly affect the network, and i don't think it should be our call.\r\n\r\nTherefore the PR seemed pretty reasonable to me and that's why i ACKed it.\r\n\r\n----\r\n\r\nThat (and another [comment](https://github.com/bitcoin/bitcoin/pull/26323#issuecomment-1290193994)) said. releasing a software that could, potentially, supposedly, play a (small) role in breaking a substantial part of users of the Bitcoin network without them being apparently aware in advance [0] seems just wrong. And opposed to the philosophy of this project.\r\n\r\nFor this reason, and even though treating unconfirmed transactions as final is insane, releasing an anti-feature that purposefully prevents a valid usage of the node (and that goes against the incentives of some users of the network) not something we should do, ACK fa1fff466d6f05b00bf97ccf571b7c440734ad6b for 24.0 only (ie provided we immediately revert it on master).\r\n\r\n[0] I don't know how we could communicate to end users better really. Antoine has been exemplary in trying to motivate, explain, and champion \"full\" RBF to affected stakeholders. And what we are reverting isn't even some \"full\" RBF activation on the network but an option to a perfectly valid usage of a Bitcoin node.",
      "created_at" : "2022-10-26T15:30:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292228256",
      "id" : 1292228256,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NBdag",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292228256/reactions"
      },
      "updated_at" : "2022-10-26T15:30:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292228256",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I retract my NACK from above, but I would like to elaborate my stance on full-RBF in light of the continued discussion:\r\n1. First-seen safety for transaction not signaling replaceability relies on the unstable gentlemen's agreement that _all_ miners continue adhering to a social convention that is technically unenforceable.\r\n2. Treating unconfirmed transactions as reliable is a bad business practice that should be discouraged and preferably end sooner rather than later. The continued development of software that relies on this false assumption is detrimental to the network.\r\n3. Apparently some senders publicly promising that they will not attempt replacement provides a valuable social signal to some receivers, sufficient for said receivers to treat such transaction in a different, more risky manner.\r\n6. Propping up the illusion of non-replaceable transactions complicates development of multi-party protocols. Converging on the inevitable modus operandi sooner rather than later reduces effort spent on dead-end business practices.\r\n5. It is inevitable that full-RBF will eventually emerge on the network. When this comes about, Bitcoin Core users should have the option to align their mempool content with the expected mined blocks.\r\n4. Even in the presence of the `mempoolfullrbf` startup option and eventual adoption of full RBF on the network, some senders may continue promising non-replacement and receivers may continue extending unbacked credit on basis of such promises. This may be rational, since not paying after receiving service is theft and most people do not engage in theft.\r\n7. Miners have had the option to enact full-RBF by running alternative clients or a one-line patch for years, yet we do not see significant hashrate that engages in full-RBF. I would similarly expect miners to shy away from turning on `mempoolfullrbf`, to deliberately bring about the end of the gentlemen's agreement. It is reasonable to expect the situation to remain in its unstable equilibrium for the time being until some miner perceives some significant advantage or spurious reason to doing away with it.\r\n8. I am open to removing the `mempoolfullrbf` option in the 24.0 release in the interest of more explicitly providing advance notice in light of the concerns brought forth by businesses under the condition that the `mempoolfullrbf` option is released with 25.0.\r\n\r\nI will continue to discourage the practice of accepting unconfirmed transactions (â0-confâ), encourage businesses to transition to full-RBF-compatible practices, advocate for all transactions to be labeled as replaceable by default at transaction creation, will run `mempoolfullrbf=1` myself, but will not lobby miners to adopt `mempoolfullrbf=1` in the foreseeable future.",
      "created_at" : "2022-10-26T15:32:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292230240",
      "id" : 1292230240,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NBd5g",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292230240/reactions"
      },
      "updated_at" : "2022-10-26T15:32:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292230240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I would also like to point out that even when a single miner starts running full-RBF, replacement of non-replaceable transactions that pay a competitive feerate would only succeed if that pool finds the next block. Presumably, services that engage in accepting unconfirmed transactions do not treat transactions that pay uncompetitive feerates as reliable in the first place, so a minority of the hashrate adopting full-RBF would only cause a graceful degradation of the first-seen-safe behavior they rely on.",
      "created_at" : "2022-10-26T15:38:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292239216",
      "id" : 1292239216,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NBgFw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292239216/reactions"
      },
      "updated_at" : "2022-10-26T15:38:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292239216",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@glozow re: âPeter ToddÂ reportsÂ that he has observed replacements of non-signaling transactions using opentimestamps. He notes that they are rare, and it's possible that these are due to propagation latency.â\n\nI'm skeptical that those double spends are due to propagation latency, as there is a significant minimum time between transaction broadcasts. As an experiment I'm paying significantly higher than normal fees for replacements. So it's in my interest to avoid them happening by accident. ð\n\nMore likely is that the double spends at pools previously observed to not be running full rbf are due to miners changing configurations. Eg restarting nodes, starting new nodes, etc.",
      "created_at" : "2022-10-26T16:51:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292330037",
      "id" : 1292330037,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NB2Q1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292330037/reactions"
      },
      "updated_at" : "2022-10-26T16:51:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292330037",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "NACK. Reverting a policy configuration option that (a non-trivial number of) users want to use just because other users are relying on nobody or almost nobody running this policy (which still doesn't provide very strong security guarantees) would:\r\n\r\n1. suggest that Core developers are responsible for what policies individual node operators use, and\r\n2. set a precedent that a new policy option (that doesn't change the default!) can be vetoed by users who rely on this option existing behind an artificial barrier (running a custom patch or an alternative implementation), which necessarily raises the question of just who exactly gets to veto or delay the release of policy options.",
      "created_at" : "2022-10-26T16:54:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292333431",
      "id" : 1292333431,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NB3F3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292333431/reactions"
      },
      "updated_at" : "2022-10-26T16:54:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292333431",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/43024885?v=4",
         "events_url" : "https://api.github.com/users/vostrnad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vostrnad/followers",
         "following_url" : "https://api.github.com/users/vostrnad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vostrnad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vostrnad",
         "id" : 43024885,
         "login" : "vostrnad",
         "node_id" : "MDQ6VXNlcjQzMDI0ODg1",
         "organizations_url" : "https://api.github.com/users/vostrnad/orgs",
         "received_events_url" : "https://api.github.com/users/vostrnad/received_events",
         "repos_url" : "https://api.github.com/users/vostrnad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vostrnad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vostrnad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vostrnad"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @glozow re: âPeter Todd reports that he has observed replacements of non-signaling transactions using opentimestamps. He notes that they are rare, and it's possible that these are due to propagation latency.â I'm skeptical that those double spends are due to propagation latency, as there is a significant minimum time between transaction broadcasts. As an experiment I'm paying significantly higher than normal fees for replacements. So it's in my interest to avoid them happening by accident. joy More likely is that the double spends at pools previously observed to not be running full rbf are due to miners changing configurations. Eg restarting nodes, starting new nodes, etc.\r\n\r\nThere are only two txs listed on https://alice.btc.calendar.opentimestamps.org/ as not paying 182sats, namely: https://mempool.space/tx/3949f06019fd6acb95184a6667309f4c5b045f296667019e1d8b421547831418 and https://mempool.space/tx/0f1c7b57b9e95bf84b6a2f5462dfeb7284e404dcfd1b49a95967f5e794808b66 . Looking at miningpool.observer's entry for the corresponding blocks, I'm not seeing any conflicting transactions reported https://miningpool.observer/template-and-block/00000000000000000003509625dbe8c7671a7810ebe2250c8327bf5b4f845d89 https://miningpool.observer/template-and-block/0000000000000000000371542c63451b800697125fa8f7f4c65e46b1c857f7d9 (and the txs aren't listed as missing/extra at all). That suggests pretty strongly to me that any earlier versions of those txs failed to propogate to both the miner (Foundry/f2pool) and miningpool.observer (and probably the rest of the network), rather than the miner using fullrbf logic to accept the replacement, or having missed txs due to a losing their mempool/restarting their node.\r\n\r\nEDIT: can confirm the more recent of these on my node too; it doesn't have fullrbf enabled and saw and accepted the tx that got mined prior to the block:\r\n\r\n```\r\n$  bitcoin-cli getrawtransaction 3949f06019fd6acb95184a6667309f4c5b045f296667019e1d8b421547831418 1 | jq -r .hash\r\n69fc0a0a101ef0bd64367455c8ac6a50601eb18598418fa7e5ae2c6256d7bddc\r\n\r\n$ grep debug.log\r\n\r\n2022-10-20T12:53:46Z UpdateTip: new best=000000000000000000043b1c8b2b3917ea87e9abca33256eb7e11431771ebc78 height=759517 version=0x244a2004 log2_work=93.795964 tx=773653879 date='2022-10-20T12:53:43Z' progress=1.000000 cache=53.0MiB(339792txo)\r\n\r\n2022-10-20T12:54:06Z [net] got inv: wtx 69fc0a0a101ef0bd64367455c8ac6a50601eb18598418fa7e5ae2c6256d7bddc  new peer=6\r\n2022-10-20T12:54:06Z [net] Requesting wtx 69fc0a0a101ef0bd64367455c8ac6a50601eb18598418fa7e5ae2c6256d7bddc peer=6\r\n2022-10-20T12:54:07Z [net] got inv: wtx 69fc0a0a101ef0bd64367455c8ac6a50601eb18598418fa7e5ae2c6256d7bddc  have peer=52\r\n2022-10-20T12:54:07Z [net] received getdata for: wtx 69fc0a0a101ef0bd64367455c8ac6a50601eb18598418fa7e5ae2c6256d7bddc peer=5\r\n2022-10-20T12:54:08Z [net] got inv: wtx 69fc0a0a101ef0bd64367455c8ac6a50601eb18598418fa7e5ae2c6256d7bddc  have peer=14\r\n\r\n2022-10-20T13:07:22Z UpdateTip: new best=00000000000000000002fd05a63699e748d4cfeeec730db995e7e9086f5c2c14 height=759518 version=0x3ad82004 log2_work=93.795977 tx=773656329 date='2022-10-20T13:07:11Z' progress=1.000000 cache=54.1MiB(349179txo)\r\n2022-10-20T13:32:10Z UpdateTip: new best=0000000000000000000239358b51e91dc53cab411516d7661652d05e38ebb2c4 height=759519 version=0x20e00000 log2_work=93.795990 tx=773659863 date='2022-10-20T13:31:53Z' progress=1.000000 cache=56.0MiB(364004txo)\r\n2022-10-20T13:38:18Z UpdateTip: new best=00000000000000000007423035b152ec41665fb297999591fbec8b34481d8a63 height=759520 version=0x20000004 log2_work=93.796002 tx=773662439 date='2022-10-20T13:38:08Z' progress=1.000000 cache=56.7MiB(370328txo)\r\n2022-10-20T13:40:09Z UpdateTip: new best=0000000000000000000606c73e60548cefbd4e3553e76dc13d2c55be204795d7 height=759521 version=0x25584000 log2_work=93.796015 tx=773664575 date='2022-10-20T13:39:47Z' progress=1.000000 cache=57.0MiB(372367txo)\r\n\r\n2022-10-20T13:45:51Z UpdateTip: new best=0000000000000000000371542c63451b800697125fa8f7f4c65e46b1c857f7d9 height=759522 version=0x29f3c004 log2_work=93.796028 tx=773667438 date='2022-10-20T13:45:27Z' progress=1.000000 cache=57.7MiB(377845txo)\r\n```\r\n\r\nEDIT 2: likewise for the more recent, [quite high fee transaction](https://mempool.space/tx/c1f77cbe5a003c238cdb761ca1eb4f5d012598e7e3994f7454f93881bdd29541) in block [760761](https://miningpool.observer/template-and-block/00000000000000000004a054fab02d25460c0470b3ac9e4bcc4c9a98818e1746):\r\n\r\n```\r\n$ bitcoin-cli getrawtransaction c1f77cbe5a003c238cdb761ca1eb4f5d012598e7e3994f7454f93881bdd29541 1 | jq .hash\r\n\"3a7c9521cea462f03c08644a7ff3dfc535b4f297aec409da102c7256904709d7\"\r\n$ grep -E 'UpdateTip|3a7c9521cea462f03c08644a7ff3dfc535b4f297aec409da102c7256904709d7' debug.log\r\n...\r\n2022-10-29T02:45:12Z UpdateTip: new best=00000000000000000003b0a0888ee6dbc5cdd67de6ca588fb08f4fcf4b40250d height=760760 version=0x2000e000 log2_work=93.812146 tx=775909801 date='2022-10-29T02:45:16Z' progress=1.000000 cache=111.2MiB(810837txo)\r\n2022-10-29T02:45:29Z [net] got inv: wtx 3a7c9521cea462f03c08644a7ff3dfc535b4f297aec409da102c7256904709d7  new peer=25\r\n2022-10-29T02:45:29Z [net] Requesting wtx 3a7c9521cea462f03c08644a7ff3dfc535b4f297aec409da102c7256904709d7 peer=25\r\n2022-10-29T02:45:29Z [net] got inv: wtx 3a7c9521cea462f03c08644a7ff3dfc535b4f297aec409da102c7256904709d7  have peer=1488\r\n2022-10-29T02:45:29Z [net] got inv: wtx 3a7c9521cea462f03c08644a7ff3dfc535b4f297aec409da102c7256904709d7  have peer=5\r\n2022-10-29T02:45:30Z [net] got inv: wtx 3a7c9521cea462f03c08644a7ff3dfc535b4f297aec409da102c7256904709d7  have peer=0\r\n2022-10-29T02:53:44Z UpdateTip: new best=00000000000000000004a054fab02d25460c0470b3ac9e4bcc4c9a98818e1746 height=760761 version=0x3fffe000 log2_work=93.812159 tx=775911422 date='2022-10-29T02:53:05Z' progress=1.000000 cache=111.7MiB(815191txo)\r\n...\r\n```",
      "created_at" : "2022-10-26T21:49:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292692367",
      "id" : 1292692367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NDOuP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292692367/reactions"
      },
      "updated_at" : "2022-11-02T02:49:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292692367",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@darosior \r\n\r\n> I don't buy the part that it's substantially safer to accept unconfirmed transactions as final today, due to some magic protection mechanism in place (and apparently closed source? Has anyone seen it and could vouch for its efficiency, that non-signaling RBF would break?).\r\n\r\nIt's not a closed source mechanism, it's the one described by satoshi in July 2010: https://satoshi.nakamotoinstitute.org/posts/bitcointalk/233/ (the followup is also apropos: [\"imagine if instead the machine dispensed small-denomination giftcards\"](https://satoshi.nakamotoinstitute.org/posts/bitcointalk/threads/114/#20)). It's broken by txs that can be RBFed because there's no longer a race: you can send the replacement minutes or hours later, and the original will still disappear everywhere. It doesn't matter whether it's full RBF or opt-in RBF [(cite)](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021070.html); either breaks this approach. The difference is that with full RBF there's no possibility to make transactions where that system works anymore.",
      "created_at" : "2022-10-27T00:43:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292819347",
      "id" : 1292819347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NDtuT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292819347/reactions"
      },
      "updated_at" : "2022-10-27T00:43:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292819347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "If this PR (or something like it) gets merged, here's some text that could be added to the 24.0 release notes: https://gist.github.com/harding/f3cd8affb10cea96d352347fed7f4a3a  Of course, I'm happy to make edits.\r\n\r\nI'm very much in favor of @MarcoFalke's suggestion:\r\n\r\n> I think it should be fine to revert on master right after this pull request is merged to clarify that the change is only temporary for the 24.0 release.\r\n\r\nI incorporated language in the draft release note indicating that some form of full RBF would be released in 25.0 (if not sooner), although I didn't say exactly what in order to leave the options open for the specific implementation.\r\n\r\n@darosior \r\n\r\n> I don't know how we could communicate to end users better really. Antoine has been exemplary in trying to motivate, explain, and champion \"full\" RBF to affected stakeholders.\r\n\r\nI agree @ariard has done a great job communicating!  As have several other people in this discussion.  But I don't think we can ignore the evidence that at least one major service that's affected didn't learn about this pending change until they were reading the draft release notes.  On one hand, it's a bit discouraging that posting things to the ML and writing them up in Optech and reaching out to known zero conf users directly aren't enough, but on the other hand I think it's really great that there are service operators who care enough about Bitcoin Core to check out our RCs and go and find our draft release notes.  Let's use that and be better about communicating our plans for major changes in the future via the release notes.\r\n\r\n@instagibbs @Xekyo @petertodd I don't think I disagree with anything any of you said here.  I very much want us to get to full RBF being the default policy.  I don't think a six-month release delay on an option that wasn't supposed to really change the network anyway slows us down much---but it does give us a chance to demonstrate that we listen to feedback and allows us to better communicate our intention for the future.",
      "created_at" : "2022-10-27T01:31:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292850035",
      "id" : 1292850035,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585ND1Nz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292850035/reactions"
      },
      "updated_at" : "2022-10-27T01:31:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292850035",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/61096?v=4",
         "events_url" : "https://api.github.com/users/harding/events{/privacy}",
         "followers_url" : "https://api.github.com/users/harding/followers",
         "following_url" : "https://api.github.com/users/harding/following{/other_user}",
         "gists_url" : "https://api.github.com/users/harding/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/harding",
         "id" : 61096,
         "login" : "harding",
         "node_id" : "MDQ6VXNlcjYxMDk2",
         "organizations_url" : "https://api.github.com/users/harding/orgs",
         "received_events_url" : "https://api.github.com/users/harding/received_events",
         "repos_url" : "https://api.github.com/users/harding/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/harding/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/harding/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/harding"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @harding to pursue the conversation,\r\n\r\n> It seems to me that the email you linked only describes countermeasures against separate propagation of conflicting transactions and that those countermeasures would be ineffectual against a replacement that was sent more than a few seconds after the original transaction.\r\n\r\nThis is an open question on what is the most effective design of such countermeasures. Let's say attacker strategy is to build a knowledge of the victim's transaction-relay topology to identify the \"blind spots\", where to broadcast a conflicting double-spend transaction. Efficient countermeasures would be to have well-connected nodes with outbound transaction-relay peers rotation to break free from the attacker view of your tx-relay topology. As you would like to avoid local mempool state (e.g mempool min fee) to interfer with your capture of a conflict hinting an ongoing attack, the reconciliating logic should just monitor spent utxos, where it is indifferent if a transaction is a conflict or a replacement. A replacement candidate or a conflicting transaction should be processed identically by your double-spend countermeasures infra.\r\n\r\n> If removing this option will significantly delay or freeze the progress of full-RBF deployment, that seems to me to be a statement that you believe zero-conf services are at increased risk\r\n\r\nTo be clearer, the risks I'm mentioning are the ones affecting use-cases like coinjoin/dual-funded channels/splicing/etc if full-rbf is delayed ad vitame eternam. At the same time, I never denied there are increased risks encumbered by 0confs applicati0ons and I've been clear about in my communications and strongly noting the risk arbitrage we're facing [0].\r\n\r\n[0] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021111.html\r\n\r\n\"For sure, contracting protocols and multi-party applications exposed by the lack of full-rbf are still young overall, though as they attract more volume they're also likely to become honeypots for any competing services providers interested to hijack economic traffic (kinda the same concern than channel jamming...) At the same time, we still have 0confs services more exposed by full-rbf, a bit stuck between Scylla and Charybdis.\"\r\n\r\n> Patches for enabling full RBF have been available since at least 2015 and have even previously been deployed by miners. That's fine; zero-conf services and those worried about free options have always been exposed to that risk. But just because others can break an existing system doesn't mean that we should treat it as broken now.\r\n\r\nTo restate the whole spirit of the initial approach proposed by the optional setting and automatic preferential peering, the idea was to remove from the Bitcoin Core project to have to say which of 0confs use-cases or contracting protocols use-cases is the legitimate one in face of policy rules, and defer the choice to node operators. According to this idea, there is no more \"we\" (the project) qualifying a use-case of broken or not. All systems are broken beyond their security models, what is hard to qualify are those security bounds, and how Core settings and policy rules can offer interfaces to fulfill\r\nthose bounds or not. (That use-case should be incentive-compatible should be considered by the designers/applications themselves, holistically of all the layers implicated IMHO)\r\n\r\n> I don't think we need to worry about people misinterpreting our actions when we can explain what we're doing, and why we're doing it, in the 24.0 release notes.\r\n\r\nIn the light of contracting protocols being exposed to the lack of full-rbf transaction-relay paths and mining hashrate, what I'm wondering about is the lack of contributors opinions convergence on a \"common\" action, even before to explain this action towards Core users, in release notes or elsewhere. Personally, I still think we should collect more feedback from coinjoins and collaborative transactions users/operators, to have a more complete view of the risks and stakes across the Bitcoin ecosystem, before to finalize a decision.\r\n\r\n> I read the above as you agreeing that reviewers were unaware of all the risks when they gave their ACKs. If that's the case, I don't see why it's a matter of significant debate to partially revert this unreleased PR so that it can be reconsidered with all of its consequences made explicit.\r\n\r\nReverting this PR doesn't answer the question I'm raising about the risk scope of the design considerations of Bitcoin Core development. W.r.t today of applications diversity and complexity, you cannot expect all the Bitcoin Core contributors to have a full-understanding of the implications on Lightning (when most of the LN devs themselves have a short understanding of the interactions of the protocol with mempool rules), a comprehensive view of the payment 0confs ecosystem and a practical experience with the inner workings of wallets. Rather, I think it would be more valuable for the project how our design process should actively collect feedback from the known class of use-cases, and how we should evaluate this feedback.\r\n\r\n> This patch makes it possible for people running unmodified Bitcoin Core to change a longstanding network policy that is used by multiple businesses serving thousands of users. Whether that's technically deprecation or not, I think it warrants giving businesses a warning about the impending change.\r\n\r\nFrom my understanding, the crux of the issue is the risk arbitrage situation. Giving a longer warrant to the business is gained at the price of extending the risk DoS exposures of multi-party applications and contracting protocols users and services. I do believe the accumulated user base of all the coinjoin services ranks also in the order of thousands of people, with notable flows at stake. Moving forward, we would be better off laying out procedural principles to solve risk arbitrage situation.",
      "created_at" : "2022-10-27T01:40:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292854994",
      "id" : 1292854994,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585ND2bS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292854994/reactions"
      },
      "updated_at" : "2022-10-27T01:40:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292854994",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "It's an option, it's default false.   If people don't like it, they don't have to use it.   Bitcoin cannot rely on synchronized mempools or a prediction of miner preferences, we all know that, and this is not news - it's been discussed for years.    There are lots of cool \"instant transaction protocols\" out there.  Maybe as miners adopt full rbf, we'll see some incentive to adopt them?",
      "created_at" : "2022-10-28T14:15:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1295054941",
      "id" : 1295054941,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NMPhd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1295054941/reactions"
      },
      "updated_at" : "2022-10-28T14:15:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1295054941",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/50769?v=4",
         "events_url" : "https://api.github.com/users/earonesty/events{/privacy}",
         "followers_url" : "https://api.github.com/users/earonesty/followers",
         "following_url" : "https://api.github.com/users/earonesty/following{/other_user}",
         "gists_url" : "https://api.github.com/users/earonesty/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/earonesty",
         "id" : 50769,
         "login" : "earonesty",
         "node_id" : "MDQ6VXNlcjUwNzY5",
         "organizations_url" : "https://api.github.com/users/earonesty/orgs",
         "received_events_url" : "https://api.github.com/users/earonesty/received_events",
         "repos_url" : "https://api.github.com/users/earonesty/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/earonesty/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/earonesty/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/earonesty"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ariard \r\n\r\n> To restate the whole spirit of the initial approach proposed by the optional setting and automatic preferential peering, the idea was to remove from the Bitcoin Core project to have to say which of 0confs use-cases or contracting protocols use-cases is the legitimate one in face of policy rules, and defer the choice to node operators.\r\n\r\nFirst, I think we should be clear that the choice of policy rules (and consensus rules) has always belonged to node operators.  #25353 makes a particular policy choice more accessible to operators; that is all.\r\n\r\nSecond, what you wrote in the quoted text above is not remotely like what's in the help text or the release notes.  If the goal is to get node operators to decide which use case is legitimate, why are the help text[1] and release notes[1] only understandable to experts in relay policy?  Moreover, why do operator preferences for network-wide behavior need to be coupled to local mempool/relay policy?  I can say \"I want to be able to do full RBF in the future\" without running a full RBF node today; I may even have a strong incentive to run a certain policy today even though I want a different policy in the future (e.g. a miner may want to run the dominant policy to maximize their BIP152 compact block effectiveness but prefer a non-dominant policy that would increase fee revenue long-term).\r\n\r\nIf we want to know what users want, let's maybe ask them instead of providing new options with abstruse descriptions and potentially significant network effects.\r\n\r\n[1] \"Accept transaction replace-by-fee without requiring replaceability signaling\"\r\n[2] \"A new mempoolfullrbf option has been added, which enables the mempool to accept transaction replacement without enforcing BIP125 replaceability signaling. (#25353)\"\r\n\r\n> Reverting this PR doesn't answer the question I'm raising about the risk scope of the design considerations of Bitcoin Core development. W.r.t today of applications diversity and complexity, you cannot expect all the Bitcoin Core contributors to have a full-understanding of the implications on Lightning (when most of the LN devs themselves have a short understanding of the interactions of the protocol with mempool rules), a comprehensive view of the payment 0confs ecosystem and a practical experience with the inner workings of wallets.\r\n\r\nSure, it will often be the case that people outside of Bitcoin Core have a better understanding about certain issues than this project's primary contributors.  But that's part of why we have an open development process: so proposed changes can be reviewed and (if warranted) rejected or changed based on that feedback.\r\n\r\nThat process only works if we communicate about changes to the people who have that better understanding, and if we take the time to listen to their feedback.  In the case of #25353, we didn't communicate the change to at least one outside expert who had useful feedback.  We need to decide now whether that feedback warrants action.  I think it does: I don't think we should provide an option that changes behavior in a way that might break user processes without sufficient warning (except in an emergency, which no one has claimed this is).\r\n\r\n> Giving a longer warrant to the business is gained at the price of extending the risk DoS exposures of multi-party applications and contracting protocols users and services.\r\n\r\nIn my opinion, the flowchart should look like:\r\n\r\n- Is this an emergency?\r\n  - Yes, it's an emergency: it's ok to make a change without prior notice even though many people made significant decisions under the expectation that the policy would continue\r\n  - No, it's not an emergency: any change we want to make that may adversely affect many users should be communicated at least six months in advance so that people can make adjustments to their processes or try to convince contributors (or other users) to take a different approach\r\n\r\nDo you disagree with the above flowchart?  Do you think DoS exposure against multi-party applications and contracting protocols under the 23.x relay policy constitutes an emergency, justifying this change?  Do you think no significant miners/pools will enable `-mempoolfullrbf`, so it doesn't matter (if so, can we remove it from mainnet as unnecessary)?  Or am I missing something?\r\n\r\n---\r\n\r\nAs a reminder, if this PR gets merged, there's a [draft release note](https://gist.github.com/harding/f3cd8affb10cea96d352347fed7f4a3a) ready that says, \"the Bitcoin Core project plans to release [full RBF] code by version 25.0 in mid-2023, or earlier if warranted by events.\"  By merging this PR, we can demonstrate our willingness to listen to community feedback, level up our communication about this topic from good to great, gain additional time to refine our approach, but still potentially enable full RBF within six months.",
      "created_at" : "2022-10-31T07:17:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1296686308",
      "id" : 1296686308,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NSdzk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1296686308/reactions"
      },
      "updated_at" : "2022-10-31T07:17:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1296686308",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/61096?v=4",
         "events_url" : "https://api.github.com/users/harding/events{/privacy}",
         "followers_url" : "https://api.github.com/users/harding/followers",
         "following_url" : "https://api.github.com/users/harding/following{/other_user}",
         "gists_url" : "https://api.github.com/users/harding/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/harding",
         "id" : 61096,
         "login" : "harding",
         "node_id" : "MDQ6VXNlcjYxMDk2",
         "organizations_url" : "https://api.github.com/users/harding/orgs",
         "received_events_url" : "https://api.github.com/users/harding/received_events",
         "repos_url" : "https://api.github.com/users/harding/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/harding/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/harding/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/harding"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> In my opinion, the flowchart should look like:\r\n>\r\n> - Is this an emergency?\r\n>   - Yes, it's an emergency: it's ok to make a change without prior notice\r\n> even though many people made significant decisions under the expectation\r\n> that the policy would continue\r\n\r\n1) No actual change is being made by Core (as-is, before this PR).\r\n\r\n2) It is a false premise that it is \"without prior notice\". People have been advised for YEARS that the \"first seen\" policy was unsafe, and could not be relied on.\r\n\r\n3) It is okay to change mere policy without prior notice. Nobody should be assuming any given node has a well-known policy to begin with.\r\n",
      "created_at" : "2022-10-31T15:54:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1297303907",
      "id" : 1297303907,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NU0lj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297303907/reactions"
      },
      "updated_at" : "2022-10-31T15:54:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297303907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "On Mon, Oct 31, 2022 at 08:54:39AM -0700, Luke Dashjr wrote:\n> 1) No actual change is being made by Core (as-is, before this PR).\n> \n> 2) It is a false premise that it is \"without prior notice\". People have been advised for YEARS that the \"first seen\" policy was unsafe, and could not be relied on.\n> \n> 3) It is okay to change mere policy without prior notice. Nobody should be assuming any given node has a well-known policy to begin with.\n\n4) _Every_ change Bitcoin Core makes to relay policy breaks usages of zeroconf\nbecause you can always exploit differences in relay policy to get double spends\nmined.\n",
      "created_at" : "2022-10-31T16:10:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1297327434",
      "id" : 1297327434,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NU6VK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297327434/reactions"
      },
      "updated_at" : "2022-10-31T16:10:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297327434",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Quoting from @luke-jr :\r\n\r\n> No actual change is being made by Core (as-is, before this PR).\r\n\r\nIf no change was made in #25353, then reverting it is also not a change.  So, since it's holding up release, it should just be reverted.  [Note: this is not my main argument; it's just a reductio ad absurdum of Dashjr's reply.]\r\n\r\n> It is a false premise that it is \"without prior notice\". People have been advised for YEARS that the \"first seen\" policy was unsafe, and could not be relied on.\r\n\r\nIf it's equally unsafe under the 23.x policy rules as it is under the #25353 policy rules, doesn't that also imply that #25353 doesn't provide any benefit and so should be an easy revert?  [Again, a reductio ad absurdum.]\r\n\r\n> It is okay to change mere policy without prior notice. Nobody should be assuming any given node has a well-known policy to begin with.\r\n\r\nI don't understand what you're saying here or how it relates to the conversation.\r\n\r\nQuoting from @petertodd:\r\n\r\n> _Every_ change Bitcoin Core makes to relay policy breaks usages of zeroconf\r\nbecause you can always exploit differences in relay policy to get double spends\r\nmined.\r\n\r\nSee @ajtowns's comment [above](https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292819347), \"[the double spend monitoring system is] broken by txs that can be RBFed because there's no longer a race: you can send the replacement minutes or hours later, and the original will still disappear everywhere. It doesn't matter whether it's full RBF or opt-in RBF [(cite)](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021070.html); either breaks this approach. The difference is that with full RBF there's no possibility to make transactions where that system works anymore.\"",
      "created_at" : "2022-10-31T16:57:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1297388855",
      "id" : 1297388855,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NVJU3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297388855/reactions"
      },
      "updated_at" : "2022-10-31T16:57:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297388855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/61096?v=4",
         "events_url" : "https://api.github.com/users/harding/events{/privacy}",
         "followers_url" : "https://api.github.com/users/harding/followers",
         "following_url" : "https://api.github.com/users/harding/following{/other_user}",
         "gists_url" : "https://api.github.com/users/harding/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/harding",
         "id" : 61096,
         "login" : "harding",
         "node_id" : "MDQ6VXNlcjYxMDk2",
         "organizations_url" : "https://api.github.com/users/harding/orgs",
         "received_events_url" : "https://api.github.com/users/harding/received_events",
         "repos_url" : "https://api.github.com/users/harding/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/harding/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/harding/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/harding"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, though I would like us to go further and revert #25353.  I wrote a long post to the mailing list [arguing that we should not be trying to deploy fullrbf](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021135.html) at this time, because:\r\n1) Fullrbf doesn't appear to solve the multiparty (coinjoin) protocol problems first brought up as a justification;\r\n2) Non-replacement of transactions seems like a theoretically useful feature (whether or not you think zeroconf services are good or bad for bitcoin, it's not the only use a non-replacement policy, which is helpful in CPFP applications);\r\n3) Our current RBF policy can easily result in incentive incompatible replacements occurring (though its unclear to me how common this might be, it's an easily identifiable problem), so pushing our rbf policy on all transactions seems presumptuous; and\r\n4) Breaking policies that are in use on the network for no clear win is counter to the philosophy I think this project should have, particularly because I worry that this would set a precedent for breaking future policies as well, such as the current v3 transaction policy proposal that is being worked on, and I think that would be a mistake.\r\n\r\nRegarding the argument that miners and node operators should have choices: if we think that the number of double-spends of non-rbf-signaling transactions is not material -- which you would expect, given that RBF users can just signal using BIP 125 to issue their double-spends -- then the choice issue seems contrived.  It seems instead that the real reason to deploy this is to try to break a policy that is otherwise working, in the hopes of that creating a big enough change that business will stop zeroconf services.  However it's not clear to me that fullrbf will stop zeroconf as a practice, while it is clear that it could break legitimate use cases for non-signaling transactions, without any benefits to users who already are able to opt-in to RBF under BIP 125 today.  So on the whole, offering this choice seems like it makes the network worse, not better.",
      "created_at" : "2022-10-31T18:14:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1297481654",
      "id" : 1297481654,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NVf-2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297481654/reactions"
      },
      "updated_at" : "2022-10-31T18:16:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297481654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "NACK \r\n\r\nBitcoin Core developers should NOT be responsible for:\r\n- policies individual node operators are using\r\n- safety of said individual node operators\r\n",
      "created_at" : "2022-10-31T18:41:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1297515061",
      "id" : 1297515061,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NVoI1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297515061/reactions"
      },
      "updated_at" : "2022-10-31T18:41:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297515061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/11212268?v=4",
         "events_url" : "https://api.github.com/users/gruve-p/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gruve-p/followers",
         "following_url" : "https://api.github.com/users/gruve-p/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gruve-p/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gruve-p",
         "id" : 11212268,
         "login" : "gruve-p",
         "node_id" : "MDQ6VXNlcjExMjEyMjY4",
         "organizations_url" : "https://api.github.com/users/gruve-p/orgs",
         "received_events_url" : "https://api.github.com/users/gruve-p/received_events",
         "repos_url" : "https://api.github.com/users/gruve-p/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gruve-p/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gruve-p/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gruve-p"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> First, I think we should be clear that the choice of policy rules (and consensus rules) has always belonged to node operators. #25353 makes a particular policy choice more accessible to operators; that is all.\r\n> \r\n> Second, what you wrote in the quoted text above is not remotely like what's in the help text or the release notes. If the goal is to get node operators to decide which use case is legitimate, why are the help text[1] and release notes[1] only understandable to experts in relay policy? Moreover, why do operator preferences for network-wide behavior need to be coupled to local mempool/relay policy? I can say \"I want to be able to do full RBF in the future\" without running a full RBF node today; I may even have a strong incentive to run a certain policy today even though I want a different policy in the future (e.g. a miner may want to run the dominant policy to maximize their BIP152 compact block effectiveness but prefer a non-dominant policy that would increase fee revenue long-term).\r\n\r\nWhile I think we're in agreement that the choice of policy rules always belonged to node operators, at the same time we can't ignore that the choice of policy rules default, or even the existence of new optional policy mechanism present potentially significant network effects, as you're underscoring. In that light, when we're facing a situation where the most widely policy rules determine which use-case is encumbering security risks, as the Bitcoin Core project we should evaluate which use-case to support (and we don't have such formal process today, and I'm not even sure we should, unless in case of emergency), or defer the decisions to the wider crowd of node operators.\r\n\r\nOf course, deferring the decision to the wider crowd of node operators should be done in a fashion explaining well the trade-offs, in terms that a non-expert in relay policy can understand, and within a sufficient timeframe for the average Bitcoin user or service operator to build a grounded position. About the process I've carried on with `mempoolfullrlbf`, while I agree this quoted reasoning wasn't exposed in the help text, neither in the releases notes, I think it's reasonable to say that explaining the full-context of a sophisticated subject like the implications of full-rbf, won't hold in a command-line help text, neither we're sure the release notes are the appropriate place. If there is one loose standard communication in term of policy changes established by years of Bitcoin Core development practices, I think this is to communicate the rational on the mailiing list, which in the present case I think I've done. That the communication and affected users collection process could have been better, this is something I'm fully conceding, though note we're moving forward in an area without clear \"tickbox\".\r\n\r\n> Sure, it will often be the case that people outside of Bitcoin Core have a better understanding about certain issues than this project's primary contributors. But that's part of why we have an open development process: so proposed changes can be reviewed and (if warranted) rejected or changed based on that feedback.\r\n> \r\n> That process only works if we communicate about changes to the people who have that better understanding, and if we take the time to listen to their feedback. In the case of #25353, we didn't communicate the change to at least one outside expert who had useful feedback. We need to decide now whether that feedback warrants action. I think it does: I don't think we should provide an option that changes behavior in a way that might break user processes without sufficient warning (except in an emergency, which no one has claimed this is).\r\n\r\nI think we're in agreement that an ideal policy rules design process should communicate changes to a set of qualified people, and that we should offer clear timeframe to collect and listen to their feedback. Beyond, there are few points where I might diverge, firstly I believe we should keep the Bitcoin development process permissionless and decentralized, in the sense not formalizing process where some \"authority experts\" must be listen to before to proceed with any change. Rather I think we should abstract out such feedback collection process and designate communication endpoints like the mailiing list or the BOLT repository or whatever. Secondly, in term of feedback warranting action, I think we would be better off to have some sense of proportionality in the risk exposure severity of any change, but also in the economic weight of the use-cases. What we could be concern of is the alleged existence of a use-case, claiming some marginal use of a subset of policy rules, and building a justification that could not be argued against or proven against, completely stalling the process. I know coming up with a development process which offer both guarantees of efficiency, decentralization and conservatism is a high bar, though I believe something worthy of for a project unique like Bitcoin Core.\r\n\r\n> In my opinion, the flowchart should look like:\r\n> \r\n>     Is this an emergency?\r\n>         Yes, it's an emergency: it's ok to make a change without prior notice even though many people made significant decisions under the expectation that the policy would continue\r\n>         No, it's not an emergency: any change we want to make that may adversely affect many users should be communicated at least six months in advance so that people can make adjustments to their processes or try to convince contributors (or other users) to take a different approach\r\n> \r\n> Do you disagree with the above flowchart? Do you think DoS exposure against multi-party applications and contracting protocols under the 23.x relay policy constitutes an emergency, justifying this change? Do you think no significant miners/pools will enable -mempoolfullrbf, so it doesn't matter (if so, can we remove it from mainnet as unnecessary)? Or am I missing something?\r\n\r\nI don't think I disagree in the lineaments of this flowchart, what is unclear to me is when a situation of emergency is qualified, and how we should proceed on when a known security risk exists, presents a low-technical bar, and could provoke havoc on a subset of the ecosystem as soon as some script kiddie starts to play with it (note, sadly I think the present statement works for both 0confs and contracting protocols use-cases). Personally, I won't communicate towards the miners to enable `-mempoolfullrbf` until we have more consensus within the project on how we move forward, however I could understand a coinjoin/dual-funded operators concerned with the risk. Like I said, somehow we're offering a safety options to 0confs service at the price of downgrading the security balance sheet of contracting protocols.\r\n\r\n-----------\r\n\r\nAll that said, while I still hold the belief that multi-party applications and contracting protocols are exposed, I think the best way forward is actually address all the feedback we've collected during the last week on mempool policy rules design philosophy, affected use-cases, risks scope of the Bitcoin Core project and respect of a policy rules change communication process. Personally, I'll allocate my time and energy on working on those feedback, however if those contracting protocols users have a higher sensibility to the DoS concern, we have a well-reviewed patchset for them to protect better their services (#25353 + #25600). They're free to reach out to miners, and ask fro `mempoolfullrbf=1` adoption.\r\n\r\nAmong all the feedbacks collected, I think they're few ones really relevant to address.\r\n\r\nOne is the formalization of the policy rules design process, which communication endpoints we should reach out for (e.g the BOLT community, the LSP process, business/merchants, etc), what types of design feedback we should ask for (economic soundness, security risk, operational risk), what should be left beyond the scope of the Bitcoin Core process (is FX risk really something we should solve at that layer ?). what are reasonable timeline, allowing multiple rounds of back-and-forth, what should be the communication venues notified of significant changes.\r\n\r\nBeyond, I think Suhas's post raised an interesting position in terms of philosophy design of transaction-relay rules. From my understanding, the position asserted is the following \"to each use-case belongs a set of policy rules\", and that as long there is no harm towards the networks, the other protocols or node operators/miners we should aim to conciliate everything. While, I don't this position is sustainable in face of the mining dynamics and the long-term incentives, I had to confesss I don't have a strong model of the miners ecosystem, and how they interfere with use-cases/transaction-relay to demonstrate well my point. I think it would be very valuable to work on such model, be able to predict few income scenario in function of the strategy, and encompass MEV-style security risks towards second-layers. I would be really interested to evaluate against some long-term theoretical attacks against LN like miner harvesting or tx-withold things. Developing some sound model would take time, better to have something maintainable we can re-use to evaluate future policy changes, and other Bitcoin protocol features.\r\n\r\nMoreover, if we can build consensus on fullrbf itself, assuming we can address the concern above, I think it's highly valuable and in compliance with the conservative stand of the project to coordinate a timeline with 0confs services, working with them on deploying adequate counter-measures, if we can come up with robust schemes. Offering a predictable and visible timeline solidifies the development practice of Bitcoin Core in term of policy changes. There is not only the question of fullrbf, but also improving our process for the future. During the coming years, I still think we'll have more and more second-layers and advanced use-cases showing up, complexifying how we have to think and develop transation-relay policy changes.\r\n\r\nConcept ACK on #26287.",
      "created_at" : "2022-11-03T00:25:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1301518418",
      "id" : 1301518418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585Nk5hS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301518418/reactions"
      },
      "updated_at" : "2022-11-03T00:25:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301518418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@harding \r\n\r\n> Quoting from @petertodd:\r\n> \r\n> > _Every_ change Bitcoin Core makes to relay policy breaks usages of zeroconf\r\n> > because you can always exploit differences in relay policy to get double spends\r\n> > mined.\r\n> \r\n> See @ajtowns's comment [above](https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1292819347), \"[the double spend monitoring system is] broken by txs that can be RBFed because there's no longer a race: you can send the replacement minutes or hours later, and the original will still disappear everywhere. It doesn't matter whether it's full RBF or opt-in RBF [(cite)](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021070.html); either breaks this approach. The difference is that with full RBF there's no possibility to make transactions where that system works anymore.\"\r\n\r\nThis viewpoint of how zeroconf double-spends work is naive.\r\n\r\nThe reason why any difference in relay policy can be exploited to double-spend comes from the fact that we don't - and can't - relay double spends. This gives us two scenarios:\r\n\r\n1) Broadcast a transaction to the merchant that some miners do _not_ accept, followed by a double spend that some miners _do_ accept.\r\n\r\n2) _Target_ a transaction to some miners that nodes broadly do _not_ accept, followed by a transaction to the merchant\r\n\r\nIn both cases there can be a significant delay between the two transactions.\r\n\r\nThe latter case is the main reason why zeroconf \"risk management\" services inevitably end up sybil attacking the network: they need to connect to as many nodes as possible to try to pick up transactions that miners accepted that most nodes did not. It's also one reason why having merchants be vulnerable to zeroconf creates incentives for zeroconf double-spenders to attack the P2P network, as well as miners.\r\n\r\nThe former case is exactly what I successfully exploited over and over again during mempool congestion. Miners often had much higher minimum fee policies than merchants expected, so double-spending by simply sending a lowish fee transaction was successful as the miners simply didn't have the tx in their mempool. Aided of course, by the fact that there are a fair number of full-rbf nodes out there.\r\n\r\nThe fact is `minrelaytxfee` and `maxmempool` options are just as dangerous to zeroconf as `mempoolfullrbf`.",
      "created_at" : "2022-11-05T01:39:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1304370876",
      "id" : 1304370876,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585Nvx68",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304370876/reactions"
      },
      "updated_at" : "2022-11-05T01:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304370876",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Note that you can repeat 1 or 2 over and over until you succeed, and then only use the output from that success case for the actual merchant transaction. This ensures you succeed every time.",
      "created_at" : "2022-11-05T05:06:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1304408211",
      "id" : 1304408211,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585Nv7CT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304408211/reactions"
      },
      "updated_at" : "2022-11-05T05:06:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304408211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Closing for now. Let me know if this should be reopened.",
      "created_at" : "2022-11-05T09:21:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26287#issuecomment-1304453255",
      "id" : 1304453255,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26287",
      "node_id" : "IC_kwDOABII585NwGCH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304453255/reactions"
      },
      "updated_at" : "2022-11-05T09:21:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1304453255",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
