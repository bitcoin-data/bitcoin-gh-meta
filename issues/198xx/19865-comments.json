[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19980 (refactor: Some wallet cleanups by promag)\n* #19979 (Use proper TSA attributes (attempt two) by hebasto)\n* #19970 (sync.h: fix LockAssertion error reporting by ajtowns)\n* #19918 (sync: Replace LockAssertion with AssertLockHeldUnverified by ryanofsky)\n* #19905 (Remove dead CheckForkWarningConditionsOnNewFork by MarcoFalke)\n* #19498 (Tidy up ProcessOrphanTx by jnewbery)\n* #10443 (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-09-04T01:57:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-686854361",
      "id" : 686854361,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4Njg1NDM2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-22T01:37:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686854361",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "-0.5 on concept, I don't think dropping the runtime checks has any advantage.\r\n\r\nFor approach, I think just doing `git grep -l AssertLockHeld src | grep -v 'sync.h$' | xargs sed -i '/^ *AssertLockHeld(.*);/d'` would be better. The current code has `AssertLockHeld` and `AssertLockNotHeld` behave in the same way (a runtime check that the mutex is held by this thread or not), which is worth preserving imo.\r\n\r\nThe updated docs in doc/developer-notes.md would also need updating if this change were to be merged.",
      "created_at" : "2020-09-04T03:28:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-686879830",
      "id" : 686879830,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4Njg3OTgzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T03:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686879830",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I agree with @ajtowns' [comment](https://github.com/bitcoin/bitcoin/pull/19668#discussion_r483287210):\r\n> We have three types of assertions related for locking:\r\n> \r\n>  - marking a function as `EXCLUSIVE_LOCKS_REQUIRED` has a compile time check with clang that the caller has already obtained the lock\r\n> \r\n>  - declaring a `LockAssertion` instance overrides the clang compile time checks by saying that we've already somehow acquired the lock in a way that we can't prove via clang thread safety annotations. This is useful for lambda functions (which could be annotated) that are called from some generic dispatcher like `ForEach` (that can't be annotated).\r\n> \r\n>  - adding a call to `AssertLockHeld` does a runtime check if DEBUG_LOCKORDER is enabled. it's annotated with EXCLUSIVE_LOCKS_REQUIRED so is redundant with the compile time checks, but the compile time checks aren't available outside of clang. it's automatically called from LockAssertion to ensure that the compile time checks aren't overridden incorrectly.\r\n> \r\n> \r\n> As a result:\r\n> \r\n>  - using AssertLockHeld everywhere remains fine, and no longer needlessly disables the compile time checks\r\n> \r\n>  - LockAssertion should only be used very rarely -- and in fact it's only used in net_processing in some ForEach/ForEachNode functions.\r\n\r\nProbably, `AssertLockHeld` deserves a better name, but its functionality and usage are ok.\r\n\r\n`EXCLUSIVE_LOCKS_REQUIRED` is used in a header file. If a function definition is placed in a `*.cpp` file, using `AssertLockHeld` has the following benefits (besides a run time check):\r\n- it shows to a code reader the expected state of lock without referencing to a header file\r\n- it will warn about missed proper `EXCLUSIVE_LOCKS_REQUIRED` annotation\r\n\r\n`AssertLockHeld` is a great tool to transit from `RecursiveMutex` to `Mutex` in a safe and proven manner. See: #19303, #19833, #19854.\r\n\r\nConcept NACK.",
      "created_at" : "2020-09-04T08:02:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-686986462",
      "id" : 686986462,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4Njk4NjQ2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T08:02:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686986462",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "If a function definition is placed in a `*.cpp` file, using `AssertLockHeld` has the following benefits (besides a run time check):\r\n> \r\n> * it shows to a code reader the expected state of lock without referencing to a header file\r\n> * it will warn about missed proper `EXCLUSIVE_LOCKS_REQUIRED` annotation\r\n\r\nYou are literally talking about adding an annotation to check for the presence of another annotation. This is an absurd idea to me, but to take it seriously, what should the developer guidelines say about using AssertLockHeld this way? Should every function that is annotated with EXCLUSIVE_LOCKS_REQUIRED also have an AssertLockHeld at the top? Is there going to be a linter to check for this, or is this going to be another source of nits in review comments?\r\n\r\n> `AssertLockHeld` is a great tool to transit from `RecursiveMutex` to `Mutex` in a safe and proven manner. See: #19303, #19833, #19854.\r\n\r\nBefore the lock annotations added in #19668 this was true. It was a good way to discover where to add EXCLUSIVE_LOCKS_REQUIRED annotations. But now those annotations are added AssertLockHeld is only functioning as annotation checking the presence of another annotation, and doesn't impact the work in those other PRs or improve thread safety in any way.",
      "created_at" : "2020-09-04T14:46:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687192979",
      "id" : 687192979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzE5Mjk3OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T14:46:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687192979",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> You are literally talking about adding an annotation to check for the presence of another annotation.\r\n\r\nThis is one benefit among others (run time check is the main purpose of `AssertLockHeld`).\r\n\r\n> This is an absurd idea to me...\r\n\r\nAnnotations that was missed and added in 3ddc150857178bfb1c854c05bf9b526777876f56 and 2ee7743fe723227f2ea1b031eddb14fc6863f4c8 justify the #19668 approach.\r\n\r\n> ... but to take it seriously, what should the developer guidelines say about using AssertLockHeld this way? Should every function that is annotated with EXCLUSIVE_LOCKS_REQUIRED also have an AssertLockHeld at the top?\r\n\r\nWhy not?\r\n\r\n> ... is this going to be another source of nits in review comments?\r\n\r\nI think it is desirable for a new code.\r\n\r\n",
      "created_at" : "2020-09-04T14:58:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687201826",
      "id" : 687201826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzIwMTgyNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T14:58:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687201826",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Good! So we agree this PR has no detrimental effects on thread safety, and the NACK is based on a style preference?",
      "created_at" : "2020-09-04T15:06:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687207072",
      "id" : 687207072,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzIwNzA3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T15:06:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687207072",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Good! So we agree this PR has no detrimental effects on thread safety, and the NACK is based on a style preference?\r\n\r\nNo. It is based on thread safety.\r\n\r\nWhile migrating from `RecursiveMutex` to `Mutex` how one could be confident in the fact that a mutex is actually locked without run time assertion?\r\n\r\n> Try to remove confusing and no longer useful lock asserts.\r\n\r\nAt least, could this change be postponed until getting rid of `RecursiveMutex`s?",
      "created_at" : "2020-09-04T15:10:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687209825",
      "id" : 687209825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzIwOTgyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T15:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687209825",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> While migrating from `RecursiveMutex` to `Mutex` how one could be confident in the fact that a mutex is actually locked without run time assertion?\r\n\r\nIf it is annotated with EXCLUSIVE_LOCKS_REQUIRED, it seems you should be confident either that the mutex is actually locked or that LockAssertion was used earlier and would have triggered a runtime error where it was used. This PR isn't removing all runtime checks, just runtime checks redundant with compile time checks. AssertLockHeld is still available whenever you want to use it. It just returns to functioning like a normal runtime check, and not a strange compile time check enforcing the presence of a different compile time check. I can see how the strange check was useful during development of #19668, but it doesn't serve a purpose for thread safety going forward or help with future PRs.\r\n\r\nIf you want to make an argument for keeping all AssertLockHelds based on readability, that's fine, but then I think you should make a developer guideline saying that AssertLockHeld should be called first thing in any function annotated with EXCLUSIVE_LOCKS_REQUIRED, and ideally have a linter to enforce this. Otherwise if the assert is only used in some places but not others, that is just adding confusion and inconsistency.",
      "created_at" : "2020-09-04T15:56:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687236976",
      "id" : 687236976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzIzNjk3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T15:56:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687236976",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I need to review this PR just for what I'll learn. ð³",
      "created_at" : "2020-09-04T16:33:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687255914",
      "id" : 687255914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzI1NTkxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T16:33:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687255914",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think by default `./configure` will pick up gcc, which does not check lock annotations, so the current `AssertLockHeld` in master have a slight benefit of telling `./configure --enable-debug` devs (with gcc) who run the tests before creating a pull that something with their locks is wrong. Though, you correctly say that travis will compile with clang and fail if there is an inconsistency.\r\n\r\nThe redundant run time checks also serve as a insurance against bugs in clang.\r\n\r\nIdeally, they'd be inserted by the compiler whenever a function is annotated. Though, I don't see a way to do this in C++ without wrapping everything into more macros. Another option would be to have a preprocessing step in our ci scripts to insert the redundant run-time checks in enable-debug builds. At least that would make me feel more comfortable removing them.",
      "created_at" : "2020-09-05T10:19:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687585243",
      "id" : 687585243,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzU4NTI0Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-05T10:19:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687585243",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> At least that would make me feel more comfortable removing them.\r\n\r\nCan you clarify what is uncomfortable? If a function is annotated with EXCLUSIVE_LOCKS_REQUIRED(mutex), and the developer is not using clang, and the developer makes a change that calls the function without locking `mutex`, having a redundant AssertLockHeld(mutex) isn't going to impact the thread safety of the codebase, because CI ensures we will not merge this code.\r\n\r\nSo you are uncomfortable about the inconvenience that removing asserts which are already haphazardly and inconsistently placed will cause for developers who are not using clang, but who are building in debug mode, and who are removing locks or calling functions in new places, and who are doing some kind of manual or automated testing that would happen to trigger these assertions at runtime?\r\n\r\nOr uncomfortable about something different?\r\n\r\n",
      "created_at" : "2020-09-05T12:23:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687603455",
      "id" : 687603455,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzYwMzQ1NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-05T12:23:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687603455",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I simply wouldn't put too much trust into clang, since it may have bugs.",
      "created_at" : "2020-09-05T12:28:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687604066",
      "id" : 687604066,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NzYwNDA2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-05T12:28:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/687604066",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "We managed to misuse the compiler directives:\r\n\r\n* Our `AssertLockHeldInternal()` does a runtime check and would not return (aka `abort()`) if it fails. There is an attribute exactly for that: [ASSERT_EXCLUSIVE_LOCK](https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#assert-capability-and-assert-shared-capability), but we don't use it. We use [EXCLUSIVE_LOCKS_REQUIRED](https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#requires-requires-shared), meant for something else. This is a misuse because `AssertLockHeldInternal()` does not do anything that requires holding the mutex (like reading variables protected by that mutex).\r\n\r\n* Our `LockAssertion::LockAssertion()` does the same as `AssertLockHeldInternal()`, but is tagged with [EXCLUSIVE_LOCK_FUNCTION](https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#acquire-acquire-shared-release-release-shared). A misuse because `LockAssertion()` does not acquire the mutex.\r\n\r\nI think we shouldn't be doing that for no matter what reason - misleading the compiler that we do one thing while we do another.\r\n\r\nThe OP in #19668 boils down to:\r\n\r\n```cpp\r\n 1 int x GUARDED_BY(cs_main);\r\n 2\r\n 3 void f() // not annotated with EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n 4 {\r\n 5     // AssertLockHeld was properly annotated with ASSERT_EXCLUSIVE_LOCK() before #19668\r\n 6     AssertLockHeld(cs_main);\r\n 7\r\n 8     // no warning here that we access x without holding cs_main\r\n 9     x = 5;\r\n10 }\r\n```\r\n\r\nThe compiler does not issue a compile-time warning for line 9 because it knows line 9 is unreachable at run-time if `cs_main` is not held - `AssertLockHeld()` from line 6 would not return in that case. IMO we shouldn't try to extort the compiler to produce a warning here. Mis-labeling `AssertLockHeld()` with `EXCLUSIVE_LOCKS_REQUIRED()` only to ensure that `f()` has that attribute indeed looks like [adding an annotation to check for the presence of another annotation](https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-687192979).\r\n\r\nI agree with @MarcoFalke that clang may have bugs and we better not have it as our sole protection. The thread safety analysis look a bit immature to me - for example the warnings produced [depend on the order in which attributes are defined](https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467244459) (:-O). IMO [compile time checks are good and they are an addition to runtime checks, not a replacement](https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468442853).\r\n\r\nWhat about going back to using the proper attributes? Tag `AssertLockHeldInternal()` with `ASSERT_EXCLUSIVE_LOCK` when `DEBUG_LOCKORDER` is defined and no attributes otherwise (because it is a noop, don't fool the compiler) and remove the confusing `LockAssertion()`?",
      "created_at" : "2020-09-07T10:28:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688232331",
      "id" : 688232331,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODIzMjMzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-07T10:28:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688232331",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@vasild \r\n> The compiler does not issue a compile-time warning for line 9 because it knows line 9 is unreachable at run-time if `cs_main` is not held - `AssertLockHeld()` from line 6 would not return in that case.\r\n\r\nBut it is not known for a code reader.",
      "created_at" : "2020-09-07T10:57:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688248222",
      "id" : 688248222,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODI0ODIyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-07T10:57:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688248222",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The compiler does not issue a compile-time warning for line 9 because it knows line 9 is unreachable at run-time if `cs_main` is not held\r\n\r\nLine 9 is reachable at run-time if `cs_main` is not held and `DEBUG_LOCKORDER` is not specified. If there is not a test that exercises that code path, CI will not detect the bug and prevent the merge.",
      "created_at" : "2020-09-07T17:39:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688451585",
      "id" : 688451585,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODQ1MTU4NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-07T17:39:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688451585",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@ajtowns this is because of another misuse (or \"trying to fool the compiler\") - in `master` before #19668 in the non-`DEBUG_LOCKORDER` case `AssertLockHeldInternal()` was defined like this:\r\n\r\n```cpp\r\nvoid static inline AssertLockHeldInternal(...) ASSERT_EXCLUSIVE_LOCK(cs) {}\r\n```\r\n\r\nSo, we lied the compiler that we will check and `abort()`, but we did not do that.\r\n\r\nIn this case, IMO `ASSERT_EXCLUSIVE_LOCK()` should not be present. Then line 9 is reachable *and we get a compilation warning*.",
      "created_at" : "2020-09-07T18:38:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688469149",
      "id" : 688469149,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODQ2OTE0OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-07T18:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688469149",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@vasild \r\n> @ajtowns this is because of another misuse (or \"trying to fool the compiler\") - in `master` before #19668 in the non-`DEBUG_LOCKORDER` case `AssertLockHeldInternal()` was defined like this:\r\n> \r\n> ```c++\r\n> void static inline AssertLockHeldInternal(...) ASSERT_EXCLUSIVE_LOCK(cs) {}\r\n> ```\r\n> \r\n> So, we lied the compiler that we will check and `abort()`, but we did not do that.\r\n> \r\n> In this case, IMO `ASSERT_EXCLUSIVE_LOCK()` should not be present. Then line 9 is reachable _and we get a compilation warning_.\r\n\r\nSo, the 23d71d171e6e22ba5e4a909d597a54595b2a2c1f commit from the #19668 is a correct change, and it should not be reverted, right?",
      "created_at" : "2020-09-08T12:32:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688835841",
      "id" : 688835841,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODgzNTg0MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-08T12:32:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688835841",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "23d71d1 contains 2 changes. IMO the first one should be reverted and the second change should stay.",
      "created_at" : "2020-09-08T12:42:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688840395",
      "id" : 688840395,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4ODg0MDM5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-08T12:42:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/688840395",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> So, we lied the compiler that we will check and `abort()`, but we did not do that.\r\n\r\nI don't think it's useful to put this in moral terms. We're trying to prevent buggy code, by in order of preference, (a) making it impossible to write (eg RAII so locks are free automatically); (b) making the compiler complain about it (eg thread safety annotations); (c) getting predictable safe errors at runtime rather than crashes, hangs or undefined behaviour that only happen randomly (eg lock order checks).\r\n\r\nIn our code, it's never correct to call `AssertLockHeld` (that is as it stands prior to this PR, not after `LockAssertion` is renamed) without already holding the lock, so the additional behaviours allowed by ASSERT_EXCLUSIVE_LOCK aren't helpful, and make it easier to write buggy code.",
      "created_at" : "2020-09-14T05:47:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-691825920",
      "id" : 691825920,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MTgyNTkyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-14T05:47:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/691825920",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-09-23T16:15:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-697622315",
      "id" : 697622315,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NzYyMjMxNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-23T16:15:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697622315",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Can be closed?",
      "created_at" : "2020-10-19T09:54:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-711958576",
      "id" : 711958576,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxMTk1ODU3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-19T09:54:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/711958576",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Let me know if I should reopen",
      "created_at" : "2020-10-25T13:41:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-716150347",
      "id" : 716150347,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19865",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxNjE1MDM0Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-25T13:41:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/716150347",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
