[
   {
      "author_association" : "NONE",
      "body" : "@jnewbery Please let me know what else could be improved in the tests :)",
      "created_at" : "2018-03-23T12:31:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-375650628",
      "id" : 375650628,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12766",
      "updated_at" : "2018-03-23T12:31:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375650628",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/9900?v=4",
         "events_url" : "https://api.github.com/users/romanz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/romanz/followers",
         "following_url" : "https://api.github.com/users/romanz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/romanz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/romanz",
         "id" : 9900,
         "login" : "romanz",
         "organizations_url" : "https://api.github.com/users/romanz/orgs",
         "received_events_url" : "https://api.github.com/users/romanz/received_events",
         "repos_url" : "https://api.github.com/users/romanz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/romanz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/romanz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/romanz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Will review after #12717 is merged (feel free to ping me again once that happens!)",
      "created_at" : "2018-03-26T15:16:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-376202949",
      "id" : 376202949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12766",
      "updated_at" : "2018-03-26T15:16:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376202949",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> Will review after #12717 is merged (feel free to ping me again once that happens!)\r\n\r\nIt's merged, please rebase (so that this is only test changes).",
      "created_at" : "2018-03-27T19:38:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-376648786",
      "id" : 376648786,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12766",
      "updated_at" : "2018-03-27T19:38:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376648786",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jnewbery Ping :)",
      "created_at" : "2018-04-02T16:37:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-377972377",
      "id" : 377972377,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12766",
      "updated_at" : "2018-04-02T16:37:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377972377",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/9900?v=4",
         "events_url" : "https://api.github.com/users/romanz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/romanz/followers",
         "following_url" : "https://api.github.com/users/romanz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/romanz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/romanz",
         "id" : 9900,
         "login" : "romanz",
         "organizations_url" : "https://api.github.com/users/romanz/orgs",
         "received_events_url" : "https://api.github.com/users/romanz/received_events",
         "repos_url" : "https://api.github.com/users/romanz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/romanz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/romanz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/romanz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12766#discussion_r178604911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178604911"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure if ordering is guaranteed here. Perhaps construct sets and check for set equality?",
      "commit_id" : "55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
      "created_at" : "2018-04-02T17:58:54Z",
      "diff_hunk" : "@@ -4,351 +4,297 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the REST API.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from struct import *\n+import binascii\n+from decimal import Decimal\n+from enum import Enum\n from io import BytesIO\n-from codecs import encode\n+import json\n+from struct import pack, unpack\n \n import http.client\n import urllib.parse\n \n-def deser_uint256(f):\n-    r = 0\n-    for i in range(8):\n-        t = unpack(b\"<I\", f.read(4))[0]\n-        r += t << (i * 32)\n-    return r\n-\n-#allows simple http get calls\n-def http_get_call(host, port, path, response_object = 0):\n-    conn = http.client.HTTPConnection(host, port)\n-    conn.request('GET', path)\n-\n-    if response_object:\n-        return conn.getresponse()\n-\n-    return conn.getresponse().read().decode('utf-8')\n-\n-#allows simple http post calls with a request body\n-def http_post_call(host, port, path, requestdata = '', response_object = 0):\n-    conn = http.client.HTTPConnection(host, port)\n-    conn.request('POST', path, requestdata)\n-\n-    if response_object:\n-        return conn.getresponse()\n-\n-    return conn.getresponse().read()\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class ReqType(Enum):\n+    JSON = 1\n+    BIN = 2\n+    HEX = 3\n+\n+class RetType(Enum):\n+    OBJ = 1\n+    BYTES = 2\n+    JSON = 3\n+\n+def filter_output_indices_by_value(vouts, value):\n+    for vout in vouts:\n+        if vout['value'] == value:\n+            yield vout['n']\n \n class RESTTest (BitcoinTestFramework):\n-    FORMAT_SEPARATOR = \".\"\n-\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-        self.extra_args = [[\"-rest\"]] * self.num_nodes\n-\n-    def setup_network(self, split=False):\n-        super().setup_network()\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-rest\"], []]\n+\n+    def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n+        rest_uri = '/rest' + uri\n+        if req_type == ReqType.JSON:\n+            rest_uri += '.json'\n+        elif req_type == ReqType.BIN:\n+            rest_uri += '.bin'\n+        elif req_type == ReqType.HEX:\n+            rest_uri += '.hex'\n+\n+        conn = http.client.HTTPConnection(self.url.hostname, self.url.port)\n+        self.log.debug('%s %s %s', http_method, rest_uri, body)\n+        if http_method == 'GET':\n+            conn.request('GET', rest_uri)\n+        elif http_method == 'POST':\n+            conn.request('POST', rest_uri, body)\n+        resp = conn.getresponse()\n+\n+        assert_equal(resp.status, status)\n+\n+        if ret_type == RetType.OBJ:\n+            return resp\n+        elif ret_type == RetType.BYTES:\n+            return resp.read()\n+        elif ret_type == RetType.JSON:\n+            return json.loads(resp.read().decode('utf-8'), parse_float=Decimal)\n \n     def run_test(self):\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-        self.log.info(\"Mining blocks...\")\n+        self.url = urllib.parse.urlparse(self.nodes[0].url)\n+        self.log.info(\"Mine blocks and send Bitcoin to node 1\")\n+\n+        # Random address so node1's balance doesn't increase\n+        not_related_address = \"2MxqoHEdNQTyYeX1mHcbrrpzgojbosTpCvJ\"\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n-        self.nodes[2].generate(100)\n+        self.nodes[1].generatetoaddress(100, not_related_address)\n         self.sync_all()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n \n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        self.nodes[2].generate(1)\n+        self.nodes[1].generatetoaddress(1, not_related_address)\n         self.sync_all()\n         bb_hash = self.nodes[0].getbestblockhash()\n \n-        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\")) #balance now should be 0.1 on node 1\n+        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n \n-        # load the latest 0.1 tx over the REST API\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n-        vintx = json_obj['vin'][0]['txid'] # get the vin to later check for utxo (should be spent by then)\n+        self.log.info(\"Load the transaction using the /tx URI\")\n+\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n+        spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])  # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n-        n = 0\n-        for vout in json_obj['vout']:\n-            if vout['value'] == 0.1:\n-                n = vout['n']\n+        n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n+        spending = (txid, n)\n \n+        self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n-        #######################################\n-        # GETUTXOS: query an unspent outpoint #\n-        #######################################\n-        json_request = '/'+txid+'-'+str(n)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n \n-        #check chainTip response\n+        # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is one utxo\n+        # Make sure there is one utxo\n         assert_equal(len(json_obj['utxos']), 1)\n-        assert_equal(json_obj['utxos'][0]['value'], 0.1)\n+        assert_equal(json_obj['utxos'][0]['value'], Decimal('0.1'))\n \n+        self.log.info(\"Query a spent TXO using the /getutxos URI\")\n \n-        #################################################\n-        # GETUTXOS: now query an already spent outpoint #\n-        #################################################\n-        json_request = '/'+vintx+'-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n \n-        #check chainTip response\n+        # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is no utxo in the response because this oupoint has been spent\n+        # Make sure there is no utxo in the response because this outpoint has been spent\n         assert_equal(len(json_obj['utxos']), 0)\n \n-        #check bitmap\n+        # Check bitmap\n         assert_equal(json_obj['bitmap'], \"0\")\n \n+        self.log.info(\"Query two TXOs using the /getutxos URI\")\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}/{}-{}\".format(*(spending + spent)))\n \n-        ##################################################\n-        # GETUTXOS: now check both with the same request #\n-        ##################################################\n-        json_request = '/'+txid+'-'+str(n)+'/'+vintx+'-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['bitmap'], \"10\")\n \n-        #test binary response\n-        bb_hash = self.nodes[0].getbestblockhash()\n-\n-        binaryRequest = b'\\x01\\x02'\n-        binaryRequest += hex_str_to_bytes(txid)\n-        binaryRequest += pack(\"i\", n)\n-        binaryRequest += hex_str_to_bytes(vintx)\n-        binaryRequest += pack(\"i\", 0)\n+        self.log.info(\"Query the TXOs using the /getutxos URI with a binary response\")\n \n-        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n-        output = BytesIO()\n-        output.write(bin_response)\n-        output.seek(0)\n-        chainHeight = unpack(\"i\", output.read(4))[0]\n-        hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(64)\n+        bin_request = b'\\x01\\x02'\n+        for txid, n in [spending, spent]:\n+            bin_request += hex_str_to_bytes(txid)\n+            bin_request += pack(\"i\", n)\n \n-        assert_equal(bb_hash, hashFromBinResponse) #check if getutxo's chaintip during calculation was fine\n-        assert_equal(chainHeight, 102) #chain height must be 102\n+        bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)\n+        output = BytesIO(bin_response)\n+        chain_height, = unpack(\"i\", output.read(4))\n+        response_hash = binascii.hexlify(output.read(32)[::-1]).decode('ascii')\n \n+        assert_equal(bb_hash, response_hash)  # check if getutxo's chaintip during calculation was fine\n+        assert_equal(chain_height, 102)  # chain height must be 102\n \n-        ############################\n-        # GETUTXOS: mempool checks #\n-        ############################\n+        self.log.info(\"Test the /getutxos URI with and without /checkmempool\")\n+        # Create a transaction, check that it's found with /checkmempool, but\n+        # not found without. Then confirm the transaction and check that it's\n+        # found with or without /checkmempool.\n \n         # do a tx and don't sync\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n         # get the spent output to later check for utxo (should be spent by then)\n-        spent = '{}-{}'.format(json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n+        spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n         # get n of 0.1 outpoint\n-        n = 0\n-        for vout in json_obj['vout']:\n-            if vout['value'] == 0.1:\n-                n = vout['n']\n-        spending = '{}-{}'.format(txid, n)\n-\n-        json_request = '/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just added to the mempool\n-\n-        json_request = '/checkmempool/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it has just added to the mempool\n-\n-        json_request = '/'+spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because its spending tx is not confirmed\n-\n-        json_request = '/checkmempool/'+spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just spent (by mempool tx)\n+        n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n+        spending = (txid, n)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 0)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spent))\n+        assert_equal(len(json_obj['utxos']), 0)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        json_request = '/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n-\n-        json_request = '/checkmempool/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n-\n-        #do some invalid requests\n-        json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid json request\n-\n-        json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n-\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n-\n-        #test limits\n-        json_request = '/checkmempool/'\n-        for x in range(0, 20):\n-            json_request += txid+'-'+str(n)+'/'\n-        json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we exceeding the limits\n-\n-        json_request = '/checkmempool/'\n-        for x in range(0, 15):\n-            json_request += txid+'-'+str(n)+'/'\n-        json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 200) #must be a 200 because we are within the limits\n-\n-        self.nodes[0].generate(1) #generate block to not affect upcoming tests\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        # Do some invalid requests\n+        self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.JSON, body='{\"checkmempool', status=400, ret_type=RetType.OBJ)\n+        self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body='{\"checkmempool', status=400, ret_type=RetType.OBJ)\n+        self.test_rest_request(\"/getutxos/checkmempool\", http_method='POST', req_type=ReqType.JSON, status=400, ret_type=RetType.OBJ)\n+\n+        # Test limits\n+        long_uri = '/'.join([\"{}-{}\".format(txid, n) for n in range(20)])\n+        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=400, ret_type=RetType.OBJ)\n+\n+        long_uri = '/'.join(['{}-{}'.format(txid, n) for n in range(15)])\n+        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=200)\n+\n+        self.nodes[0].generate(1)  # generate block to not affect upcoming tests\n         self.sync_all()\n \n-        ################\n-        # /rest/block/ #\n-        ################\n+        self.log.info(\"Test the /block and /headers URIs\")\n+        bb_hash = self.nodes[0].getbestblockhash()\n \n-        # check binary format\n-        response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n-        assert_equal(response.status, 200)\n+        # Check binary format\n+        response = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_greater_than(int(response.getheader('content-length')), 80)\n-        response_str = response.read()\n+        response_bytes = response.read()\n \n-        # compare with block header\n-        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n-        assert_equal(response_header.status, 200)\n+        # Compare with block header\n+        response_header = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_equal(int(response_header.getheader('content-length')), 80)\n-        response_header_str = response_header.read()\n-        assert_equal(response_str[0:80], response_header_str)\n+        response_header_bytes = response_header.read()\n+        assert_equal(response_bytes[:80], response_header_bytes)\n \n-        # check block hex format\n-        response_hex = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(response_hex.status, 200)\n+        # Check block hex format\n+        response_hex = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n-        response_hex_str = response_hex.read()\n-        assert_equal(encode(response_str, \"hex_codec\")[0:160], response_hex_str[0:160])\n+        response_hex_bytes = response_hex.read().strip(b'\\n')\n+        assert_equal(binascii.hexlify(response_bytes), response_hex_bytes)\n \n-        # compare with hex block header\n-        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(response_header_hex.status, 200)\n+        # Compare with hex block header\n+        response_header_hex = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n-        response_header_hex_str = response_header_hex.read()\n-        assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n-        assert_equal(encode(response_header_str, \"hex_codec\")[0:160], response_header_hex_str[0:160])\n+        response_header_hex_bytes = response_header_hex.read(160)\n+        assert_equal(binascii.hexlify(response_bytes[:80]), response_header_hex_bytes)\n \n-        # check json format\n-        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n-        block_json_obj = json.loads(block_json_string)\n+        # Check json format\n+        block_json_obj = self.test_rest_request(\"/block/{}\".format(bb_hash))\n         assert_equal(block_json_obj['hash'], bb_hash)\n \n-        # compare with json block header\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read().decode('utf-8')\n-        json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n-        assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n-        assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n+        # Compare with json block header\n+        json_obj = self.test_rest_request(\"/headers/1/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 1)  # ensure that there is one header in the json response\n+        assert_equal(json_obj[0]['hash'], bb_hash)  # request/response hash should be the same\n \n-        #compare with normal RPC block response\n+        # Compare with normal RPC block response\n         rpc_block_json = self.nodes[0].getblock(bb_hash)\n-        assert_equal(json_obj[0]['hash'],               rpc_block_json['hash'])\n-        assert_equal(json_obj[0]['confirmations'],      rpc_block_json['confirmations'])\n-        assert_equal(json_obj[0]['height'],             rpc_block_json['height'])\n-        assert_equal(json_obj[0]['version'],            rpc_block_json['version'])\n-        assert_equal(json_obj[0]['merkleroot'],         rpc_block_json['merkleroot'])\n-        assert_equal(json_obj[0]['time'],               rpc_block_json['time'])\n-        assert_equal(json_obj[0]['nonce'],              rpc_block_json['nonce'])\n-        assert_equal(json_obj[0]['bits'],               rpc_block_json['bits'])\n-        assert_equal(json_obj[0]['difficulty'],         rpc_block_json['difficulty'])\n-        assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n-        assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n-\n-        #see if we can get 5 headers in one response\n+        for key in ['hash', 'confirmations', 'height', 'version', 'merkleroot', 'time', 'nonce', 'bits', 'difficulty', 'chainwork', 'previousblockhash']:\n+            assert_equal(json_obj[0][key], rpc_block_json[key])\n+\n+        # See if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read().decode('utf-8')\n-        json_obj = json.loads(response_header_json_str)\n-        assert_equal(len(json_obj), 5) #now we should have 5 header objects\n+        json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n+\n+        self.log.info(\"Test the /tx URI\")\n \n-        # do tx test\n         tx_hash = block_json_obj['tx'][0]['txid']\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(tx_hash))\n         assert_equal(json_obj['txid'], tx_hash)\n \n-        # check hex format response\n-        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(hex_string.status, 200)\n-        assert_greater_than(int(response.getheader('content-length')), 10)\n+        # Check hex format response\n+        hex_response = self.test_rest_request(\"/tx/{}\".format(tx_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n+                                     json_obj['size']*2)\n \n+        self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n \n-        # check block tx details\n-        # let's make 3 tx and mine them on node 1\n+        # Make 3 tx and mine them on node 1\n         txs = []\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n         self.sync_all()\n \n-        # check that there are exactly 3 transactions in the TX memory pool before generating the block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info'+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        # Check that there are exactly 3 transactions in the TX memory pool before generating the block\n+        json_obj = self.test_rest_request(\"/mempool/info\")\n         assert_equal(json_obj['size'], 3)\n         # the size of the memory pool should be greater than 3x ~100 bytes\n         assert_greater_than(json_obj['bytes'], 300)\n \n-        # check that there are our submitted transactions in the TX memory pool\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        # Check that there are our submitted transactions in the TX memory pool\n+        json_obj = self.test_rest_request(\"/mempool/contents\")\n         for i, tx in enumerate(txs):\n-            assert_equal(tx in json_obj, True)\n-            assert_equal(json_obj[tx]['spentby'], txs[i+1:i+2])\n-            assert_equal(json_obj[tx]['depends'], txs[i-1:i])\n+            assert tx in json_obj\n+            assert_equal(json_obj[tx]['spentby'], txs[i + 1:i + 2])\n+            assert_equal(json_obj[tx]['depends'], txs[i - 1:i])\n \n-        # now mine the transactions\n+        # Now mine the transactions\n         newblockhash = self.nodes[1].generate(1)\n         self.sync_all()\n \n-        #check if the 3 tx show up in the new block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/'+newblockhash[0]+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        for tx in json_obj['tx']:\n-            if not 'coinbase' in tx['vin'][0]: #exclude coinbase\n-                assert_equal(tx['txid'] in txs, True)\n+        # Check if the 3 tx show up in the new block\n+        json_obj = self.test_rest_request(\"/block/{}\".format(newblockhash[0]))\n+        non_coinbase_txs = [tx['txid'] for tx in json_obj['tx']",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12766#discussion_r178604911",
      "id" : 178604911,
      "original_commit_id" : "d54e3e704838eb39a5e6e33d8b530c6ed404fd49",
      "original_position" : 520,
      "path" : "test/functional/interface_rest.py",
      "position" : null,
      "pull_request_review_id" : 108687425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766",
      "updated_at" : "2018-04-03T07:54:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178604911",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12766#discussion_r178751925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178751925"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sounds good - done.",
      "commit_id" : "55efc1f62cef7e19efcb58ba68fbc2053bfa19a0",
      "created_at" : "2018-04-03T08:44:56Z",
      "diff_hunk" : "@@ -4,351 +4,297 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the REST API.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from struct import *\n+import binascii\n+from decimal import Decimal\n+from enum import Enum\n from io import BytesIO\n-from codecs import encode\n+import json\n+from struct import pack, unpack\n \n import http.client\n import urllib.parse\n \n-def deser_uint256(f):\n-    r = 0\n-    for i in range(8):\n-        t = unpack(b\"<I\", f.read(4))[0]\n-        r += t << (i * 32)\n-    return r\n-\n-#allows simple http get calls\n-def http_get_call(host, port, path, response_object = 0):\n-    conn = http.client.HTTPConnection(host, port)\n-    conn.request('GET', path)\n-\n-    if response_object:\n-        return conn.getresponse()\n-\n-    return conn.getresponse().read().decode('utf-8')\n-\n-#allows simple http post calls with a request body\n-def http_post_call(host, port, path, requestdata = '', response_object = 0):\n-    conn = http.client.HTTPConnection(host, port)\n-    conn.request('POST', path, requestdata)\n-\n-    if response_object:\n-        return conn.getresponse()\n-\n-    return conn.getresponse().read()\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class ReqType(Enum):\n+    JSON = 1\n+    BIN = 2\n+    HEX = 3\n+\n+class RetType(Enum):\n+    OBJ = 1\n+    BYTES = 2\n+    JSON = 3\n+\n+def filter_output_indices_by_value(vouts, value):\n+    for vout in vouts:\n+        if vout['value'] == value:\n+            yield vout['n']\n \n class RESTTest (BitcoinTestFramework):\n-    FORMAT_SEPARATOR = \".\"\n-\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-        self.extra_args = [[\"-rest\"]] * self.num_nodes\n-\n-    def setup_network(self, split=False):\n-        super().setup_network()\n-        connect_nodes_bi(self.nodes, 0, 2)\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-rest\"], []]\n+\n+    def test_rest_request(self, uri, http_method='GET', req_type=ReqType.JSON, body='', status=200, ret_type=RetType.JSON):\n+        rest_uri = '/rest' + uri\n+        if req_type == ReqType.JSON:\n+            rest_uri += '.json'\n+        elif req_type == ReqType.BIN:\n+            rest_uri += '.bin'\n+        elif req_type == ReqType.HEX:\n+            rest_uri += '.hex'\n+\n+        conn = http.client.HTTPConnection(self.url.hostname, self.url.port)\n+        self.log.debug('%s %s %s', http_method, rest_uri, body)\n+        if http_method == 'GET':\n+            conn.request('GET', rest_uri)\n+        elif http_method == 'POST':\n+            conn.request('POST', rest_uri, body)\n+        resp = conn.getresponse()\n+\n+        assert_equal(resp.status, status)\n+\n+        if ret_type == RetType.OBJ:\n+            return resp\n+        elif ret_type == RetType.BYTES:\n+            return resp.read()\n+        elif ret_type == RetType.JSON:\n+            return json.loads(resp.read().decode('utf-8'), parse_float=Decimal)\n \n     def run_test(self):\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-        self.log.info(\"Mining blocks...\")\n+        self.url = urllib.parse.urlparse(self.nodes[0].url)\n+        self.log.info(\"Mine blocks and send Bitcoin to node 1\")\n+\n+        # Random address so node1's balance doesn't increase\n+        not_related_address = \"2MxqoHEdNQTyYeX1mHcbrrpzgojbosTpCvJ\"\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n-        self.nodes[2].generate(100)\n+        self.nodes[1].generatetoaddress(100, not_related_address)\n         self.sync_all()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n \n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n         self.sync_all()\n-        self.nodes[2].generate(1)\n+        self.nodes[1].generatetoaddress(1, not_related_address)\n         self.sync_all()\n         bb_hash = self.nodes[0].getbestblockhash()\n \n-        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\")) #balance now should be 0.1 on node 1\n+        assert_equal(self.nodes[1].getbalance(), Decimal(\"0.1\"))\n \n-        # load the latest 0.1 tx over the REST API\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n-        vintx = json_obj['vin'][0]['txid'] # get the vin to later check for utxo (should be spent by then)\n+        self.log.info(\"Load the transaction using the /tx URI\")\n+\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n+        spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])  # get the vin to later check for utxo (should be spent by then)\n         # get n of 0.1 outpoint\n-        n = 0\n-        for vout in json_obj['vout']:\n-            if vout['value'] == 0.1:\n-                n = vout['n']\n+        n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n+        spending = (txid, n)\n \n+        self.log.info(\"Query an unspent TXO using the /getutxos URI\")\n \n-        #######################################\n-        # GETUTXOS: query an unspent outpoint #\n-        #######################################\n-        json_request = '/'+txid+'-'+str(n)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n \n-        #check chainTip response\n+        # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is one utxo\n+        # Make sure there is one utxo\n         assert_equal(len(json_obj['utxos']), 1)\n-        assert_equal(json_obj['utxos'][0]['value'], 0.1)\n+        assert_equal(json_obj['utxos'][0]['value'], Decimal('0.1'))\n \n+        self.log.info(\"Query a spent TXO using the /getutxos URI\")\n \n-        #################################################\n-        # GETUTXOS: now query an already spent outpoint #\n-        #################################################\n-        json_request = '/'+vintx+'-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n \n-        #check chainTip response\n+        # Check chainTip response\n         assert_equal(json_obj['chaintipHash'], bb_hash)\n \n-        #make sure there is no utxo in the response because this oupoint has been spent\n+        # Make sure there is no utxo in the response because this outpoint has been spent\n         assert_equal(len(json_obj['utxos']), 0)\n \n-        #check bitmap\n+        # Check bitmap\n         assert_equal(json_obj['bitmap'], \"0\")\n \n+        self.log.info(\"Query two TXOs using the /getutxos URI\")\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}/{}-{}\".format(*(spending + spent)))\n \n-        ##################################################\n-        # GETUTXOS: now check both with the same request #\n-        ##################################################\n-        json_request = '/'+txid+'-'+str(n)+'/'+vintx+'-0'\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n         assert_equal(len(json_obj['utxos']), 1)\n         assert_equal(json_obj['bitmap'], \"10\")\n \n-        #test binary response\n-        bb_hash = self.nodes[0].getbestblockhash()\n-\n-        binaryRequest = b'\\x01\\x02'\n-        binaryRequest += hex_str_to_bytes(txid)\n-        binaryRequest += pack(\"i\", n)\n-        binaryRequest += hex_str_to_bytes(vintx)\n-        binaryRequest += pack(\"i\", 0)\n+        self.log.info(\"Query the TXOs using the /getutxos URI with a binary response\")\n \n-        bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n-        output = BytesIO()\n-        output.write(bin_response)\n-        output.seek(0)\n-        chainHeight = unpack(\"i\", output.read(4))[0]\n-        hashFromBinResponse = hex(deser_uint256(output))[2:].zfill(64)\n+        bin_request = b'\\x01\\x02'\n+        for txid, n in [spending, spent]:\n+            bin_request += hex_str_to_bytes(txid)\n+            bin_request += pack(\"i\", n)\n \n-        assert_equal(bb_hash, hashFromBinResponse) #check if getutxo's chaintip during calculation was fine\n-        assert_equal(chainHeight, 102) #chain height must be 102\n+        bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)\n+        output = BytesIO(bin_response)\n+        chain_height, = unpack(\"i\", output.read(4))\n+        response_hash = binascii.hexlify(output.read(32)[::-1]).decode('ascii')\n \n+        assert_equal(bb_hash, response_hash)  # check if getutxo's chaintip during calculation was fine\n+        assert_equal(chain_height, 102)  # chain height must be 102\n \n-        ############################\n-        # GETUTXOS: mempool checks #\n-        ############################\n+        self.log.info(\"Test the /getutxos URI with and without /checkmempool\")\n+        # Create a transaction, check that it's found with /checkmempool, but\n+        # not found without. Then confirm the transaction and check that it's\n+        # found with or without /checkmempool.\n \n         # do a tx and don't sync\n         txid = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 0.1)\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+txid+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(txid))\n         # get the spent output to later check for utxo (should be spent by then)\n-        spent = '{}-{}'.format(json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n+        spent = (json_obj['vin'][0]['txid'], json_obj['vin'][0]['vout'])\n         # get n of 0.1 outpoint\n-        n = 0\n-        for vout in json_obj['vout']:\n-            if vout['value'] == 0.1:\n-                n = vout['n']\n-        spending = '{}-{}'.format(txid, n)\n-\n-        json_request = '/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just added to the mempool\n-\n-        json_request = '/checkmempool/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it has just added to the mempool\n-\n-        json_request = '/'+spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because its spending tx is not confirmed\n-\n-        json_request = '/checkmempool/'+spent\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 0) #there should be no outpoint because it has just spent (by mempool tx)\n+        n, = filter_output_indices_by_value(json_obj['vout'], Decimal('0.1'))\n+        spending = (txid, n)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 0)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spent))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spent))\n+        assert_equal(len(json_obj['utxos']), 0)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        json_request = '/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n-\n-        json_request = '/checkmempool/'+spending\n-        json_string = http_get_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        assert_equal(len(json_obj['utxos']), 1) #there should be an outpoint because it was mined\n-\n-        #do some invalid requests\n-        json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'json', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid json request\n-\n-        json_request = '{\"checkmempool'\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', json_request, True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n-\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos/checkmempool'+self.FORMAT_SEPARATOR+'bin', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we send an invalid bin request\n-\n-        #test limits\n-        json_request = '/checkmempool/'\n-        for x in range(0, 20):\n-            json_request += txid+'-'+str(n)+'/'\n-        json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 400) #must be a 400 because we exceeding the limits\n-\n-        json_request = '/checkmempool/'\n-        for x in range(0, 15):\n-            json_request += txid+'-'+str(n)+'/'\n-        json_request = json_request.rstrip(\"/\")\n-        response = http_post_call(url.hostname, url.port, '/rest/getutxos'+json_request+self.FORMAT_SEPARATOR+'json', '', True)\n-        assert_equal(response.status, 200) #must be a 200 because we are within the limits\n-\n-        self.nodes[0].generate(1) #generate block to not affect upcoming tests\n+        json_obj = self.test_rest_request(\"/getutxos/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        json_obj = self.test_rest_request(\"/getutxos/checkmempool/{}-{}\".format(*spending))\n+        assert_equal(len(json_obj['utxos']), 1)\n+\n+        # Do some invalid requests\n+        self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.JSON, body='{\"checkmempool', status=400, ret_type=RetType.OBJ)\n+        self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body='{\"checkmempool', status=400, ret_type=RetType.OBJ)\n+        self.test_rest_request(\"/getutxos/checkmempool\", http_method='POST', req_type=ReqType.JSON, status=400, ret_type=RetType.OBJ)\n+\n+        # Test limits\n+        long_uri = '/'.join([\"{}-{}\".format(txid, n) for n in range(20)])\n+        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=400, ret_type=RetType.OBJ)\n+\n+        long_uri = '/'.join(['{}-{}'.format(txid, n) for n in range(15)])\n+        self.test_rest_request(\"/getutxos/checkmempool/{}\".format(long_uri), http_method='POST', status=200)\n+\n+        self.nodes[0].generate(1)  # generate block to not affect upcoming tests\n         self.sync_all()\n \n-        ################\n-        # /rest/block/ #\n-        ################\n+        self.log.info(\"Test the /block and /headers URIs\")\n+        bb_hash = self.nodes[0].getbestblockhash()\n \n-        # check binary format\n-        response = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n-        assert_equal(response.status, 200)\n+        # Check binary format\n+        response = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_greater_than(int(response.getheader('content-length')), 80)\n-        response_str = response.read()\n+        response_bytes = response.read()\n \n-        # compare with block header\n-        response_header = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"bin\", True)\n-        assert_equal(response_header.status, 200)\n+        # Compare with block header\n+        response_header = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)\n         assert_equal(int(response_header.getheader('content-length')), 80)\n-        response_header_str = response_header.read()\n-        assert_equal(response_str[0:80], response_header_str)\n+        response_header_bytes = response_header.read()\n+        assert_equal(response_bytes[:80], response_header_bytes)\n \n-        # check block hex format\n-        response_hex = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(response_hex.status, 200)\n+        # Check block hex format\n+        response_hex = self.test_rest_request(\"/block/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n-        response_hex_str = response_hex.read()\n-        assert_equal(encode(response_str, \"hex_codec\")[0:160], response_hex_str[0:160])\n+        response_hex_bytes = response_hex.read().strip(b'\\n')\n+        assert_equal(binascii.hexlify(response_bytes), response_hex_bytes)\n \n-        # compare with hex block header\n-        response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(response_header_hex.status, 200)\n+        # Compare with hex block header\n+        response_header_hex = self.test_rest_request(\"/headers/1/{}\".format(bb_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n-        response_header_hex_str = response_header_hex.read()\n-        assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n-        assert_equal(encode(response_header_str, \"hex_codec\")[0:160], response_header_hex_str[0:160])\n+        response_header_hex_bytes = response_header_hex.read(160)\n+        assert_equal(binascii.hexlify(response_bytes[:80]), response_header_hex_bytes)\n \n-        # check json format\n-        block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n-        block_json_obj = json.loads(block_json_string)\n+        # Check json format\n+        block_json_obj = self.test_rest_request(\"/block/{}\".format(bb_hash))\n         assert_equal(block_json_obj['hash'], bb_hash)\n \n-        # compare with json block header\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read().decode('utf-8')\n-        json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n-        assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n-        assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n+        # Compare with json block header\n+        json_obj = self.test_rest_request(\"/headers/1/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 1)  # ensure that there is one header in the json response\n+        assert_equal(json_obj[0]['hash'], bb_hash)  # request/response hash should be the same\n \n-        #compare with normal RPC block response\n+        # Compare with normal RPC block response\n         rpc_block_json = self.nodes[0].getblock(bb_hash)\n-        assert_equal(json_obj[0]['hash'],               rpc_block_json['hash'])\n-        assert_equal(json_obj[0]['confirmations'],      rpc_block_json['confirmations'])\n-        assert_equal(json_obj[0]['height'],             rpc_block_json['height'])\n-        assert_equal(json_obj[0]['version'],            rpc_block_json['version'])\n-        assert_equal(json_obj[0]['merkleroot'],         rpc_block_json['merkleroot'])\n-        assert_equal(json_obj[0]['time'],               rpc_block_json['time'])\n-        assert_equal(json_obj[0]['nonce'],              rpc_block_json['nonce'])\n-        assert_equal(json_obj[0]['bits'],               rpc_block_json['bits'])\n-        assert_equal(json_obj[0]['difficulty'],         rpc_block_json['difficulty'])\n-        assert_equal(json_obj[0]['chainwork'],          rpc_block_json['chainwork'])\n-        assert_equal(json_obj[0]['previousblockhash'],  rpc_block_json['previousblockhash'])\n-\n-        #see if we can get 5 headers in one response\n+        for key in ['hash', 'confirmations', 'height', 'version', 'merkleroot', 'time', 'nonce', 'bits', 'difficulty', 'chainwork', 'previousblockhash']:\n+            assert_equal(json_obj[0][key], rpc_block_json[key])\n+\n+        # See if we can get 5 headers in one response\n         self.nodes[1].generate(5)\n         self.sync_all()\n-        response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n-        assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read().decode('utf-8')\n-        json_obj = json.loads(response_header_json_str)\n-        assert_equal(len(json_obj), 5) #now we should have 5 header objects\n+        json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n+\n+        self.log.info(\"Test the /tx URI\")\n \n-        # do tx test\n         tx_hash = block_json_obj['tx'][0]['txid']\n-        json_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"json\")\n-        json_obj = json.loads(json_string)\n+        json_obj = self.test_rest_request(\"/tx/{}\".format(tx_hash))\n         assert_equal(json_obj['txid'], tx_hash)\n \n-        # check hex format response\n-        hex_string = http_get_call(url.hostname, url.port, '/rest/tx/'+tx_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n-        assert_equal(hex_string.status, 200)\n-        assert_greater_than(int(response.getheader('content-length')), 10)\n+        # Check hex format response\n+        hex_response = self.test_rest_request(\"/tx/{}\".format(tx_hash), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n+        assert_greater_than_or_equal(int(hex_response.getheader('content-length')),\n+                                     json_obj['size']*2)\n \n+        self.log.info(\"Test tx inclusion in the /mempool and /block URIs\")\n \n-        # check block tx details\n-        # let's make 3 tx and mine them on node 1\n+        # Make 3 tx and mine them on node 1\n         txs = []\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n-        txs.append(self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n+        txs.append(self.nodes[0].sendtoaddress(not_related_address, 11))\n         self.sync_all()\n \n-        # check that there are exactly 3 transactions in the TX memory pool before generating the block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/info'+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        # Check that there are exactly 3 transactions in the TX memory pool before generating the block\n+        json_obj = self.test_rest_request(\"/mempool/info\")\n         assert_equal(json_obj['size'], 3)\n         # the size of the memory pool should be greater than 3x ~100 bytes\n         assert_greater_than(json_obj['bytes'], 300)\n \n-        # check that there are our submitted transactions in the TX memory pool\n-        json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n+        # Check that there are our submitted transactions in the TX memory pool\n+        json_obj = self.test_rest_request(\"/mempool/contents\")\n         for i, tx in enumerate(txs):\n-            assert_equal(tx in json_obj, True)\n-            assert_equal(json_obj[tx]['spentby'], txs[i+1:i+2])\n-            assert_equal(json_obj[tx]['depends'], txs[i-1:i])\n+            assert tx in json_obj\n+            assert_equal(json_obj[tx]['spentby'], txs[i + 1:i + 2])\n+            assert_equal(json_obj[tx]['depends'], txs[i - 1:i])\n \n-        # now mine the transactions\n+        # Now mine the transactions\n         newblockhash = self.nodes[1].generate(1)\n         self.sync_all()\n \n-        #check if the 3 tx show up in the new block\n-        json_string = http_get_call(url.hostname, url.port, '/rest/block/'+newblockhash[0]+self.FORMAT_SEPARATOR+'json')\n-        json_obj = json.loads(json_string)\n-        for tx in json_obj['tx']:\n-            if not 'coinbase' in tx['vin'][0]: #exclude coinbase\n-                assert_equal(tx['txid'] in txs, True)\n+        # Check if the 3 tx show up in the new block\n+        json_obj = self.test_rest_request(\"/block/{}\".format(newblockhash[0]))\n+        non_coinbase_txs = [tx['txid'] for tx in json_obj['tx']",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12766#discussion_r178751925",
      "id" : 178751925,
      "in_reply_to_id" : 178604911,
      "original_commit_id" : "d54e3e704838eb39a5e6e33d8b530c6ed404fd49",
      "original_position" : 520,
      "path" : "test/functional/interface_rest.py",
      "position" : null,
      "pull_request_review_id" : 108860121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12766",
      "updated_at" : "2018-04-03T08:44:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178751925",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/9900?v=4",
         "events_url" : "https://api.github.com/users/romanz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/romanz/followers",
         "following_url" : "https://api.github.com/users/romanz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/romanz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/romanz",
         "id" : 9900,
         "login" : "romanz",
         "organizations_url" : "https://api.github.com/users/romanz/orgs",
         "received_events_url" : "https://api.github.com/users/romanz/received_events",
         "repos_url" : "https://api.github.com/users/romanz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/romanz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/romanz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/romanz"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Commits can probably be squashed a bit before merge. \r\n\r\nSquashed most of the small commits into a few large ones.",
      "created_at" : "2018-04-03T08:45:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-378175309",
      "id" : 378175309,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12766",
      "updated_at" : "2018-04-03T08:45:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378175309",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/9900?v=4",
         "events_url" : "https://api.github.com/users/romanz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/romanz/followers",
         "following_url" : "https://api.github.com/users/romanz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/romanz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/romanz",
         "id" : 9900,
         "login" : "romanz",
         "organizations_url" : "https://api.github.com/users/romanz/orgs",
         "received_events_url" : "https://api.github.com/users/romanz/received_events",
         "repos_url" : "https://api.github.com/users/romanz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/romanz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/romanz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/romanz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK 55efc1f62cef7e19efcb58ba68fbc2053bfa19a0.\r\n\r\nNicely structured PR. Very easy to review! Thanks",
      "created_at" : "2018-04-03T16:07:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-378304826",
      "id" : 378304826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12766",
      "updated_at" : "2018-04-03T16:07:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378304826",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "utACK 55efc1f",
      "created_at" : "2018-04-07T14:09:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12766#issuecomment-379472101",
      "id" : 379472101,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12766",
      "updated_at" : "2018-04-07T14:09:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379472101",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
