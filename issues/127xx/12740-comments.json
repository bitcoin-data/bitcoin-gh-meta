[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r175966073"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175966073"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: since these are inline, the static specifier is ignored",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T01:02:01Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r175966073",
      "id" : 175966073,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 5,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105586513,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T21:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175966073",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r175967491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175967491"
         }
      },
      "author_association" : "OWNER",
      "body" : "Really?\r\n\r\nMy understanding was that a non-`static` `inline` function will still be emitted in non-inlined form in the object file, as the compiler can't know there are no non-inlinable calls from other translation units.\r\n\r\nMaking it static guarantees no calls from other translation units are possible, and thus permits the compliler to not emit any code as long as all calls within the current translation units are inlinable.",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T01:16:33Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r175967491",
      "id" : 175967491,
      "in_reply_to_id" : 175966073,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 5,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105588115,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T21:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175967491",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r175976876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175976876"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "why not `reinterpret_cast`? ",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T03:13:34Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }\n+static inline char* CharCast(unsigned char* c) { return (char*)c; }\n+static inline const char* CharCast(const char* c) { return c; }\n+static inline const char* CharCast(const unsigned char* c) { return (const char*)c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r175976876",
      "id" : 175976876,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 8,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105598313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T21:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175976876",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/413395?v=4",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r175977468"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175977468"
         }
      },
      "author_association" : "OWNER",
      "body" : "For primitive types there is no distinction between c-style-cast, reinterpret_cast, static_cast.",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T03:21:28Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }\n+static inline char* CharCast(unsigned char* c) { return (char*)c; }\n+static inline const char* CharCast(const char* c) { return c; }\n+static inline const char* CharCast(const unsigned char* c) { return (const char*)c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r175977468",
      "id" : 175977468,
      "in_reply_to_id" : 175976876,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 8,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105598970,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T21:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/175977468",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176206723"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176206723"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That's my understanding too.",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T19:14:47Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176206723",
      "id" : 176206723,
      "in_reply_to_id" : 175966073,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 5,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105869930,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T21:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176206723",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176232912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176232912"
         }
      },
      "author_association" : "OWNER",
      "body" : "It seems my understanding is correct for C, but not for modern C++. `inline` in C++ is not just a hint that the function is preferably inlined, but also automatically implies the function may violate ODR.\r\n\r\nThanks, this is very interesting.",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T20:48:06Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176232912",
      "id" : 176232912,
      "in_reply_to_id" : 175966073,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 5,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105901186,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T21:14:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176232912",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176240445"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176240445"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed.",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T21:14:36Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176240445",
      "id" : 176240445,
      "in_reply_to_id" : 175966073,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 5,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105910194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T21:14:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176240445",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176243957"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176243957"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> It seems my understanding is correct for C, but not for modern C++. inline in C++ is not just a hint that the function is preferably inlined, but also automatically implies the function may violate ODR.\r\n\r\nReally confused. What is the reason for removing static and thinking it is ignored? What version of modern c++ is this assuming? I can't follow the logic here.",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T21:27:21Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176243957",
      "id" : 176243957,
      "in_reply_to_id" : 175966073,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 5,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105914226,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T21:27:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176243957",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176245584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176245584"
         }
      },
      "author_association" : "OWNER",
      "body" : "Reading more on: http://en.cppreference.com/w/cpp/language/inline\r\n\r\nSemantically, `static` (or anonymous namespace) in combination with `inline` is not meaningless. It still indicates that different translation units may have different definitions. Without `static` it is (in theory) undefined to have multiple translation units with a different definition.\r\n\r\nHowever, non-`static` `inline` functions must be defined `inline` in every translation unit, and the compiler guarantees it will have the same address in all of them (if any) (these properties are not true in C). This means that the reason why I was using `static` here (being worried about having multiple emitted copies of a non-inlined version of the function) doesn't apply.\r\n\r\nI also tested this, by removing the `static` and observing that no symbol is emitted in any of the object files produced by gcc.\r\n\r\nBy modern I mean C++03 and up.",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T21:33:26Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176245584",
      "id" : 176245584,
      "in_reply_to_id" : 175966073,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 5,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105916099,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T21:41:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176245584",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176252159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176252159"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> This means that the reason why I was using static here (being worried about having multiple emitted copies of a non-inlined version of the function) doesn't apply.\r\n\r\nI'd still think you'd want to specify `static` to tell the compiler that the function won't be accessed from a different translation unit and that exporting a symbol isn't necessary. It doesn't seem like it can be true that no symbol is emitted without `static` because according to your link, \"An inline function with external linkage (e.g. not declared static)\" \"has the same address in every translation unit,\" which would require a symbol.\r\n\r\nTesting locally, I see both `inline` and `static inline` functions emitting symbols, but `inline` functions have global symbols (`W` in nm output) while `static inline` functions only have local symbols (`t` in nm output).",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T21:59:27Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176252159",
      "id" : 176252159,
      "in_reply_to_id" : 175966073,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 5,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105923455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T22:02:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176252159",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176257268"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176257268"
         }
      },
      "author_association" : "OWNER",
      "body" : "@ryanofsky That's what I'm seeing at `-O0` (when inlining is disabled). With `-O1` or higher, no symbol is emitted with either `inline` or `static inline` when all call sites are inlinable.\r\n\r\nAlso, when compiling with `g++`, with multiple object files where the call sites are not inlinable, each object gets indeed a symbol, but they're turned into a single symbol in the final executable. When compiling with `gcc`, the final executable has one symbol per original object.\r\n\r\nI think that's the explanation: all translation units with a non-inlinable call site of an inline function indeed get an emitted symbol, but those are combined into one by the linker.\r\n\r\nGiven that C++ requires that all translation units in which a non-`static` `inline` function appears mark it as `inline`, it means there can't be any actual external calls from another unit to an inline function symbol; they're required to have their own definition, so no symbol is required to be emitted. If it is emitted however, it will be combined across all units by the linked.",
      "commit_id" : "a7c45bce9264f4a8fa48f2e7ecaf102971fc026f",
      "created_at" : "2018-03-21T22:20:45Z",
      "diff_hunk" : "@@ -59,6 +59,12 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n+//! Safely convert odd char pointer types to standard ones.\n+static inline char* CharCast(char* c) { return c; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#discussion_r176257268",
      "id" : 176257268,
      "in_reply_to_id" : 175966073,
      "original_commit_id" : "7d29fa4d98ecce780f1b0a2e3004c22c8f4d2395",
      "original_position" : 5,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 105929150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12740",
      "updated_at" : "2018-03-21T22:31:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176257268",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "utACK https://github.com/bitcoin/bitcoin/pull/12740/commits/a7c45bce9264f4a8fa48f2e7ecaf102971fc026f , good to finally get rid of the FLATDATA eyesore",
      "created_at" : "2018-03-29T20:52:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12740#issuecomment-377368563",
      "id" : 377368563,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12740",
      "updated_at" : "2018-03-29T20:52:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377368563",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
