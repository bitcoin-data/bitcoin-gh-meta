[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15296#discussion_r253636744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15296"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253636744"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Instead of running all tests, could this take a specific test suite or test case to run, so the other tests wouldn't have to be run if you are looking a specific case?",
      "commit_id" : "43206239a8fab767849129368560afc4ac901047",
      "created_at" : "2019-02-04T20:39:02Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Test for deterministic coverage across unit test runs.\n+\n+export LC_ALL=C\n+\n+# Use GCOV_EXECUTABLE=\"gcov\" if compiling with gcc.\n+# Use GCOV_EXECUTABLE=\"llvm-cov gcov\" if compiling with clang.\n+GCOV_EXECUTABLE=\"gcov\"\n+\n+# Disable tests known to cause non-deterministic behaviour and document the source or point of non-determinism.\n+NON_DETERMINISTIC_TESTS=(\n+    \"bloom_tests/rolling_bloom\"                               # bloom_tests.cpp: data[i] = RandomData(); [...] if (rb1.contains(data[i]))\n+    \"coins_tests/updatecoins_simulation_test\"                 # coins_tests.cpp: uint32_t randiter = InsecureRand32(); [...] assert(CTransaction(tx).IsCoinBase());\n+    \"coinselector_tests/knapsack_solver_test\"                 # coinselector_tests.cpp: if (equal_sets(setCoinsRet, setCoinsRet2))\n+    \"denialofservice_tests/DoS_mapOrphans\"                    # denialofservice_tests.cpp: it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    \"fs_tests/fsbridge_fstream\"                               # deterministic test failure?\n+    \"miner_tests/CreateNewBlock_validity\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"scheduler_tests/manythreads\"                             # scheduler.cpp: CScheduler::serviceQueue()\n+    \"scheduler_tests/singlethreadedscheduler_ordered\"         # scheduler.cpp: CScheduler::serviceQueue()\n+    \"tx_validationcache_tests/checkinputs_test\"               # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"tx_validationcache_tests/tx_mempool_block_doublespend\"   # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"txindex_tests/txindex_initial_sync\"                      # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"txvalidation_tests/tx_mempool_reject_coinbase\"           # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"validation_block_tests/processnewblock_signals_ordering\" # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/coin_mark_dirty_immature_credit\"            # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/dummy_input_size_test\"                      # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/importmulti_rescan\"                         # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/importwallet_rescan\"                        # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/ListCoins\"                                  # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/scan_for_wallet_transactions\"               # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/wallet_disableprivkeys\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+)\n+\n+TEST_BITCOIN_BINARY=\"src/test/test_bitcoin\"\n+\n+N_TEST_RUNS=2\n+if [[ $# != 0 ]]; then\n+    if [[ $# == 1 && $1 =~ ^[0-9]+$ && $1 -gt 1 ]]; then\n+        N_TEST_RUNS=$1\n+    else\n+        echo \"Usage: $0 [number of test runs]\"\n+        exit 0\n+    fi\n+fi\n+\n+if ! command -v gcov > /dev/null; then\n+    echo \"Error: gcov not installed. Exiting.\"\n+    exit 1\n+fi\n+\n+if ! command -v gcovr > /dev/null; then\n+    echo \"Error: gcovr not installed. Exiting.\"\n+    exit 1\n+fi\n+\n+if [[ ! -e ${TEST_BITCOIN_BINARY} ]]; then\n+    echo \"Error: Executable ${TEST_BITCOIN_BINARY} not found. Run \\\"./configure --enable-lcov\\\" and compile.\"\n+    exit 1\n+fi\n+\n+get_file_suffix_count() {\n+    find src/ -type f -name \"*.$1\" | wc -l\n+}\n+\n+if [[ $(get_file_suffix_count gcno) == 0 ]]; then\n+    echo \"Error: Could not find any *.gcno files. The *.gcno files are generated by the compiler. Run \\\"./configure --enable-lcov\\\" and re-compile.\"\n+    exit 1\n+fi\n+\n+get_covr_filename() {\n+    echo \"gcovr.run-$1.txt\"\n+}\n+\n+TEST_RUN_ID=0\n+while [[ ${TEST_RUN_ID} -lt ${N_TEST_RUNS} ]]; do\n+    TEST_RUN_ID=$((TEST_RUN_ID + 1))\n+    echo \"[$(date +\"%Y-%m-%d %H:%M:%S\")] Measuring coverage, run #${TEST_RUN_ID} of ${N_TEST_RUNS}\"\n+    find src/ -type f -name \"*.gcda\" -exec rm {} \\;\n+    if [[ $(get_file_suffix_count gcda) != 0 ]]; then\n+        echo \"Error: Stale *.gcda files found. Exiting.\"\n+        exit 1\n+    fi\n+    TEST_OUTPUT_TEMPFILE=$(mktemp)\n+    if ! BOOST_TEST_RUN_FILTERS=\"$(IFS=\":\"; echo \"!${NON_DETERMINISTIC_TESTS[*]}\" | sed 's/:/:!/g')\" ${TEST_BITCOIN_BINARY} > \"${TEST_OUTPUT_TEMPFILE}\" 2>&1; then",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15296#discussion_r253636744",
      "id" : 253636744,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzYzNjc0NA==",
      "original_commit_id" : "621cd3e74b86ae01f3219ede947763c77cca75a1",
      "original_position" : 89,
      "path" : "contrib/test_deterministic_coverage.sh",
      "position" : null,
      "pull_request_review_id" : 199795700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15296",
      "updated_at" : "2019-02-15T08:38:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253636744",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15296#discussion_r253649177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15296"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253649177"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Good idea! Now implemented. `--help` describes the syntax :-)",
      "commit_id" : "43206239a8fab767849129368560afc4ac901047",
      "created_at" : "2019-02-04T21:16:37Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Test for deterministic coverage across unit test runs.\n+\n+export LC_ALL=C\n+\n+# Use GCOV_EXECUTABLE=\"gcov\" if compiling with gcc.\n+# Use GCOV_EXECUTABLE=\"llvm-cov gcov\" if compiling with clang.\n+GCOV_EXECUTABLE=\"gcov\"\n+\n+# Disable tests known to cause non-deterministic behaviour and document the source or point of non-determinism.\n+NON_DETERMINISTIC_TESTS=(\n+    \"bloom_tests/rolling_bloom\"                               # bloom_tests.cpp: data[i] = RandomData(); [...] if (rb1.contains(data[i]))\n+    \"coins_tests/updatecoins_simulation_test\"                 # coins_tests.cpp: uint32_t randiter = InsecureRand32(); [...] assert(CTransaction(tx).IsCoinBase());\n+    \"coinselector_tests/knapsack_solver_test\"                 # coinselector_tests.cpp: if (equal_sets(setCoinsRet, setCoinsRet2))\n+    \"denialofservice_tests/DoS_mapOrphans\"                    # denialofservice_tests.cpp: it = mapOrphanTransactions.lower_bound(InsecureRand256());\n+    \"fs_tests/fsbridge_fstream\"                               # deterministic test failure?\n+    \"miner_tests/CreateNewBlock_validity\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"scheduler_tests/manythreads\"                             # scheduler.cpp: CScheduler::serviceQueue()\n+    \"scheduler_tests/singlethreadedscheduler_ordered\"         # scheduler.cpp: CScheduler::serviceQueue()\n+    \"tx_validationcache_tests/checkinputs_test\"               # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"tx_validationcache_tests/tx_mempool_block_doublespend\"   # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"txindex_tests/txindex_initial_sync\"                      # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"txvalidation_tests/tx_mempool_reject_coinbase\"           # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"validation_block_tests/processnewblock_signals_ordering\" # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/coin_mark_dirty_immature_credit\"            # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/dummy_input_size_test\"                      # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/importmulti_rescan\"                         # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/importwallet_rescan\"                        # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/ListCoins\"                                  # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/scan_for_wallet_transactions\"               # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+    \"wallet_tests/wallet_disableprivkeys\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n+)\n+\n+TEST_BITCOIN_BINARY=\"src/test/test_bitcoin\"\n+\n+N_TEST_RUNS=2\n+if [[ $# != 0 ]]; then\n+    if [[ $# == 1 && $1 =~ ^[0-9]+$ && $1 -gt 1 ]]; then\n+        N_TEST_RUNS=$1\n+    else\n+        echo \"Usage: $0 [number of test runs]\"\n+        exit 0\n+    fi\n+fi\n+\n+if ! command -v gcov > /dev/null; then\n+    echo \"Error: gcov not installed. Exiting.\"\n+    exit 1\n+fi\n+\n+if ! command -v gcovr > /dev/null; then\n+    echo \"Error: gcovr not installed. Exiting.\"\n+    exit 1\n+fi\n+\n+if [[ ! -e ${TEST_BITCOIN_BINARY} ]]; then\n+    echo \"Error: Executable ${TEST_BITCOIN_BINARY} not found. Run \\\"./configure --enable-lcov\\\" and compile.\"\n+    exit 1\n+fi\n+\n+get_file_suffix_count() {\n+    find src/ -type f -name \"*.$1\" | wc -l\n+}\n+\n+if [[ $(get_file_suffix_count gcno) == 0 ]]; then\n+    echo \"Error: Could not find any *.gcno files. The *.gcno files are generated by the compiler. Run \\\"./configure --enable-lcov\\\" and re-compile.\"\n+    exit 1\n+fi\n+\n+get_covr_filename() {\n+    echo \"gcovr.run-$1.txt\"\n+}\n+\n+TEST_RUN_ID=0\n+while [[ ${TEST_RUN_ID} -lt ${N_TEST_RUNS} ]]; do\n+    TEST_RUN_ID=$((TEST_RUN_ID + 1))\n+    echo \"[$(date +\"%Y-%m-%d %H:%M:%S\")] Measuring coverage, run #${TEST_RUN_ID} of ${N_TEST_RUNS}\"\n+    find src/ -type f -name \"*.gcda\" -exec rm {} \\;\n+    if [[ $(get_file_suffix_count gcda) != 0 ]]; then\n+        echo \"Error: Stale *.gcda files found. Exiting.\"\n+        exit 1\n+    fi\n+    TEST_OUTPUT_TEMPFILE=$(mktemp)\n+    if ! BOOST_TEST_RUN_FILTERS=\"$(IFS=\":\"; echo \"!${NON_DETERMINISTIC_TESTS[*]}\" | sed 's/:/:!/g')\" ${TEST_BITCOIN_BINARY} > \"${TEST_OUTPUT_TEMPFILE}\" 2>&1; then",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15296#discussion_r253649177",
      "id" : 253649177,
      "in_reply_to_id" : 253636744,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzY0OTE3Nw==",
      "original_commit_id" : "621cd3e74b86ae01f3219ede947763c77cca75a1",
      "original_position" : 89,
      "path" : "contrib/test_deterministic_coverage.sh",
      "position" : null,
      "pull_request_review_id" : 199810881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15296",
      "updated_at" : "2019-02-15T08:38:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253649177",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15296#discussion_r254075532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15296"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/254075532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this was fixed",
      "commit_id" : "43206239a8fab767849129368560afc4ac901047",
      "created_at" : "2019-02-05T22:38:29Z",
      "diff_hunk" : "@@ -0,0 +1,153 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Test for deterministic coverage across unit test runs.\n+\n+export LC_ALL=C\n+\n+# Use GCOV_EXECUTABLE=\"gcov\" if compiling with gcc.\n+# Use GCOV_EXECUTABLE=\"llvm-cov gcov\" if compiling with clang.\n+GCOV_EXECUTABLE=\"gcov\"\n+\n+# Disable tests known to cause non-deterministic behaviour and document the source or point of non-determinism.\n+NON_DETERMINISTIC_TESTS=(\n+    \"bloom_tests/rolling_bloom\"                               # bloom_tests.cpp: data[i] = RandomData(); [...] if (rb1.contains(data[i]))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15296#discussion_r254075532",
      "id" : 254075532,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1NDA3NTUzMg==",
      "original_commit_id" : "3f6a8bd8fb82108694cee02d74d1420cbe25a187",
      "original_position" : 17,
      "path" : "contrib/test_deterministic_coverage.sh",
      "position" : null,
      "pull_request_review_id" : 200339508,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15296",
      "updated_at" : "2019-02-15T08:38:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/254075532",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Removed suppressions for now fixed `bloom_tests/rolling_bloom` and `coins_tests/updatecoins_simulation_test`. Please re-review :-)",
      "created_at" : "2019-02-07T21:52:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15296#issuecomment-461609301",
      "id" : 461609301,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15296",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MTYwOTMwMQ==",
      "updated_at" : "2019-02-07T21:52:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/461609301",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 84e8413d26ae35f6bd279ff260c742334fd061d7",
      "created_at" : "2019-02-14T21:40:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15296#issuecomment-463809494",
      "id" : 463809494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15296",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MzgwOTQ5NA==",
      "updated_at" : "2019-02-14T21:40:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463809494",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Should be in `./contrib/devtools/`?",
      "created_at" : "2019-02-14T22:23:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15296#issuecomment-463825889",
      "id" : 463825889,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15296",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MzgyNTg4OQ==",
      "updated_at" : "2019-02-14T22:23:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463825889",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Moved! Please re-review :-)",
      "created_at" : "2019-02-15T08:38:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15296#issuecomment-463953649",
      "id" : 463953649,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15296",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2Mzk1MzY0OQ==",
      "updated_at" : "2019-02-15T08:38:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/463953649",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Could this be modified to work with functional tests as well? :)",
      "created_at" : "2019-02-15T15:11:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15296#issuecomment-464084337",
      "id" : 464084337,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15296",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NDA4NDMzNw==",
      "updated_at" : "2019-02-15T15:11:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/464084337",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Sure, I can try to find time to add that feature in a second iteration. Perhaps we can merge this version first to limit work in progress and get the first version in?\r\n\r\nThe non-functional tests use case should be finished in the current version and ready from merge.",
      "created_at" : "2019-02-28T22:38:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15296#issuecomment-468467524",
      "id" : 468467524,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15296",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2ODQ2NzUyNA==",
      "updated_at" : "2019-02-28T22:39:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/468467524",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
