[
   {
      "author_association" : "MEMBER",
      "body" : "@sipa @gmaxwell Thoughts?",
      "created_at" : "2019-01-25T20:09:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-457709953",
      "id" : 457709953,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15265",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NzcwOTk1Mw==",
      "updated_at" : "2019-01-25T20:09:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457709953",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "If I understand correctly, this would remove the performance hit that https://github.com/bitcoin/bitcoin/pull/15218 would introduce?",
      "created_at" : "2019-01-25T20:30:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-457716622",
      "id" : 457716622,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15265",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NzcxNjYyMg==",
      "updated_at" : "2019-01-25T20:30:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457716622",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/35740402?v=4",
         "events_url" : "https://api.github.com/users/andcoisqu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andcoisqu/followers",
         "following_url" : "https://api.github.com/users/andcoisqu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andcoisqu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andcoisqu",
         "id" : 35740402,
         "login" : "andcoisqu",
         "node_id" : "MDQ6VXNlcjM1NzQwNDAy",
         "organizations_url" : "https://api.github.com/users/andcoisqu/orgs",
         "received_events_url" : "https://api.github.com/users/andcoisqu/received_events",
         "repos_url" : "https://api.github.com/users/andcoisqu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andcoisqu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andcoisqu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andcoisqu"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> If I understand correctly, this would remove the performance hit that #15218 would introduce?\r\n\r\nThat's the idea.  I'm not totally sure this doesn't introduce other problems, however -- right now I'm watching a pruning node do an IBD with this patch (with a large `-dbcache`), and I'm observing that the frequent utxo writes (as files get pruned) are very slow, presumably because it's looping through a large utxo cache to find the dirty entries.  So if this doesn't actually help with pruning, then I might need to tighten the scope to only do this for the periodic writes.",
      "created_at" : "2019-01-25T20:34:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-457718002",
      "id" : 457718002,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15265",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NzcxODAwMg==",
      "updated_at" : "2019-01-25T20:34:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457718002",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sdaftuar By adding two pointers per CCoinsCacheEntry object we can construct two double-linked lists in the cache, one for all dirty and one for all clean entries. An alternative is separate maps for the two (which is lower memory usage, but now needs two lookups every time).",
      "created_at" : "2019-01-25T20:42:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-457720636",
      "id" : 457720636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15265",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NzcyMDYzNg==",
      "updated_at" : "2019-01-25T20:42:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457720636",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I tested something like this before and I think I found it had almost(?) as much negative impact to sync time as the full flush.  This isn't too surprising if you assume that the purpose of the dbcache is a write buffer for the purpose of eliminating writes on short lived objects (and the additional writes to delete them), rather than a read cache.  Maybe on a slow disk the read cache component is more important, but on SSD it doesn't appear to be.\r\n\r\nIf benchmarks support doing this, I'm all for it!  but it sounds to me like they might not.\r\n\r\nLong term what I'd like to see is keeping a linked list of writes,  and after letting the cache fill a day or a weeks worth of activity (interesting open question: what is the amount of write suppression as a function of the buffer horizon?), start writing out (and erasing) the surviving oldest block worth of activity after each connected block... this way we're always writing rather than blocking on writes in big bursts.\r\n\r\nBy writing in block-ordered order (or something close to it) we would get the ability to continually advance the synced-to point.   (I also assumed that we'd change to some kind of open hash table for the random lookups--to reduce the pointer chasing, have a collision resolution which will overwrite non-dirty entries whenever its convenient, and write flushing simply make entries non-dirty rather than erasing them). \r\n\r\nOr, at least, this was the kind of thing I had in mind when suggesting non-atomic-flushing. But all that stuff is a big project. :(    I suspect the periodic flushes are by far the biggest source of blockacceptance/gbt latency though,  so it's one which would almost certainly have a big payoff.",
      "created_at" : "2019-01-26T02:23:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-457792904",
      "id" : 457792904,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15265",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1Nzc5MjkwNA==",
      "updated_at" : "2019-01-26T02:23:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457792904",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@gmaxwell I think that's all true, but not really relevant here.\n\nThe goal isn't speeding up synchronization given the choice of flushing or not flushing entirely. In that case we've already shown several times that not flushing is indeed better.\n\nThe scenario here is what to do when we're forced to flush due to other reasons than the cache being full. And it would seem to me that flushing without wiping should be strictly better than flushing with wiping if the cost per write is constant. Unfortunately it seems that here is an unrelated extra cost of iterating over the non-dirty entries, making it not necessarily better.",
      "created_at" : "2019-01-26T02:36:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-457793902",
      "id" : 457793902,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15265",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1Nzc5MzkwMg==",
      "updated_at" : "2019-01-26T02:37:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457793902",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  And it would seem to me that flushing without wiping should be strictly better than flushing with wiping in that case. \r\n\r\nI believe we found otherwise in benchmarking.  If that isn't actually the case, great, better is better.",
      "created_at" : "2019-01-26T02:57:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-457795318",
      "id" : 457795318,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15265",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1Nzc5NTMxOA==",
      "updated_at" : "2019-01-26T02:57:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457795318",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15265#discussion_r251257403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251257403"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add spaces around `=` :-)",
      "commit_id" : "59eae4a0064ae2ffd4b560edd9689c94380bc053",
      "created_at" : "2019-01-27T22:02:22Z",
      "diff_hunk" : "@@ -265,8 +265,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n      * Push the modifications applied to this cache to its base.\n      * Failure to call this method before destruction will cause the changes to be forgotten.\n      * If false is returned, the state of this cache (and its backing view) will be undefined.\n+     * Set clear_cache to False to preserve the contents of the cache (excluding spent coins).\n      */\n-    bool Flush();\n+    bool Flush(bool clear_cache=true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15265#discussion_r251257403",
      "id" : 251257403,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTI1NzQwMw==",
      "original_commit_id" : "59eae4a0064ae2ffd4b560edd9689c94380bc053",
      "original_position" : 34,
      "path" : "src/coins.h",
      "position" : 34,
      "pull_request_review_id" : 196847579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15265",
      "updated_at" : "2019-01-27T22:02:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251257403",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've done some benchmarking on the pruning component of this, comparing a pruning node with big dbcache doing an initial sync using either master or a version of this PR that has been modified to be able to loop over just the dirty entries in the cache when doing a BatchWrite. @gmaxwell's recollection that preserving the read-cache benefit is of limited benefit seems correct both on SSD and spinning disks; I saw virtually no difference in performance (and in one of my tests, master seems to perform a bit better).\r\n\r\nI expected the read-caching would be beneficial on spinning disks, but perhaps OS-level disk caching is more effective than I realized.  At any rate this approach seems like it's not worth pursuing, so I'll close.",
      "created_at" : "2019-01-29T18:42:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-458657451",
      "id" : 458657451,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15265",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1ODY1NzQ1MQ==",
      "updated_at" : "2019-01-29T18:42:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458657451",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I rebased this on top of #17487 in case someone wants to take another stab at benchmarking: https://github.com/Sjors/bitcoin/tree/2019/11/prune-no-erase\r\n\r\nWith the recent merge of Android support #17078 mobile devices would make an interesting benchmark. In my experience on a Xiaomi A1 (4 GB RAM, 32 / 64 GB disk) IBD becomes unbearingly slow after block 500,000 or so. This might be partly due to frequent pruning, which prevents it from leveraging its RAM. However as discussed above, these changes may not be enough to solve that. Pruning more than 10% (added in #11658), to reduce the frequency of prune events and thus flushes, might also help. ",
      "created_at" : "2019-11-19T16:31:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15265#issuecomment-555591156",
      "id" : 555591156,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15265",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NTU5MTE1Ng==",
      "updated_at" : "2019-11-19T16:31:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555591156",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
