[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435976663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435976663"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 793aa7a2e74460bdb504e8f9e2c642b6e607015c:\r\n\r\nThe comment is incorrect. MAX_SIZE is not equal to VALID_DATA_LIMIT",
      "commit_id" : "af2a145e575f23c64909e6cf1fb323c603bda7ca",
      "created_at" : "2020-06-05T14:55:08Z",
      "diff_hunk" : "@@ -124,13 +124,9 @@ def test_checksum(self):\n     def test_size(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n         with self.nodes[0].assert_debug_log(['']):\n-            msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n-            cut_len = (\n-                4 +  # magic\n-                12  # msgtype\n-            )\n-            # modify len to MAX_SIZE + 1\n-            msg = msg[:cut_len] + struct.pack(\"<I\", 0x02000000 + 1) + msg[cut_len + 4:]\n+            # Create a message with PAYLOAD SIZE = MAX_SIZE + 1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435976663",
      "id" : 435976663,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NjY2Mw==",
      "original_commit_id" : "793aa7a2e74460bdb504e8f9e2c642b6e607015c",
      "original_line" : 127,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : null,
      "pull_request_review_id" : 425375215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T12:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435976663",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435977663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435977663"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 271949980d:\r\n\r\n```suggestion\r\n            conn.send_message(msg_at_size)\r\n```",
      "commit_id" : "af2a145e575f23c64909e6cf1fb323c603bda7ca",
      "created_at" : "2020-06-05T14:56:40Z",
      "diff_hunk" : "@@ -46,114 +48,34 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        \"\"\"\n-         . Test msg header\n-        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n-           that it isn't an effective DoS against the node.\n-\n-        1. Send an oversized (4MB+) message and check that we're disconnected.\n-\n-        2. Send a few messages with an incorrect data size in the header, ensure the\n-           messages are ignored.\n-        \"\"\"\n         self.test_magic_bytes()\n         self.test_checksum()\n         self.test_size()\n         self.test_msgtype()\n         self.test_large_inv()\n+        self.test_resource_exhaustion()\n \n-        node = self.nodes[0]\n-        self.node = node\n-        node.add_p2p_connection(P2PDataStore())\n-        conn2 = node.add_p2p_connection(P2PDataStore())\n-\n-        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n-        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n-\n-        #\n-        # 0.\n-        #\n-        # Send as large a message as is valid, ensure we aren't disconnected but\n-        # also can't exhaust resources.\n-        #\n-        msg_at_size = msg_unrecognized(str_data=\"b\" * valid_data_limit)\n-        assert len(msg_at_size.serialize()) == msg_limit\n+    def test_resource_exhaustion(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n+        assert len(msg_at_size.serialize()) == MSG_LIMIT\n \n         self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n \n         # Run a bunch of times to test for memory exhaustion.\n         for _ in range(80):\n-            node.p2p.send_message(msg_at_size)\n+            self.nodes[0].p2p.send_message(msg_at_size)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435977663",
      "id" : 435977663,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NzY2Mw==",
      "original_commit_id" : "271949980d9c1f1b3b47fa2cdcab29abed02b173",
      "original_line" : 67,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : null,
      "pull_request_review_id" : 425375215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T12:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435977663",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435978014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435978014"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        assert conn.p2p.is_connected\r\n```\r\n\r\nSame",
      "commit_id" : "af2a145e575f23c64909e6cf1fb323c603bda7ca",
      "created_at" : "2020-06-05T14:57:12Z",
      "diff_hunk" : "@@ -46,114 +48,34 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        \"\"\"\n-         . Test msg header\n-        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n-           that it isn't an effective DoS against the node.\n-\n-        1. Send an oversized (4MB+) message and check that we're disconnected.\n-\n-        2. Send a few messages with an incorrect data size in the header, ensure the\n-           messages are ignored.\n-        \"\"\"\n         self.test_magic_bytes()\n         self.test_checksum()\n         self.test_size()\n         self.test_msgtype()\n         self.test_large_inv()\n+        self.test_resource_exhaustion()\n \n-        node = self.nodes[0]\n-        self.node = node\n-        node.add_p2p_connection(P2PDataStore())\n-        conn2 = node.add_p2p_connection(P2PDataStore())\n-\n-        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n-        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n-\n-        #\n-        # 0.\n-        #\n-        # Send as large a message as is valid, ensure we aren't disconnected but\n-        # also can't exhaust resources.\n-        #\n-        msg_at_size = msg_unrecognized(str_data=\"b\" * valid_data_limit)\n-        assert len(msg_at_size.serialize()) == msg_limit\n+    def test_resource_exhaustion(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n+        assert len(msg_at_size.serialize()) == MSG_LIMIT\n \n         self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n \n         # Run a bunch of times to test for memory exhaustion.\n         for _ in range(80):\n-            node.p2p.send_message(msg_at_size)\n+            self.nodes[0].p2p.send_message(msg_at_size)\n \n         # Check that, even though the node is being hammered by nonsense from one\n         # connection, it can still service other peers in a timely way.\n         for _ in range(20):\n-            conn2.sync_with_ping(timeout=2)\n+            conn.sync_with_ping(timeout=2)\n \n-        # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n+        # Peer 1, despite being served up a bunch of nonsense, should still be connected.\n         self.log.info(\"Waiting for node to drop junk messages.\")\n-        node.p2p.sync_with_ping(timeout=400)\n-        assert node.p2p.is_connected\n-\n-        #\n-        # 1.\n-        #\n-        # Send an oversized message, ensure we're disconnected.\n-        #\n-        # Under macOS this test is skipped due to an unexpected error code\n-        # returned from the closing socket which python/asyncio does not\n-        # yet know how to handle.\n-        #\n-        if sys.platform != 'darwin':\n-            msg_over_size = msg_unrecognized(str_data=\"b\" * (valid_data_limit + 1))\n-            assert len(msg_over_size.serialize()) == (msg_limit + 1)\n-\n-            # An unknown message type (or *any* message type) over\n-            # MAX_PROTOCOL_MESSAGE_LENGTH should result in a disconnect.\n-            node.p2p.send_message(msg_over_size)\n-            node.p2p.wait_for_disconnect(timeout=4)\n-\n-            node.disconnect_p2ps()\n-            conn = node.add_p2p_connection(P2PDataStore())\n-            conn.wait_for_verack()\n-        else:\n-            self.log.info(\"Skipping test p2p_invalid_messages/1 (oversized message) under macOS\")\n-\n-        #\n-        # 2.\n-        #\n-        # Send messages with an incorrect data size in the header.\n-        #\n-        actual_size = 100\n-        msg = msg_unrecognized(str_data=\"b\" * actual_size)\n-\n-        # TODO: handle larger-than cases. I haven't been able to pin down what behavior to expect.\n-        for wrong_size in (2, 77, 78, 79):\n-            self.log.info(\"Sending a message with incorrect size of {}\".format(wrong_size))\n-\n-            # Unmodified message should submit okay.\n-            node.p2p.send_and_ping(msg)\n-\n-            # A message lying about its data size results in a disconnect when the incorrect\n-            # data size is less than the actual size.\n-            #\n-            # TODO: why does behavior change at 78 bytes?\n-            #\n-            node.p2p.send_raw_message(self._tweak_msg_data_size(msg, wrong_size))\n-\n-            # For some reason unknown to me, we sometimes have to push additional data to the\n-            # peer in order for it to realize a disconnect.\n-            try:\n-                node.p2p.send_message(msg_ping(nonce=123123))\n-            except IOError:\n-                pass\n-\n-            node.p2p.wait_for_disconnect(timeout=10)\n-            node.disconnect_p2ps()\n-            node.add_p2p_connection(P2PDataStore())\n-\n-        # Node is still up.\n-        conn = node.add_p2p_connection(P2PDataStore())\n+        conn.sync_with_ping(timeout=400)\n+        assert self.nodes[0].p2p.is_connected",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r435978014",
      "id" : 435978014,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3ODAxNA==",
      "original_commit_id" : "271949980d9c1f1b3b47fa2cdcab29abed02b173",
      "original_line" : 77,
      "original_position" : 130,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : null,
      "pull_request_review_id" : 425375215,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T12:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/435978014",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n> We should test the following cases:\r\n>\r\n> 1. header indicates size a, but payload is of size a-1\r\n> 2. header indicates size a, but payload is of size a+1\r\n\r\nThese aren't strictly header errors. In (1), the message won't finish being read, because the deserializer is waiting for another byte. When the following message is received:\r\n- the first byte of the header will be read as the final byte of the payload of the previous message\r\n- that payload may or may not succeed deserialization and processing in net_processing\r\n- the following message header will fail deserialization because it's misaligned. It'll fail the message start bytes check and be disconnected.\r\n\r\nIn (2), the following message header will be misaligned for similar reasons and will result in disconnect.\r\n\r\nIn both cases, it's the *subsequent* message that causes the disconnect. I don't think we necessarily need to test this, because invalid headers are tested elsewhere.",
      "created_at" : "2020-06-05T22:00:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-639849481",
      "id" : 639849481,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzOTg0OTQ4MQ==",
      "updated_at" : "2020-06-05T22:00:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/639849481",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436453926"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436453926"
         }
      },
      "author_association" : "NONE",
      "body" : "Done",
      "commit_id" : "af2a145e575f23c64909e6cf1fb323c603bda7ca",
      "created_at" : "2020-06-08T04:42:09Z",
      "diff_hunk" : "@@ -46,114 +48,34 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        \"\"\"\n-         . Test msg header\n-        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n-           that it isn't an effective DoS against the node.\n-\n-        1. Send an oversized (4MB+) message and check that we're disconnected.\n-\n-        2. Send a few messages with an incorrect data size in the header, ensure the\n-           messages are ignored.\n-        \"\"\"\n         self.test_magic_bytes()\n         self.test_checksum()\n         self.test_size()\n         self.test_msgtype()\n         self.test_large_inv()\n+        self.test_resource_exhaustion()\n \n-        node = self.nodes[0]\n-        self.node = node\n-        node.add_p2p_connection(P2PDataStore())\n-        conn2 = node.add_p2p_connection(P2PDataStore())\n-\n-        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n-        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n-\n-        #\n-        # 0.\n-        #\n-        # Send as large a message as is valid, ensure we aren't disconnected but\n-        # also can't exhaust resources.\n-        #\n-        msg_at_size = msg_unrecognized(str_data=\"b\" * valid_data_limit)\n-        assert len(msg_at_size.serialize()) == msg_limit\n+    def test_resource_exhaustion(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n+        assert len(msg_at_size.serialize()) == MSG_LIMIT\n \n         self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n \n         # Run a bunch of times to test for memory exhaustion.\n         for _ in range(80):\n-            node.p2p.send_message(msg_at_size)\n+            self.nodes[0].p2p.send_message(msg_at_size)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436453926",
      "id" : 436453926,
      "in_reply_to_id" : 435977663,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MzkyNg==",
      "original_commit_id" : "271949980d9c1f1b3b47fa2cdcab29abed02b173",
      "original_line" : 67,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : null,
      "pull_request_review_id" : 425911676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T12:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436453926",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436453944"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436453944"
         }
      },
      "author_association" : "NONE",
      "body" : "Done",
      "commit_id" : "af2a145e575f23c64909e6cf1fb323c603bda7ca",
      "created_at" : "2020-06-08T04:42:15Z",
      "diff_hunk" : "@@ -46,114 +48,34 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n \n     def run_test(self):\n-        \"\"\"\n-         . Test msg header\n-        0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n-           that it isn't an effective DoS against the node.\n-\n-        1. Send an oversized (4MB+) message and check that we're disconnected.\n-\n-        2. Send a few messages with an incorrect data size in the header, ensure the\n-           messages are ignored.\n-        \"\"\"\n         self.test_magic_bytes()\n         self.test_checksum()\n         self.test_size()\n         self.test_msgtype()\n         self.test_large_inv()\n+        self.test_resource_exhaustion()\n \n-        node = self.nodes[0]\n-        self.node = node\n-        node.add_p2p_connection(P2PDataStore())\n-        conn2 = node.add_p2p_connection(P2PDataStore())\n-\n-        msg_limit = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\n-        valid_data_limit = msg_limit - 5  # Account for the 4-byte length prefix\n-\n-        #\n-        # 0.\n-        #\n-        # Send as large a message as is valid, ensure we aren't disconnected but\n-        # also can't exhaust resources.\n-        #\n-        msg_at_size = msg_unrecognized(str_data=\"b\" * valid_data_limit)\n-        assert len(msg_at_size.serialize()) == msg_limit\n+    def test_resource_exhaustion(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n+        assert len(msg_at_size.serialize()) == MSG_LIMIT\n \n         self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n \n         # Run a bunch of times to test for memory exhaustion.\n         for _ in range(80):\n-            node.p2p.send_message(msg_at_size)\n+            self.nodes[0].p2p.send_message(msg_at_size)\n \n         # Check that, even though the node is being hammered by nonsense from one\n         # connection, it can still service other peers in a timely way.\n         for _ in range(20):\n-            conn2.sync_with_ping(timeout=2)\n+            conn.sync_with_ping(timeout=2)\n \n-        # Peer 1, despite serving up a bunch of nonsense, should still be connected.\n+        # Peer 1, despite being served up a bunch of nonsense, should still be connected.\n         self.log.info(\"Waiting for node to drop junk messages.\")\n-        node.p2p.sync_with_ping(timeout=400)\n-        assert node.p2p.is_connected\n-\n-        #\n-        # 1.\n-        #\n-        # Send an oversized message, ensure we're disconnected.\n-        #\n-        # Under macOS this test is skipped due to an unexpected error code\n-        # returned from the closing socket which python/asyncio does not\n-        # yet know how to handle.\n-        #\n-        if sys.platform != 'darwin':\n-            msg_over_size = msg_unrecognized(str_data=\"b\" * (valid_data_limit + 1))\n-            assert len(msg_over_size.serialize()) == (msg_limit + 1)\n-\n-            # An unknown message type (or *any* message type) over\n-            # MAX_PROTOCOL_MESSAGE_LENGTH should result in a disconnect.\n-            node.p2p.send_message(msg_over_size)\n-            node.p2p.wait_for_disconnect(timeout=4)\n-\n-            node.disconnect_p2ps()\n-            conn = node.add_p2p_connection(P2PDataStore())\n-            conn.wait_for_verack()\n-        else:\n-            self.log.info(\"Skipping test p2p_invalid_messages/1 (oversized message) under macOS\")\n-\n-        #\n-        # 2.\n-        #\n-        # Send messages with an incorrect data size in the header.\n-        #\n-        actual_size = 100\n-        msg = msg_unrecognized(str_data=\"b\" * actual_size)\n-\n-        # TODO: handle larger-than cases. I haven't been able to pin down what behavior to expect.\n-        for wrong_size in (2, 77, 78, 79):\n-            self.log.info(\"Sending a message with incorrect size of {}\".format(wrong_size))\n-\n-            # Unmodified message should submit okay.\n-            node.p2p.send_and_ping(msg)\n-\n-            # A message lying about its data size results in a disconnect when the incorrect\n-            # data size is less than the actual size.\n-            #\n-            # TODO: why does behavior change at 78 bytes?\n-            #\n-            node.p2p.send_raw_message(self._tweak_msg_data_size(msg, wrong_size))\n-\n-            # For some reason unknown to me, we sometimes have to push additional data to the\n-            # peer in order for it to realize a disconnect.\n-            try:\n-                node.p2p.send_message(msg_ping(nonce=123123))\n-            except IOError:\n-                pass\n-\n-            node.p2p.wait_for_disconnect(timeout=10)\n-            node.disconnect_p2ps()\n-            node.add_p2p_connection(P2PDataStore())\n-\n-        # Node is still up.\n-        conn = node.add_p2p_connection(P2PDataStore())\n+        conn.sync_with_ping(timeout=400)\n+        assert self.nodes[0].p2p.is_connected",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436453944",
      "id" : 436453944,
      "in_reply_to_id" : 435978014,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1Mzk0NA==",
      "original_commit_id" : "271949980d9c1f1b3b47fa2cdcab29abed02b173",
      "original_line" : 77,
      "original_position" : 130,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : null,
      "pull_request_review_id" : 425911704,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T12:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436453944",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436454102"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436454102"
         }
      },
      "author_association" : "NONE",
      "body" : "Ok, agreed.  No need to introduce an undefined term.",
      "commit_id" : "af2a145e575f23c64909e6cf1fb323c603bda7ca",
      "created_at" : "2020-06-08T04:42:53Z",
      "diff_hunk" : "@@ -124,13 +124,9 @@ def test_checksum(self):\n     def test_size(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n         with self.nodes[0].assert_debug_log(['']):\n-            msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n-            cut_len = (\n-                4 +  # magic\n-                12  # msgtype\n-            )\n-            # modify len to MAX_SIZE + 1\n-            msg = msg[:cut_len] + struct.pack(\"<I\", 0x02000000 + 1) + msg[cut_len + 4:]\n+            # Create a message with PAYLOAD SIZE = MAX_SIZE + 1",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436454102",
      "id" : 436454102,
      "in_reply_to_id" : 435976663,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NDEwMg==",
      "original_commit_id" : "793aa7a2e74460bdb504e8f9e2c642b6e607015c",
      "original_line" : 127,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : null,
      "pull_request_review_id" : 425911903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T12:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436454102",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Rebased and made suggested changes.  Will continue thinking about what the correct test should be for a malicious indicated size.",
      "created_at" : "2020-06-08T05:00:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-640367311",
      "id" : 640367311,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDM2NzMxMQ==",
      "updated_at" : "2020-06-08T05:00:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640367311",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436611239"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436611239"
         }
      },
      "author_association" : "MEMBER",
      "body" : "conn is now the same peer, previously it was a different one. Why?\r\nAlso the test fails because of this.",
      "commit_id" : "af2a145e575f23c64909e6cf1fb323c603bda7ca",
      "created_at" : "2020-06-08T10:52:54Z",
      "diff_hunk" : "@@ -225,25 +119,27 @@ def test_large_inv(self):\n             conn.send_and_ping(msg)\n         self.nodes[0].disconnect_p2ps()\n \n-    def _tweak_msg_data_size(self, message, wrong_size):\n-        \"\"\"\n-        Return a raw message based on another message but with an incorrect data size in\n-        the message header.\n-        \"\"\"\n-        raw_msg = self.node.p2p.build_message(message)\n-\n-        bad_size_bytes = struct.pack(\"<I\", wrong_size)\n-        num_header_bytes_before_size = 4 + 12\n-\n-        # Replace the correct data size in the message with an incorrect one.\n-        raw_msg_with_wrong_size = (\n-            raw_msg[:num_header_bytes_before_size] +\n-            bad_size_bytes +\n-            raw_msg[(num_header_bytes_before_size + len(bad_size_bytes)):]\n-        )\n-        assert len(raw_msg) == len(raw_msg_with_wrong_size)\n-\n-        return raw_msg_with_wrong_size\n+    def test_resource_exhaustion(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n+        assert len(msg_at_size.serialize()) == MSG_LIMIT\n+\n+        self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n+\n+        # Run a bunch of times to test for memory exhaustion.\n+        for _ in range(80):\n+            conn.send_message(msg_at_size)\n+\n+        # Check that, even though the node is being hammered by nonsense from one\n+        # connection, it can still service other peers in a timely way.\n+        for _ in range(20):\n+            conn.sync_with_ping(timeout=2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436611239",
      "id" : 436611239,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxMTIzOQ==",
      "original_commit_id" : "f7a2ef0076138fbe73672e5e942738946b604d7b",
      "original_line" : 136,
      "original_position" : 188,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : null,
      "pull_request_review_id" : 426116696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T12:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436611239",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436669219"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436669219"
         }
      },
      "author_association" : "NONE",
      "body" : "fixed, thanks",
      "commit_id" : "af2a145e575f23c64909e6cf1fb323c603bda7ca",
      "created_at" : "2020-06-08T12:53:06Z",
      "diff_hunk" : "@@ -225,25 +119,27 @@ def test_large_inv(self):\n             conn.send_and_ping(msg)\n         self.nodes[0].disconnect_p2ps()\n \n-    def _tweak_msg_data_size(self, message, wrong_size):\n-        \"\"\"\n-        Return a raw message based on another message but with an incorrect data size in\n-        the message header.\n-        \"\"\"\n-        raw_msg = self.node.p2p.build_message(message)\n-\n-        bad_size_bytes = struct.pack(\"<I\", wrong_size)\n-        num_header_bytes_before_size = 4 + 12\n-\n-        # Replace the correct data size in the message with an incorrect one.\n-        raw_msg_with_wrong_size = (\n-            raw_msg[:num_header_bytes_before_size] +\n-            bad_size_bytes +\n-            raw_msg[(num_header_bytes_before_size + len(bad_size_bytes)):]\n-        )\n-        assert len(raw_msg) == len(raw_msg_with_wrong_size)\n-\n-        return raw_msg_with_wrong_size\n+    def test_resource_exhaustion(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * VALID_DATA_LIMIT)\n+        assert len(msg_at_size.serialize()) == MSG_LIMIT\n+\n+        self.log.info(\"Sending a bunch of large, junk messages to test memory exhaustion. May take a bit...\")\n+\n+        # Run a bunch of times to test for memory exhaustion.\n+        for _ in range(80):\n+            conn.send_message(msg_at_size)\n+\n+        # Check that, even though the node is being hammered by nonsense from one\n+        # connection, it can still service other peers in a timely way.\n+        for _ in range(20):\n+            conn.sync_with_ping(timeout=2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436669219",
      "id" : 436669219,
      "in_reply_to_id" : 436611239,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2OTIxOQ==",
      "original_commit_id" : "f7a2ef0076138fbe73672e5e942738946b604d7b",
      "original_line" : 136,
      "original_position" : 188,
      "original_start_line" : null,
      "path" : "test/functional/p2p_invalid_messages.py",
      "position" : null,
      "pull_request_review_id" : 426199479,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19177",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-08T12:53:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/436669219",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't see the downside of having a test that does:\r\n\r\n* Send a corrupt msg with wrongly indicates size (off by one in either way)\r\n* Send a valid msg and observe a disconnect\r\n\r\nIt should be possible to write such a test in 5-10 lines of python. Is there any reason I am missing that such a test would be inappropriate?",
      "created_at" : "2020-06-08T12:59:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-640587418",
      "id" : 640587418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDU4NzQxOA==",
      "updated_at" : "2020-06-08T12:59:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640587418",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Regarding the situation where the payload is too large, consider the following test.  A node can not tell the difference between these two \"messages\", they're equivalent.  As opposed to testing for an oversized payload, we should test separately for:\r\n- Checking that a node responds well to a message with an invalid checksum\r\n- Checking that a node responds well to <24 bytes of complete junk\r\n\r\nSending >=24 bytes of junk (enough to fill a header or more) is covered by the rest of the tests in this module.\r\n\r\nThe situation where the payload is too small is effectively the same.  The beginning of the next message will be lost, and we'll be back to receiving junk (the rest of the next message).\r\n\r\nAn incorrect payload size is IMO too high up the chain of events to be included.  It's what results from an incorrect payload size that we should be checking for.\r\n```python\r\ndef test_equivalent_large(self):\r\n    '''Make a message with an oversized payload\r\n    Or, make a smaller message with the wrong checksum, then send a junk byte\r\n    '''\r\n    conn = self.nodes[0].add_p2p_connection(P2PDataStore())\r\n    msg_base = msg_generic(b'badmsg', data=b'd'*5)\r\n    msg_1 = conn.build_message(msg_base)\r\n    cut_len = (\r\n        4 +  # magic\r\n        12  # msgtype\r\n    )\r\n    msg_1 = msg_1[:cut_len] + struct.pack(\"<I\", len(msg_base.data) - 1) + msg_1[cut_len + 4:]\r\n    self.nodes[0].p2p.send_raw_message(msg_1)\r\n    with self.nodes[0].assert_debug_log(['CHECKSUM ERROR (badmsg, 4 bytes), expected a359d53a was cdbcd284']):\r\n        # The usual connected check no longer works because the messages are misaligned\r\n        #conn.sync_with_ping(timeout=1)\r\n        assert self.nodes[0].p2p.is_connected\r\n        self.nodes[0].disconnect_p2ps()\r\n    #\r\n    # Equivalent\r\n    #\r\n    conn = self.nodes[0].add_p2p_connection(P2PDataStore())\r\n    msg_base = msg_generic(b'badmsg', data=b'd'*(5-1))\r\n    msg_1 = conn.build_message(msg_base)\r\n    cut_len = (\r\n        4 +  # magic\r\n        12 +  # msgtype\r\n        4 # size\r\n    )\r\n    msg_1 = msg_1[:cut_len] + b'\\xcd\\xbc\\xd2\\x84' + msg_1[cut_len + 4:]\r\n    self.nodes[0].p2p.send_raw_message(msg_1)\r\n    self.nodes[0].p2p.send_raw_message(b'd')\r\n    with self.nodes[0].assert_debug_log(['CHECKSUM ERROR (badmsg, 4 bytes), expected a359d53a was cdbcd284']):\r\n        # The usual connected check no longer works because the messages are misaligned\r\n        #conn.sync_with_ping(timeout=1)\r\n        assert self.nodes[0].p2p.is_connected\r\n        self.nodes[0].disconnect_p2ps()\r\n```",
      "created_at" : "2020-06-08T17:03:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-640753373",
      "id" : 640753373,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDc1MzM3Mw==",
      "updated_at" : "2020-06-08T17:03:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640753373",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Just for fun, I'll point out that we wont *always* disconnect on a corrupted payload size.  I've made a proof of concept where the corruption neither results in a disconnect nor a misalignment.  All it needs is two normal bitcoin messages and two single bit flips (one in the first message's payload size, and the other in the second message's command).  It can be found [here](https://github.com/troygiorshev/bitcoin/commit/a9dfeaf387392c6d8972918ba79857b932562d91).",
      "created_at" : "2020-06-08T21:00:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-640884009",
      "id" : 640884009,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MDg4NDAwOQ==",
      "updated_at" : "2020-06-08T21:00:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/640884009",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19107 (p2p: Refactor, move all header verification into the network layer, without changing behavior by troygiorshev)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 19177](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/19177/total.coverage/index.html), d8ef2511f04976c81084bba851b11bf74a0f1db7) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html), 19e919217e6d62e3640525e4149de1a4ae04e74f)   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.0373 %            | 90.6714 %        |\n| Functions | +0.0000 %            | 85.6033 %        |\n| Branches  | +0.0194 %            | 51.9388 %        |\n\n<sup>Updated at: 2020-06-12T18:13:45.902164.</sup>\n",
      "created_at" : "2020-06-10T02:12:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-641677494",
      "id" : 641677494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MTY3NzQ5NA==",
      "updated_at" : "2020-06-12T18:13:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/641677494",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK af2a145e575f23c64909e6cf1fb323c603bda7ca\r\n\r\nThis is a good change and removes a lot of confused and confusing test code that isn't testing what it purports to.\r\n\r\nFuture PRs could clean this test further:\r\n\r\n- the \"resource_exhaustion\" test should be removed/renamed from resource exhaustion. This was originally added to verify that receiving large messages wouldn't result in memory blowup, but that was a bad idea (https://github.com/bitcoin/bitcoin/pull/14522#issuecomment-466044015) and had to be removed.\r\n- ~the \"even though the node is being hammered by nonsense from one connection, it can still service other peers in a timely way.\" comment is wrong. All outgoing messages from the Python message thread are serial, so by the time we get to sending the pings, all of the previous large messages have been processed already.~\r\n- I can't see any reason for launching a new async task to test the magic bytes. Why not just send a message with invalid magic bytes using `send_raw_message`? I see this was merged without review (https://github.com/bitcoin/bitcoin/pull/15697) and there's no indication of why it's needed.\r\n- the `msg_unrecognized` class can be removed and replaced with a `msg_generic`. The serialized length of a `msg_unrecognized` message seems to have caused confusion in the past (see `VALID_DATA_LIMIT `) because people haven't realised the length of the length field for a serialized string\r\n\r\nEDIT: struck out point 2. It was untrue as pointed out by Marco below.",
      "created_at" : "2020-06-12T15:13:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643327490",
      "id" : 643327490,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzMyNzQ5MA==",
      "updated_at" : "2020-06-12T18:23:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643327490",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> all of the previous large messages have been processed already.\r\n\r\nI don't think this is true. At least on travis the test failed when the ping was sent on a different connection. See https://github.com/bitcoin/bitcoin/pull/19177#discussion_r436611239",
      "created_at" : "2020-06-12T17:32:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643398276",
      "id" : 643398276,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzM5ODI3Ng==",
      "updated_at" : "2020-06-12T17:32:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643398276",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't think this is true. At least on travis the test failed when the ping was sent on a different connection. See #19177 (comment)\r\n\r\nYou're right. I was wrong. When I run this locally, the message sending appears to be serial because bitcoind is able to keep up with the messages as quickly as they're delivered. When bitcoind is running more slowly, such as under sanitizers, it can't keep up and Python's asyncio is able to write to both the sockets for conn and conn2 while bitcoind is processing the large invalid messages. See https://travis-ci.org/github/bitcoin/bitcoin/jobs/695869826#L3577 for example.",
      "created_at" : "2020-06-12T18:22:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643421068",
      "id" : 643421068,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzQyMTA2OA==",
      "updated_at" : "2020-06-12T18:22:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643421068",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "\r\n> I don't think we necessarily need to test this, because invalid headers are tested elsewhere.\r\n\r\nWhere?\r\n\r\nIn general, I still don't understand why it is ok to remove test coverage without any replacement. We have never done this in the past and I don't see why this pull should be an exception. Don't get me wrong, I like the cleanups here and I'd like to see it merged, but I think this should and can be done without removing coverage.\r\n\r\nIf the functional tests are the wrong place to put such a test, great then move it to the unit tests, but simply removing should be the option of last resort.\r\n\r\nFor reference (master):\r\n\r\n![Screenshot_2020-06-12 LCOV - total_coverage info - src net cpp(1)](https://user-images.githubusercontent.com/6399679/84535327-9cee1f80-acb9-11ea-86c5-2bc01839ccbf.png)\r\n\r\n\r\nthis pull:\r\n\r\n![Screenshot_2020-06-12 LCOV - total_coverage info - src net cpp](https://user-images.githubusercontent.com/6399679/84535341-a4152d80-acb9-11ea-82a7-5f311c9cd912.png)\r\n",
      "created_at" : "2020-06-12T18:33:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643425662",
      "id" : 643425662,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzQyNTY2Mg==",
      "updated_at" : "2020-06-12T18:33:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643425662",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Sorry, false alarm. The \"red\" line will only become \"blue\" when the socket buffer is filled in two chunks or more. This might happen non-deterministically based on network-congestion on the test machine and has nothing to do with the changes in this pull request.",
      "created_at" : "2020-06-12T19:21:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643444544",
      "id" : 643444544,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzQ0NDU0NA==",
      "updated_at" : "2020-06-12T19:21:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643444544",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK af2a145e57 ð¦\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK af2a145e57 ð¦\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUiFBwv+KRk8EKRDiTcHW/1+SbEEwKl26fup1QVoLiueaW5IWuwuG6k/vgx0ZIIA\r\nSIUVmXEXgJ/wJ+8oWtT6rR/ulh5i1S6vR38d0o1HYg6vR+sUOeuAuC/LYoKxJMHD\r\n/AVdf9tXHk0pxIJiPOfP4DJITc/DYqcIpEDVcj22I5HJ8nrkHJcd9prMmDmYs60e\r\nqniyKvw6c6GufEr4ziSNgs6r9Gzng7hDV7wFX/0bzy24259tedShoLOZQPdEldqa\r\nvVyWiKufdpXb5UUhxBt68fmYDTFW5ivWhwujZGiWjNNMmiDmqwMIIglxfKjm9o3a\r\nlEqe/19jVDf6VGcG8uo2IZap/5G319q76298GhTaLyd8qA7kvLe/f418QKeKUoVk\r\nNZa6LW1jx6A49xQ1iwcQKWYkklNOK8OTCJi1AlmlFVwPy5+PKztvEl8+myYAfuyo\r\nqUJ+eY0sqdCjjJJ4KsHYPcWD1uWTP3XxDgRGGA3NWbdYaQyAMLWfryc7MGj/UJU6\r\nqm7Tuj6b\r\n=hxKG\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `c5c47520e34b1feab503ae488c8195cfa5311aa8dfb1311b7826eb27cebc4497  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108c5c47520e34b1feab503ae488c8195cfa5311aa8dfb1311b7826eb27cebc4497f010ef37ddfebca9c6cdafb69aeeb46065cd08fff01000bd8806347895ff84b8307eb9dff02808f020d271eafe0903a9b1b2766f5d0a4a4021d3570017294fb218a6cdd72040e09d4f08f1045ee3d793f008c2ae7cead72a29cf0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0104631b2cd21e8f62dff0567ac77ec16b808f1045ee3d792f0086ec570b7e867ce7e0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01048754f61666252f1ddd4b9e661b69b9008f1045ee3d792f008354fb87de19f52d80083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6df010ff982d22ae1a04f22ed1abe56daa967a08f1045ee3d792f008e9124562128b4c6c0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2020-06-12T19:29:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643447810",
      "id" : 643447810,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzQ0NzgxMA==",
      "updated_at" : "2020-06-12T19:29:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643447810",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I can't see any reason for launching a new async task to test the magic bytes. Why not just send a message with invalid magic bytes using send_raw_message?\r\n\r\nDone in #19264 ",
      "created_at" : "2020-06-13T02:57:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19177#issuecomment-643558615",
      "id" : 643558615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19177",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzU1ODYxNQ==",
      "updated_at" : "2020-06-13T02:57:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643558615",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
