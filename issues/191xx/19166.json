{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "As is known, maintaining privacy on Bitcoin is an ongoing challenge, and one way this could be improved in the Core wallet is by providing a command that uses a standardized transaction template to burn a UTXO.\r\n\r\nWhile you can manually burn a UTXO today, say by making a single-input transaction that only contains an OP_RETURN, actually creating such an OP_RETURN transaction with the Core wallet is a bit complicated and somewhat risky, as it would only be limited by -maxtxfee. Additionally, fingerprinting of whatever data you put in OP_RETURN as well as the rarity of such transactions hurt privacy as well.\r\n\r\nMy suggestion would be to add a command with similar arguments to `lockunspent`, so something like;\r\n\r\n`burnunspent \"[{\\\"txid\\\":\\\"mytxid\\\",\\\"vout\\\":myvout}]\"`\r\n\r\nwhich would create a single-input transaction of the provided UTXO, with an OP_RETURN with sufficient bytes of random data to make it relayable (preferably indistinguishable from some common hashing algorithm), and return this as a hex-encoded transaction that you would then have to send with `sendrawtransaction`. This would be safer than broadcasting it directly, and allows you to broadcast the transaction through another channel for additional privacy. You would also want some safeguards against burning a large UTXO, which could be done with a (possibly configurable) burn limit.\r\n\r\nIn other words, it would be equivalent to `createrawtransaction \"[{\\\"txid\\\":\\\"mytxid\\\",\\\"vout\\\":myvout}]\" \"[{\\\"data\\\":\\\"myrandomhexbytes\\\"}]\"` + `signrawtransactionwithwallet`, with some built-in safeguards.\r\n\r\nFrom a blockchain health perspective, an empty OP_RETURN would be preferable, but this violates the `tx-size-small` limit (see #18296) and cannot be relayed with today's relaying policy. Would it be technically feasible/desirable to exempt such a specific template from this policy without opening up vectors for exploiting the merkle leaf-node weakness?",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19166/comments",
   "created_at" : "2020-06-04T10:38:18Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19166/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/19166",
   "id" : 630709749,
   "labels" : [
      {
         "color" : "7cf575",
         "default" : false,
         "description" : null,
         "id" : 64583,
         "name" : "Feature",
         "node_id" : "MDU6TGFiZWw2NDU4Mw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19166/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU2MzA3MDk3NDk=",
   "number" : 19166,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Improving UTXO privacy through burning small UTXOs",
   "updated_at" : "2020-06-04T10:42:24Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19166",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/17721693?v=4",
      "events_url" : "https://api.github.com/users/Saicere/events{/privacy}",
      "followers_url" : "https://api.github.com/users/Saicere/followers",
      "following_url" : "https://api.github.com/users/Saicere/following{/other_user}",
      "gists_url" : "https://api.github.com/users/Saicere/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/Saicere",
      "id" : 17721693,
      "login" : "Saicere",
      "node_id" : "MDQ6VXNlcjE3NzIxNjkz",
      "organizations_url" : "https://api.github.com/users/Saicere/orgs",
      "received_events_url" : "https://api.github.com/users/Saicere/received_events",
      "repos_url" : "https://api.github.com/users/Saicere/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/Saicere/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/Saicere/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/Saicere"
   }
}
