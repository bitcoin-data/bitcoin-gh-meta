[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154814580"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154814580"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should this be parameterized? Or at least a configurable constant?\r\nIs there any advantage to tweaking it?",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-05T00:16:39Z",
      "diff_hunk" : "@@ -2467,12 +2468,23 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n     // sanely for performance or correctness!\n+    AssertLockNotHeld(cs_main);\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n     int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         boost::this_thread::interruption_point();\n+\n+        if (GetMainSignals().CallbacksPending() > 10) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154814580",
      "id" : 154814580,
      "original_commit_id" : "151b17da19c10324f8405038e19329310bad2467",
      "original_position" : 20,
      "path" : "src/validation.cpp",
      "position" : 20,
      "pull_request_review_id" : 81034310,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154814580",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/413395?v=4",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154814746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154814746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "During normal (read: non-IBD/reindex) usage, this should virtually never reach 10. During IBD/reindex, your memory is probably better speint in more dbcache than storing blocks you recently connected to eventually give to your wallet. I dont think more knobs is helpful here.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-05T00:17:45Z",
      "diff_hunk" : "@@ -2467,12 +2468,23 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n     // sanely for performance or correctness!\n+    AssertLockNotHeld(cs_main);\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n     int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         boost::this_thread::interruption_point();\n+\n+        if (GetMainSignals().CallbacksPending() > 10) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154814746",
      "id" : 154814746,
      "in_reply_to_id" : 154814580,
      "original_commit_id" : "151b17da19c10324f8405038e19329310bad2467",
      "original_position" : 20,
      "path" : "src/validation.cpp",
      "position" : 20,
      "pull_request_review_id" : 81034486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154814746",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154841745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154841745"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It seems to me that this expects to see transactions first and then blocks. But can't a `getdata` message have the types in any order?",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-05T03:58:38Z",
      "diff_hunk" : "@@ -1032,170 +1040,183 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n+// returns true if we need to call ActivateBestChain before responding\n+bool static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool best_chain_active)\n+{\n+    bool send = false;\n+    std::shared_ptr<const CBlock> a_recent_block;\n+    std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n+    bool fWitnessesPresentInARecentCompactBlock;\n+    {\n+        LOCK(cs_most_recent_block);\n+        a_recent_block = most_recent_block;\n+        a_recent_compact_block = most_recent_compact_block;\n+        fWitnessesPresentInARecentCompactBlock = fWitnessesPresentInMostRecentCompactBlock;\n+    }\n+\n+    LOCK(cs_main);\n+    BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n+    if (mi != mapBlockIndex.end())\n+    {\n+        if (mi->second->nChainTx && !mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n+                mi->second->IsValid(BLOCK_VALID_TREE)) {\n+            // If we have the block and all of its parents, but have not yet validated it,\n+            // we might be in the middle of connecting it (ie in the unlock of cs_main\n+            // before ActivateBestChain but after AcceptBlock).\n+            // In this case, we need to run ActivateBestChain prior to checking the relay\n+            // conditions below.\n+            return true;\n+        }\n+        send = BlockRequestAllowed(mi->second, consensusParams);\n+        if (!send) {\n+            LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+        }\n+    }\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    // disconnect node in case we have reached the outbound limit for serving historical blocks\n+    // never disconnect whitelisted nodes\n+    if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+    {\n+        LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+\n+        //disconnect node\n+        pfrom->fDisconnect = true;\n+        send = false;\n+    }\n+    // Pruned nodes may have deleted the block, so check whether\n+    // it's available before trying to send.\n+    if (send && (mi->second->nStatus & BLOCK_HAVE_DATA))\n+    {\n+        std::shared_ptr<const CBlock> pblock;\n+        if (a_recent_block && a_recent_block->GetHash() == (*mi).second->GetBlockHash()) {\n+            pblock = a_recent_block;\n+        } else {\n+            // Send block from disk\n+            std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n+            if (!ReadBlockFromDisk(*pblockRead, (*mi).second, consensusParams))\n+                assert(!\"cannot load block from disk\");\n+            pblock = pblockRead;\n+        }\n+        if (inv.type == MSG_BLOCK)\n+            connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n+        else if (inv.type == MSG_WITNESS_BLOCK)\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n+        else if (inv.type == MSG_FILTERED_BLOCK)\n+        {\n+            bool sendMerkleBlock = false;\n+            CMerkleBlock merkleBlock;\n+            {\n+                LOCK(pfrom->cs_filter);\n+                if (pfrom->pfilter) {\n+                    sendMerkleBlock = true;\n+                    merkleBlock = CMerkleBlock(*pblock, *pfrom->pfilter);\n+                }\n+            }\n+            if (sendMerkleBlock) {\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n+                // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                // This avoids hurting performance by pointlessly requiring a round-trip\n+                // Note that there is currently no way for a node to request any single transactions we didn't send here -\n+                // they must either disconnect and retry or request the full block.\n+                // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                // however we MUST always provide at least what the remote peer needs\n+                typedef std::pair<unsigned int, uint256> PairType;\n+                for (PairType& pair : merkleBlock.vMatchedTxn)\n+                    connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n+            }\n+            // else\n+                // no response\n+        }\n+        else if (inv.type == MSG_CMPCT_BLOCK)\n+        {\n+            // If a peer is asking for old blocks, we're almost guaranteed\n+            // they won't have a useful mempool to match against a compact block,\n+            // and we don't feel like constructing the object for them, so\n+            // instead we respond with the full, non-compact block.\n+            bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n+            int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n+            if (CanDirectFetch(consensusParams) && mi->second->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n+                if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == mi->second->GetBlockHash()) {\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+                } else {\n+                    CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                }\n+            } else {\n+                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n+            }\n+        }\n+\n+        // Trigger the peer node to send a getblocks request for the next batch of inventory\n+        if (inv.hash == pfrom->hashContinue)\n+        {\n+            // Bypass PushInventory, this must send even if redundant,\n+            // and we want it right after the last block so they don't\n+            // wait for other stuff first.\n+            std::vector<CInv> vInv;\n+            vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n+            pfrom->hashContinue.SetNull();\n+        }\n+    }\n+\n+    return false;\n+}\n+\n void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n+    AssertLockNotHeld(cs_main);\n+\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n-    LOCK(cs_main);\n-\n-    while (it != pfrom->vRecvGetData.end()) {\n-        // Don't bother if send buffer is too full to respond anyway\n-        if (pfrom->fPauseSend)\n-            break;\n+    {\n+        LOCK(cs_main);\n \n-        const CInv &inv = *it;\n-        {\n+        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154841745",
      "id" : 154841745,
      "original_commit_id" : "3113573c847c76943c065b72d3e7a9edc643fed1",
      "original_position" : 244,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 81064613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154841745",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154842507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154842507"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No, we are allowed to (in fact always have) not finish the full queue before returning, and we do for blocks (always did). A peer shouldn't be able to make us spin giving them 100 blocks before processing any other peers' requests.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-05T04:05:07Z",
      "diff_hunk" : "@@ -1032,170 +1040,183 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n+// returns true if we need to call ActivateBestChain before responding\n+bool static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool best_chain_active)\n+{\n+    bool send = false;\n+    std::shared_ptr<const CBlock> a_recent_block;\n+    std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n+    bool fWitnessesPresentInARecentCompactBlock;\n+    {\n+        LOCK(cs_most_recent_block);\n+        a_recent_block = most_recent_block;\n+        a_recent_compact_block = most_recent_compact_block;\n+        fWitnessesPresentInARecentCompactBlock = fWitnessesPresentInMostRecentCompactBlock;\n+    }\n+\n+    LOCK(cs_main);\n+    BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n+    if (mi != mapBlockIndex.end())\n+    {\n+        if (mi->second->nChainTx && !mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n+                mi->second->IsValid(BLOCK_VALID_TREE)) {\n+            // If we have the block and all of its parents, but have not yet validated it,\n+            // we might be in the middle of connecting it (ie in the unlock of cs_main\n+            // before ActivateBestChain but after AcceptBlock).\n+            // In this case, we need to run ActivateBestChain prior to checking the relay\n+            // conditions below.\n+            return true;\n+        }\n+        send = BlockRequestAllowed(mi->second, consensusParams);\n+        if (!send) {\n+            LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+        }\n+    }\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    // disconnect node in case we have reached the outbound limit for serving historical blocks\n+    // never disconnect whitelisted nodes\n+    if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+    {\n+        LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+\n+        //disconnect node\n+        pfrom->fDisconnect = true;\n+        send = false;\n+    }\n+    // Pruned nodes may have deleted the block, so check whether\n+    // it's available before trying to send.\n+    if (send && (mi->second->nStatus & BLOCK_HAVE_DATA))\n+    {\n+        std::shared_ptr<const CBlock> pblock;\n+        if (a_recent_block && a_recent_block->GetHash() == (*mi).second->GetBlockHash()) {\n+            pblock = a_recent_block;\n+        } else {\n+            // Send block from disk\n+            std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n+            if (!ReadBlockFromDisk(*pblockRead, (*mi).second, consensusParams))\n+                assert(!\"cannot load block from disk\");\n+            pblock = pblockRead;\n+        }\n+        if (inv.type == MSG_BLOCK)\n+            connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n+        else if (inv.type == MSG_WITNESS_BLOCK)\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n+        else if (inv.type == MSG_FILTERED_BLOCK)\n+        {\n+            bool sendMerkleBlock = false;\n+            CMerkleBlock merkleBlock;\n+            {\n+                LOCK(pfrom->cs_filter);\n+                if (pfrom->pfilter) {\n+                    sendMerkleBlock = true;\n+                    merkleBlock = CMerkleBlock(*pblock, *pfrom->pfilter);\n+                }\n+            }\n+            if (sendMerkleBlock) {\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n+                // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                // This avoids hurting performance by pointlessly requiring a round-trip\n+                // Note that there is currently no way for a node to request any single transactions we didn't send here -\n+                // they must either disconnect and retry or request the full block.\n+                // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                // however we MUST always provide at least what the remote peer needs\n+                typedef std::pair<unsigned int, uint256> PairType;\n+                for (PairType& pair : merkleBlock.vMatchedTxn)\n+                    connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n+            }\n+            // else\n+                // no response\n+        }\n+        else if (inv.type == MSG_CMPCT_BLOCK)\n+        {\n+            // If a peer is asking for old blocks, we're almost guaranteed\n+            // they won't have a useful mempool to match against a compact block,\n+            // and we don't feel like constructing the object for them, so\n+            // instead we respond with the full, non-compact block.\n+            bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n+            int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n+            if (CanDirectFetch(consensusParams) && mi->second->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n+                if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == mi->second->GetBlockHash()) {\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+                } else {\n+                    CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                }\n+            } else {\n+                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n+            }\n+        }\n+\n+        // Trigger the peer node to send a getblocks request for the next batch of inventory\n+        if (inv.hash == pfrom->hashContinue)\n+        {\n+            // Bypass PushInventory, this must send even if redundant,\n+            // and we want it right after the last block so they don't\n+            // wait for other stuff first.\n+            std::vector<CInv> vInv;\n+            vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n+            pfrom->hashContinue.SetNull();\n+        }\n+    }\n+\n+    return false;\n+}\n+\n void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n+    AssertLockNotHeld(cs_main);\n+\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n-    LOCK(cs_main);\n-\n-    while (it != pfrom->vRecvGetData.end()) {\n-        // Don't bother if send buffer is too full to respond anyway\n-        if (pfrom->fPauseSend)\n-            break;\n+    {\n+        LOCK(cs_main);\n \n-        const CInv &inv = *it;\n-        {\n+        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154842507",
      "id" : 154842507,
      "in_reply_to_id" : 154841745,
      "original_commit_id" : "3113573c847c76943c065b72d3e7a9edc643fed1",
      "original_position" : 244,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 81065477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154842507",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "tACK 3113573c847c76943c065b72d3e7a9edc643fed1",
      "created_at" : "2017-12-05T04:18:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-349190738",
      "id" : 349190738,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-05T04:18:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349190738",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154843830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154843830"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, I see now. I didn't see the break for when the type was a block.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-05T04:19:14Z",
      "diff_hunk" : "@@ -1032,170 +1040,183 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n+// returns true if we need to call ActivateBestChain before responding\n+bool static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool best_chain_active)\n+{\n+    bool send = false;\n+    std::shared_ptr<const CBlock> a_recent_block;\n+    std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n+    bool fWitnessesPresentInARecentCompactBlock;\n+    {\n+        LOCK(cs_most_recent_block);\n+        a_recent_block = most_recent_block;\n+        a_recent_compact_block = most_recent_compact_block;\n+        fWitnessesPresentInARecentCompactBlock = fWitnessesPresentInMostRecentCompactBlock;\n+    }\n+\n+    LOCK(cs_main);\n+    BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n+    if (mi != mapBlockIndex.end())\n+    {\n+        if (mi->second->nChainTx && !mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n+                mi->second->IsValid(BLOCK_VALID_TREE)) {\n+            // If we have the block and all of its parents, but have not yet validated it,\n+            // we might be in the middle of connecting it (ie in the unlock of cs_main\n+            // before ActivateBestChain but after AcceptBlock).\n+            // In this case, we need to run ActivateBestChain prior to checking the relay\n+            // conditions below.\n+            return true;\n+        }\n+        send = BlockRequestAllowed(mi->second, consensusParams);\n+        if (!send) {\n+            LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+        }\n+    }\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    // disconnect node in case we have reached the outbound limit for serving historical blocks\n+    // never disconnect whitelisted nodes\n+    if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+    {\n+        LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+\n+        //disconnect node\n+        pfrom->fDisconnect = true;\n+        send = false;\n+    }\n+    // Pruned nodes may have deleted the block, so check whether\n+    // it's available before trying to send.\n+    if (send && (mi->second->nStatus & BLOCK_HAVE_DATA))\n+    {\n+        std::shared_ptr<const CBlock> pblock;\n+        if (a_recent_block && a_recent_block->GetHash() == (*mi).second->GetBlockHash()) {\n+            pblock = a_recent_block;\n+        } else {\n+            // Send block from disk\n+            std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n+            if (!ReadBlockFromDisk(*pblockRead, (*mi).second, consensusParams))\n+                assert(!\"cannot load block from disk\");\n+            pblock = pblockRead;\n+        }\n+        if (inv.type == MSG_BLOCK)\n+            connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n+        else if (inv.type == MSG_WITNESS_BLOCK)\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n+        else if (inv.type == MSG_FILTERED_BLOCK)\n+        {\n+            bool sendMerkleBlock = false;\n+            CMerkleBlock merkleBlock;\n+            {\n+                LOCK(pfrom->cs_filter);\n+                if (pfrom->pfilter) {\n+                    sendMerkleBlock = true;\n+                    merkleBlock = CMerkleBlock(*pblock, *pfrom->pfilter);\n+                }\n+            }\n+            if (sendMerkleBlock) {\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n+                // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                // This avoids hurting performance by pointlessly requiring a round-trip\n+                // Note that there is currently no way for a node to request any single transactions we didn't send here -\n+                // they must either disconnect and retry or request the full block.\n+                // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                // however we MUST always provide at least what the remote peer needs\n+                typedef std::pair<unsigned int, uint256> PairType;\n+                for (PairType& pair : merkleBlock.vMatchedTxn)\n+                    connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n+            }\n+            // else\n+                // no response\n+        }\n+        else if (inv.type == MSG_CMPCT_BLOCK)\n+        {\n+            // If a peer is asking for old blocks, we're almost guaranteed\n+            // they won't have a useful mempool to match against a compact block,\n+            // and we don't feel like constructing the object for them, so\n+            // instead we respond with the full, non-compact block.\n+            bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n+            int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n+            if (CanDirectFetch(consensusParams) && mi->second->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n+                if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == mi->second->GetBlockHash()) {\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+                } else {\n+                    CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                }\n+            } else {\n+                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n+            }\n+        }\n+\n+        // Trigger the peer node to send a getblocks request for the next batch of inventory\n+        if (inv.hash == pfrom->hashContinue)\n+        {\n+            // Bypass PushInventory, this must send even if redundant,\n+            // and we want it right after the last block so they don't\n+            // wait for other stuff first.\n+            std::vector<CInv> vInv;\n+            vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n+            pfrom->hashContinue.SetNull();\n+        }\n+    }\n+\n+    return false;\n+}\n+\n void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n+    AssertLockNotHeld(cs_main);\n+\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n-    LOCK(cs_main);\n-\n-    while (it != pfrom->vRecvGetData.end()) {\n-        // Don't bother if send buffer is too full to respond anyway\n-        if (pfrom->fPauseSend)\n-            break;\n+    {\n+        LOCK(cs_main);\n \n-        const CInv &inv = *it;\n-        {\n+        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154843830",
      "id" : 154843830,
      "in_reply_to_id" : 154841745,
      "original_commit_id" : "3113573c847c76943c065b72d3e7a9edc643fed1",
      "original_position" : 244,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 81066823,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/154843830",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "tACK https://github.com/bitcoin/bitcoin/pull/11824/commits/3113573c847c76943c065b72d3e7a9edc643fed1\r\n\r\nI've been running `-reindex` for over twelve hours and haven't seen an OOM:\r\n```\r\njob@ali:~$ sudo egrep \"Kill.*bitcoind\" /var/log/syslog || echo \"cool\"\r\ncool\r\n```",
      "created_at" : "2017-12-05T17:54:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-349386105",
      "id" : 349386105,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-05T17:54:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349386105",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Just hit another OOM, but also realized I was on an outdated version of this branch (HEAD was `151b17da1 Block ActivateBestChain to empty validationinterface queue`). @TheBlueMatt do you recall what changed between `151b17da1` and current HEAD and if it would explain the difference between another OOM or not?\r\n\r\nIn any case, I'm pulling down the tip of this branch and starting another -reindex.",
      "created_at" : "2017-12-05T22:25:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-349462251",
      "id" : 349462251,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-05T22:25:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349462251",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jamesob No, the only differences there were in test_bitcoin.cpp, so that should have had no affect.",
      "created_at" : "2017-12-05T22:27:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-349462871",
      "id" : 349462871,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-05T22:27:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349462871",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I haven't seen any OOMs and my node is almost fully reindexed. Granted it did go down sometime last night as it ran out of disk space. It's been running for ~6 hours now and was running for ~14 hours before then.",
      "created_at" : "2017-12-05T22:38:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-349465237",
      "id" : 349465237,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-05T22:38:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349465237",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Well this definitely fixes *a* bug...just did a reindex to 150k with 0.15, 0.15.1 master and this branch, peak memory usage on this branch and 0.15 and 0.15.1 were all about the same, master was 3x higher...I'll look more into our memory footprint and see what else is hiding.",
      "created_at" : "2017-12-05T23:25:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-349475729",
      "id" : 349475729,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-05T23:25:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349475729",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "tACK (again) https://github.com/bitcoin/bitcoin/pull/11824/commits/3113573c847c76943c065b72d3e7a9edc643fed1\r\n\r\nDefinitely hitting fewer OOMs reindexing on this branch than I was a week ago. :)",
      "created_at" : "2017-12-06T19:01:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-349740565",
      "id" : 349740565,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-06T19:01:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349740565",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "My bitcoind process has been running for 37 hours on this branch; memory usage has held steady through and after a partial reindex.",
      "created_at" : "2017-12-08T22:54:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-350392554",
      "id" : 350392554,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-08T22:54:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350392554",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased.",
      "created_at" : "2017-12-09T18:22:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-350495791",
      "id" : 350495791,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-09T18:22:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350495791",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased.",
      "created_at" : "2017-12-15T20:39:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-352106229",
      "id" : 352106229,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-15T20:39:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/352106229",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Haven't looked at the code, but can confirm that a -reindex OOM/leak issue (#11822) was fixed once I merged in that PR.",
      "created_at" : "2017-12-17T07:39:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-352237747",
      "id" : 352237747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-17T07:39:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/352237747",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158490075"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158490075"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154841745\r\n\r\nIn commit \"Block ActivateBestChain to empty validationinterface queue\"\r\n\r\nPlease add a code comment here saying this, I had exactly the same question as achow.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-22T13:16:25Z",
      "diff_hunk" : "@@ -1032,170 +1040,183 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n+// returns true if we need to call ActivateBestChain before responding\n+bool static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool best_chain_active)\n+{\n+    bool send = false;\n+    std::shared_ptr<const CBlock> a_recent_block;\n+    std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n+    bool fWitnessesPresentInARecentCompactBlock;\n+    {\n+        LOCK(cs_most_recent_block);\n+        a_recent_block = most_recent_block;\n+        a_recent_compact_block = most_recent_compact_block;\n+        fWitnessesPresentInARecentCompactBlock = fWitnessesPresentInMostRecentCompactBlock;\n+    }\n+\n+    LOCK(cs_main);\n+    BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n+    if (mi != mapBlockIndex.end())\n+    {\n+        if (mi->second->nChainTx && !mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n+                mi->second->IsValid(BLOCK_VALID_TREE)) {\n+            // If we have the block and all of its parents, but have not yet validated it,\n+            // we might be in the middle of connecting it (ie in the unlock of cs_main\n+            // before ActivateBestChain but after AcceptBlock).\n+            // In this case, we need to run ActivateBestChain prior to checking the relay\n+            // conditions below.\n+            return true;\n+        }\n+        send = BlockRequestAllowed(mi->second, consensusParams);\n+        if (!send) {\n+            LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+        }\n+    }\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    // disconnect node in case we have reached the outbound limit for serving historical blocks\n+    // never disconnect whitelisted nodes\n+    if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+    {\n+        LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+\n+        //disconnect node\n+        pfrom->fDisconnect = true;\n+        send = false;\n+    }\n+    // Pruned nodes may have deleted the block, so check whether\n+    // it's available before trying to send.\n+    if (send && (mi->second->nStatus & BLOCK_HAVE_DATA))\n+    {\n+        std::shared_ptr<const CBlock> pblock;\n+        if (a_recent_block && a_recent_block->GetHash() == (*mi).second->GetBlockHash()) {\n+            pblock = a_recent_block;\n+        } else {\n+            // Send block from disk\n+            std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n+            if (!ReadBlockFromDisk(*pblockRead, (*mi).second, consensusParams))\n+                assert(!\"cannot load block from disk\");\n+            pblock = pblockRead;\n+        }\n+        if (inv.type == MSG_BLOCK)\n+            connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n+        else if (inv.type == MSG_WITNESS_BLOCK)\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n+        else if (inv.type == MSG_FILTERED_BLOCK)\n+        {\n+            bool sendMerkleBlock = false;\n+            CMerkleBlock merkleBlock;\n+            {\n+                LOCK(pfrom->cs_filter);\n+                if (pfrom->pfilter) {\n+                    sendMerkleBlock = true;\n+                    merkleBlock = CMerkleBlock(*pblock, *pfrom->pfilter);\n+                }\n+            }\n+            if (sendMerkleBlock) {\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n+                // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                // This avoids hurting performance by pointlessly requiring a round-trip\n+                // Note that there is currently no way for a node to request any single transactions we didn't send here -\n+                // they must either disconnect and retry or request the full block.\n+                // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                // however we MUST always provide at least what the remote peer needs\n+                typedef std::pair<unsigned int, uint256> PairType;\n+                for (PairType& pair : merkleBlock.vMatchedTxn)\n+                    connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n+            }\n+            // else\n+                // no response\n+        }\n+        else if (inv.type == MSG_CMPCT_BLOCK)\n+        {\n+            // If a peer is asking for old blocks, we're almost guaranteed\n+            // they won't have a useful mempool to match against a compact block,\n+            // and we don't feel like constructing the object for them, so\n+            // instead we respond with the full, non-compact block.\n+            bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n+            int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n+            if (CanDirectFetch(consensusParams) && mi->second->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n+                if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == mi->second->GetBlockHash()) {\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+                } else {\n+                    CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                }\n+            } else {\n+                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n+            }\n+        }\n+\n+        // Trigger the peer node to send a getblocks request for the next batch of inventory\n+        if (inv.hash == pfrom->hashContinue)\n+        {\n+            // Bypass PushInventory, this must send even if redundant,\n+            // and we want it right after the last block so they don't\n+            // wait for other stuff first.\n+            std::vector<CInv> vInv;\n+            vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n+            pfrom->hashContinue.SetNull();\n+        }\n+    }\n+\n+    return false;\n+}\n+\n void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n+    AssertLockNotHeld(cs_main);\n+\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n-    LOCK(cs_main);\n-\n-    while (it != pfrom->vRecvGetData.end()) {\n-        // Don't bother if send buffer is too full to respond anyway\n-        if (pfrom->fPauseSend)\n-            break;\n+    {\n+        LOCK(cs_main);\n \n-        const CInv &inv = *it;\n-        {\n+        while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158490075",
      "id" : 158490075,
      "in_reply_to_id" : 154841745,
      "original_commit_id" : "3113573c847c76943c065b72d3e7a9edc643fed1",
      "original_position" : 244,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 85311741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158490075",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158490923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158490923"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Avoid cs_main in net_processing ActivateBestChain calls\"\r\n\r\nThis change would be easier to understand if ProcessGetBlockData refactoring happened in a different commit than than the cs_main ActivateBestChain unlock.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-22T13:22:25Z",
      "diff_hunk" : "@@ -1038,180 +1038,193 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+// returns true if we need to call ActivateBestChain before responding\n+bool static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool best_chain_active)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158490923",
      "id" : 158490923,
      "original_commit_id" : "3c45fc8b77de685f514d853dbe00542ae14fccb4",
      "original_position" : 6,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 85311741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158490923",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158491959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158491959"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Avoid cs_main in net_processing ActivateBestChain calls\"\r\n\r\nbest_chain_active argument is unused, should remove or use or explain",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-22T13:29:48Z",
      "diff_hunk" : "@@ -1038,180 +1038,193 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+// returns true if we need to call ActivateBestChain before responding\n+bool static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool best_chain_active)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158491959",
      "id" : 158491959,
      "original_commit_id" : "3c45fc8b77de685f514d853dbe00542ae14fccb4",
      "original_position" : 6,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 85311741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158491959",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158495743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158495743"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Avoid cs_main in net_processing ActivateBestChain calls\"\r\n\r\nThis is pretty convoluted. If the point is just to release cs_main before calling ActivateBestChain, why not just use LEAVE_CRITICAL_SECTION / ENTER_CRITICAL_SECTION to release it? Is the problem just lack of a [`reverse_lock`](http://www.boost.org/doc/libs/1_66_0/doc/html/thread/synchronization.html#thread.synchronization.other_locks.reverse_lock) RAII helper?\r\n\r\nMore importantly, if the point is to release cs_main before calling ActivateBestChain, you really need to say this in a code comment, because without looking through code history, I don't think this would be clear at all.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-22T13:53:53Z",
      "diff_hunk" : "@@ -1038,180 +1038,193 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+// returns true if we need to call ActivateBestChain before responding\n+bool static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool best_chain_active)\n {\n-    std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n-    std::vector<CInv> vNotFound;\n-    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    bool send = false;\n+    std::shared_ptr<const CBlock> a_recent_block;\n+    std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n+    bool fWitnessesPresentInARecentCompactBlock;\n+    {\n+        LOCK(cs_most_recent_block);\n+        a_recent_block = most_recent_block;\n+        a_recent_compact_block = most_recent_compact_block;\n+        fWitnessesPresentInARecentCompactBlock = fWitnessesPresentInMostRecentCompactBlock;\n+    }\n+\n     LOCK(cs_main);\n+    BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n+    if (mi != mapBlockIndex.end())\n+    {\n+        if (mi->second->nChainTx && !mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n+                mi->second->IsValid(BLOCK_VALID_TREE)) {\n+            // If we have the block and all of its parents, but have not yet validated it,\n+            // we might be in the middle of connecting it (ie in the unlock of cs_main\n+            // before ActivateBestChain but after AcceptBlock).\n+            // In this case, we need to run ActivateBestChain prior to checking the relay\n+            // conditions below.\n+            return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158495743",
      "id" : 158495743,
      "original_commit_id" : "3c45fc8b77de685f514d853dbe00542ae14fccb4",
      "original_position" : 33,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 85311741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158495743",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158498123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158498123"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Require no cs_main lock for ProcessNewBlock/ActivateBestChain\"\r\n\r\nMaybe simplify this using mapWallet.at() instead of .find() and BOOST_CHECK.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-22T14:10:27Z",
      "diff_hunk" : "@@ -627,10 +627,17 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n+        CMutableTransaction blocktx;\n+        {\n+        LOCK(wallet->cs_wallet);\n+        auto it = wallet->mapWallet.find(wtx.GetHash());\n+        BOOST_CHECK(it != wallet->mapWallet.end());\n+        blocktx = CMutableTransaction(*it->second.tx);\n+        }\n+        CreateAndProcessBlock({CMutableTransaction(blocktx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158498123",
      "id" : 158498123,
      "original_commit_id" : "ddbb3fc3674bf59e87d37078197c6b6fffe445c6",
      "original_position" : 47,
      "path" : "src/wallet/test/wallet_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 85311741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158498123",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158498783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158498783"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r154814580\r\n\r\nIn commit \"Block ActivateBestChain to empty validationinterface queue\"\r\n\r\n> During normal (read: non-IBD/reindex) usage, this should virtually never reach 10. During IBD/reindex, your memory is probably better speint in more dbcache than storing blocks you recently connected to eventually give to your wallet.\r\n\r\nPlease write this in a code comment. (How is anybody supposed to know this?)",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-22T14:14:44Z",
      "diff_hunk" : "@@ -2467,12 +2468,23 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n     // sanely for performance or correctness!\n+    AssertLockNotHeld(cs_main);\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n     int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         boost::this_thread::interruption_point();\n+\n+        if (GetMainSignals().CallbacksPending() > 10) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158498783",
      "id" : 158498783,
      "in_reply_to_id" : 154814580,
      "original_commit_id" : "151b17da19c10324f8405038e19329310bad2467",
      "original_position" : 20,
      "path" : "src/validation.cpp",
      "position" : 20,
      "pull_request_review_id" : 85311741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158498783",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158499695"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158499695"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Block ActivateBestChain to empty validationinterface queue\"\r\n\r\nCould add a CValidationInterface::WaitForPendingCallbacks() method to wrap this up since this is also needed in other places.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-22T14:20:16Z",
      "diff_hunk" : "@@ -2566,6 +2567,16 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n     int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         boost::this_thread::interruption_point();\n+\n+        if (GetMainSignals().CallbacksPending() > 10) {\n+            // Block until the validation queue drains\n+            std::promise<void> promise;\n+            CallFunctionInValidationInterfaceQueue([&promise] {\n+                promise.set_value();\n+            });\n+            promise.get_future().wait();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158499695",
      "id" : 158499695,
      "original_commit_id" : "da8903142f807be9295797c0e65f228230ffd467",
      "original_position" : 19,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 85311741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158499695",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606647"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-24T17:21:09Z",
      "diff_hunk" : "@@ -627,10 +627,17 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n+        CMutableTransaction blocktx;\n+        {\n+        LOCK(wallet->cs_wallet);\n+        auto it = wallet->mapWallet.find(wtx.GetHash());\n+        BOOST_CHECK(it != wallet->mapWallet.end());\n+        blocktx = CMutableTransaction(*it->second.tx);\n+        }\n+        CreateAndProcessBlock({CMutableTransaction(blocktx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606647",
      "id" : 158606647,
      "in_reply_to_id" : 158498123,
      "original_commit_id" : "ddbb3fc3674bf59e87d37078197c6b6fffe445c6",
      "original_position" : 47,
      "path" : "src/wallet/test/wallet_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 85445916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606647",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606648"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606648"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done, in a new commit.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-24T17:21:10Z",
      "diff_hunk" : "@@ -2566,6 +2567,16 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n     int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         boost::this_thread::interruption_point();\n+\n+        if (GetMainSignals().CallbacksPending() > 10) {\n+            // Block until the validation queue drains\n+            std::promise<void> promise;\n+            CallFunctionInValidationInterfaceQueue([&promise] {\n+                promise.set_value();\n+            });\n+            promise.get_future().wait();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606648",
      "id" : 158606648,
      "in_reply_to_id" : 158499695,
      "original_commit_id" : "da8903142f807be9295797c0e65f228230ffd467",
      "original_position" : 19,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 85445917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606648",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606650"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Valid point, refactored a bit, though LEAVE_CRITICAL_SECTION also isnt sufficient as you need to do the mapBlockIndex lookup again, which I went ahead and did.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-24T17:21:11Z",
      "diff_hunk" : "@@ -1038,180 +1038,193 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+// returns true if we need to call ActivateBestChain before responding\n+bool static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool best_chain_active)\n {\n-    std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n-    std::vector<CInv> vNotFound;\n-    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    bool send = false;\n+    std::shared_ptr<const CBlock> a_recent_block;\n+    std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n+    bool fWitnessesPresentInARecentCompactBlock;\n+    {\n+        LOCK(cs_most_recent_block);\n+        a_recent_block = most_recent_block;\n+        a_recent_compact_block = most_recent_compact_block;\n+        fWitnessesPresentInARecentCompactBlock = fWitnessesPresentInMostRecentCompactBlock;\n+    }\n+\n     LOCK(cs_main);\n+    BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n+    if (mi != mapBlockIndex.end())\n+    {\n+        if (mi->second->nChainTx && !mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n+                mi->second->IsValid(BLOCK_VALID_TREE)) {\n+            // If we have the block and all of its parents, but have not yet validated it,\n+            // we might be in the middle of connecting it (ie in the unlock of cs_main\n+            // before ActivateBestChain but after AcceptBlock).\n+            // In this case, we need to run ActivateBestChain prior to checking the relay\n+            // conditions below.\n+            return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606650",
      "id" : 158606650,
      "in_reply_to_id" : 158495743,
      "original_commit_id" : "3c45fc8b77de685f514d853dbe00542ae14fccb4",
      "original_position" : 33,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 85445918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606650",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606651"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606651"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oops, was a bug, fixed in the refactor.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-24T17:21:13Z",
      "diff_hunk" : "@@ -1038,180 +1038,193 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+// returns true if we need to call ActivateBestChain before responding\n+bool static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool best_chain_active)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606651",
      "id" : 158606651,
      "in_reply_to_id" : 158491959,
      "original_commit_id" : "3c45fc8b77de685f514d853dbe00542ae14fccb4",
      "original_position" : 6,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 85445919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606651",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606652"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done. I think.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-24T17:21:14Z",
      "diff_hunk" : "@@ -1038,180 +1038,193 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n     connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+// returns true if we need to call ActivateBestChain before responding\n+bool static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensusParams, const CInv& inv, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool best_chain_active)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606652",
      "id" : 158606652,
      "in_reply_to_id" : 158490923,
      "original_commit_id" : "3c45fc8b77de685f514d853dbe00542ae14fccb4",
      "original_position" : 6,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 85445920,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606652",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606654"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-24T17:21:17Z",
      "diff_hunk" : "@@ -2467,12 +2468,23 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n     // sanely for performance or correctness!\n+    AssertLockNotHeld(cs_main);\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n     int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         boost::this_thread::interruption_point();\n+\n+        if (GetMainSignals().CallbacksPending() > 10) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606654",
      "id" : 158606654,
      "in_reply_to_id" : 154814580,
      "original_commit_id" : "151b17da19c10324f8405038e19329310bad2467",
      "original_position" : 20,
      "path" : "src/validation.cpp",
      "position" : 20,
      "pull_request_review_id" : 85445923,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-24T18:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158606654",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Don't send me anymore pub mail. How can't unsubscribe.\n\nOn Dec 24, 2017 9:22 AM, \"Matt Corallo\" <notifications@github.com> wrote:\n\n> *@TheBlueMatt* commented on this pull request.\n> ------------------------------\n>\n> In src/validation.cpp\n> <https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606648>:\n>\n> > @@ -2566,6 +2567,16 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n>      int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n>      do {\n>          boost::this_thread::interruption_point();\n> +\n> +        if (GetMainSignals().CallbacksPending() > 10) {\n> +            // Block until the validation queue drains\n> +            std::promise<void> promise;\n> +            CallFunctionInValidationInterfaceQueue([&promise] {\n> +                promise.set_value();\n> +            });\n> +            promise.get_future().wait();\n>\n> Done, in a new commit.\n>\n> Ã¢ÂÂ\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158606648>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AhH-NWCScYWtFJ0hUPdgOs8P8xXy58kkks5tDohCgaJpZM4Q1hJ->\n> .\n>\n",
      "created_at" : "2017-12-24T17:33:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-353795683",
      "id" : 353795683,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-24T17:33:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/353795683",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/34733621?v=4",
         "events_url" : "https://api.github.com/users/Damballahwedo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Damballahwedo/followers",
         "following_url" : "https://api.github.com/users/Damballahwedo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Damballahwedo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Damballahwedo",
         "id" : 34733621,
         "login" : "Damballahwedo",
         "organizations_url" : "https://api.github.com/users/Damballahwedo/orgs",
         "received_events_url" : "https://api.github.com/users/Damballahwedo/received_events",
         "repos_url" : "https://api.github.com/users/Damballahwedo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Damballahwedo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Damballahwedo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Damballahwedo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158645539"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158645539"
         }
      },
      "author_association" : "OWNER",
      "body" : "Indentation?",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-25T14:12:21Z",
      "diff_hunk" : "@@ -218,6 +217,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n     {\n         CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+        {\n+        LOCK(cs_main);\n         pblock->nVersion = 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158645539",
      "id" : 158645539,
      "original_commit_id" : "c4fafa2fe0f4e0be4e04c7633c2cb2c791c246e4",
      "original_position" : 14,
      "path" : "src/test/miner_tests.cpp",
      "position" : 14,
      "pull_request_review_id" : 85487748,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-25T14:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158645539",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158645554"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158645554"
         }
      },
      "author_association" : "OWNER",
      "body" : "Indentation?",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-25T14:12:52Z",
      "diff_hunk" : "@@ -627,10 +627,15 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n+        CMutableTransaction blocktx;\n+        {\n+        LOCK(wallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158645554",
      "id" : 158645554,
      "original_commit_id" : "c4fafa2fe0f4e0be4e04c7633c2cb2c791c246e4",
      "original_position" : 42,
      "path" : "src/wallet/test/wallet_tests.cpp",
      "position" : 42,
      "pull_request_review_id" : 85487748,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-25T14:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158645554",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158645642"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158645642"
         }
      },
      "author_association" : "OWNER",
      "body" : "It would be nice to introduce a named constant for this instead.",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-25T14:15:27Z",
      "diff_hunk" : "@@ -2467,12 +2468,23 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n     // sanely for performance or correctness!\n+    AssertLockNotHeld(cs_main);\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n     int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         boost::this_thread::interruption_point();\n+\n+        if (GetMainSignals().CallbacksPending() > 10) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158645642",
      "id" : 158645642,
      "in_reply_to_id" : 154814580,
      "original_commit_id" : "151b17da19c10324f8405038e19329310bad2467",
      "original_position" : 20,
      "path" : "src/validation.cpp",
      "position" : 20,
      "pull_request_review_id" : 85487748,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-25T14:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158645642",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158645785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158645785"
         }
      },
      "author_association" : "OWNER",
      "body" : "If I understand this correctly, it's not actually waiting until a drain, as new events can be added to the queue before the callback added in this function is executed.\r\n\r\nIt's more a synchronization point (guaranteeing that at least all pre-existing events are executed first).",
      "commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "created_at" : "2017-12-25T14:19:24Z",
      "diff_hunk" : "@@ -42,6 +42,16 @@ void UnregisterAllValidationInterfaces();\n  * will result in a deadlock (that DEBUG_LOCKORDER will miss).\n  */\n void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n+/**\n+ * This is a synonym for the following, which asserts certain locks are not\n+ * held:\n+ *     std::promise<void> promise;\n+ *     CallFunctionInValidationInterfaceQueue([&promise] {\n+ *         promise.set_value();\n+ *     });\n+ *     promise.get_future().wait();\n+ */\n+void BlockOnValidationInterfaceQueueDrain();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#discussion_r158645785",
      "id" : 158645785,
      "original_commit_id" : "af5a003d3cfdd3f3a26dfd7c2db5dde347b4ab3c",
      "original_position" : 13,
      "path" : "src/validationinterface.h",
      "position" : 13,
      "pull_request_review_id" : 85487748,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11824",
      "updated_at" : "2017-12-25T14:21:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158645785",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "utACK 97d2b09c124e6e5803f7fd4503348d9710d1260f (and also some experimental evidence that this indeed removes the runaway memory usage).\r\n\r\nConfirmed only indentation/naming changes since af5a003.",
      "created_at" : "2017-12-29T09:31:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-354421728",
      "id" : 354421728,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-29T09:44:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/354421728",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm about to try this as well, will let you know if I still see extreme memory use during a reindex.",
      "created_at" : "2017-12-29T10:09:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11824#issuecomment-354426080",
      "id" : 354426080,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11824",
      "updated_at" : "2017-12-29T10:09:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/354426080",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
