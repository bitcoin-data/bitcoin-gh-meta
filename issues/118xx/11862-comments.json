[
   {
      "author_association" : "MEMBER",
      "body" : "Ah you beat me to it, will take a look as soon as I can\r\n\r\nEarly note: as you mention, net-specific should take precedence over default, whereas explicit command line arguments should always take precedence over the config file, so following your example, if `-maxmempool=200` is specified as an argument it should use 200 even on regtest, whereas if it is not, the `regtest.maxmempool=100` should override the default 200. Then if `-regtest.maxmempool=100` is an explicit argument as well as `-maxmempool=200`, the explicit regtest one should take precedence IMO.\r\n\r\nThen following this logic, `-wallet` specified explicitly as an argument should be used on regtest and testnet as well, using `regtest.wallet` should only be necessary in the config file to save confusion",
      "created_at" : "2017-12-11T10:33:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350684883",
      "id" : 350684883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2017-12-11T10:51:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350684883",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Great. Thanks for tackling this @ajtowns. A few high-level suggestions:\r\n\r\n- I agree with @MeshCollider that the order of precedence should be Command Line > Config File network-specific > Config File default.\r\n- I think there shouldn't be network-specific command-line options (that's almost an implication of the above). I agree with MeshCollider that the user should call `bitcoind` with `-wallet`, not `-regtest.wallet` (side-note - choosing a wallet from the wrong network is perhaps less of a problem than you might assume, since `-wallet` is already kind of network-specific as it refers to the name of the wallet in the particular network directory).\r\n- as well as `NETWORK_ONLY`, perhaps we want a `DEFAULT_ONLY` for options that shouldn't be overriden in the network-specific config. Namely those options would be `-regtest` and `-testnet`. For example don't want the following pathological config file to be valid:\r\n```\r\ntestnet\r\n[testnet]\r\nregtest\r\n[regtest]\r\nnotestnet\r\nnoregtest\r\n```\r\n- taking this further, perhaps we should deprecate the use of `testnet` and `regtest` in the config file entirely, so you can only select the network by using a command-line option?\r\n- I've avoided nitting your code at this early point, but I'd point you at the developer notes here: https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md, specifically symbol naming.  Your new `ArgsManager` members should be prefixed `m_` for example.",
      "created_at" : "2017-12-11T15:16:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350753811",
      "id" : 350753811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2017-12-11T15:16:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350753811",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\nNice work!\r\n\r\nAgree with @MeshCollider and @jnewbery (except the point of deprecating the use of testnet/regtest in config file).",
      "created_at" : "2017-12-11T18:56:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350821889",
      "id" : 350821889,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2017-12-11T18:56:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350821889",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay, getting that behaviour requires marginally more invasive changes, but I think it's worth it (and they're not *that* invasive). New patch series accompanying this comment which:\r\n\r\n * has arg precedence being: command-line arguments, net-specific config file options, default config file options\r\n * will only use config file options for -addnode and -wallet if you're on mainnet or put them in the right [regtest] or [testnet] section or add a `regtest.` or `testnet.` prefix\r\n * only allows -testnet and -regtest to be specified in the default section or on the command line (ie, [regtest] testnet=1 silliness is silently ignored)\r\n * for single-value options, precedence is (a) last value specified on the command line, (b) first value specified in the network section of the config file, and finally (c) first value specified in the default section of the config file. the last vs first difference between cli and conf is weird, but matches current behaviour. the code would be slightly improved by making it consistent.\r\n\r\nI think that should behave pretty much as expected -- specifying things on the command line will always take effect, having a testnet specific config and just invoking \"bitcoind -conf=testnet.conf\" should work fine, having separate configs for mainnet, regtest and testnet in a single file with different options should work too.\r\n\r\nFrom the code side of things, I've made a bunch of changes:\r\n\r\n * I've dropped mapArgs, and split mapMultiArgs into mapOverrideArgs (for cli arguments are ForceSetArg) and mapConfigArgs (for config files)\r\n * I've listed the net-specific options explicitly in util.cpp rather than having each use of the options specify that they're net-specific; seems simpler and much more robust.\r\n * I've moved ChainNameFromCommandLine from chainparamsbase into util, so it can have more precise access to how -testnet/-regtest were specified\r\n * I've dropped the filename argument from ReadConfigFile and split most of the logic into ReadConfigStream, which makes it more unit-testable\r\n\r\nI've added some unit tests, but they're a bit basic; I haven't done a functional test either. (And it's still a bit early for detailed code style nits, though I've tried to make a token effort to avoid them :) )\r\n\r\nEdit: Oh, the previous pass is commit 907dd64994e945a30833200ce1131840b06c8ab7 at https://github.com/ajtowns/bitcoin/tree/netconf-sections-v1 on the off chance someone wants to look at it.",
      "created_at" : "2017-12-12T10:22:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-351008713",
      "id" : 351008713,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2017-12-12T10:24:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351008713",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay, here's something for first pass reviews I think.\r\n\r\nThe first five commits do some refactoring on ChainNameFromCommandLine (moving it from chainparamsbase.cpp into util.cpp:ArgsManager) and ReadConfigFile, primarily to make it easier to add tests for both of them.\r\n\r\n    c5b5997e1 Move ChainNameFromCommandLine into ArgsManager\r\n    eedd60951 [tests] Add unit tests for ChainNameFromCommandLine\r\n    f1665f160 Separate out ReadConfigStream from ReadConfigFile\r\n    0e78382c3 [tests] Add unit tests for ReadConfigStream\r\n    d4367e1c6 [tests] Check ChainNameFromCommandLine works with config entries\r\n\r\nThe next commit switches from mapArgs and mapMultiArgs (for single and multi value options) to mapConfigArgs and mapOverrideArgs (for config file options and commandline/forceset options).\r\n\r\n    bdb0c2857 ArgsManager: keep command line and config file arguments separate\r\n\r\nThe next commit is the first one that should change behaviour, and does most of the work. Unit test, and update to functional test are in the following commits.\r\n\r\n    0e6679466 ArgManager: add support for config sections\r\n    7a51198d3 [tests] Unit tests for config file sections\r\n    359c78e2e [tests] Use regtest section in functional tests configs\r\n\r\nThe next commit changes the behaviour of the addnode, connect, port, bind, rpcport, rpcbind and wallet options: when they're specified in the config file they'll only apply to mainnet unless you use a [regtest] or [test] header (or a \"regtest.\" or \"test.\" prefix).\r\n\r\n    7be1ddd31 ArgsManager: limit some options to only apply on mainnet when in default section\r\n    c031709db [tests] Unit tests for section-specific config entries\r\n\r\nPenultimately, there's special handling for the -regtest and -testnet options, so that ChainNameFromCommandLine will ignore bogus entries like \"[regtest] testnet=1\" or \"[regtest] noregtest\" and won't return weird results if invoked after the initial call to Select(Base)Params() with a pathological config file like that. cf jnewbery's comments in https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350753811\r\n\r\n    2933f6016 ArgsManager: special handling for -regtest and -testnet\r\n    22da57f19 [tests] Unit tests for -testnet/-regtest in [test]/[regtest] sections\r\n\r\nAnd finally there's also an update for the release notes.\r\n\r\n    ee91028e7 Add config changes to release notes\r\n\r\nNotes:\r\n\r\nI've called the member variables things like \"m_mapConfigArgs\" rather than fully snake-case map_config_args or similar as a compromise between the coding style and what's already in use in the class.\r\n\r\nI needed a few helper functions with access to protected ArgsManager member variables; rather than add them to util.h directly, I made a friend class for them, ArgsManagerHelper. It's not crazy pretty but it seems alright. Maybe they should go in util_helper.h or similar though?\r\n\r\nI got the locks wrong for cs_args and csPathCached initially -- was tempted to add \"AssetLockNotHeld(gArgs.cs_args)\" to GetDataDir to help avoid this, but it runs into two problems: in some threads GetDataDir() is called before any locks are acquired leaving lockstack==nullptr and causing a segfault (which can easily be avoided by just adding the assert after LOCK(csPathCached)); and cs_args is protected so it would've required another ArgsManagerHelper functions.\r\n\r\nThe datadir option is a little tricky. Currently you have three options:\r\n\r\n  - don't specify -datadir anywhere, just use the default\r\n  - specify -datadir on the command line\r\n  - specify -datadir in the config file only (the config file may be located via the default datadir)\r\n\r\nWith these patches it would be possible to have a fourth option: specify datadir in the applicable network section of the configfile, allowing a single config file to specify different datadirs for regtest and testnet. At present the code locks datadir into place before selecting the network, so that hasn't been implemented in this PR.\r\n\r\nThe fact that -addnode, -connect, etc only apply to main net is specified in util.cpp rather than in the files that care about the options. This is something that can be cleaned up in the rework of argument handling that @MeshCollider has been working on.\r\n\r\nI think the approach makes sense at this point, so reviews appreciated and nits welcome I guess!",
      "created_at" : "2018-01-03T05:46:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-354941242",
      "id" : 354941242,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-01-03T05:46:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/354941242",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Was already wondering why this was closed!\r\n\r\nEdit: overall looks ok to me! had some small comments in person, but nothing major. Will test this.",
      "created_at" : "2018-03-05T19:30:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-370535273",
      "id" : 370535273,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-03-05T19:54:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/370535273",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think this is far enough along to have the brainstorming tag removed because at least to me it feels almost unready to be reviewed if it has that tag, more of a high-level discussion thing. \r\n\r\nDefinite Concept ACK if I haven't already said so. I'll review soon.\r\n\r\nFor reference, this also supersedes the issue #9374",
      "created_at" : "2018-03-06T19:22:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-370896840",
      "id" : 370896840,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-03-07T07:32:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/370896840",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172686778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172686778"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This `else` isn't required. You can just drop through after the `if` block. (in the commit 4f3766f7d you can remove the code unit from around the LOCK in `ReadConfigStream`. It was only there so the lock was released before the call to `ClearDatadirCache()`.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-06T22:46:24Z",
      "diff_hunk" : "@@ -647,14 +763,15 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-void ArgsManager::ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigStream(std::istream& streamConfig)\n {\n-    fs::ifstream streamConfig(GetConfigFile(confPath));\n-    if (!streamConfig.good())\n-        return; // No bitcoin.conf file is OK\n+    AssertLockNotHeld(cs_args);\n \n-    {\n+    if (!streamConfig.good()) {\n+        return; // No bitcoin.conf file is OK\n+    } else {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172686778",
      "id" : 172686778,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 223,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 101747445,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172686778",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172695532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172695532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style nit: if clauses should either be on the same line as the if conditional, or with braces (https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md)",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-06T23:26:22Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172695532",
      "id" : 172695532,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 9,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 101747445,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172695532",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172854201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172854201"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is there any reason not to make this a namespace, rather than a class with a bunch of static functions?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-07T14:16:23Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172854201",
      "id" : 172854201,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 5,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172854201",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172854433"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172854433"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style nit: new code should use snake_case for arguments and variables.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-07T14:17:00Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172854433",
      "id" : 172854433,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 7,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172854433",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172865874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172865874"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can replace the `readlines()` with `read()` and the write below with `f.write(\"datadir=\" + new_data_dir + \"\\n\" + conf_file_contents)`. That's a bit more compact, but both are fine.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-07T14:50:35Z",
      "diff_hunk" : "@@ -29,8 +29,14 @@ def run_test(self):\n \n         # Check that using non-existent datadir in conf file fails\n         conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n-        with open(conf_file, 'a', encoding='utf8') as f:\n+\n+        # datadir needs to be set before [regtest] section\n+        conf_file_contents = open(conf_file, encoding='utf8').readlines()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172865874",
      "id" : 172865874,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 7,
      "path" : "test/functional/feature_config_args.py",
      "position" : null,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172865874",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172870069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172870069"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps add a comment for why we need this function (and another comment lower down next to `m_setSectionOnlyArgs` explaining why those particular arguments shouldn't be applied to non-mainnet configs by default).",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-07T15:02:47Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172870069",
      "id" : 172870069,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 7,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172870069",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172872217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172872217"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does it makes more sense to have this as a file-level constant rather than a member of ArgsManager?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-07T15:09:42Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');\n+        return \"-\" + am.m_strSection + \".\" + strArg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& vRes, const map_args& mapArgs, const std::string& strArg)\n+    {\n+        auto it = mapArgs.find(strArg);\n+        if (it != mapArgs.end()) {\n+            vRes.insert(vRes.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline bool GetArgHelper(std::string* result, const map_args& mapArgs, const std::string& strArg, bool getLast = false)\n+    {\n+        auto it = mapArgs.find(strArg);\n+\n+        if (it == mapArgs.end() || it->second.empty())\n+            return false;\n+\n+        if (result != nullptr) {\n+            if (getLast) {\n+                *result = it->second.back();\n+            } else {\n+                *result = it->second.front();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline bool GetArg(const ArgsManager &am, std::string* result, const std::string& strArg)\n+    {\n+        LOCK(am.cs_args);\n+\n+        if (GetArgHelper(result, am.m_mapOverrideArgs, strArg, true))\n+            return true;\n+\n+        if (!am.m_strSection.empty()) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, SectionArg(am, strArg)))\n+                return true;\n+        }\n+\n+        if (UseDefaultSection(am, strArg)) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, strArg))\n+                return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /* Special test for -testnet and -regtest args, because we\n+     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n+     */\n+    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& strNetArg)\n+    {\n+        std::string v;\n+        if (!GetArgHelper(&v, am.m_mapOverrideArgs, strNetArg, true)) {\n+            if (!GetArgHelper(&v, am.m_mapConfigArgs, strNetArg, true)) {\n+                return false; // not set\n+            }\n+        }\n+        return InterpretBool(v); // is set, so evaluate\n+    }\n+};\n+\n+ArgsManager::ArgsManager(void) :",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172872217",
      "id" : 172872217,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 94,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172872217",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172876541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172876541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This assert can be hit. Try running `feature_pruning.py` for example:\r\n\r\n```\r\nbitcoind: util.cpp:456: static std::__cxx11::string ArgsManagerHelper::SectionArg(const ArgsManager&, const string&): Assertion `strArg.length() > 1 && strArg[0] == '-'' failed.\r\n```",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-07T15:21:19Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172876541",
      "id" : 172876541,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 22,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172876541",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172879970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172879970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is it possible to log when a default section config is not used? It could be confusing for users who specify `-addnode`, `-connect`, etc in the default section, expecting the config to be picked up.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-07T15:30:26Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');\n+        return \"-\" + am.m_strSection + \".\" + strArg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& vRes, const map_args& mapArgs, const std::string& strArg)\n+    {\n+        auto it = mapArgs.find(strArg);\n+        if (it != mapArgs.end()) {\n+            vRes.insert(vRes.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline bool GetArgHelper(std::string* result, const map_args& mapArgs, const std::string& strArg, bool getLast = false)\n+    {\n+        auto it = mapArgs.find(strArg);\n+\n+        if (it == mapArgs.end() || it->second.empty())\n+            return false;\n+\n+        if (result != nullptr) {\n+            if (getLast) {\n+                *result = it->second.back();\n+            } else {\n+                *result = it->second.front();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline bool GetArg(const ArgsManager &am, std::string* result, const std::string& strArg)\n+    {\n+        LOCK(am.cs_args);\n+\n+        if (GetArgHelper(result, am.m_mapOverrideArgs, strArg, true))\n+            return true;\n+\n+        if (!am.m_strSection.empty()) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, SectionArg(am, strArg)))\n+                return true;\n+        }\n+\n+        if (UseDefaultSection(am, strArg)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172879970",
      "id" : 172879970,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 71,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172879970",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172923052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172923052"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe this is catching a legitimate bug in the caller; confirming at the minute.\r\n\r\nEdit: Yeah it's a legit bug as far as I can see -- #12640",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-07T17:35:07Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172923052",
      "id" : 172923052,
      "in_reply_to_id" : 172876541,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 22,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 102025081,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172923052",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172923435"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172923435"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "As in \"Warning: you're running on testnet, so your -addnode setting didn't get applied\" ?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-07T17:36:24Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');\n+        return \"-\" + am.m_strSection + \".\" + strArg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& vRes, const map_args& mapArgs, const std::string& strArg)\n+    {\n+        auto it = mapArgs.find(strArg);\n+        if (it != mapArgs.end()) {\n+            vRes.insert(vRes.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline bool GetArgHelper(std::string* result, const map_args& mapArgs, const std::string& strArg, bool getLast = false)\n+    {\n+        auto it = mapArgs.find(strArg);\n+\n+        if (it == mapArgs.end() || it->second.empty())\n+            return false;\n+\n+        if (result != nullptr) {\n+            if (getLast) {\n+                *result = it->second.back();\n+            } else {\n+                *result = it->second.front();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline bool GetArg(const ArgsManager &am, std::string* result, const std::string& strArg)\n+    {\n+        LOCK(am.cs_args);\n+\n+        if (GetArgHelper(result, am.m_mapOverrideArgs, strArg, true))\n+            return true;\n+\n+        if (!am.m_strSection.empty()) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, SectionArg(am, strArg)))\n+                return true;\n+        }\n+\n+        if (UseDefaultSection(am, strArg)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172923435",
      "id" : 172923435,
      "in_reply_to_id" : 172879970,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 71,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 102025503,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172923435",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172924025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172924025"
         }
      },
      "author_association" : "OWNER",
      "body" : "Or \"Warning: Setting X specified outside configuration section is only applied on mainnet\"",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-07T17:38:13Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');\n+        return \"-\" + am.m_strSection + \".\" + strArg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& vRes, const map_args& mapArgs, const std::string& strArg)\n+    {\n+        auto it = mapArgs.find(strArg);\n+        if (it != mapArgs.end()) {\n+            vRes.insert(vRes.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline bool GetArgHelper(std::string* result, const map_args& mapArgs, const std::string& strArg, bool getLast = false)\n+    {\n+        auto it = mapArgs.find(strArg);\n+\n+        if (it == mapArgs.end() || it->second.empty())\n+            return false;\n+\n+        if (result != nullptr) {\n+            if (getLast) {\n+                *result = it->second.back();\n+            } else {\n+                *result = it->second.front();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline bool GetArg(const ArgsManager &am, std::string* result, const std::string& strArg)\n+    {\n+        LOCK(am.cs_args);\n+\n+        if (GetArgHelper(result, am.m_mapOverrideArgs, strArg, true))\n+            return true;\n+\n+        if (!am.m_strSection.empty()) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, SectionArg(am, strArg)))\n+                return true;\n+        }\n+\n+        if (UseDefaultSection(am, strArg)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172924025",
      "id" : 172924025,
      "in_reply_to_id" : 172879970,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 71,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 102026150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172924025",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r173870835"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173870835"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah: It's a class so that it can be declared a friend of ArgsManager, which allows the functions in the class to access private/protected members of ArgsManager.\r\n\r\nThese functions could just be private member functions of ArgsManager, but that would mean bumping util.h every time any of them need to be changed, which causes a lot of unnecessary recompilation.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-12T16:58:41Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r173870835",
      "id" : 173870835,
      "in_reply_to_id" : 172854201,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 5,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 103131226,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173870835",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> I think this is far enough along to have the brainstorming tag removed because at least to me it feels almost unready to be reviewed if it has that tag, more of a high-level discussion thing.\r\n\r\nI tend to agree. Let's remove the WIP tag and try to get this in for 0.17.0. As I understand it, the issues left are pretty much documentation and message related.",
      "created_at" : "2018-03-22T08:49:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-375221380",
      "id" : 375221380,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-03-22T08:49:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375221380",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Let's ... try to get this in for 0.17.0\r\n\r\nCurrent implementation is blocked on issue #12640 , which is fixed in #12756. Please review that (simple) PR if you want this to be merged :)",
      "created_at" : "2018-03-22T14:34:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-375328015",
      "id" : 375328015,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-03-22T14:34:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375328015",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "#12756 is in master and I wanted to test this, so I rebased. There was a trivial merge conflict in feature_config_args.py. It might be quicker if you grab my rebased branch here: https://github.com/jnewbery/bitcoin/tree/pr11862.1\r\n\r\nI can confirm with #12756, we no longer crash in any of the functional tests.\r\n\r\nI think there are still a few review comments for you to address.",
      "created_at" : "2018-03-26T14:36:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-376188264",
      "id" : 376188264,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-03-26T14:36:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376188264",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r177766305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177766305"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Having it be a member of ArgsManager makes it easier to deal with unit tests. But slightly longer term, they should be file-level constants in the files that use the arguments, rather than util.cpp; but that's future work.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-03-28T14:20:55Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');\n+        return \"-\" + am.m_strSection + \".\" + strArg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& vRes, const map_args& mapArgs, const std::string& strArg)\n+    {\n+        auto it = mapArgs.find(strArg);\n+        if (it != mapArgs.end()) {\n+            vRes.insert(vRes.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline bool GetArgHelper(std::string* result, const map_args& mapArgs, const std::string& strArg, bool getLast = false)\n+    {\n+        auto it = mapArgs.find(strArg);\n+\n+        if (it == mapArgs.end() || it->second.empty())\n+            return false;\n+\n+        if (result != nullptr) {\n+            if (getLast) {\n+                *result = it->second.back();\n+            } else {\n+                *result = it->second.front();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline bool GetArg(const ArgsManager &am, std::string* result, const std::string& strArg)\n+    {\n+        LOCK(am.cs_args);\n+\n+        if (GetArgHelper(result, am.m_mapOverrideArgs, strArg, true))\n+            return true;\n+\n+        if (!am.m_strSection.empty()) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, SectionArg(am, strArg)))\n+                return true;\n+        }\n+\n+        if (UseDefaultSection(am, strArg)) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, strArg))\n+                return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /* Special test for -testnet and -regtest args, because we\n+     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n+     */\n+    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& strNetArg)\n+    {\n+        std::string v;\n+        if (!GetArgHelper(&v, am.m_mapOverrideArgs, strNetArg, true)) {\n+            if (!GetArgHelper(&v, am.m_mapConfigArgs, strNetArg, true)) {\n+                return false; // not set\n+            }\n+        }\n+        return InterpretBool(v); // is set, so evaluate\n+    }\n+};\n+\n+ArgsManager::ArgsManager(void) :",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r177766305",
      "id" : 177766305,
      "in_reply_to_id" : 172872217,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 94,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 107698701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177766305",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Should address most of the comments, including the style nits.\r\n\r\nI haven't updated the help for -addnode or -connect; not sure what to update it to... Also have not added a log message warning when no config option has been found despite a config option being present in the default section. Do have an idea how to do that, so may add it tomorrow.\r\n\r\nDropped [wip] from the subject; someone might want to drop the brainstorming label, 'cause I can't. :)",
      "created_at" : "2018-03-28T15:19:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-376925335",
      "id" : 376925335,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-03-28T15:19:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376925335",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> may add it tomorrow.\r\n\r\nI'll review once you've decided how to tackle this :)",
      "created_at" : "2018-03-28T15:40:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-376933141",
      "id" : 376933141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-03-28T15:40:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376933141",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Took the opportunity to bump the dates on the commits to encourage github to list them in the right order.\r\n\r\nIt now gives a warning at startup if you're on testnet or regtest, have one of the section-only arguments in the default section of the config file, and haven't overridden that argument either on the command line or in the appropriate config section. The warnings are checked via InitParameterInteraction() to avoid updating multiple places and it's kind-of a parameter interaction.\r\n\r\ntravis failures seem to just be the currently expected ones -- mingw32 tests timing out, and the one fixed by #12821.",
      "created_at" : "2018-03-29T07:05:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-377142718",
      "id" : 377142718,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-03-29T07:05:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377142718",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased again. #12713 made this a bit more complicated -- how negated options (-nofoo) work with the config files is (in my opinion) a bit confusing as implemented, and coping with negated options and sections makes it a bit more confusing. As a consequence, I've broken out the first set of refactoring/testing patches into its on PR (#12878) which includes some additional tests for the current behaviour of negated options. For this PR, the way I've handled things is to make \"-nofoo\" empty the vector of values for \"foo\", and to consider an empty vector an indication that the arg is negated. I think that ends up behaving reasonably logically, and the changes are hopefully indicated in the corresponding unit tests.\r\n\r\nEDIT: bah, github ordering is wrong, i'll fix the dates and bump the PR again. fixed and bumped.",
      "created_at" : "2018-04-04T08:36:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-378524308",
      "id" : 378524308,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-04-04T08:43:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378524308",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've reviewed #12878. Will review this once that PR is merged and this is rebased.",
      "created_at" : "2018-04-04T15:12:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-378636238",
      "id" : 378636238,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-04-04T15:12:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378636238",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. \r\nRight now, If I introduce a regtest2 section, for example, it will simply be ignored, correct?\r\nI'm wondering how this will interact with https://github.com/bitcoin/bitcoin/pull/8994",
      "created_at" : "2018-04-05T20:12:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-379061898",
      "id" : 379061898,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-04-05T20:12:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379061898",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1008458?v=4",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jtimon If you put a `[regtest2]` section in bitcoind.conf today, it will be ignored -- under the hood the options are just prefixed with the section, so you'd just be setting `-regtest2.foo=1` which would never get looked up. I think as far as #8994 goes, the call to SelectConfigSection() that this PR adds inside SelectBaseParams() should keep the config section used (by this PR) in sync with the chain used (by your PR), so things should work out okay.",
      "created_at" : "2018-04-09T06:48:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-379651794",
      "id" : 379651794,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-04-09T06:48:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379651794",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased post #12878 merge.",
      "created_at" : "2018-04-09T06:50:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-379652208",
      "id" : 379652208,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-04-09T06:50:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379652208",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180134254"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180134254"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Comment is wrong. This function returns a std::pair",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T15:29:48Z",
      "diff_hunk" : "@@ -455,6 +455,99 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n+\n+    /** Determine whether to use config settings in the default section,\n+     *  See also comments around ArgsManager::ArgsManager() below. */\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& arg)\n+    {\n+        return (am.m_section == CBaseChainParams::MAIN || am.m_section_only_args.count(arg) == 0);\n+    }\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& arg)\n+    {\n+        assert(arg.length() > 1 && arg[0] == '-');\n+        return \"-\" + am.m_section + \".\" + arg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n+    {\n+        auto it = map_args.find(arg);\n+        if (it != map_args.end()) {\n+            res.insert(res.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n+    {\n+        auto it = map_args.find(arg);\n+\n+        if (it == map_args.end() || it->second.empty()) {\n+            return std::make_pair(false, std::string());\n+        }\n+\n+        if (getLast) {\n+            return std::make_pair(true, it->second.back());\n+        } else {\n+            return std::make_pair(true, it->second.front());\n+        }\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180134254",
      "id" : 180134254,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 50,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180134254",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180134595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180134595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you add a comment why you want the last item from m_override_args, but the first item from m_config_args below?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T15:30:54Z",
      "diff_hunk" : "@@ -455,6 +455,99 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n+\n+    /** Determine whether to use config settings in the default section,\n+     *  See also comments around ArgsManager::ArgsManager() below. */\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& arg)\n+    {\n+        return (am.m_section == CBaseChainParams::MAIN || am.m_section_only_args.count(arg) == 0);\n+    }\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& arg)\n+    {\n+        assert(arg.length() > 1 && arg[0] == '-');\n+        return \"-\" + am.m_section + \".\" + arg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n+    {\n+        auto it = map_args.find(arg);\n+        if (it != map_args.end()) {\n+            res.insert(res.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n+    {\n+        auto it = map_args.find(arg);\n+\n+        if (it == map_args.end() || it->second.empty()) {\n+            return std::make_pair(false, std::string());\n+        }\n+\n+        if (getLast) {\n+            return std::make_pair(true, it->second.back());\n+        } else {\n+            return std::make_pair(true, it->second.front());\n+        }\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    {\n+        LOCK(am.cs_args);\n+        std::pair<bool,std::string> found_result(false, std::string());\n+\n+        found_result = GetArgHelper(am.m_override_args, arg, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180134595",
      "id" : 180134595,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 58,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180134595",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180136983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180136983"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I prefer the more compact representation that was here before:\r\n\r\n```\r\nif (thing) return something;\r\nreturn something_else;\r\n```\r\n\r\nthan:\r\n\r\n```\r\nif (thing) {\r\n    return something;\r\n} else {\r\n    return something_else;\r\n}\r\n```\r\n\r\nI believe both are acceptable in our style guide.\r\n\r\nThis is just personal preference though, so feel free to ignore.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T15:38:07Z",
      "diff_hunk" : "@@ -511,55 +658,89 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n             key.erase(0, 1);\n \n         // Transform -nofoo to -foo=0\n-        InterpretNegatedOption(key, val);\n-\n-        mapArgs[key] = val;\n-        mapMultiArgs[key].push_back(val);\n+        if (InterpretNegatedOption(key, val)) {\n+            m_override_args[key].clear();\n+        } else {\n+            m_override_args[key].push_back(val);\n+        }\n     }\n }\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n+    std::vector<std::string> result = {};\n+    if (IsArgNegated(strArg)) return result; // special case\n+\n     LOCK(cs_args);\n-    auto it = mapMultiArgs.find(strArg);\n-    if (it != mapMultiArgs.end()) return it->second;\n-    return {};\n+\n+    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n+\n+    if (!m_section.empty()) {\n+        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::SectionArg(*this, strArg));\n+    }\n+\n+    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n+        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n+    }\n+\n+    return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-    return mapArgs.count(strArg);\n+    if (IsArgNegated(strArg)) return true; // special case\n+    return ArgsManagerHelper::GetArg(*this, strArg).first;\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n     LOCK(cs_args);\n-    return m_negated_args.find(strArg) != m_negated_args.end();\n+\n+    const auto& ov = m_override_args.find(strArg);\n+    if (ov != m_override_args.end()) return ov->second.empty();\n+\n+    if (!m_section.empty()) {\n+        const auto& cfs = m_config_args.find(ArgsManagerHelper::SectionArg(*this, strArg));\n+        if (cfs != m_config_args.end()) return cfs->second.empty();\n+    }\n+\n+    const auto& cf = m_config_args.find(strArg);\n+    if (cf != m_config_args.end()) return cf->second.empty();\n+\n+    return false;\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    LOCK(cs_args);\n-    auto it = mapArgs.find(strArg);\n-    if (it != mapArgs.end()) return it->second;\n-    return strDefault;\n+    if (IsArgNegated(strArg)) return \"0\";\n+    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n+    if (found_res.first) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180136983",
      "id" : 180136983,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 271,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180136983",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180142484"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180142484"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't understand why this needs to move from `ParseParameters()`. It seems needlessly restrictive that `m_config_args` is cleared each time that `ReadConfigFile()` (and will need to be removed for #10267 for example).",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T15:54:15Z",
      "diff_hunk" : "@@ -748,15 +928,21 @@ void ArgsManager::ReadConfigStream(std::istream& stream)\n         // Don't overwrite existing settings so command line settings override bitcoin.conf\n         std::string strKey = std::string(\"-\") + it->string_key;\n         std::string strValue = it->value[0];\n-        InterpretNegatedOption(strKey, strValue);\n-        if (mapArgs.count(strKey) == 0)\n-            mapArgs[strKey] = strValue;\n-        mapMultiArgs[strKey].push_back(strValue);\n+        if (InterpretNegatedOption(strKey, strValue)) {\n+            m_config_args[strKey].clear();\n+        } else {\n+            m_config_args[strKey].push_back(strValue);\n+        }\n     }\n }\n \n void ArgsManager::ReadConfigFile(const std::string& confPath)\n {\n+    {\n+        LOCK(cs_args);\n+        m_config_args.clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180142484",
      "id" : 180142484,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 339,
      "path" : "src/util.cpp",
      "position" : 352,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180142484",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180172411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180172411"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This `val` is never used (callers to `InterpretNegatedOption()` just clear the `m_override_options` map if the function returns true). Suggest you don't set it here.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T17:34:42Z",
      "diff_hunk" : "@@ -464,30 +557,84 @@ static bool InterpretBool(const std::string& strValue)\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-void ArgsManager::InterpretNegatedOption(std::string& key, std::string& val)\n+static bool InterpretNegatedOption(std::string& key, std::string& val)\n {\n-    if (key.substr(0, 3) == \"-no\") {\n+    assert(key[0] == '-');\n+\n+    size_t option_index = key.find('.');\n+    if (option_index == std::string::npos) {\n+        option_index = 1;\n+    } else {\n+        ++option_index;\n+    }\n+    if (key.substr(option_index, 2) == \"no\") {\n         bool bool_val = InterpretBool(val);\n+        key.erase(option_index, 2);\n         if (!bool_val ) {\n             // Double negatives like -nofoo=0 are supported (but discouraged)\n             LogPrintf(\"Warning: parsed potentially confusing double-negative %s=%s\\n\", key, val);\n+            val = \"1\";\n+        } else {\n+            val = \"0\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180172411",
      "id" : 180172411,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 124,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180172411",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180173826"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180173826"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I have a preference for early exit instead of deeply nested `if`s (ie you could change this to:\r\n\r\n```\r\n    if (key.substr(option_index, 2) != \"no\") return false;\r\n\r\n    bool bool_val = InterpretBool(val);\r\n    key.erase(option_index, 2);\r\n    if (!bool_val ) {\r\n        // Double negatives like -nofoo=0 are supported (but discouraged)\r\n        LogPrintf(\"Warning: parsed potentially confusing double-negative %s=%s\\n\", key, val);\r\n        val = \"1\";\r\n        return false;\r\n    }\r\n    return true;\r\n```\r\n)\r\n\r\nAgain, this is personal preference. Feel free to ignore.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T17:39:52Z",
      "diff_hunk" : "@@ -464,30 +557,84 @@ static bool InterpretBool(const std::string& strValue)\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-void ArgsManager::InterpretNegatedOption(std::string& key, std::string& val)\n+static bool InterpretNegatedOption(std::string& key, std::string& val)\n {\n-    if (key.substr(0, 3) == \"-no\") {\n+    assert(key[0] == '-');\n+\n+    size_t option_index = key.find('.');\n+    if (option_index == std::string::npos) {\n+        option_index = 1;\n+    } else {\n+        ++option_index;\n+    }\n+    if (key.substr(option_index, 2) == \"no\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180173826",
      "id" : 180173826,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 116,
      "path" : "src/util.cpp",
      "position" : 139,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180173826",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180174213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180174213"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment isn't accurate anymore. Remove.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T17:41:20Z",
      "diff_hunk" : "@@ -511,55 +658,89 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n             key.erase(0, 1);\n \n         // Transform -nofoo to -foo=0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180174213",
      "id" : 180174213,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 200,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180174213",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180175281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180175281"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Remove duplicate line",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T17:45:15Z",
      "diff_hunk" : "@@ -277,12 +289,13 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     testArgs.ReadConfigString(conf_test);\n \n     // This was passed twice, second one overrides the negative setting,\n-    // but not the value.\n+    // and the value.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"1\");\n \n     // A double negative is a positive.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180175281",
      "id" : 180175281,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 101,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180175281",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180188802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180188802"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure if it makes sense to call this from `SelectBaseParams()`. This function is about setting the blockchain parameters, not the global node config.\r\n\r\nDoesn't it make sense just to set `gArgs.m_section` directly at the end of `ReadConfigFile()`?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T18:31:39Z",
      "diff_hunk" : "@@ -48,4 +48,5 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n void SelectBaseParams(const std::string& chain)\n {\n     globalChainBaseParams = CreateBaseChainParams(chain);\n+    gArgs.SelectConfigSection(chain);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180188802",
      "id" : 180188802,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 4,
      "path" : "src/chainparamsbase.cpp",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180188802",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180190293"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180190293"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nanonit: use `inline static` or `static inline` consistently :)",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T18:36:58Z",
      "diff_hunk" : "@@ -455,6 +455,99 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n+\n+    /** Determine whether to use config settings in the default section,\n+     *  See also comments around ArgsManager::ArgsManager() below. */\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& arg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180190293",
      "id" : 180190293,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 11,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180190293",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180190921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180190921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this variable could be named better (and commented). If I'm not mistaken, this is the network that the node has been configured to run on (mainnet, testnet or regtest). Would a better name be `m_network`?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T18:39:16Z",
      "diff_hunk" : "@@ -223,17 +224,35 @@ inline bool IsSwitchChar(char c)\n class ArgsManager\n {\n protected:\n+    friend class ArgsManagerHelper;\n+\n     mutable CCriticalSection cs_args;\n-    std::map<std::string, std::string> mapArgs;\n-    std::map<std::string, std::vector<std::string>> mapMultiArgs;\n-    std::unordered_set<std::string> m_negated_args;\n+    std::map<std::string, std::vector<std::string>> m_override_args;\n+    std::map<std::string, std::vector<std::string>> m_config_args;\n+    std::string m_section;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180190921",
      "id" : 180190921,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 20,
      "path" : "src/util.h",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180190921",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180192825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180192825"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This will only return true if `am.m_section == CBaseChainParams::MAIN`. Why don't you explictly check for that above the loop and return?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T18:46:11Z",
      "diff_hunk" : "@@ -464,30 +557,84 @@ static bool InterpretBool(const std::string& strValue)\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-void ArgsManager::InterpretNegatedOption(std::string& key, std::string& val)\n+static bool InterpretNegatedOption(std::string& key, std::string& val)\n {\n-    if (key.substr(0, 3) == \"-no\") {\n+    assert(key[0] == '-');\n+\n+    size_t option_index = key.find('.');\n+    if (option_index == std::string::npos) {\n+        option_index = 1;\n+    } else {\n+        ++option_index;\n+    }\n+    if (key.substr(option_index, 2) == \"no\") {\n         bool bool_val = InterpretBool(val);\n+        key.erase(option_index, 2);\n         if (!bool_val ) {\n             // Double negatives like -nofoo=0 are supported (but discouraged)\n             LogPrintf(\"Warning: parsed potentially confusing double-negative %s=%s\\n\", key, val);\n+            val = \"1\";\n+        } else {\n+            val = \"0\";\n+            return true;\n         }\n-        key.erase(1, 2);\n-        m_negated_args.insert(key);\n-        val = bool_val ? \"0\" : \"1\";\n-    } else {\n-        // In an invocation like \"bitcoind -nofoo -foo\" we want to unmark -foo\n-        // as negated when we see the second option.\n-        m_negated_args.erase(key);\n     }\n+    return false;\n+}\n+\n+ArgsManager::ArgsManager() :\n+    /* These options would cause cross-contamination if values for\n+     * mainnet were used while running on regtest/testnet (or vice-versa).\n+     * Setting them as section_only_args ensures that sharing a config file\n+     * between mainnet and regtest/testnet won't cause problems due to these\n+     * parameters by accident. */\n+    m_section_only_args{\n+      \"-addnode\", \"-connect\",\n+      \"-port\", \"-bind\",\n+      \"-rpcport\", \"-rpcbind\",\n+      \"-wallet\",\n+    }\n+{\n+    // nothing to do\n+}\n+\n+void ArgsManager::WarnForSectionOnlyArgs()\n+{\n+    // if there's no section selected, don't worry\n+    if (m_section.empty()) return;\n+\n+    for (const auto& arg : m_section_only_args) {\n+        // if it's okay to use the default section for this chain, don't worry\n+        if (ArgsManagerHelper::UseDefaultSection(*this, arg)) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180192825",
      "id" : 180192825,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 161,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180192825",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180194407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180194407"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You've removed this test that `GetChainName()` will throw if both `regtest` and `testnet` have been set. Is that intentional?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-09T18:51:51Z",
      "diff_hunk" : "@@ -463,14 +566,26 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     test_args.ParseParameters(0, (char**)argv_testnet);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    // check setting the ConfigSection to test (and thus making\n+    // [test] regtest=1 potentially relevent) doesn't break things\n+    test_args.SelectConfigSection(\"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n     test_args.ParseParameters(2, (char**)argv_testnet);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    test_args.SelectConfigSection(\"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest);\n+    test_args.ParseParameters(2, (char**)argv_testnet);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180194407",
      "id" : 180194407,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 390,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 110502250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180194407",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180345293"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180345293"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not sure; the reason I'm doing it is backwards compatibility. The original reason might have just been a side-effect of using a single variable and updating it every time you see a command line argument, but only if it's not already set when you see a config file argument. I'll add a comment that you can re-nit though. :)",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-10T09:04:23Z",
      "diff_hunk" : "@@ -455,6 +455,99 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n+\n+    /** Determine whether to use config settings in the default section,\n+     *  See also comments around ArgsManager::ArgsManager() below. */\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& arg)\n+    {\n+        return (am.m_section == CBaseChainParams::MAIN || am.m_section_only_args.count(arg) == 0);\n+    }\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& arg)\n+    {\n+        assert(arg.length() > 1 && arg[0] == '-');\n+        return \"-\" + am.m_section + \".\" + arg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n+    {\n+        auto it = map_args.find(arg);\n+        if (it != map_args.end()) {\n+            res.insert(res.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n+    {\n+        auto it = map_args.find(arg);\n+\n+        if (it == map_args.end() || it->second.empty()) {\n+            return std::make_pair(false, std::string());\n+        }\n+\n+        if (getLast) {\n+            return std::make_pair(true, it->second.back());\n+        } else {\n+            return std::make_pair(true, it->second.front());\n+        }\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    {\n+        LOCK(am.cs_args);\n+        std::pair<bool,std::string> found_result(false, std::string());\n+\n+        found_result = GetArgHelper(am.m_override_args, arg, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180345293",
      "id" : 180345293,
      "in_reply_to_id" : 180134595,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 58,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 110748574,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180345293",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180346496"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180346496"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, that style is a bit more consistent with other parts of the file.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-10T09:08:38Z",
      "diff_hunk" : "@@ -511,55 +658,89 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n             key.erase(0, 1);\n \n         // Transform -nofoo to -foo=0\n-        InterpretNegatedOption(key, val);\n-\n-        mapArgs[key] = val;\n-        mapMultiArgs[key].push_back(val);\n+        if (InterpretNegatedOption(key, val)) {\n+            m_override_args[key].clear();\n+        } else {\n+            m_override_args[key].push_back(val);\n+        }\n     }\n }\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n+    std::vector<std::string> result = {};\n+    if (IsArgNegated(strArg)) return result; // special case\n+\n     LOCK(cs_args);\n-    auto it = mapMultiArgs.find(strArg);\n-    if (it != mapMultiArgs.end()) return it->second;\n-    return {};\n+\n+    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n+\n+    if (!m_section.empty()) {\n+        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::SectionArg(*this, strArg));\n+    }\n+\n+    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n+        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n+    }\n+\n+    return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-    return mapArgs.count(strArg);\n+    if (IsArgNegated(strArg)) return true; // special case\n+    return ArgsManagerHelper::GetArg(*this, strArg).first;\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n     LOCK(cs_args);\n-    return m_negated_args.find(strArg) != m_negated_args.end();\n+\n+    const auto& ov = m_override_args.find(strArg);\n+    if (ov != m_override_args.end()) return ov->second.empty();\n+\n+    if (!m_section.empty()) {\n+        const auto& cfs = m_config_args.find(ArgsManagerHelper::SectionArg(*this, strArg));\n+        if (cfs != m_config_args.end()) return cfs->second.empty();\n+    }\n+\n+    const auto& cf = m_config_args.find(strArg);\n+    if (cf != m_config_args.end()) return cf->second.empty();\n+\n+    return false;\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    LOCK(cs_args);\n-    auto it = mapArgs.find(strArg);\n-    if (it != mapArgs.end()) return it->second;\n-    return strDefault;\n+    if (IsArgNegated(strArg)) return \"0\";\n+    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n+    if (found_res.first) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180346496",
      "id" : 180346496,
      "in_reply_to_id" : 180136983,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 271,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 110749981,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180346496",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180347949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180347949"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I was thinking #10267 would involve an additional call to `ReadConfigStream()` from within `ReadConfigFile()` (ie, you read the config file, find out what additional file(s) to include, then read those, and possibly repeat). I think it makes more sense for `ParseParams()` to only clear the member variable it populates, and `ReadConfigFile()` to clear the member variable it populates. If a later PR wants to change this that's fine, but at least for now it seems fine here to me.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-10T09:13:53Z",
      "diff_hunk" : "@@ -748,15 +928,21 @@ void ArgsManager::ReadConfigStream(std::istream& stream)\n         // Don't overwrite existing settings so command line settings override bitcoin.conf\n         std::string strKey = std::string(\"-\") + it->string_key;\n         std::string strValue = it->value[0];\n-        InterpretNegatedOption(strKey, strValue);\n-        if (mapArgs.count(strKey) == 0)\n-            mapArgs[strKey] = strValue;\n-        mapMultiArgs[strKey].push_back(strValue);\n+        if (InterpretNegatedOption(strKey, strValue)) {\n+            m_config_args[strKey].clear();\n+        } else {\n+            m_config_args[strKey].push_back(strValue);\n+        }\n     }\n }\n \n void ArgsManager::ReadConfigFile(const std::string& confPath)\n {\n+    {\n+        LOCK(cs_args);\n+        m_config_args.clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180347949",
      "id" : 180347949,
      "in_reply_to_id" : 180142484,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 339,
      "path" : "src/util.cpp",
      "position" : 352,
      "pull_request_review_id" : 110751636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180347949",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180353015"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180353015"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think so -- `ReadConfigFile()` only gets to know `-testnet` was set, you need to call `GetChainName()` to work out that means `chain==\"test\"`, and the place that's currently called is when passing the arguments to `SelectParams` or `SelectBaseParams`. Also, `SelectBaseParams` is already updating `globalChainBaseParams` which seems like \"global node config\" to me. :)\r\n\r\nChanging that might not be a bad idea (and I think it might benefit jtimon's #8994), but I think it could wait for a different PR?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-10T09:30:37Z",
      "diff_hunk" : "@@ -48,4 +48,5 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n void SelectBaseParams(const std::string& chain)\n {\n     globalChainBaseParams = CreateBaseChainParams(chain);\n+    gArgs.SelectConfigSection(chain);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180353015",
      "id" : 180353015,
      "in_reply_to_id" : 180188802,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 4,
      "path" : "src/chainparamsbase.cpp",
      "position" : null,
      "pull_request_review_id" : 110757525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180353015",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180410877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180410877"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No, I think that was a mistake while rebasing.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-10T13:00:38Z",
      "diff_hunk" : "@@ -463,14 +566,26 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     test_args.ParseParameters(0, (char**)argv_testnet);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    // check setting the ConfigSection to test (and thus making\n+    // [test] regtest=1 potentially relevent) doesn't break things\n+    test_args.SelectConfigSection(\"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n     test_args.ParseParameters(2, (char**)argv_testnet);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+    test_args.SelectConfigSection(\"test\");\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n \n-    test_args.ParseParameters(2, (char**)argv_regtest);\n+    test_args.ParseParameters(2, (char**)argv_testnet);\n     test_args.ReadConfigString(testnetconf);\n-    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180410877",
      "id" : 180410877,
      "in_reply_to_id" : 180194407,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 390,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 110823760,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180410877",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180737993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180737993"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fair point, but I'm going to choose to ignore it :)",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-11T12:37:49Z",
      "diff_hunk" : "@@ -464,30 +557,84 @@ static bool InterpretBool(const std::string& strValue)\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-void ArgsManager::InterpretNegatedOption(std::string& key, std::string& val)\n+static bool InterpretNegatedOption(std::string& key, std::string& val)\n {\n-    if (key.substr(0, 3) == \"-no\") {\n+    assert(key[0] == '-');\n+\n+    size_t option_index = key.find('.');\n+    if (option_index == std::string::npos) {\n+        option_index = 1;\n+    } else {\n+        ++option_index;\n+    }\n+    if (key.substr(option_index, 2) == \"no\") {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180737993",
      "id" : 180737993,
      "in_reply_to_id" : 180173826,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 116,
      "path" : "src/util.cpp",
      "position" : 139,
      "pull_request_review_id" : 111209399,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-11T13:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180737993",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed a bunch of @jnewbery's nits/complaints/suggestions. Rebased against master to pick up the automated test improvements.\r\n\r\nFor anyone who got part way through reviewing, piecemeal changes from then to now are on https://github.com/ajtowns/bitcoin/commits/netconf-sections-track with the same underlying tree:\r\n\r\n```\r\n$ for a in netconf-sections{,-track}; do git log -1 --pretty=\"%h -> %T\" $a; done\r\nc25321ff96 -> 4265c57b9695d653dc825116f39e773c5e0a1ea3\r\n1600fc69aa -> 4265c57b9695d653dc825116f39e773c5e0a1ea3\r\n```\r\n\r\nEDIT: oops, missed a trailing space",
      "created_at" : "2018-04-11T12:43:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-380438060",
      "id" : 380438060,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-04-11T13:30:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380438060",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r181200231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181200231"
         }
      },
      "author_association" : "MEMBER",
      "body" : "comment seems good, no nits from me :)",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-12T19:45:10Z",
      "diff_hunk" : "@@ -455,6 +455,99 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n+\n+    /** Determine whether to use config settings in the default section,\n+     *  See also comments around ArgsManager::ArgsManager() below. */\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& arg)\n+    {\n+        return (am.m_section == CBaseChainParams::MAIN || am.m_section_only_args.count(arg) == 0);\n+    }\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& arg)\n+    {\n+        assert(arg.length() > 1 && arg[0] == '-');\n+        return \"-\" + am.m_section + \".\" + arg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n+    {\n+        auto it = map_args.find(arg);\n+        if (it != map_args.end()) {\n+            res.insert(res.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n+    {\n+        auto it = map_args.find(arg);\n+\n+        if (it == map_args.end() || it->second.empty()) {\n+            return std::make_pair(false, std::string());\n+        }\n+\n+        if (getLast) {\n+            return std::make_pair(true, it->second.back());\n+        } else {\n+            return std::make_pair(true, it->second.front());\n+        }\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    {\n+        LOCK(am.cs_args);\n+        std::pair<bool,std::string> found_result(false, std::string());\n+\n+        found_result = GetArgHelper(am.m_override_args, arg, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r181200231",
      "id" : 181200231,
      "in_reply_to_id" : 180134595,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 58,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 111765680,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-12T19:45:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181200231",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r181215858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181215858"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fine. Can wait for a future PR.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-12T20:43:41Z",
      "diff_hunk" : "@@ -48,4 +48,5 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n void SelectBaseParams(const std::string& chain)\n {\n     globalChainBaseParams = CreateBaseChainParams(chain);\n+    gArgs.SelectConfigSection(chain);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r181215858",
      "id" : 181215858,
      "in_reply_to_id" : 180188802,
      "original_commit_id" : "88ec08ddeb03571ac722f9cfc4061a3cc55208db",
      "original_position" : 4,
      "path" : "src/chainparamsbase.cpp",
      "position" : null,
      "pull_request_review_id" : 111785946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-12T20:43:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/181215858",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK c25321ff96737bdba80d626d2425ef02c7a4c181. Thanks for addressing all of my nits!",
      "created_at" : "2018-04-12T21:08:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-380945011",
      "id" : 380945011,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-04-12T21:08:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380945011",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've tested this a bit and it appears to work as expected. I've tested that it's possible to override the port, and proxy configuration per network. I've also tested that putting `testnet=1` in the general section still works.\r\n\r\nutACK c25321ff96737bdba80d626d2425ef02c7a4c181\r\n",
      "created_at" : "2018-04-13T18:56:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-381230551",
      "id" : 381230551,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDM4MTIzMDU1MQ==",
      "updated_at" : "2018-04-16T17:17:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381230551",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182554976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554976"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "boost::optional\\<std::string> would be a more natural way to represent this.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-18T20:13:57Z",
      "diff_hunk" : "@@ -455,6 +455,67 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n+\n+    /** Find arguments in a map and add them to a vector */\n+    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n+    {\n+        auto it = map_args.find(arg);\n+        if (it != map_args.end()) {\n+            res.insert(res.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n+    {\n+        auto it = map_args.find(arg);\n+\n+        if (it == map_args.end() || it->second.empty()) {\n+            return std::make_pair(false, std::string());\n+        }\n+\n+        if (getLast) {\n+            return std::make_pair(true, it->second.back());\n+        } else {\n+            return std::make_pair(true, it->second.front());\n+        }\n+    }\n+\n+    /* Get the string value of an argument, returning a pair of a boolean\n+     * indicating the argument was found, and the value for the argument\n+     * if it was found (or the empty string if not found).\n+     */\n+    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    {\n+        LOCK(am.cs_args);\n+        std::pair<bool,std::string> found_result(false, std::string());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182554976",
      "id" : 182554976,
      "original_commit_id" : "3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
      "original_position" : 43,
      "path" : "src/util.cpp",
      "position" : 57,
      "pull_request_review_id" : 113374481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-18T20:54:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554976",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182556323"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182556323"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Shouldn't a negated command line argument clear m_config_args too? As an example, if you had `arg=a` `arg=b` in config and `-arg=c -noarg -arg=d` on the command line, it would seem weird for the result to be `[a b d]` instead of `[d]`.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-18T20:18:35Z",
      "diff_hunk" : "@@ -570,16 +579,19 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n-        // Transform -nofoo to -foo=0\n-        InterpretNegatedOption(key, val);\n-\n-        m_override_args[key].push_back(val);\n+        // Check for -nofoo\n+        if (InterpretNegatedOption(key, val)) {\n+            m_override_args[key].clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182556323",
      "id" : 182556323,
      "original_commit_id" : "4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
      "original_position" : 66,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 113374481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-19T16:01:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182556323",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182559119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182559119"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`emplace_back(std::move(val))` would be a little more efficient",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-18T20:28:33Z",
      "diff_hunk" : "@@ -570,16 +579,19 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n-        // Transform -nofoo to -foo=0\n-        InterpretNegatedOption(key, val);\n-\n-        m_override_args[key].push_back(val);\n+        // Check for -nofoo\n+        if (InterpretNegatedOption(key, val)) {\n+            m_override_args[key].clear();\n+        } else {\n+            m_override_args[key].push_back(val);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182559119",
      "id" : 182559119,
      "original_commit_id" : "4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
      "original_position" : 68,
      "path" : "src/util.cpp",
      "position" : 232,
      "pull_request_review_id" : 113374481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-18T20:54:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182559119",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182561130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182561130"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would be slightly more efficiecnt to take a normal (non-reference) string argument, and std::move() it below to avoid a copy.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-18T20:36:01Z",
      "diff_hunk" : "@@ -553,6 +575,11 @@ static bool InterpretNegatedOption(std::string& key, std::string& val)\n     return false;\n }\n \n+void ArgsManager::SelectConfigNetwork(const std::string& network)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182561130",
      "id" : 182561130,
      "original_commit_id" : "95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f",
      "original_position" : 52,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 113374481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-18T20:54:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182561130",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182565963"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182565963"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems like code above this line is duplicating code in `ArgsManagerHelper::GetArg` in slightly inconsistent ways (passing getLast `[true, true]` to the two `GetArgHelper` calls instead of `[true, false]` and failing to acquire `cs_args`). Is there a reason for these inconsistencies and for duplicating code here instead of calling getArgs?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-18T20:53:20Z",
      "diff_hunk" : "@@ -537,6 +537,22 @@ class ArgsManagerHelper {\n \n         return found_result;\n     }\n+\n+    /* Special test for -testnet and -regtest args, because we\n+     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n+     */\n+    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg)\n+    {\n+        std::pair<bool,std::string> found_result(false,std::string());\n+        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n+        if (!found_result.first) {\n+            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n+            if (!found_result.first) {\n+                return false; // not set\n+            }\n+        }\n+        return InterpretBool(found_result.second); // is set, so evaluate",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182565963",
      "id" : 182565963,
      "original_commit_id" : "005ad266491f43d7a9bfd959396037416cb32a55",
      "original_position" : 18,
      "path" : "src/util.cpp",
      "position" : 100,
      "pull_request_review_id" : 113374481,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-18T20:54:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182565963",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182573333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182573333"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Doh, I thought about using std::optional, but it's post-C++11; didn't think to check for the boost variant, and it's even already in use in util.h.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-18T21:21:18Z",
      "diff_hunk" : "@@ -455,6 +455,67 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n+\n+    /** Find arguments in a map and add them to a vector */\n+    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n+    {\n+        auto it = map_args.find(arg);\n+        if (it != map_args.end()) {\n+            res.insert(res.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n+    {\n+        auto it = map_args.find(arg);\n+\n+        if (it == map_args.end() || it->second.empty()) {\n+            return std::make_pair(false, std::string());\n+        }\n+\n+        if (getLast) {\n+            return std::make_pair(true, it->second.back());\n+        } else {\n+            return std::make_pair(true, it->second.front());\n+        }\n+    }\n+\n+    /* Get the string value of an argument, returning a pair of a boolean\n+     * indicating the argument was found, and the value for the argument\n+     * if it was found (or the empty string if not found).\n+     */\n+    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    {\n+        LOCK(am.cs_args);\n+        std::pair<bool,std::string> found_result(false, std::string());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182573333",
      "id" : 182573333,
      "in_reply_to_id" : 182554976,
      "original_commit_id" : "3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
      "original_position" : 43,
      "path" : "src/util.cpp",
      "position" : 57,
      "pull_request_review_id" : 113396962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-18T21:21:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182573333",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182574829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182574829"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Using `ArgsManagerHelper::GetArg` here would mean that calling `GetChainName()` a second (or third or..) time after `SelectParams(GetChainName())` could return a different result than the name of the chain actually being used if people do ridiculous things with their bitcoin.conf.\r\n\r\nThis should get cleaned up with some of the other config reworking that's going on though.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-18T21:27:31Z",
      "diff_hunk" : "@@ -537,6 +537,22 @@ class ArgsManagerHelper {\n \n         return found_result;\n     }\n+\n+    /* Special test for -testnet and -regtest args, because we\n+     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n+     */\n+    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg)\n+    {\n+        std::pair<bool,std::string> found_result(false,std::string());\n+        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n+        if (!found_result.first) {\n+            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n+            if (!found_result.first) {\n+                return false; // not set\n+            }\n+        }\n+        return InterpretBool(found_result.second); // is set, so evaluate",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182574829",
      "id" : 182574829,
      "in_reply_to_id" : 182565963,
      "original_commit_id" : "005ad266491f43d7a9bfd959396037416cb32a55",
      "original_position" : 18,
      "path" : "src/util.cpp",
      "position" : 100,
      "pull_request_review_id" : 113398807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-18T21:27:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182574829",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182576041"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182576041"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ParseParameters is always called prior to ReadConfigFile. Might be worth noting somewhere that you have to do things that way (though it isn't really a choice: if you specify the config file via `-conf`, you don't know what file to pass to ReadConfigFile until you've called ParseParameters).",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-18T21:32:24Z",
      "diff_hunk" : "@@ -570,16 +579,19 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n-        // Transform -nofoo to -foo=0\n-        InterpretNegatedOption(key, val);\n-\n-        m_override_args[key].push_back(val);\n+        // Check for -nofoo\n+        if (InterpretNegatedOption(key, val)) {\n+            m_override_args[key].clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182576041",
      "id" : 182576041,
      "in_reply_to_id" : 182556323,
      "original_commit_id" : "4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
      "original_position" : 66,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 113400283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-18T21:32:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182576041",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182577300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577300"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think `GetArgHelper(m_config_args, net_arg, true)` probably should have been `, false)`, well spotted.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-18T21:37:30Z",
      "diff_hunk" : "@@ -537,6 +537,22 @@ class ArgsManagerHelper {\n \n         return found_result;\n     }\n+\n+    /* Special test for -testnet and -regtest args, because we\n+     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n+     */\n+    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg)\n+    {\n+        std::pair<bool,std::string> found_result(false,std::string());\n+        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n+        if (!found_result.first) {\n+            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n+            if (!found_result.first) {\n+                return false; // not set\n+            }\n+        }\n+        return InterpretBool(found_result.second); // is set, so evaluate",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182577300",
      "id" : 182577300,
      "in_reply_to_id" : 182565963,
      "original_commit_id" : "005ad266491f43d7a9bfd959396037416cb32a55",
      "original_position" : 18,
      "path" : "src/util.cpp",
      "position" : 100,
      "pull_request_review_id" : 113401708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-18T21:37:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577300",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182795583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182795583"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182556323\r\n\r\n> ParseParameters is always called prior to ReadConfigFile\r\n\r\nSo this means the change I suggested wouldn't actually fix the bug. But you agree this is  introducing a bug that wasn't in @eklitzke's initial implementation from #12713?",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-19T15:50:04Z",
      "diff_hunk" : "@@ -570,16 +579,19 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n-        // Transform -nofoo to -foo=0\n-        InterpretNegatedOption(key, val);\n-\n-        m_override_args[key].push_back(val);\n+        // Check for -nofoo\n+        if (InterpretNegatedOption(key, val)) {\n+            m_override_args[key].clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182795583",
      "id" : 182795583,
      "in_reply_to_id" : 182556323,
      "original_commit_id" : "4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
      "original_position" : 66,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 113667354,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-19T15:50:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182795583",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182799105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182799105"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> But you agree this is introducing a bug\r\n\r\nNever mind, this bug is actually present in #12713 too because of the initialization order. I guess I thought negated option tracking would provide a clean way to override config file list options instead of just appending to them, but I guess this isn't the way it works.",
      "commit_id" : "c25321ff96737bdba80d626d2425ef02c7a4c181",
      "created_at" : "2018-04-19T15:59:54Z",
      "diff_hunk" : "@@ -570,16 +579,19 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n-        // Transform -nofoo to -foo=0\n-        InterpretNegatedOption(key, val);\n-\n-        m_override_args[key].push_back(val);\n+        // Check for -nofoo\n+        if (InterpretNegatedOption(key, val)) {\n+            m_override_args[key].clear();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182799105",
      "id" : 182799105,
      "in_reply_to_id" : 182556323,
      "original_commit_id" : "4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
      "original_position" : 66,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 113671689,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-04-19T15:59:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182799105",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I saw that too late but this PR is a major pain in the ass. Please be more careful with breaking changes, especially there was no good reason to break anything.\r\n\r\nNot only it broke existing configuration file, but on top of it it call the testnet section `[test]` instead of `[testnet]` .\r\n\r\nThis mean I can't easily migrate such [templated configuration](https://github.com/btcpayserver/btcpayserver-docker/blob/master/docker-compose-generator/docker-fragments/bitcoin.yml)  without doing major refactoring, or hack in the entrypoint of my docker compose to replace `[test]` by `[testnet]`.",
      "created_at" : "2018-10-11T05:14:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-428823298",
      "id" : 428823298,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyODgyMzI5OA==",
      "updated_at" : "2018-10-11T05:15:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/428823298",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Is there even a documentation of the section names? What we have used so far as pseudo-documentation is the config generator from @jlopp https://jlopp.github.io/bitcoin-core-config-generator/\r\nHowever, it neither contains a `[general]` section like mentioned in https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-381230551 and places the `testnet=1` option currently under the `[debug]` section. This doesn't work anymore and bitcoind seems to completely ignore the `testnet=1` option if it's under the `[debug]` section.\r\n\r\nWe second @NicolasDorier, 0.17 breaks [our templated approach](https://raw.githubusercontent.com/zhiverbox/armbian-userpatches/master/overlay/opt/zhiverbox/scripts/etc/bitcoin/bitcoin.conf.src) and [install assistant](https://raw.githubusercontent.com/zhiverbox/armbian-userpatches/master/overlay/opt/zhiverbox/scripts/install/50_install-bitcoind.sh) as well, which we use on the [zHIVErbox](https://github.com/zhiverbox/armbian-userpatches/blob/master/README.md) - a low cost, TAILS-inspired security fortess. Looks like a refactoring is needed to support 0.17, which might be OK if it's backwards compatible and the config templates still work on <0.17? But if we need to maintain separate templates for different bitcoin versions it get's ugly.",
      "created_at" : "2018-10-23T17:04:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432333766",
      "id" : 432333766,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjMzMzc2Ng==",
      "updated_at" : "2018-10-23T17:13:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432333766",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/37557036?v=4",
         "events_url" : "https://api.github.com/users/zciendor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/zciendor/followers",
         "following_url" : "https://api.github.com/users/zciendor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/zciendor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/zciendor",
         "id" : 37557036,
         "login" : "zciendor",
         "node_id" : "MDQ6VXNlcjM3NTU3MDM2",
         "organizations_url" : "https://api.github.com/users/zciendor/orgs",
         "received_events_url" : "https://api.github.com/users/zciendor/received_events",
         "repos_url" : "https://api.github.com/users/zciendor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/zciendor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/zciendor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/zciendor"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Unless I'm mistaken, I think we can restore complete backwards compatibility by just not having \"network-only\" options, and only warning when one of these options is used outside of a network section, instead of warning and dropping them. I suggested this previously here, https://github.com/bitcoin/bitcoin/issues/14523#issuecomment-431605226.\r\n\r\nWe could also go further and not even warn about these options if `testnet=1` is specified in the config file (as opposed to on the command line).\r\n\r\n@zciendor, I'm not sure what your comment about a `[debug]` section is referring to. As far as I know that's not a recognized section, so I'd expect any options you enter there to be ignored.",
      "created_at" : "2018-10-23T17:35:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432344821",
      "id" : 432344821,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjM0NDgyMQ==",
      "updated_at" : "2018-10-23T17:35:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432344821",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky I agree, I think we should revert the \"ignore certain options outside of network-specific sections\" behavior; it seems to gratuitously have broken compatibility.\r\n\r\n@zciendor There is documentation in the release notes: https://github.com/bitcoin/bitcoin/blob/v0.17.0/doc/release-notes.md#configuration-sections-for-testnet-and-regtest",
      "created_at" : "2018-10-23T17:54:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432352265",
      "id" : 432352265,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjM1MjI2NQ==",
      "updated_at" : "2018-10-23T18:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432352265",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I agree that removing the 'network-only' options is a sensible thing to do in order to restore complete backwards compatibility. Network-only options was a good idea to prevent users from accidentally polluting their mainnet config with testnet or regtest config, but the amount of user pain inflicted by not having backwards compatibility means we should revert this change quickly.\r\n\r\nTo be honest, it didn't even occur to me that this PR would break backwards compatibility. I certainly don't think it was an intentional break.\r\n\r\nAlternatively, we could only enforce the 'network-only' rule if the config file contains a network section. That means that old config files would continue to be valid, but new config files with network sections would be protected from certain config errors. That can be added later (after the reversion) if people think that 'network-only' config is a feature worth having.",
      "created_at" : "2018-10-23T18:16:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432360811",
      "id" : 432360811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjM2MDgxMQ==",
      "updated_at" : "2018-10-23T18:16:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432360811",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I was talking about the sections the [config file generator](https://jlopp.github.io/bitcoin-core-config-generator/) adds. However, I just noticed that they are commented out, so this should have no effect...\r\n\r\n```\r\n# Generated by https://jlopp.github.io/bitcoin-core-config-generator/\r\n\r\n# This config should be placed in following path:\r\n# ~/.bitcoin/bitcoin.conf\r\n\r\n# [core]\r\n# Keep the transaction memory pool below <n> megabytes.\r\nmaxmempool=1500\r\n\r\n# [network]\r\n# Use UPnP to map the listening port.\r\nupnp=1\r\n\r\n# [zeromq]\r\n# Enable publishing of block hashes to <address>.\r\nzmqpubhashblock=127.0.0.1\r\n\r\n# [debug]\r\n# Log IP Addresses in debug output.\r\nlogips=1\r\n# Run this node on the Bitcoin Test Network.\r\ntestnet=1\r\n\r\n# [relay]\r\n# Force relay of transactions from whitelisted peers even if they violate local relay policy.\r\nwhitelistforcerelay=0\r\n\r\n# [mining]\r\n# Set lowest fee rate (in BTC/kB) for transactions to be included in block creation.\r\nblockmintxfee=0.0001\r\n\r\n# [rpc]\r\n# Accept public REST requests.\r\nrest=1\r\n\r\n# [wallet]\r\n# Do not load the wallet and disable wallet RPC calls.\r\ndisablewallet=1\r\n```",
      "created_at" : "2018-10-23T19:01:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432377314",
      "id" : 432377314,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjM3NzMxNA==",
      "updated_at" : "2018-10-23T19:01:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432377314",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/37557036?v=4",
         "events_url" : "https://api.github.com/users/zciendor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/zciendor/followers",
         "following_url" : "https://api.github.com/users/zciendor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/zciendor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/zciendor",
         "id" : 37557036,
         "login" : "zciendor",
         "node_id" : "MDQ6VXNlcjM3NTU3MDM2",
         "organizations_url" : "https://api.github.com/users/zciendor/orgs",
         "received_events_url" : "https://api.github.com/users/zciendor/received_events",
         "repos_url" : "https://api.github.com/users/zciendor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/zciendor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/zciendor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/zciendor"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Is there even a documentation of the section names?\r\n\r\nYes: https://bitcoincore.org/en/releases/0.17.0/#configuration-sections-for-testnet-and-regtest",
      "created_at" : "2018-10-23T19:10:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432380531",
      "id" : 432380531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjM4MDUzMQ==",
      "updated_at" : "2018-10-23T19:10:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432380531",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I just realized we seem to have a completely different problem with 0.17. No matter where I specify `testnet=1` (either in the conf file or on the command line) bitcoind tries to write to the default mainnet folder (~/.bitcoin/):\r\n\r\n```\r\n$ /usr/local/bin/bitcoind -conf=/etc/bitcoin/test_bitcoin.conf -testnet\r\nBitcoin Core version v0.17.0 (release build)\r\nInitParameterInteraction: parameter interaction: -proxy set -> setting -discover=0\r\nInitParameterInteraction: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\r\n \r\n************************\r\nEXCEPTION: N5boost10filesystem16filesystem_errorE       \r\nboost::filesystem::create_directory: Permission denied: \"/mnt/data/bitcoind/.bitcoin/blocks\"       \r\nbitcoin in AppInit()       \r\n\r\n\r\n\r\n************************\r\nEXCEPTION: N5boost10filesystem16filesystem_errorE       \r\nboost::filesystem::create_directory: Permission denied: \"/mnt/data/bitcoind/.bitcoin/blocks\"       \r\nbitcoin in AppInit()       \r\n\r\nShutdown: In progress...\r\nShutdown: done\r\n\r\n```\r\n\r\nThe issue is that 0.16 and earlier tried to read/write the /mnt/data/bitcoind/.bitcoin/**testnet3** folder when the `-testnet` (or `testnet=1`) parameter was specified. This seems to have changed and now you have to specify the datadir explicitely along with `testnet=1`?",
      "created_at" : "2018-10-23T19:22:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432384279",
      "id" : 432384279,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjM4NDI3OQ==",
      "updated_at" : "2018-10-23T19:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432384279",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/37557036?v=4",
         "events_url" : "https://api.github.com/users/zciendor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/zciendor/followers",
         "following_url" : "https://api.github.com/users/zciendor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/zciendor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/zciendor",
         "id" : 37557036,
         "login" : "zciendor",
         "node_id" : "MDQ6VXNlcjM3NTU3MDM2",
         "organizations_url" : "https://api.github.com/users/zciendor/orgs",
         "received_events_url" : "https://api.github.com/users/zciendor/received_events",
         "repos_url" : "https://api.github.com/users/zciendor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/zciendor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/zciendor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/zciendor"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@zciendor - that looks like a separate problem. Do you mind opening a new issue to track it?\r\n\r\nedit: please @ me once you've opened that issue.",
      "created_at" : "2018-10-23T19:25:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432385416",
      "id" : 432385416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjM4NTQxNg==",
      "updated_at" : "2018-10-23T19:25:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432385416",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Sure! https://github.com/bitcoin/bitcoin/issues/14557",
      "created_at" : "2018-10-23T19:25:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432385544",
      "id" : 432385544,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjM4NTU0NA==",
      "updated_at" : "2018-10-25T15:08:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432385544",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/37557036?v=4",
         "events_url" : "https://api.github.com/users/zciendor/events{/privacy}",
         "followers_url" : "https://api.github.com/users/zciendor/followers",
         "following_url" : "https://api.github.com/users/zciendor/following{/other_user}",
         "gists_url" : "https://api.github.com/users/zciendor/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/zciendor",
         "id" : 37557036,
         "login" : "zciendor",
         "node_id" : "MDQ6VXNlcjM3NTU3MDM2",
         "organizations_url" : "https://api.github.com/users/zciendor/orgs",
         "received_events_url" : "https://api.github.com/users/zciendor/received_events",
         "repos_url" : "https://api.github.com/users/zciendor/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/zciendor/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/zciendor/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/zciendor"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@zciendor unsure if it is related to your problem, but a non obvious consequence of this PR is that on testnet or regtest:\r\n\r\n* You can't use Bitcoin-CLI 0.17 on Bitcoind < 0.17\r\n* You can't use Bitcoin-CLI < 0.17 on Bitcoind 0.17\r\n\r\nBecause they can't read each other config files. I banged my head against the wall for some hour because of this.",
      "created_at" : "2018-10-24T05:50:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432521529",
      "id" : 432521529,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjUyMTUyOQ==",
      "updated_at" : "2018-10-24T05:50:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432521529",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@NicolasDorier you can use:\r\n\r\n```\r\n    connect=0\r\n    [test]\r\n    connect=0\r\n    [regtest]\r\n    connect=0\r\n```\r\n\r\nto have the `connect=0` option (or any of the other mainnet-only options) seen on mainnet/testnet/regtest for pre and post 0.17.",
      "created_at" : "2018-10-24T11:54:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432625334",
      "id" : 432625334,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjYyNTMzNA==",
      "updated_at" : "2018-10-24T11:54:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432625334",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't think it works, my memory tells that I had issue because 0.16.3 can't parse sections, and thus consider the configuration file invalid.",
      "created_at" : "2018-10-28T05:07:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-433676942",
      "id" : 433676942,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMzY3Njk0Mg==",
      "updated_at" : "2018-10-28T05:07:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/433676942",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@NicolasDorier 0.16.3 works fine here with the above -- the boost config parser has always parsed sections, it's just ignored what was in them (because it would treat it as an option named \"regtest.connect\" which was then never actually used).",
      "created_at" : "2018-10-29T20:34:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-434069241",
      "id" : 434069241,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNDA2OTI0MQ==",
      "updated_at" : "2018-10-29T20:34:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434069241",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I confirm you are right\r\nMy test was only\r\n\r\n```\r\n[test]\r\nconnect=0\r\n```\r\n\r\nSo `connect=0` was ignored.",
      "created_at" : "2018-10-30T06:26:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-434186329",
      "id" : 434186329,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNDE4NjMyOQ==",
      "updated_at" : "2018-10-30T06:26:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/434186329",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I get an error about my bitcoin.conf file when I set the port setting in the regtest section. \r\n`Error: Config setting for -port only applied on regtest network when in [regtest] section.` \r\n This is my bitcoin.conf file\r\n\r\n`\r\nregtest=1\r\nserver=1\r\n\r\n[regtest]\r\nport=18333\r\n`\r\n\r\nthe error occurs even if you do not use the [regtest] section.",
      "created_at" : "2021-03-16T07:18:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-800018317",
      "id" : 800018317,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMDAxODMxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-16T07:37:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800018317",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/40124613?v=4",
         "events_url" : "https://api.github.com/users/jkensik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkensik/followers",
         "following_url" : "https://api.github.com/users/jkensik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkensik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkensik",
         "id" : 40124613,
         "login" : "jkensik",
         "node_id" : "MDQ6VXNlcjQwMTI0NjEz",
         "organizations_url" : "https://api.github.com/users/jkensik/orgs",
         "received_events_url" : "https://api.github.com/users/jkensik/received_events",
         "repos_url" : "https://api.github.com/users/jkensik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkensik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkensik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkensik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jkensik you are responding to a closed issue from 2018, if you have a problem please report a new issue",
      "created_at" : "2021-03-16T18:40:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-800513233",
      "id" : 800513233,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgwMDUxMzIzMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-16T18:40:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800513233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
