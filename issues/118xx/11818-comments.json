[
   {
      "author_association" : "MEMBER",
      "body" : "Rebased to remove merged commits.",
      "created_at" : "2018-03-29T15:50:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11818#issuecomment-377280795",
      "id" : 377280795,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11818",
      "updated_at" : "2018-03-29T15:50:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377280795",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased. This should be a very easy review, since it's just removing dead code.",
      "created_at" : "2018-04-02T17:47:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11818#issuecomment-377991391",
      "id" : 377991391,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11818",
      "updated_at" : "2018-04-02T17:47:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377991391",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK!  Thanks for sticking with this.",
      "created_at" : "2018-04-02T17:53:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11818#issuecomment-377993101",
      "id" : 377993101,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11818",
      "updated_at" : "2018-04-02T17:53:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/377993101",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11818#discussion_r178603934"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11818"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178603934"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Is this line supposed to go away?",
      "commit_id" : "9c92c8c82716d0c35b638142a1125d07b3f240a8",
      "created_at" : "2018-04-02T17:55:33Z",
      "diff_hunk" : "@@ -89,54 +89,6 @@ thread.)\n - Can be used to write tests where specific P2P protocol behavior is tested.\n Examples tests are `p2p_unrequested_blocks.py`, `p2p_compactblocks.py`.\n \n-#### Comptool\n-\n-- Comptool is a Testing framework for writing tests that compare the block/tx acceptance\n-behavior of a bitcoind against 1 or more other bitcoind instances. It should not be used\n-to write static tests with known outcomes, since that type of test is easier to write and\n-maintain using the standard BitcoinTestFramework.\n-\n-- Set the `num_nodes` variable (defined in `ComparisonTestFramework`) to start up\n-1 or more nodes.  If using 1 node, then `--testbinary` can be used as a command line\n-option to change the bitcoind binary used by the test.  If using 2 or more nodes,\n-then `--refbinary` can be optionally used to change the bitcoind that will be used\n-on nodes 2 and up.\n-\n-- Implement a (generator) function called `get_tests()` which yields `TestInstance`s.\n-Each `TestInstance` consists of:\n-  - A list of `[object, outcome, hash]` entries\n-    * `object` is a `CBlock`, `CTransaction`, or\n-    `CBlockHeader`.  `CBlock`'s and `CTransaction`'s are tested for\n-    acceptance.  `CBlockHeader`s can be used so that the test runner can deliver\n-    complete headers-chains when requested from the bitcoind, to allow writing\n-    tests where blocks can be delivered out of order but still processed by\n-    headers-first bitcoind's.\n-    * `outcome` is `True`, `False`, or `None`.  If `True`\n-    or `False`, the tip is compared with the expected tip -- either the\n-    block passed in, or the hash specified as the optional 3rd entry.  If\n-    `None` is specified, then the test will compare all the bitcoind's\n-    being tested to see if they all agree on what the best tip is.\n-    * `hash` is the block hash of the tip to compare against. Optional to\n-    specify; if left out then the hash of the block passed in will be used as\n-    the expected tip.  This allows for specifying an expected tip while testing\n-    the handling of either invalid blocks or blocks delivered out of order,\n-    which complete a longer chain.\n-  - `sync_every_block`: `True/False`.  If `False`, then all blocks\n-    are inv'ed together, and the test runner waits until the node receives the\n-    last one, and tests only the last block for tip acceptance using the\n-    outcome and specified tip.  If `True`, then each block is tested in\n-    sequence and synced (this is slower when processing many blocks).\n-  - `sync_every_transaction`: `True/False`.  Analogous to\n-    `sync_every_block`, except if the outcome on the last tx is \"None\",\n-    then the contents of the entire mempool are compared across all bitcoind\n-    connections.  If `True` or `False`, then only the last tx's\n-    acceptance is tested against the given outcome.\n-\n-- For examples of tests written in this framework, see\n-  `p2p_invalid_block.py` and `feature_block.py`.\n-\n-### test-framework modules",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11818#discussion_r178603934",
      "id" : 178603934,
      "original_commit_id" : "2382bca42b4be5339d3fb4fb5f653689bf254777",
      "original_position" : 50,
      "path" : "test/functional/README.md",
      "position" : null,
      "pull_request_review_id" : 108686300,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11818",
      "updated_at" : "2018-04-02T18:04:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178603934",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11818#discussion_r178606429"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11818"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178606429"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good spot! Added that back, and removed the documentation for `test_framework/blockstore.py`",
      "commit_id" : "9c92c8c82716d0c35b638142a1125d07b3f240a8",
      "created_at" : "2018-04-02T18:04:36Z",
      "diff_hunk" : "@@ -89,54 +89,6 @@ thread.)\n - Can be used to write tests where specific P2P protocol behavior is tested.\n Examples tests are `p2p_unrequested_blocks.py`, `p2p_compactblocks.py`.\n \n-#### Comptool\n-\n-- Comptool is a Testing framework for writing tests that compare the block/tx acceptance\n-behavior of a bitcoind against 1 or more other bitcoind instances. It should not be used\n-to write static tests with known outcomes, since that type of test is easier to write and\n-maintain using the standard BitcoinTestFramework.\n-\n-- Set the `num_nodes` variable (defined in `ComparisonTestFramework`) to start up\n-1 or more nodes.  If using 1 node, then `--testbinary` can be used as a command line\n-option to change the bitcoind binary used by the test.  If using 2 or more nodes,\n-then `--refbinary` can be optionally used to change the bitcoind that will be used\n-on nodes 2 and up.\n-\n-- Implement a (generator) function called `get_tests()` which yields `TestInstance`s.\n-Each `TestInstance` consists of:\n-  - A list of `[object, outcome, hash]` entries\n-    * `object` is a `CBlock`, `CTransaction`, or\n-    `CBlockHeader`.  `CBlock`'s and `CTransaction`'s are tested for\n-    acceptance.  `CBlockHeader`s can be used so that the test runner can deliver\n-    complete headers-chains when requested from the bitcoind, to allow writing\n-    tests where blocks can be delivered out of order but still processed by\n-    headers-first bitcoind's.\n-    * `outcome` is `True`, `False`, or `None`.  If `True`\n-    or `False`, the tip is compared with the expected tip -- either the\n-    block passed in, or the hash specified as the optional 3rd entry.  If\n-    `None` is specified, then the test will compare all the bitcoind's\n-    being tested to see if they all agree on what the best tip is.\n-    * `hash` is the block hash of the tip to compare against. Optional to\n-    specify; if left out then the hash of the block passed in will be used as\n-    the expected tip.  This allows for specifying an expected tip while testing\n-    the handling of either invalid blocks or blocks delivered out of order,\n-    which complete a longer chain.\n-  - `sync_every_block`: `True/False`.  If `False`, then all blocks\n-    are inv'ed together, and the test runner waits until the node receives the\n-    last one, and tests only the last block for tip acceptance using the\n-    outcome and specified tip.  If `True`, then each block is tested in\n-    sequence and synced (this is slower when processing many blocks).\n-  - `sync_every_transaction`: `True/False`.  Analogous to\n-    `sync_every_block`, except if the outcome on the last tx is \"None\",\n-    then the contents of the entire mempool are compared across all bitcoind\n-    connections.  If `True` or `False`, then only the last tx's\n-    acceptance is tested against the given outcome.\n-\n-- For examples of tests written in this framework, see\n-  `p2p_invalid_block.py` and `feature_block.py`.\n-\n-### test-framework modules",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11818#discussion_r178606429",
      "id" : 178606429,
      "in_reply_to_id" : 178603934,
      "original_commit_id" : "2382bca42b4be5339d3fb4fb5f653689bf254777",
      "original_position" : 50,
      "path" : "test/functional/README.md",
      "position" : null,
      "pull_request_review_id" : 108689192,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11818",
      "updated_at" : "2018-04-02T18:04:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178606429",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
