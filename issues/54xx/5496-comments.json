[
   {
      "body" : "Okay I was about to wag my finger at you about making it IsStandard making the hardfork possible then I caught that you said _passing_.    Your text is reasonably clear, I'm leaving this comment just in case someone else makes the same reading error.\r\n\r\nI'm unsure how useful this is. There is some risk that people will mistake IsStandardness enforcement for adequate security.  (\"I tried to cheat and couldn't!\").  OTOH, it sounds like a really interesting way to roll out softforking changes that paces the risk out somewhat better.",
      "created_at" : "2014-12-17T06:57:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67284164",
      "id" : 67284164,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-17T07:00:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67284164",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "> Okay I was about to wag my finger at you about making it IsStandard making the hardfork possible\r\n\r\nTo be clear, what exactly were you thinking I'd done?\r\n\r\n> I'm unsure how useful this is. There is some risk that people will mistake IsStandardness enforcement for adequate security.\r\n\r\nYeah, OTOH, the many of the applications for CLTV like micropayment channels already have some of that risk in that they're vulnerable to tx mutability. Not as seriously, but it's analogous.\r\n\r\nAnyway, people who make that kind of mistake are probably making other mistakes that'll have them lose money anyway...",
      "created_at" : "2014-12-17T07:09:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67284965",
      "id" : 67284965,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-17T07:09:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67284965",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd My initial read of the description had me thinking you made CLTV IsStandard with no constraint on validity (\"No code to start the process of a soft fork\"), creating a risk for miners who might included invalid ones.",
      "created_at" : "2014-12-17T07:11:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67285066",
      "id" : 67285066,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-17T07:11:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67285066",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@gmaxwell Ah! Yeah, the NOPx discouragement code still applies, and in fact has a special case to make sure that if CLTV isn't enabled, NOP2 usage is discouraged: https://github.com/bitcoin/bitcoin/pull/5496/files#diff-be2905e2f5218ecdbe4e55637dac75f3R339\r\n\r\n(DISCOURAGE_UPGRADABLE_NOPS is unittested too, so without that the unittests would fail)",
      "created_at" : "2014-12-17T07:13:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67285250",
      "id" : 67285250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-17T07:14:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67285250",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd I have to agree with @gmaxwell, something about your PR wording immediately made me jump to the wrong conclusion too.",
      "created_at" : "2014-12-17T08:06:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67289008",
      "id" : 67289008,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-17T08:06:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67289008",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "Any suggestions on wording this better?",
      "created_at" : "2014-12-17T10:36:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-67304585",
      "id" : 67304585,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-17T10:36:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67304585",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21973702"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21973702"
         }
      },
      "body" : "I don't understand why this check returns false and why it's not done before (nLockTime > (int64_t)txTo.nLockTime). The comment says that if IsFinal() = true, then the CHECKLOCKTIMEVERIFY is bypassed (accepted).",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2014-12-17T14:21:12Z",
      "diff_hunk" : "@@ -1078,6 +1120,43 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     return true;\n }\n \n+bool SignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo.nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //\n+    // Testing if this vin is not final is sufficient to\n+    // prevent this condition. Alternatively we could test all\n+    // inputs, but testing just this input minimizes the data\n+    // required to prove correct CHECKLOCKTIMEVERIFY execution.\n+    if (txTo.vin[nIn].IsFinal())\n+        return false;\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21973702",
      "id" : 21973702,
      "original_commit_id" : "70fa6b661518f038143aae4b9dce444b7c648d95",
      "original_position" : 90,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-09T08:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21973702",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1752347?v=3",
         "events_url" : "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SergioDemianLerner/followers",
         "following_url" : "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SergioDemianLerner",
         "id" : 1752347,
         "login" : "SergioDemianLerner",
         "organizations_url" : "https://api.github.com/users/SergioDemianLerner/orgs",
         "received_events_url" : "https://api.github.com/users/SergioDemianLerner/received_events",
         "repos_url" : "https://api.github.com/users/SergioDemianLerner/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SergioDemianLerner/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SergioDemianLerner"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21973847"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21973847"
         }
      },
      "body" : "I will read the spec again.",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2014-12-17T14:23:20Z",
      "diff_hunk" : "@@ -1078,6 +1120,43 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     return true;\n }\n \n+bool SignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo.nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //\n+    // Testing if this vin is not final is sufficient to\n+    // prevent this condition. Alternatively we could test all\n+    // inputs, but testing just this input minimizes the data\n+    // required to prove correct CHECKLOCKTIMEVERIFY execution.\n+    if (txTo.vin[nIn].IsFinal())\n+        return false;\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21973847",
      "id" : 21973847,
      "original_commit_id" : "70fa6b661518f038143aae4b9dce444b7c648d95",
      "original_position" : 90,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-09T08:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21973847",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1752347?v=3",
         "events_url" : "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SergioDemianLerner/followers",
         "following_url" : "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SergioDemianLerner",
         "id" : 1752347,
         "login" : "SergioDemianLerner",
         "organizations_url" : "https://api.github.com/users/SergioDemianLerner/orgs",
         "received_events_url" : "https://api.github.com/users/SergioDemianLerner/received_events",
         "repos_url" : "https://api.github.com/users/SergioDemianLerner/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SergioDemianLerner/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SergioDemianLerner"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21975040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21975040"
         }
      },
      "body" : "You're reading it backwards: we're trying to prevent someone from *bypassing* the nLockTime of the transaction by setting every nSequence field to MAXINT.\n\nAs for the order of the tests, I designed it to go from least data required to prove to most.\n\nOn 17 December 2014 09:21:43 GMT-05:00, SergioDemianLerner <notifications@github.com> wrote:\n>> +    if (nLockTime > (int64_t)txTo.nLockTime)\n>> +        return false;\n>> +\n>> +    // Finally the nLockTime feature can be disabled and thus\n>> +    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n>> +    // finalized by setting nSequence to maxint. The\n>> +    // transaction would be allowed into the blockchain, making\n>> +    // the opcode ineffective.\n>> +    //\n>> +    // Testing if this vin is not final is sufficient to\n>> +    // prevent this condition. Alternatively we could test all\n>> +    // inputs, but testing just this input minimizes the data\n>> +    // required to prove correct CHECKLOCKTIMEVERIFY execution.\n>> +    if (txTo.vin[nIn].IsFinal())\n>> +        return false;\n>> +\n>\n>I don't understand why this check returns false and why it's not done\n>before (nLockTime > (int64_t)txTo.nLockTime). The comment says that if\n>IsFinal() = true, then the CHECKLOCKTIMEVERIFY is bypassed (accepted).\n>\n>---\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/5496/files#r21973702",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2014-12-17T14:42:33Z",
      "diff_hunk" : "@@ -1078,6 +1120,43 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     return true;\n }\n \n+bool SignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo.nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //\n+    // Testing if this vin is not final is sufficient to\n+    // prevent this condition. Alternatively we could test all\n+    // inputs, but testing just this input minimizes the data\n+    // required to prove correct CHECKLOCKTIMEVERIFY execution.\n+    if (txTo.vin[nIn].IsFinal())\n+        return false;\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21975040",
      "id" : 21975040,
      "original_commit_id" : "70fa6b661518f038143aae4b9dce444b7c648d95",
      "original_position" : 90,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-09T08:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21975040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21976075"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21976075"
         }
      },
      "body" : "Right. The Bitcoin protocol first checks the nLockTime and THEN checks the sequence num if nLockTime check is false. I had to read again the IsFinalTx() function. ",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2014-12-17T14:57:05Z",
      "diff_hunk" : "@@ -1078,6 +1120,43 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     return true;\n }\n \n+bool SignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo.nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //\n+    // Testing if this vin is not final is sufficient to\n+    // prevent this condition. Alternatively we could test all\n+    // inputs, but testing just this input minimizes the data\n+    // required to prove correct CHECKLOCKTIMEVERIFY execution.\n+    if (txTo.vin[nIn].IsFinal())\n+        return false;\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21976075",
      "id" : 21976075,
      "original_commit_id" : "70fa6b661518f038143aae4b9dce444b7c648d95",
      "original_position" : 90,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-09T08:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21976075",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1752347?v=3",
         "events_url" : "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SergioDemianLerner/followers",
         "following_url" : "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SergioDemianLerner",
         "id" : 1752347,
         "login" : "SergioDemianLerner",
         "organizations_url" : "https://api.github.com/users/SergioDemianLerner/orgs",
         "received_events_url" : "https://api.github.com/users/SergioDemianLerner/received_events",
         "repos_url" : "https://api.github.com/users/SergioDemianLerner/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SergioDemianLerner/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SergioDemianLerner"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21976623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21976623"
         }
      },
      "body" : "The comment regarding \"bypassing\" is a bit confusing. Shouldn't it say \"Finally CHECKLOCKTIMEVERIFY WILL INVALIDATE THE REDEEMER TRANSACTION if the corresponding txin has been finalized by setting nSequence to maxint.\"",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2014-12-17T15:04:07Z",
      "diff_hunk" : "@@ -1078,6 +1120,43 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     return true;\n }\n \n+bool SignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo.nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21976623",
      "id" : 21976623,
      "original_commit_id" : "70fa6b661518f038143aae4b9dce444b7c648d95",
      "original_position" : 83,
      "path" : "src/script/interpreter.cpp",
      "position" : 102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-09T08:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21976623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1752347?v=3",
         "events_url" : "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SergioDemianLerner/followers",
         "following_url" : "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SergioDemianLerner",
         "id" : 1752347,
         "login" : "SergioDemianLerner",
         "organizations_url" : "https://api.github.com/users/SergioDemianLerner/orgs",
         "received_events_url" : "https://api.github.com/users/SergioDemianLerner/received_events",
         "repos_url" : "https://api.github.com/users/SergioDemianLerner/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SergioDemianLerner/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SergioDemianLerner"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21977243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21977243"
         }
      },
      "body" : "I'm not sure that's any less confusing.\n\nThe key concept to understand is that CLTV only checks the transaction's nLockTime field, not the actual block height or time. Thus anything that disables nLockTime's effect can bypass CLTV.\n\nIncidentally I think part of the confusion is how the SignatureChecker object separates the logic of CLTV into two completely disjoint parts for no clear reason. It's a lot more clear when all this logic is in one place. A better refactoring would be to encapsulate the execution state, and if needed, cache expensive operations on that state like hashing the transaction. This is especially clear when you consider future improvements like opcodes to sign something other than the txin prevout.\n\n\nOn 17 December 2014 10:04:40 GMT-05:00, SergioDemianLerner <notifications@github.com> wrote:\n>> +        (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime < \n>LOCKTIME_THRESHOLD) ||\n>> +        (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >=\n>LOCKTIME_THRESHOLD)\n>> +    ))\n>> +        return false;\n>> +\n>> +    // Now that we know we're comparing apples-to-apples, the\n>> +    // comparison is a simple numeric one.\n>> +    if (nLockTime > (int64_t)txTo.nLockTime)\n>> +        return false;\n>> +\n>> +    // Finally the nLockTime feature can be disabled and thus\n>> +    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n>> +    // finalized by setting nSequence to maxint. The\n>> +    // transaction would be allowed into the blockchain, making\n>> +    // the opcode ineffective.\n>> +    //\n>\n>The comment regarding \"bypassing\" is b bit confusing. Shouldn't it say\n>\"Finally CHECKLOCKTIMEVERIFY WILL INVALIDATE THE REDEEMER TRANSACTION\n>if the corresponding txin has been finalized by setting nSequence to\n>maxint.\"\n>\n>---\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/5496/files#r21976623",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2014-12-17T15:12:42Z",
      "diff_hunk" : "@@ -1078,6 +1120,43 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     return true;\n }\n \n+bool SignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo.nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21977243",
      "id" : 21977243,
      "original_commit_id" : "70fa6b661518f038143aae4b9dce444b7c648d95",
      "original_position" : 83,
      "path" : "src/script/interpreter.cpp",
      "position" : 102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-09T08:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21977243",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21982101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21982101"
         }
      },
      "body" : "I believe I would have found @SergioDemianLerner's suggestion to be helpful when trying to understand the code - and that was starting from a version that had everything in one place.\r\n\r\nExtra documentation on the SignatureChecker class and its virtual methods is probably helpful though. They essentially represent \"verify something from the context\". ",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2014-12-17T16:13:35Z",
      "diff_hunk" : "@@ -1078,6 +1120,43 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     return true;\n }\n \n+bool SignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo.nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r21982101",
      "id" : 21982101,
      "original_commit_id" : "70fa6b661518f038143aae4b9dce444b7c648d95",
      "original_position" : 83,
      "path" : "src/script/interpreter.cpp",
      "position" : 102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-09T08:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/21982101",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r22140162"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/22140162"
         }
      },
      "body" : "@sipa My thinking there is that the comments explain *why* the code is the way it is, the code itself should itself be sufficient to explain what it's doing. This is particularly true in consensus-critical code like this patch where the code itself is extremely simple and the implications and design criteria are the important part. @SergioDemianLerner's suggested change doesn't explain the why; if anything it encourages the reader to read the comments and potentially miss some subtle aspect of exactly what the code really does.",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2014-12-20T06:17:01Z",
      "diff_hunk" : "@@ -1078,6 +1120,43 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n     return true;\n }\n \n+bool SignatureChecker::CheckLockTime(const CScriptNum& nLockTime) const\n+{\n+    // There are two times of nLockTime: lock-by-blockheight\n+    // and lock-by-blocktime, distinguished by whether\n+    // nLockTime < LOCKTIME_THRESHOLD.\n+    //\n+    // We want to compare apples to apples, so fail the script\n+    // unless the type of nLockTime being tested is the same as\n+    // the nLockTime in the transaction.\n+    if (!(\n+        (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n+        (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n+    ))\n+        return false;\n+\n+    // Now that we know we're comparing apples-to-apples, the\n+    // comparison is a simple numeric one.\n+    if (nLockTime > (int64_t)txTo.nLockTime)\n+        return false;\n+\n+    // Finally the nLockTime feature can be disabled and thus\n+    // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n+    // finalized by setting nSequence to maxint. The\n+    // transaction would be allowed into the blockchain, making\n+    // the opcode ineffective.\n+    //",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r22140162",
      "id" : 22140162,
      "original_commit_id" : "70fa6b661518f038143aae4b9dce444b7c648d95",
      "original_position" : 83,
      "path" : "src/script/interpreter.cpp",
      "position" : 102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-09T08:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/22140162",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Rebased on top of #5521 ",
      "created_at" : "2014-12-25T06:20:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68089494",
      "id" : 68089494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-25T06:20:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68089494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Just to know if I understand well.\r\n\r\nYou would want such mempool only check of CLTV out for 0.11, then, if it works without any notable problems and with some people building stuff on top of it, pushing that into the miners' rule for 0.12 ?\r\n\r\nI'm asking because I intend to build some stuff on top of it, and not really motivated to run and adapt my code for a viacoin node. So I guess my only option left for now it to wait for 0.11 ?",
      "created_at" : "2014-12-25T22:10:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114109",
      "id" : 68114109,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-25T22:10:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68114109",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "Hopefully we enforce more than mempool for 0.11, but enforcing for mempool is a one-line change after merging the code (which we should move forward with, whether with mempool enforcement or not)",
      "created_at" : "2014-12-25T22:14:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114175",
      "id" : 68114175,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-25T22:14:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68114175",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@petertodd Say the relay rule were widely deployed. What would be the plan if our we discovered that the exact rule construction wasn't the one we wanted?  ",
      "created_at" : "2014-12-25T22:25:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114361",
      "id" : 68114361,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-25T22:25:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68114361",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "I see. That's great to know !\r\n\r\nI'll be waiting for 0.11, I don't have the time/skill to compile bitcoind from sources on linux.\r\n\r\nNot a deal breaker though, I have my own script evaluator in .NET, I will port the CLTV + tests in it so I can test without a node. Not perfect, but I should be able to play with it truthfully enough.",
      "created_at" : "2014-12-25T22:36:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114539",
      "id" : 68114539,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-25T22:36:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68114539",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "Since it's just a relay rule at worst you just reject transactions with NOP2 from the mempool - the default behaviour - pick a new NOP#, and try out the new behaviour. \n\nThis means the implementation either does one or the other version - nice and clean - and neither version will interfere with the other. Of course both NOPs will make it into blocks, but that's not going to do us any harm as neither side has applied a soft-forking rule.\n\nNow in many cases you don't need to do all this. For instance if we were to decide to make CLTV act against the block height/time rather than the tx one nodes with the old rule just reject txs from the less permissive version. You'd want to be careful re: DoS ban code, but we're finding that crops up over and over again anyway...\n\nOn 25 December 2014 17:25:58 GMT-05:00, Gregory Maxwell <notifications@github.com> wrote:\n>@petertodd Say the relay rule were widely deployed. What would be the\n>plan if our we discovered that the exact rule construction wasn't the\n>one we wanted?  \n>\n>---\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114361",
      "created_at" : "2014-12-25T22:44:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-68114665",
      "id" : 68114665,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2014-12-25T22:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68114665",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Rebased on master.",
      "created_at" : "2015-04-21T04:43:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-94636217",
      "id" : 94636217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-04-21T04:43:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/94636217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "^ @jgarzik @btcdrak ",
      "created_at" : "2015-04-21T04:45:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-94636345",
      "id" : 94636345,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-04-21T04:45:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/94636345",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "ACK\r\nI reviewed this and tested by creating this small RPC test:\r\nhttps://gist.github.com/morcos/61084ac8a33363278638\r\n(it requires a rebase to master first as it uses some of the new python tools)\r\n\r\n",
      "created_at" : "2015-05-01T17:22:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-98182156",
      "id" : 98182156,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-01T17:22:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98182156",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "Concept ACK - I think this falls on the side of being a useful soft fork upgrade half-step.\r\n\r\nOf course, I would prefer to be more aggressive and go the entire way in one step.\r\n",
      "created_at" : "2015-05-01T17:28:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-98182959",
      "id" : 98182959,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-01T17:28:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98182959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "@morcos Actually your RPC test should work on master now; pull-req #5981 has been merged.\r\n\r\n@jgarzik We don't know if the most recent soft-fork will actually trigger prior to the release of v0.11, especially with @laanwj's proposed schedule. Merging this for v0.11 would at least get 95% of the code in the release, with actual enforcement happening in a v0.11.1 release. Getting off the rebase treadmill would also be nice.\r\n\r\nWhile there has been discussion about a relative CLTV by @TheBlueMatt and @jtimon I don't think any of it really impacts implementation of an absolute CLTV, which is also needed. My most recent proposal is that absolute CLTV be implemented as-is, and relative CLTV be left for a future scripting system rethinking: http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg07418.html",
      "created_at" : "2015-05-03T22:04:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-98549694",
      "id" : 98549694,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-03T22:04:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98549694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "I like merging this, but doing both CLTV things in one swoop would be really nice. Certainly if we're gonna use one of the precious few OP_NOPs we have we might as well make it more flexible. The relative-CLTV idea is incredibly useful in systems like the proposed Lightning network, a proposal to build on top of payment challen hub-and-spoke networks (though Ive been unsuccessful in getting them to comment on this specific issue here, as they cant seem to get their paper rewritten).",
      "created_at" : "2015-05-04T02:19:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-98568239",
      "id" : 98568239,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-04T02:19:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98568239",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "body" : "@TheBlueMatt I replied on the mailing list: http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg07442.html",
      "created_at" : "2015-05-04T05:09:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-98589469",
      "id" : 98589469,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-04T05:09:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98589469",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Updated to add a type field for future soft-forks, e.g. a relative CLTV upgrade.\r\n\r\nBIP updated: https://github.com/bitcoin/bips/pull/153\r\n\r\nCLTV demos: https://github.com/petertodd/checklocktimeverify-demos/commit/148e91e74f8b9e31d0bf35ddcf506b5030a05232\r\n\r\nThis should satisfy all objections. I propose this is merged for v0.11.0, and the actual soft-fork implemented in v0.11.1 once the ongoing BIP66 soft-fork triggers. (likely with @sipa's new nVersion feature flags BIP)",
      "created_at" : "2015-05-09T09:08:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-100454263",
      "id" : 100454263,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-09T09:08:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/100454263",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "I have tested the code and sent the following tx `fc6fa964c510e79b55ccea5bc8f21a505867b8ed286f6da02172bf8c297720dd` on testnet using the following redeem script `632102b0efefbe8f8feaabc74ebde89928bfacc6471fe5f4db43b19c2ff4e58fdfc290ad670400ca9a3b51b16d6821032c8296c603d3c5802027d57a8f3ae382d7464abfda6f80e4f7d592ce23d696e7ac` which decodes to `OP_IF 02b0efefbe8f8feaabc74ebde89928bfacc6471fe5f4db43b19c2ff4e58fdfc290 OP_CHECKSIGVERIFY OP_ELSE 1000000000 1 OP_NOP2 OP_2DROP OP_ENDIF 032c8296c603d3c5802027d57a8f3ae382d7464abfda6f80e4f7d592ce23d696e7 OP_CHECKSIG`\r\n\r\nACK.",
      "created_at" : "2015-05-11T22:35:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101067294",
      "id" : 101067294,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-11T22:35:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/101067294",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "The goal of doing that is to workaround the NOPX scarcity.\r\nWould it not be better to take currently unused NOP for creating an \"OP_EXT\" instruction. \r\n\r\nThen defines\r\n\r\n0 OP_EXT would be for CHECKLOCKTIMEVERIFY,\r\n\r\n1 OP_EXT would be for the next soft fork,\r\n\r\n2 OP_EXT would be for the third soft fork, etc...\r\n\r\nYour PR seems to only add extensibility for future relative CLTV, when I think, it can be broader without downside.",
      "created_at" : "2015-05-12T12:57:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101266479",
      "id" : 101266479,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-12T12:57:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/101266479",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "@NicolasDorier I am not sure I understand, the parameter that precedes `OP_NOP2` already allows for any number of future CLTV implementations (e.g. relative CLTV and other implementations yet to be imagined), `1 OP_NOP2`, `2 OP_NOP2`, `3 OP_NOP2`, `4 OP_NOP2`, `5 OP_NOP2`, `6 OP_NOP2`, `7 OP_NOP2`.... `n OP_NOP2`",
      "created_at" : "2015-05-12T13:02:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101267307",
      "id" : 101267307,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-12T13:02:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/101267307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "What I mean is that you just changed the CLTV by requiring 1 OP_NOP2 for doing it.\r\nYou did it for NOP scarcity reason, and (not a big deal though), it broke the simpler code before.\r\n\r\nThe rational for adding the PUSH 1, was permitting new mode and implementation for CLTV in the future without wasting other NOP.\r\n\r\nMy point is that NOP scarcity is not a problem worth considering. \r\n\r\nBecause the day we use all nops except NOP10, we can just say that \"NOP10\" is a \"OP_EXT\" operation. And then consider \"1 OP_EXT\" like a \"NOP11\", and \"2 OP_EXT\" like a \"NOP12\".\r\n\r\nSo I see no problem with using NOP3 for RCLTV or other mode we might invent in the future.",
      "created_at" : "2015-05-12T13:10:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101269691",
      "id" : 101269691,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-12T13:11:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/101269691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "Following what I just said, the latest PR is equivalent with choosing OP_EXT = NOP2, CLTV = NOP11 and RCLTV = NOP12, so why not waiting NOP10 for OP_EXT and just using NOP2 for CLTV and NOP3 for RCLTV.",
      "created_at" : "2015-05-12T13:44:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101286528",
      "id" : 101286528,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-12T13:45:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/101286528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "I agree with @NicolasDorier, no reason to worry about NOP scarcity until we hit OP_NOP10-- and when we do, we can redefine OP_NOP10 as OP_EXT.\r\n\r\nI think there is a good chance before then one of the OP_NOP's will be used to define an entirely different, redesigned scripting system, so we'll never get there.\r\n",
      "created_at" : "2015-05-12T13:59:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101293403",
      "id" : 101293403,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-12T13:59:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/101293403",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "Just to be clear, this is not an objection with the parametized CTLV. I just wanted to point out that the reason for doing it were flawed but I don't feel strongly about that.\r\n\r\nI would prefer a parametized CLTV for the 15may freeze than delaying the CLTV one more time for the reasons I gave.",
      "created_at" : "2015-05-12T15:41:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101324711",
      "id" : 101324711,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-12T15:41:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/101324711",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "I opened a pull-req with the unparameterized version as well, #6124 \r\n\r\nI personally prefer the unparameterized version without the type argument; I agree with @gavinandresen that running out of NOP's isn't a major concern. More importantly though, let's pick one and get this merged for v0.11.0",
      "created_at" : "2015-05-12T17:10:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101353180",
      "id" : 101353180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-12T17:10:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/101353180",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@NicolasDorier It's a valid point. I don't particularly care either way, although the PR was adjusted to account for discussion on the mailing list. I'm fine with either. Prefer the original #6124",
      "created_at" : "2015-05-12T17:13:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-101354205",
      "id" : 101354205,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-12T19:39:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/101354205",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30170312"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30170312"
         }
      },
      "body" : "Can you move all this to an inline function outside of EvalScript?\r\nIt will be build equivalent but much more readable (at the very least for the indentation, but seeing the parameters of each opcode is interesting too).\r\nAt some point we should do something like #5153 (having a check-identical-build script would help making that trivial to review and non-risky in a completely obvious way), so we could at least start doing it with the new opcodes.\r\n",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2015-05-12T19:21:41Z",
      "diff_hunk" : "@@ -335,9 +335,70 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30170312",
      "id" : 30170312,
      "original_commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "original_position" : 8,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-12T19:21:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30170312",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30170656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30170656"
         }
      },
      "body" : "@jtimon Could codestyle nits be left until after the PR is merged?",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2015-05-12T19:25:37Z",
      "diff_hunk" : "@@ -335,9 +335,70 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30170656",
      "id" : 30170656,
      "original_commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "original_position" : 8,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-12T19:25:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30170656",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30171391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30171391"
         }
      },
      "body" : "Well, it would be delaying that for the later bigger cleanup of EvalScript, the point is just to make to history cleaner by squashing the fixup into https://github.com/petertodd/bitcoin/commit/dc17027f2c37b97ce5b40154a64f18c16a72ee18.\r\nBut adding a fixup commit that is proven to produce an identical build it's not really a blocker IMO.\r\nWhat's blocking this is the lack of decision on the parametrized version versus the single opcode one.\r\nIn any case, this is just a nit, and if we decide before fixing the nit, I'll just remember to say this before considering anything else when the next opcode is proposed.\r\n\r\n",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2015-05-12T19:33:37Z",
      "diff_hunk" : "@@ -335,9 +335,70 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30171391",
      "id" : 30171391,
      "original_commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "original_position" : 8,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-12T19:34:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30171391",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30171866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30171866"
         }
      },
      "body" : "I think the issue of using parameterised version or not is quite clear: there isn't scarcity as pointed out by @gavinandresen and @NicolasDorier because OP_NOP10 can be repurposed to a general extension. Until we reach the limits it surely makes sense to produce concise scripts without parameter hacks?",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2015-05-12T19:38:59Z",
      "diff_hunk" : "@@ -335,9 +335,70 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30171866",
      "id" : 30171866,
      "original_commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "original_position" : 8,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-12T19:38:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30171866",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30171946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30171946"
         }
      },
      "body" : "Well, another blocker is the new softfork deployment mechanism @sipa is working on.\r\nAnd remember this doesn't have to be part of 0.11, we could just release 0.11.1 with this a week after releasing 0.11.\r\nSo, yes, I think we have time for an identical-build fixup commit (won't imply more testing), why clean later when you can avoid it in the first place?",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2015-05-12T19:39:59Z",
      "diff_hunk" : "@@ -335,9 +335,70 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30171946",
      "id" : 30171946,
      "original_commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "original_position" : 8,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-12T19:39:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30171946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30179423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30179423"
         }
      },
      "body" : "@jtimon I'm skeptical of making this an inline function when no other opcodes are precisely because when (if!) we change other opcodes to be inline functions the last thing we need is two different ways of doing it. Better to stick to the same, well-tested, mechanism everything else uses; making it an inline function now risks having to change it again anyway.\r\n\r\nre: the softfork mechanism, I'm well aware of it, and have been reviewing it myself. The idea here is just to get all *but* the actual softfork into a release to make network-wide testing of the new functionality easy. In the unlikely event that the functionality has to change this gives us one last chance to do so prior to the actual soft-fork.",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2015-05-12T20:56:27Z",
      "diff_hunk" : "@@ -335,9 +335,70 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30179423",
      "id" : 30179423,
      "original_commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "original_position" : 8,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-12T21:02:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30179423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30195552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30195552"
         }
      },
      "body" : "re softfork: ok, that makes sense.\r\n\r\nI really hope is when and not if. Your argument sounds like \"let's just dump the trash in the floor of the kitchen because the rest of the house is also dirty\".\r\nI don't understand why having ugly code should preclude us from written the new stuff in a cleaner way, it will be less work and smaller diffs in future cleanups.\r\n\r\n> same, **well-tested**, mechanism everything else uses\r\n\r\nThis would be equally well tested since the build would be identical. That's the main reason to make the function inlined (one could also argue about performance but I'm pretty sure the compiler is smart enough to \"think that by itself\").\r\n\r\nI insist this is a nit and shouldn't be a blocker: \"I'm too lazy to do that now. You should have asked before, too late, it will be more work for you or someone else later\" would be a perfectly valid answer.\r\n\r\nOn #5153 in general, It's sad that the interpreter of other implementations (like libbitcoin's) is much more readable than libconsensus'...\r\nBut it's worse than people not only don't want to implement it but actively oppose to that kind of obvious, trivial and completely safe imprevements.\r\nThis also applies to a subset of #4646 and any other huge nesting we have.\r\nYears of experience in software engineering show that it is a bad practice that leads to less readable and thus less maintainable code. That's why tools like checkstyle exist.\r\n\r\nBut, anyway, it's not worth it to discuss this further in here. Do the more-readable-but-equivalent-build-fixup commit or don't. It's completely up to you.\r\nNobody coded the identical-build-check tool that I proposed and you created a bounty for, so actually checking that the build is identical will be more work than making the inline function.\r\n",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2015-05-13T01:06:50Z",
      "diff_hunk" : "@@ -335,9 +335,70 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30195552",
      "id" : 30195552,
      "original_commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "original_position" : 8,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-13T01:06:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30195552",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Seems we have rough consensus that a type parameter isn't needed, so closing in favor of #6124 ",
      "created_at" : "2015-05-15T17:53:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102470882",
      "id" : 102470882,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-15T17:53:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102470882",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30430518"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30430518"
         }
      },
      "body" : ">  I don't understand why having ugly code should preclude us from written the new stuff in a cleaner way, it will be less work and smaller diffs in future cleanups.\r\n\r\nWell, like I say, I think having to fix something in the future in two different ways rather than just one different way is more work. I'd give the analogy of a factory that produces drums of arsenic as a byproduct, which currently get dumped in a big pile out the back. You'd be better off continuing to put it all in the one big pile, rather than deciding \"Ah, we're pretty sure we're going to dump it in the river in the future, arsenic doesn't bioaccumulate so the dilution will fix the problem. So stick all new drums in the river.\" - If it turns out that plan was a bad idea, now you have to clean up both a backyard and a river - twice as much work to plan the cleanup! Better having a problem with exactly one solution that can be repeatedly mechanically to fix it.",
      "commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "created_at" : "2015-05-15T17:57:58Z",
      "diff_hunk" : "@@ -335,9 +335,70 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 // Control\n                 //\n                 case OP_NOP:\n-                break;\n+                    break;\n+\n+                case OP_CHECKLOCKTIMEVERIFY:\n+                {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#discussion_r30430518",
      "id" : 30430518,
      "original_commit_id" : "14a63f433cf41028cbf670e60538c8adabecf067",
      "original_position" : 8,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5496",
      "updated_at" : "2015-05-15T17:57:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30430518",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Gah. I was not subscribed to this issue and didn't see the last few days debate.\r\n\r\nAllow me to make an argument _in favor of_ the type parameter. I have never seen opcode scarcity as the prime justification, and that was not the motivation for suggesting it as I did in an earlier PR. The reason I believe it is valuable to include the type parameter is for possible type checking efficiencies and future-proofing if the convention is adopted that OP_NOP(n) has the format [n n-1 ... 3 2 aux OP_NOPn] where the first parameter is the auxiliary opcode. So OP_NOP1 is used for opcodes which take no parameters [aux OP_NOP1]; OP_NOP2 for those like CLTV and RCLTV which take a single parameter [x aux OP_NOP2]; OP_NOP3 for those which take two parameters [y x aux OP_NOP3]; etc.\r\n\r\nThe implementation becomes a little bit cleaner as the OP_NOP(n) case statement can check that sufficient number of parameters are on the stack for all of its auxiliary opcodes, and future script authoring tools can have some rudimentary future-proof stack bounds checking.\r\n\r\nI am strongly in favor of including the type parameter.",
      "created_at" : "2015-05-16T16:46:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102650333",
      "id" : 102650333,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T16:47:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102650333",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "Also, I should mention that including the type parameter allows OP_CLTV and its relative variant to share nearly all of their implementation inline without a call-out. I hope to have code demonstrating this available in the very near future.",
      "created_at" : "2015-05-16T17:05:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102655339",
      "id" : 102655339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T17:06:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102655339",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "You can still reuse code in the checker (https://github.com/bitcoin/bitcoin/pull/6124/files#diff-be2905e2f5218ecdbe4e55637dac75f3R1129), having 2 separated opcodes for cltv and rcltv doesn't preclude code reuse.",
      "created_at" : "2015-05-16T17:09:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102655499",
      "id" : 102655499,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T19:37:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102655499",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "@maaku I think that's making a lot of premature assumptions about how the scripting system will be extended in the future. I think we're a lot more likely to implement an OP_MAST/OP_EVAL which just calls a new scheme, rather than continue extending what we have now.\r\n\r\nre: code reuse, I'm not convinced that avoiding code reuse in cases where we're talking about just a few lines of consensus-critical code really makes all that much sense. As @gmaxwell gmaxwell commented a few months ago, if every detail of a codebase needs to be reviewed, having everything in one place can be easier than splitting things up across many different functions.",
      "created_at" : "2015-05-16T18:55:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102666167",
      "id" : 102666167,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T18:55:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102666167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd the only non-aesthetic argument I've seen for multiple top-level opcodes instead of an extended opcode is that it saves 1 byte. However that byte is in the scriptSig, as there truly isn't any reason to use CLTV / RCLTV within a scriptPubKey. On the other hand, there may be future extensions to script which we want the use of an unallocated NOP in scriptPubKeys, I'd much rather take the hit of an extra byte in the scriptSig for CLTV/RCLTV than the UTXO if find later that we've exhausted the NOP space.",
      "created_at" : "2015-05-16T19:04:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102666617",
      "id" : 102666617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T19:04:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102666617",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "@maaku Hmm? It's quite likely that we'll see CLTV use in scriptPubKey's for payment channels for backup reasons, and absolutely guaranteed they'll be in redeemScripts. CLTV arguments are certainly always going to be in scriptPubKey's/redeemScript's as they rarely, if ever, are something where it makes sense to provide to spend a txout.\r\n\r\nAnyway, the cost of an extra script version byte when it comes time to eventually do an OP_MAST is <3% of the total storage requirements to store a single UTXO.",
      "created_at" : "2015-05-16T19:11:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102667144",
      "id" : 102667144,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T19:11:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102667144",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@maaku I believe the only non-aesthetic argument in the other direction is no_op scarcity.\r\nThe reuse argument is invalid and your other \"primary argument\" seems aesthetic to me as well.",
      "created_at" : "2015-05-16T19:41:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102669459",
      "id" : 102669459,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T19:41:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102669459",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Non-aesthetic?  In a wider context, agree w/ @petertodd RE _\"I think we're a lot more likely to implement an OP_MAST/OP_EVAL which just calls a new scheme, rather than continue extending what we have now.\"_\r\n\r\ne.g. OP_ETHEREUM would likely just require one opcode.\r\n",
      "created_at" : "2015-05-16T20:30:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102685625",
      "id" : 102685625,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T20:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102685625",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "Even though I'm the first to argue in favor of a script replacement, when discussing changes to the existing script system I think it is prudent to assume that we'll be stuck with script for much longer than we anticipate. I think that conservatism favors a two-byte extension opcode: (1) it leaves more single byte nopcodes available for OP_EVAL-like extensions which benefit more from brevity, and (2) if done in a certain way, it allows future-proof stack bounds checking in script authoring tools or policy checks.",
      "created_at" : "2015-05-16T21:50:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102701478",
      "id" : 102701478,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T21:55:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102701478",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "Without a full script replacement why would you ever need any script authoring tools? Script is just too limited to warrant that kind of complexity right now - there are literally less than a dozen or so basic script fragments that are useful.\n\nOn 16 May 2015 17:50:58 GMT-04:00, Mark Friedenbach <notifications@github.com> wrote:\n>Even though I'm the first to argue in favor of a script replacement,\n>when discussing changes to the existing script system I think it is\n>prudent to assume that we'll be stuck with script for much longer than\n>we anticipate. I think that conservatism favors a two-byte extension\n>opcode: (1) it leaves more single byte nopcodes available for\n>OP_EVAL-like extensions, and (2) it done in a certain way, it allows\n>future-proof stack bounds checking in script authoring tools or policy\n>checks.\n>\n>---\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102701478\n\n",
      "created_at" : "2015-05-16T21:55:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102702244",
      "id" : 102702244,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T21:55:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102702244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "> (1) it leaves more single byte nopcodes available for OP_EVAL-like extensions which benefit more from brevity,\r\n\r\nLet's reserve OP_16 for script2.0 and let's assume that will take ages to be deployed.\r\nLet's reserve OP_15 for taking the extra byte instead of doing it now, that will give us 255 more instructions.\r\nLet's reserve OP_15 255 to take a short (2 bytes) in a similar way, that will give us 65536 more. \r\nLet's reserve OP_15 255 65535 to take 4 bytes, that will give us 4294967296 more.\r\nEtc, etc...\r\nI really think we're safe.\r\n\r\n> (2) if done in a certain way, it allows future-proof stack bounds checking in script authoring tools or policy checks.\r\n\r\nThis is the part I'm not understanding. I'm missing why the reuse of \"stack bounds checks\" is not just bikeshedding and how the alternative is any less \"future-proof\".\r\nCan you elaborate on this?\r\n",
      "created_at" : "2015-05-16T23:13:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102710437",
      "id" : 102710437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T23:14:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102710437",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Make OP_NOP2 fail unless there are at least two items on the stack. It doesn't care what items, but they must be >=2. At this point a script tool, or relay policy is written that has no idea what the extra OP_NOP2 functionality is, but it knows that at the point OP_NOP2 is executed, there must be two items on the stack. A script compiler or transaction validator throws an error if it can determine that the stack would contain less than two items when the OP_NOP2 is executed. For some scriptPubKeys, the minimum number of pushes in the scriptSig could be inferred based on this and other constraints.\r\n\r\nLater, CLTV is implemented but none of this software has been updated to understand the new rules yet. Nevertheless, the compiler still throws an error when the lock time parameter is not provided, relay nodes drop the same transactions, and your script type checker helpfully reminds you that you are probably missing a value for that unrecognised OP_NOP2 extended instruction.\r\n\r\nIt's a very limited form of type checking, and not nearly as useful as it could be in a much better designed language. But it is an improvement over the status quo for existing script.",
      "created_at" : "2015-05-16T23:55:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-102712217",
      "id" : 102712217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-16T23:55:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102712217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69154?v=3",
         "events_url" : "https://api.github.com/users/maaku/events{/privacy}",
         "followers_url" : "https://api.github.com/users/maaku/followers",
         "following_url" : "https://api.github.com/users/maaku/following{/other_user}",
         "gists_url" : "https://api.github.com/users/maaku/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/maaku",
         "id" : 69154,
         "login" : "maaku",
         "organizations_url" : "https://api.github.com/users/maaku/orgs",
         "received_events_url" : "https://api.github.com/users/maaku/received_events",
         "repos_url" : "https://api.github.com/users/maaku/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/maaku/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/maaku/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/maaku"
      }
   },
   {
      "body" : "@maaku Relay nodes already drop transactions that use unknown opcodes; in fact I should have done that for this type patch... shows it's an ill-advised idea IMO - yet another thing to take into account over the simpler \"one-opcode one-function\" principle.\r\n\r\nAgain, I'm just not seeing the value of things like \"type checkers\" for the scripting language right now, given how utterly simple it is. Equally, in the future if the choice was to make the scripting language more or less complex for the sake of *type checking* vs. getting consensus, I'd 100% choose the latter, always. People are free to write scripts that are bad ideas; the important thing is that the consensus critical codebase stay simple to ensure we don't make mistakes that affect everyone. (like the one I made above!)",
      "created_at" : "2015-05-19T06:00:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5496#issuecomment-103349229",
      "id" : 103349229,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5496",
      "updated_at" : "2015-05-19T06:00:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/103349229",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   }
]
