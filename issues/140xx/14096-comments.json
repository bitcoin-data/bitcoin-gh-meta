[
   {
      "author_association" : "MEMBER",
      "body" : "In case there is another 0.17 RC, this should probably be included (the RPC help still says \"documentation at TODO\").",
      "created_at" : "2018-08-28T21:15:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#issuecomment-416743185",
      "id" : 416743185,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14096",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNjc0MzE4NQ==",
      "updated_at" : "2018-08-28T21:15:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/416743185",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213475774"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213475774"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Typo: \"thos\" :-)",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-28T21:18:21Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specfics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (toplevel only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(PUBKEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(PUBKEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only thos the pubkey hash).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213475774",
      "id" : 213475774,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzQ3NTc3NA==",
      "original_commit_id" : "f1665448a3d6ae244e36a74a311b27db4e4144a5",
      "original_position" : 43,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150321454,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213475774",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213476312"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213476312"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should \"whose\" be \"which\" here?",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-28T21:20:09Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specfics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (toplevel only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(PUBKEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(PUBKEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only thos the pubkey hash).\n+- `wpkh(PUBKEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(PUBKEY)` (toplevel only): an alias for the collection of `pk(PUBKEY)`, `pkh(PUBKEY)`, `wpkh(PUBKEY)`, and `sh(wpkh(PUBKEY))`.\n+- `multi(k,PUBKEY_1,PUBKEY_2,...,PUBKEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (toplevel only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (toplevel only): the script whose hex encoding is HEX.\n+\n+Public keys:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys, whose denote their corresponding public keys.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213476312",
      "id" : 213476312,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzQ3NjMxMg==",
      "original_commit_id" : "f1665448a3d6ae244e36a74a311b27db4e4144a5",
      "original_position" : 53,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150322063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213476312",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "FWIW, `codespell` catched the \"thos\" typo :-)\r\n\r\nSee #13954 for `codespell` integration: [Warn (don't fail!) on spelling errors. Fix typos reported by codespell](https://github.com/bitcoin/bitcoin/pull/13954)",
      "created_at" : "2018-08-28T21:27:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#issuecomment-416746721",
      "id" : 416746721,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14096",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNjc0NjcyMQ==",
      "updated_at" : "2018-08-28T21:27:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/416746721",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213479123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213479123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Typo: \"specfics\"",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-28T21:30:15Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specfics on usage for scanning",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213479123",
      "id" : 213479123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzQ3OTEyMw==",
      "original_commit_id" : "f1665448a3d6ae244e36a74a311b27db4e4144a5",
      "original_position" : 7,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150325449,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213479123",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213479449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213479449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: \"toplevel\" should probably be \"top level\" (applies throughout), no?",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-28T21:31:33Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specfics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (toplevel only): P2SH embed the argument.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213479449",
      "id" : 213479449,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzQ3OTQ0OQ==",
      "original_commit_id" : "f1665448a3d6ae244e36a74a311b27db4e4144a5",
      "original_position" : 40,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150325863,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213479449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213479864"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213479864"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: \"multisignature\" should be \"multi signature\" or \"multisig\"?",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-28T21:33:14Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specfics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (toplevel only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(PUBKEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(PUBKEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only thos the pubkey hash).\n+- `wpkh(PUBKEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(PUBKEY)` (toplevel only): an alias for the collection of `pk(PUBKEY)`, `pkh(PUBKEY)`, `wpkh(PUBKEY)`, and `sh(wpkh(PUBKEY))`.\n+- `multi(k,PUBKEY_1,PUBKEY_2,...,PUBKEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (toplevel only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (toplevel only): the script whose hex encoding is HEX.\n+\n+Public keys:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys, whose denote their corresponding public keys.\n+- `xpub` encoded extended public key or `xprv` encoded private key\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*i` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH, P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk` (P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in hexadecimal notation, and return the corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH) take as input a script, and return the script describing P2SH and P2WSH outputs with the input as embedded script. The names of the functions do not contain \"p2\" for brevity. Examples:\n+* `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n+* `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n+* `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n+* `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n+* `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a P2SH-P2WSH-P2PKH output.\n+\n+### Multisig\n+\n+Several pieces of software use multisignature scripts based on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the `multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n* multisig policy, where any *k* out of the *n* provided public keys must sign. Examples:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213479864",
      "id" : 213479864,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzQ3OTg2NA==",
      "original_commit_id" : "f1665448a3d6ae244e36a74a311b27db4e4144a5",
      "original_position" : 74,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150326386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213479864",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Excellent documentation! Great work as always!\r\n\r\nACK f1665448a3d6ae244e36a74a311b27db4e4144a5 modulo nits\r\n",
      "created_at" : "2018-08-28T21:35:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#issuecomment-416748687",
      "id" : 416748687,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14096",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNjc0ODY4Nw==",
      "updated_at" : "2018-08-28T21:35:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/416748687",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213533874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213533874"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T03:18:14Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specfics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (toplevel only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(PUBKEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(PUBKEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only thos the pubkey hash).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213533874",
      "id" : 213533874,
      "in_reply_to_id" : 213475774,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUzMzg3NA==",
      "original_commit_id" : "f1665448a3d6ae244e36a74a311b27db4e4144a5",
      "original_position" : 43,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150389347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213533874",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213533882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213533882"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T03:18:20Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specfics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (toplevel only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(PUBKEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(PUBKEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only thos the pubkey hash).\n+- `wpkh(PUBKEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(PUBKEY)` (toplevel only): an alias for the collection of `pk(PUBKEY)`, `pkh(PUBKEY)`, `wpkh(PUBKEY)`, and `sh(wpkh(PUBKEY))`.\n+- `multi(k,PUBKEY_1,PUBKEY_2,...,PUBKEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (toplevel only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (toplevel only): the script whose hex encoding is HEX.\n+\n+Public keys:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys, whose denote their corresponding public keys.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213533882",
      "id" : 213533882,
      "in_reply_to_id" : 213476312,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUzMzg4Mg==",
      "original_commit_id" : "f1665448a3d6ae244e36a74a311b27db4e4144a5",
      "original_position" : 53,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150389358,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213533882",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213533925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213533925"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T03:18:50Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specfics on usage for scanning",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213533925",
      "id" : 213533925,
      "in_reply_to_id" : 213479123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUzMzkyNQ==",
      "original_commit_id" : "f1665448a3d6ae244e36a74a311b27db4e4144a5",
      "original_position" : 7,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150389418,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213533925",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213533928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213533928"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T03:18:50Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specfics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (toplevel only): P2SH embed the argument.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213533928",
      "id" : 213533928,
      "in_reply_to_id" : 213479449,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUzMzkyOA==",
      "original_commit_id" : "f1665448a3d6ae244e36a74a311b27db4e4144a5",
      "original_position" : 40,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150389422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213533928",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213536108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213536108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T03:40:07Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specfics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (toplevel only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(PUBKEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(PUBKEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only thos the pubkey hash).\n+- `wpkh(PUBKEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(PUBKEY)` (toplevel only): an alias for the collection of `pk(PUBKEY)`, `pkh(PUBKEY)`, `wpkh(PUBKEY)`, and `sh(wpkh(PUBKEY))`.\n+- `multi(k,PUBKEY_1,PUBKEY_2,...,PUBKEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (toplevel only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (toplevel only): the script whose hex encoding is HEX.\n+\n+Public keys:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys, whose denote their corresponding public keys.\n+- `xpub` encoded extended public key or `xprv` encoded private key\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*i` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH, P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk` (P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in hexadecimal notation, and return the corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH) take as input a script, and return the script describing P2SH and P2WSH outputs with the input as embedded script. The names of the functions do not contain \"p2\" for brevity. Examples:\n+* `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n+* `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n+* `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n+* `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n+* `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a P2SH-P2WSH-P2PKH output.\n+\n+### Multisig\n+\n+Several pieces of software use multisignature scripts based on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the `multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n* multisig policy, where any *k* out of the *n* provided public keys must sign. Examples:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213536108",
      "id" : 213536108,
      "in_reply_to_id" : 213479864,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzUzNjEwOA==",
      "original_commit_id" : "f1665448a3d6ae244e36a74a311b27db4e4144a5",
      "original_position" : 74,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150392013,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213536108",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "created_at" : "2018-08-29T07:23:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#issuecomment-416852297",
      "id" : 416852297,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14096",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNjg1MjI5Nw==",
      "updated_at" : "2018-08-29T07:23:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/416852297",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213692924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213692924"
         }
      },
      "author_association" : "MEMBER",
      "body" : "One explicit example of each of the arguments in caps would help.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T14:10:55Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213692924",
      "id" : 213692924,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzY5MjkyNA==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 40,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150580538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213692924",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "created_at" : "2018-08-29T14:49:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#issuecomment-416981994",
      "id" : 416981994,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14096",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNjk4MTk5NA==",
      "updated_at" : "2018-08-29T14:49:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/416981994",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213815469"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213815469"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "shouldn't this be `(P2PKH)` ?",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T20:03:42Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213815469",
      "id" : 213815469,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgxNTQ2OQ==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 14,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150731601,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213815469",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/425166?v=4",
         "events_url" : "https://api.github.com/users/flack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/flack/followers",
         "following_url" : "https://api.github.com/users/flack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/flack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/flack",
         "id" : 425166,
         "login" : "flack",
         "node_id" : "MDQ6VXNlcjQyNTE2Ng==",
         "organizations_url" : "https://api.github.com/users/flack/orgs",
         "received_events_url" : "https://api.github.com/users/flack/received_events",
         "repos_url" : "https://api.github.com/users/flack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/flack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/flack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/flack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213815774"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213815774"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "shouldn't this be `(P2WPKH)`?",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T20:04:45Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213815774",
      "id" : 213815774,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgxNTc3NA==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 15,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150731988,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213815774",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/425166?v=4",
         "events_url" : "https://api.github.com/users/flack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/flack/followers",
         "following_url" : "https://api.github.com/users/flack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/flack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/flack",
         "id" : 425166,
         "login" : "flack",
         "node_id" : "MDQ6VXNlcjQyNTE2Ng==",
         "organizations_url" : "https://api.github.com/users/flack/orgs",
         "received_events_url" : "https://api.github.com/users/flack/received_events",
         "repos_url" : "https://api.github.com/users/flack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/flack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/flack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/flack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213816121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213816121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "add P2PK as well(if actually supported?)",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T20:06:05Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213816121",
      "id" : 213816121,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgxNjEyMQ==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 19,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150732440,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213816121",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213816286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213816286"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Typo: `correspondong`",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T20:06:39Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(PUBKEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(PUBKEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(PUBKEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(PUBKEY)` (top level only): an alias for the collection of `pk(PUBKEY)`, `pkh(PUBKEY)`, `wpkh(PUBKEY)`, and `sh(wpkh(PUBKEY))`.\n+- `multi(k,PUBKEY_1,PUBKEY_2,...,PUBKEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+Public keys:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+  - WIF encoded private keys may be specified instead of the correspondong public key, with the same meaning.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213816286",
      "id" : 213816286,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgxNjI4Ng==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 53,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150732628,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213816286",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/425166?v=4",
         "events_url" : "https://api.github.com/users/flack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/flack/followers",
         "following_url" : "https://api.github.com/users/flack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/flack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/flack",
         "id" : 425166,
         "login" : "flack",
         "node_id" : "MDQ6VXNlcjQyNTE2Ng==",
         "organizations_url" : "https://api.github.com/users/flack/orgs",
         "received_events_url" : "https://api.github.com/users/flack/received_events",
         "repos_url" : "https://api.github.com/users/flack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/flack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/flack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/flack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213817281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213817281"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, it isn't. There is no address format for P2PK.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T20:10:07Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213817281",
      "id" : 213817281,
      "in_reply_to_id" : 213816121,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgxNzI4MQ==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 19,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150733879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213817281",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213817990"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213817990"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch! I can't believe I missed this typo yesterday. Perhaps it was not present then? :-)",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T20:12:36Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(PUBKEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(PUBKEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(PUBKEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(PUBKEY)` (top level only): an alias for the collection of `pk(PUBKEY)`, `pkh(PUBKEY)`, `wpkh(PUBKEY)`, and `sh(wpkh(PUBKEY))`.\n+- `multi(k,PUBKEY_1,PUBKEY_2,...,PUBKEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+Public keys:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+  - WIF encoded private keys may be specified instead of the correspondong public key, with the same meaning.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213817990",
      "id" : 213817990,
      "in_reply_to_id" : 213816286,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgxNzk5MA==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 53,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150734816,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213817990",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213818928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213818928"
         }
      },
      "author_association" : "MEMBER",
      "body" : "huh, curious why Core API always returns P2PKH address for them, at least for coinbase outputs generated via `generate`.\r\n\r\nTIL.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T20:15:52Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213818928",
      "id" : 213818928,
      "in_reply_to_id" : 213816121,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgxODkyOA==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 19,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150735972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213818928",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213823041"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213823041"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@instagibbs That's due to a historical confusion where \"address\" and \"pubkey identifier\" were conflated. You can compute the hash160 of pubkeys, and those used to be represented in P2PK address format. For a long time for example `validateaddress` used to do that (it would list the P2PKH address for the pubkeys in a multisig too, for example, which makes no sense at all).\n\nAs an address, the P2PKH address format refers specifically to P2PKH scripts.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-08-29T20:29:09Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r213823041",
      "id" : 213823041,
      "in_reply_to_id" : 213816121,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzgyMzA0MQ==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 19,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 150741103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213823041",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r214535809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214535809"
         }
      },
      "author_association" : "MEMBER",
      "body" : "we definitely want to fix this one before merge Ã°ÂÂ¤Â£",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-02T10:32:39Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(PUBKEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(PUBKEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(PUBKEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(PUBKEY)` (top level only): an alias for the collection of `pk(PUBKEY)`, `pkh(PUBKEY)`, `wpkh(PUBKEY)`, and `sh(wpkh(PUBKEY))`.\n+- `multi(k,PUBKEY_1,PUBKEY_2,...,PUBKEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+Public keys:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+  - WIF encoded private keys may be specified instead of the correspondong public key, with the same meaning.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r214535809",
      "id" : 214535809,
      "in_reply_to_id" : 213816286,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUzNTgwOQ==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 53,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 151616177,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214535809",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215038994"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215038994"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-04T19:29:20Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215038994",
      "id" : 215038994,
      "in_reply_to_id" : 213815469,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTAzODk5NA==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 14,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152218708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215038994",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215039034"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215039034"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-04T19:29:30Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215039034",
      "id" : 215039034,
      "in_reply_to_id" : 213815774,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTAzOTAzNA==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 15,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152218771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215039034",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215039112"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215039112"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-04T19:29:45Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(PUBKEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(PUBKEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(PUBKEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(PUBKEY)` (top level only): an alias for the collection of `pk(PUBKEY)`, `pkh(PUBKEY)`, `wpkh(PUBKEY)`, and `sh(wpkh(PUBKEY))`.\n+- `multi(k,PUBKEY_1,PUBKEY_2,...,PUBKEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+Public keys:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+  - WIF encoded private keys may be specified instead of the correspondong public key, with the same meaning.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215039112",
      "id" : 215039112,
      "in_reply_to_id" : 213816286,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTAzOTExMg==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 53,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152218882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215039112",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215039564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215039564"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've reworded things a bit. I don't think it's necessary to give full examples of everything again (I'm a bit worried that the \"features\", \"examples\", \"reference\", and \"explanation\" sections are becoming repetitions of the same information over and over again).",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-04T19:31:33Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215039564",
      "id" : 215039564,
      "in_reply_to_id" : 213692924,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTAzOTU2NA==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 40,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152219482,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215039564",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215347771"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215347771"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A lot of this duplicates information in `descriptor.h`. Should that file link to this document to avoid this?",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T16:51:56Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A descriptor for the P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH scripts derived from a fixed public key:\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215347771",
      "id" : 215347771,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM0Nzc3MQ==",
      "original_commit_id" : "843bc92035bfcfa4327b5400b3a722ad6df393ec",
      "original_position" : 39,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152591770,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215347771",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215355302"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215355302"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\"take as input a public key in hexadecimal notation\"\r\n\r\nMaybe clarify these don't only take hexadecimal notation (since they should accept any KEY expressions).",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T17:14:25Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A descriptor for the P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH scripts derived from a fixed public key:\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+\n+`SCRIPT` expressions:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(KEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)`, `pkh(KEY)`, `wpkh(KEY)`, and `sh(wpkh(KEY))`.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+`KEY` expressions:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*i` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH, P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk` (P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in hexadecimal notation, and return the corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH) take as input a script, and return the script describing P2SH and P2WSH outputs with the input as embedded script. The names of the functions do not contain \"p2\" for brevity. Examples:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215355302",
      "id" : 215355302,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM1NTMwMg==",
      "original_commit_id" : "843bc92035bfcfa4327b5400b3a722ad6df393ec",
      "original_position" : 67,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152591770,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215355302",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215357660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215357660"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it would be good to drop the lists of examples in this `## Explanation` section and move them up into the `## Examples` section above, since that section is currently pretty meager and doesn't have simple, practical examples, and the explanations here are independent and don't really reference the examples that are mixed in.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T17:21:45Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A descriptor for the P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH scripts derived from a fixed public key:\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+\n+`SCRIPT` expressions:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(KEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)`, `pkh(KEY)`, `wpkh(KEY)`, and `sh(wpkh(KEY))`.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+`KEY` expressions:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*i` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH, P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk` (P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in hexadecimal notation, and return the corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH) take as input a script, and return the script describing P2SH and P2WSH outputs with the input as embedded script. The names of the functions do not contain \"p2\" for brevity. Examples:\n+* `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215357660",
      "id" : 215357660,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM1NzY2MA==",
      "original_commit_id" : "843bc92035bfcfa4327b5400b3a722ad6df393ec",
      "original_position" : 68,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152591770,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215357660",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215358958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215358958"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems inconsistent to parenthesize mention of WIF format but not xprv format. It might also be good to say in this section that xprv format is specified in BIP32.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T17:25:52Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A descriptor for the P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH scripts derived from a fixed public key:\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+\n+`SCRIPT` expressions:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(KEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)`, `pkh(KEY)`, `wpkh(KEY)`, and `sh(wpkh(KEY))`.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+`KEY` expressions:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*i` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH, P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk` (P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in hexadecimal notation, and return the corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH) take as input a script, and return the script describing P2SH and P2WSH outputs with the input as embedded script. The names of the functions do not contain \"p2\" for brevity. Examples:\n+* `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n+* `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n+* `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n+* `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n+* `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a P2SH-P2WSH-P2PKH output.\n+\n+### Multisig\n+\n+Several pieces of software use multi-signature (multisig) scripts based on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the `multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n* multisig policy, where any *k* out of the *n* provided public keys must sign. Examples:\n+* `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n+* `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n+* `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n+* `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n+\n+### BIP32 derived keys and chains\n+\n+Most modern wallet software and hardware uses keys that are derived using BIP32 (\"HD keys\"). We support these directly by permitting strings consisting of an extended public key (commonly referred to as an *xpub*) plus derivation path anywhere a public key is expected. The derivation path consists of a sequence of 0 or more integers (in the range *0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and separated by `/` characters. The string may optionally end with the literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened child keys instead. Examples:\n+* `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n+* `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n+* `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+\n+Whenever a public key is described using a hardened derivation step, the script cannot be computed without access to the corresponding private key.\n+\n+### Including private keys\n+\n+Often it is useful to communicate a description of scripts along with the necessary private keys. For this reason, anywhere a public key or xpub is supported, a private key (in WIF format) or xprv may be provided instead. This may be useful for dumping wallet descriptors including private key material.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215358958",
      "id" : 215358958,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM1ODk1OA==",
      "original_commit_id" : "843bc92035bfcfa4327b5400b3a722ad6df393ec",
      "original_position" : 93,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152591770,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215358958",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215360183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215360183"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe call it a convenience function instead of a special function. Special sounds like there's something magic about it, when actually it's generating a set of scripts just like all the other functions.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T17:29:36Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A descriptor for the P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH scripts derived from a fixed public key:\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+\n+`SCRIPT` expressions:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(KEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)`, `pkh(KEY)`, `wpkh(KEY)`, and `sh(wpkh(KEY))`.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+`KEY` expressions:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*i` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH, P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk` (P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in hexadecimal notation, and return the corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH) take as input a script, and return the script describing P2SH and P2WSH outputs with the input as embedded script. The names of the functions do not contain \"p2\" for brevity. Examples:\n+* `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n+* `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n+* `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n+* `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n+* `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a P2SH-P2WSH-P2PKH output.\n+\n+### Multisig\n+\n+Several pieces of software use multi-signature (multisig) scripts based on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the `multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n* multisig policy, where any *k* out of the *n* provided public keys must sign. Examples:\n+* `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n+* `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n+* `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n+* `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n+\n+### BIP32 derived keys and chains\n+\n+Most modern wallet software and hardware uses keys that are derived using BIP32 (\"HD keys\"). We support these directly by permitting strings consisting of an extended public key (commonly referred to as an *xpub*) plus derivation path anywhere a public key is expected. The derivation path consists of a sequence of 0 or more integers (in the range *0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and separated by `/` characters. The string may optionally end with the literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened child keys instead. Examples:\n+* `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n+* `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n+* `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+\n+Whenever a public key is described using a hardened derivation step, the script cannot be computed without access to the corresponding private key.\n+\n+### Including private keys\n+\n+Often it is useful to communicate a description of scripts along with the necessary private keys. For this reason, anywhere a public key or xpub is supported, a private key (in WIF format) or xprv may be provided instead. This may be useful for dumping wallet descriptors including private key material.\n+\n+### Compatibility with old wallets\n+\n+In order to easily represent the sets of scripts currently supported by existing Bitcoin Core wallets, a special function `combo` is provided, which takes as input a public key, and constructs the P2PK, P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case a key is uncompressed, it only constructs P2PK and P2PKH.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215360183",
      "id" : 215360183,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM2MDE4Mw==",
      "original_commit_id" : "843bc92035bfcfa4327b5400b3a722ad6df393ec",
      "original_position" : 97,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152591770,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215360183",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215376640"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215376640"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's now rewritten by moving all the examples from the explanation section there.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T18:20:57Z",
      "diff_hunk" : "@@ -0,0 +1,95 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PK), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPK), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A P2PK descriptor with a fixed public key:\n+- `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Quick reference\n+\n+Scripts:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215376640",
      "id" : 215376640,
      "in_reply_to_id" : 213692924,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM3NjY0MA==",
      "original_commit_id" : "db7ebf0f45a62f685375ce80a0a8ea57420b0ab0",
      "original_position" : 40,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152627387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215376640",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215376691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215376691"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T18:21:07Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A descriptor for the P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH scripts derived from a fixed public key:\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215376691",
      "id" : 215376691,
      "in_reply_to_id" : 215347771,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM3NjY5MQ==",
      "original_commit_id" : "843bc92035bfcfa4327b5400b3a722ad6df393ec",
      "original_position" : 39,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152627450,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215376691",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215376987"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215376987"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The explanation section builds things up step-by-step; I think it's more helpful to not give all information at once. I've instead added \"which will be extended later\", is that ok?",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T18:21:59Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A descriptor for the P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH scripts derived from a fixed public key:\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+\n+`SCRIPT` expressions:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(KEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)`, `pkh(KEY)`, `wpkh(KEY)`, and `sh(wpkh(KEY))`.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+`KEY` expressions:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*i` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH, P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk` (P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in hexadecimal notation, and return the corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH) take as input a script, and return the script describing P2SH and P2WSH outputs with the input as embedded script. The names of the functions do not contain \"p2\" for brevity. Examples:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215376987",
      "id" : 215376987,
      "in_reply_to_id" : 215355302,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM3Njk4Nw==",
      "original_commit_id" : "843bc92035bfcfa4327b5400b3a722ad6df393ec",
      "original_position" : 67,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152627809,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215376987",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215377106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215377106"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point, done.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T18:22:21Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A descriptor for the P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH scripts derived from a fixed public key:\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+\n+`SCRIPT` expressions:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(KEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)`, `pkh(KEY)`, `wpkh(KEY)`, and `sh(wpkh(KEY))`.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+`KEY` expressions:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*i` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH, P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk` (P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in hexadecimal notation, and return the corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH) take as input a script, and return the script describing P2SH and P2WSH outputs with the input as embedded script. The names of the functions do not contain \"p2\" for brevity. Examples:\n+* `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215377106",
      "id" : 215377106,
      "in_reply_to_id" : 215357660,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM3NzEwNg==",
      "original_commit_id" : "843bc92035bfcfa4327b5400b3a722ad6df393ec",
      "original_position" : 68,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152627959,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215377106",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215377140"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215377140"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T18:22:30Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A descriptor for the P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH scripts derived from a fixed public key:\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+\n+`SCRIPT` expressions:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(KEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)`, `pkh(KEY)`, `wpkh(KEY)`, and `sh(wpkh(KEY))`.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+`KEY` expressions:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*i` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH, P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk` (P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in hexadecimal notation, and return the corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH) take as input a script, and return the script describing P2SH and P2WSH outputs with the input as embedded script. The names of the functions do not contain \"p2\" for brevity. Examples:\n+* `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n+* `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n+* `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n+* `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n+* `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a P2SH-P2WSH-P2PKH output.\n+\n+### Multisig\n+\n+Several pieces of software use multi-signature (multisig) scripts based on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the `multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n* multisig policy, where any *k* out of the *n* provided public keys must sign. Examples:\n+* `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n+* `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n+* `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n+* `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n+\n+### BIP32 derived keys and chains\n+\n+Most modern wallet software and hardware uses keys that are derived using BIP32 (\"HD keys\"). We support these directly by permitting strings consisting of an extended public key (commonly referred to as an *xpub*) plus derivation path anywhere a public key is expected. The derivation path consists of a sequence of 0 or more integers (in the range *0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and separated by `/` characters. The string may optionally end with the literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened child keys instead. Examples:\n+* `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n+* `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n+* `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+\n+Whenever a public key is described using a hardened derivation step, the script cannot be computed without access to the corresponding private key.\n+\n+### Including private keys\n+\n+Often it is useful to communicate a description of scripts along with the necessary private keys. For this reason, anywhere a public key or xpub is supported, a private key (in WIF format) or xprv may be provided instead. This may be useful for dumping wallet descriptors including private key material.\n+\n+### Compatibility with old wallets\n+\n+In order to easily represent the sets of scripts currently supported by existing Bitcoin Core wallets, a special function `combo` is provided, which takes as input a public key, and constructs the P2PK, P2PKH, P2WPKH, and P2SH-P2WPH scripts for that key. In case a key is uncompressed, it only constructs P2PK and P2PKH.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215377140",
      "id" : 215377140,
      "in_reply_to_id" : 215360183,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM3NzE0MA==",
      "original_commit_id" : "843bc92035bfcfa4327b5400b3a722ad6df393ec",
      "original_position" : 97,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152628011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215377140",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215377242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215377242"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done (I've added the link higher up).",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T18:22:50Z",
      "diff_hunk" : "@@ -0,0 +1,97 @@\n+# Support for Output Descriptors in Bitcoin Core\n+\n+Since Bitcoin Core v0.17, there is support for Output Descriptors in the\n+`scantxoutset` RPC call. This is a simple language which can be used to\n+describe collections of output scripts.\n+\n+This document describes the language. For the specifics on usage for scanning\n+the UTXO set, see the `scantxoutset` RPC help.\n+\n+## Features\n+\n+Output descriptors currently support:\n+- Pay-to-pubkey scripts (P2PK), through the `pk` function.\n+- Pay-to-pubkey-hash scripts (P2PKH), through the `pkh` function.\n+- Pay-to-witness-pubkey-hash scripts (P2WPKH), through the `wpkh` function.\n+- Pay-to-script-hash scripts (P2SH), through the `sh` function.\n+- Pay-to-witness-script-hash scripts (P2WSH), through the `wsh` function.\n+- Multisig scripts, through the `multi` function.\n+- Any type of supported address (P2PKH, P2SH, Bech32), through the `addr` function.\n+- Raw hex scripts through the `raw` function.\n+- Public keys (compressed and uncompressed) in hex notation, or BIP32 extended pubkeys with derivation path.\n+\n+## Examples\n+\n+A descriptor for the P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH scripts derived from a fixed public key:\n+- `combo(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)`\n+\n+A descriptor for a P2SH-embedded witness output with a fixed public key:\n+- `sh(wpkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13))`\n+\n+A native segwit 1-of-2 multisig descriptor:\n+- `wsh(multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc))`\n+\n+A chain of P2PKH outputs:\n+- `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1/0/*)`\n+\n+## Reference\n+\n+Descriptors consist of several types of expressions. The top level expression is always a `SCRIPT`.\n+\n+`SCRIPT` expressions:\n+- `sh(SCRIPT)` (top level only): P2SH embed the argument.\n+- `wsh(SCRIPT)` (not inside another 'wsh'): P2WSH embed the argument.\n+- `pk(KEY)` (anywhere): P2PK output for the given public key.\n+- `pkh(KEY)` (anywhere): P2PKH output for the given public key (use `addr` if you only know the pubkey hash).\n+- `wpkh(KEY)` (not inside `wsh`): P2WPKH output for the given compressed pubkey.\n+- `combo(KEY)` (top level only): an alias for the collection of `pk(KEY)`, `pkh(KEY)`, `wpkh(KEY)`, and `sh(wpkh(KEY))`.\n+- `multi(k,KEY_1,KEY_2,...,KEY_n)` (anywhere): k-of-n multisig script.\n+- `addr(ADDR)` (top level only): the script which ADDR expands to (note that there is no address for P2PK outputs).\n+- `raw(HEX)` (top level only): the script whose hex encoding is HEX.\n+\n+`KEY` expressions:\n+- Hex encoded public keys (66 characters starting with `02` or `03`, or 130 characters starting with `04`).\n+  - Inside `wpkh` and `wsh`, only compressed public keys are permitted.\n+- WIF encoded private keys may be specified instead of the corresponding public key, with the same meaning.\n+-`xpub` encoded extended public key or `xprv` encoded private key\n+  - Followed by zero or more `/NUM` unhardened and `/NUM'` hardened BIP32 derivation steps.\n+  - Optionally followed by a single `/*` or `/*i` final step to denote all (direct) unhardened or hardened children.\n+  - The usage of hardened derivation steps requires providing the private key.\n+\n+## Explanation\n+\n+### Single-key scripts\n+\n+Many single-key constructions are used in practice, generally including P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH. Many more combinations are imaginable, though they may not be optimal: P2SH-P2PK, P2SH-P2PKH, P2WSH-P2PK, P2WSH-P2PKH, P2SH-P2WSH-P2PK, P2SH-P2WSH-P2PKH.\n+\n+To describe these, we model these as functions. The functions `pk` (P2PK), `pkh` (P2PKH) and `wpkh` (P2WPKH) take as input a public key in hexadecimal notation, and return the corresponding *scriptPubKey*. The functions `sh` (P2SH) and `wsh` (P2WSH) take as input a script, and return the script describing P2SH and P2WSH outputs with the input as embedded script. The names of the functions do not contain \"p2\" for brevity. Examples:\n+* `pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)` represents a P2PK output.\n+* `pkh(02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5)` represents a P2PKH output.\n+* `wpkh(02f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9)` represents a P2WPKH output.\n+* `sh(wpkh(03fff97bd5755eeea420453a14355235d382f6472f8568a18b2f057a1460297556))` represents a P2SH-P2WPKH output.\n+* `sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))` represents a P2SH-P2WSH-P2PKH output.\n+\n+### Multisig\n+\n+Several pieces of software use multi-signature (multisig) scripts based on Bitcoin's OP_CHECKMULTISIG opcode. To support these, we introduce the `multi(k,key_1,key_2,...,key_n)` function. It represents a *k-of-n* multisig policy, where any *k* out of the *n* provided public keys must sign. Examples:\n+* `multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)` represents a bare *1-of-2* multisig.\n+* `sh(multi(2,022f01e5e15cca351daff3843fb70f3c2f0a1bdd05e5af888a67784ef3e10a2a01,03acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe))` represents a P2SH *2-of-2* multisig.\n+* `wsh(multi(2,03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,03774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb,03d01115d548e7561b15c38f004d734633687cf4419620095bc5b0f47070afe85a))` represents a P2WSH *2-of-3* multisig.\n+* `sh(wsh(multi(1,03f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8,03499fdf9e895e719cfd64e67f07d38e3226aa7b63678949e6e49b241a60e823e4,02d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e)))` represents a P2SH-P2WSH *1-of-3* multisig.\n+\n+### BIP32 derived keys and chains\n+\n+Most modern wallet software and hardware uses keys that are derived using BIP32 (\"HD keys\"). We support these directly by permitting strings consisting of an extended public key (commonly referred to as an *xpub*) plus derivation path anywhere a public key is expected. The derivation path consists of a sequence of 0 or more integers (in the range *0..2<sup>31</sup>-1*) each optionally followed by `'` or `h`, and separated by `/` characters. The string may optionally end with the literal `/*` or `/*'` (or `/*h`) to refer to all unhardened or hardened child keys instead. Examples:\n+* `pk(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8)` refers to a single P2PK output, using the public key part from the specified xpub.\n+* `pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2)` refers to a single P2PKH output, using child key *1'/2* of the specified xpub.\n+* `wsh(multi(1,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/1/0/*,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/0/*))` refers to a chain of *1-of-2* P2WSH multisig outputs, using public keys taken from two HD chains with corresponding derivation paths.\n+\n+Whenever a public key is described using a hardened derivation step, the script cannot be computed without access to the corresponding private key.\n+\n+### Including private keys\n+\n+Often it is useful to communicate a description of scripts along with the necessary private keys. For this reason, anywhere a public key or xpub is supported, a private key (in WIF format) or xprv may be provided instead. This may be useful for dumping wallet descriptors including private key material.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215377242",
      "id" : 215377242,
      "in_reply_to_id" : 215358958,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM3NzI0Mg==",
      "original_commit_id" : "843bc92035bfcfa4327b5400b3a722ad6df393ec",
      "original_position" : 93,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 152628121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215377242",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Restructured the document, reformatted the markdown, and added a number of links.",
      "created_at" : "2018-09-05T18:23:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#issuecomment-418831423",
      "id" : 418831423,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14096",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxODgzMTQyMw==",
      "updated_at" : "2018-09-05T18:23:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/418831423",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215378278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215378278"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Typo: `descriptrs`",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T18:25:56Z",
      "diff_hunk" : "@@ -22,55 +22,8 @@\n // they can be included inside by changing public keys to private keys (WIF\n // format), and changing xpubs by xprvs.\n //\n-// 1. Examples\n-//\n-// A P2PK descriptor with a fixed public key:\n-// - pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)\n-//\n-// A P2SH-P2WSH-P2PKH descriptor with a fixed public key:\n-// - sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))\n-//\n-// A bare 1-of-2 multisig descriptor:\n-// - multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)\n-//\n-// A chain of P2PKH outputs (this needs the corresponding private key to derive):\n-// - pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2/*)\n-//\n-// 2. Grammar description:\n-//\n-// X: xpub or xprv encoded extended key\n-// I: decimal encoded integer\n-// H: Hex encoded byte array\n-// A: Address in P2PKH, P2SH, or Bech32 encoding\n-//\n-// S (Scripts):\n-// * pk(P): Pay-to-pubkey (P2PK) output for public key P.\n-// * pkh(P): Pay-to-pubkey-hash (P2PKH) output for public key P.\n-// * wpkh(P): Pay-to-witness-pubkey-hash (P2WPKH) output for public key P.\n-// * sh(S): Pay-to-script-hash (P2SH) output for script S\n-// * wsh(S): Pay-to-witness-script-hash (P2WSH) output for script S\n-// * combo(P): combination of P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH for public key P.\n-// * multi(I,L): k-of-n multisig for given public keys\n-// * addr(A): Output to address\n-// * raw(H): scriptPubKey with raw bytes\n-//\n-// P (Public keys):\n-// * H: fixed public key (or WIF-encoded private key)\n-// * E: extended public key\n-// * E/*: (ranged) all unhardened direct children of an extended public key\n-// * E/*': (ranged) all hardened direct children of an extended public key\n-//\n-// L (Comma-separated lists of public keys):\n-// * P\n-// * L,P\n-//\n-// E (Extended public keys):\n-// * X\n-// * E/I: unhardened child\n-// * E/I': hardened child\n-// * E/Ih: hardened child (alternative notation)\n-//\n-// The top level is S.\n+// Reference documentation about the descriptor language can be found in\n+// doc/descriptrs.md.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215378278",
      "id" : 215378278,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM3ODI3OA==",
      "original_commit_id" : "df9cc0d36bdd73c811fbb9be3b8c88bfd4cccac6",
      "original_position" : 54,
      "path" : "src/script/descriptor.h",
      "position" : null,
      "pull_request_review_id" : 152629367,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215378278",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/425166?v=4",
         "events_url" : "https://api.github.com/users/flack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/flack/followers",
         "following_url" : "https://api.github.com/users/flack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/flack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/flack",
         "id" : 425166,
         "login" : "flack",
         "node_id" : "MDQ6VXNlcjQyNTE2Ng==",
         "organizations_url" : "https://api.github.com/users/flack/orgs",
         "received_events_url" : "https://api.github.com/users/flack/received_events",
         "repos_url" : "https://api.github.com/users/flack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/flack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/flack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/flack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215378980"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215378980"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-05T18:28:00Z",
      "diff_hunk" : "@@ -22,55 +22,8 @@\n // they can be included inside by changing public keys to private keys (WIF\n // format), and changing xpubs by xprvs.\n //\n-// 1. Examples\n-//\n-// A P2PK descriptor with a fixed public key:\n-// - pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)\n-//\n-// A P2SH-P2WSH-P2PKH descriptor with a fixed public key:\n-// - sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))\n-//\n-// A bare 1-of-2 multisig descriptor:\n-// - multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)\n-//\n-// A chain of P2PKH outputs (this needs the corresponding private key to derive):\n-// - pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2/*)\n-//\n-// 2. Grammar description:\n-//\n-// X: xpub or xprv encoded extended key\n-// I: decimal encoded integer\n-// H: Hex encoded byte array\n-// A: Address in P2PKH, P2SH, or Bech32 encoding\n-//\n-// S (Scripts):\n-// * pk(P): Pay-to-pubkey (P2PK) output for public key P.\n-// * pkh(P): Pay-to-pubkey-hash (P2PKH) output for public key P.\n-// * wpkh(P): Pay-to-witness-pubkey-hash (P2WPKH) output for public key P.\n-// * sh(S): Pay-to-script-hash (P2SH) output for script S\n-// * wsh(S): Pay-to-witness-script-hash (P2WSH) output for script S\n-// * combo(P): combination of P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH for public key P.\n-// * multi(I,L): k-of-n multisig for given public keys\n-// * addr(A): Output to address\n-// * raw(H): scriptPubKey with raw bytes\n-//\n-// P (Public keys):\n-// * H: fixed public key (or WIF-encoded private key)\n-// * E: extended public key\n-// * E/*: (ranged) all unhardened direct children of an extended public key\n-// * E/*': (ranged) all hardened direct children of an extended public key\n-//\n-// L (Comma-separated lists of public keys):\n-// * P\n-// * L,P\n-//\n-// E (Extended public keys):\n-// * X\n-// * E/I: unhardened child\n-// * E/I': hardened child\n-// * E/Ih: hardened child (alternative notation)\n-//\n-// The top level is S.\n+// Reference documentation about the descriptor language can be found in\n+// doc/descriptrs.md.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#discussion_r215378980",
      "id" : 215378980,
      "in_reply_to_id" : 215378278,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTM3ODk4MA==",
      "original_commit_id" : "df9cc0d36bdd73c811fbb9be3b8c88bfd4cccac6",
      "original_position" : 54,
      "path" : "src/script/descriptor.h",
      "position" : null,
      "pull_request_review_id" : 152630226,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14096",
      "updated_at" : "2018-09-05T18:28:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215378980",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 2b5d6f8",
      "created_at" : "2018-09-06T09:25:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#issuecomment-419026947",
      "id" : 419026947,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14096",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxOTAyNjk0Nw==",
      "updated_at" : "2018-09-06T09:25:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/419026947",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 2b5d6f8df24b381d35b75187c97ae0cc9f7c3ed0",
      "created_at" : "2018-09-06T09:27:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#issuecomment-419027535",
      "id" : 419027535,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14096",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxOTAyNzUzNQ==",
      "updated_at" : "2018-09-06T09:27:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/419027535",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "backported to 0.17 in 465a583f9dcc2383eb20bbb98bffa66fe82f2cde eece974d0a3b8049e73cc29a4d14efddc00101a3 0f681cecadb9472b3d3ae2c1dd23d8173dc2e316\r\n",
      "created_at" : "2018-09-06T12:53:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14096#issuecomment-419082023",
      "id" : 419082023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14096",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxOTA4MjAyMw==",
      "updated_at" : "2018-09-06T12:53:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/419082023",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
