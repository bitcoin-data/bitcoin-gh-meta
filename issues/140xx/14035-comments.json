[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14942](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14942.html) (wallet: Return a ScanResult from CWallet::RescanFromTime by Empact)\n* [#14384](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14384.html) (Resolve validationinterface circular dependencies by 251Labs)\n* [#14121](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14121.html) (Index for BIP 157 block filters by jimpo)\n* [#14111](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14111.html) (index: Create IndexRunner class for activing indexes. by jimpo)\n* [#13949](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13949.html) (Introduce MempoolObserver interface to break \"policy/fees -> txmempool -> policy/fees\" circular dependency by Empact)\n* [#13743](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13743.html) (refactor: Replace boost::bind with std::bind by ken2812221)\n* [#13088](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13088.html) (Log early messages with -printtoconsole by ajtowns)\n* [#10973](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10973.html) (Refactor: separate wallet from node by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-08-23T22:03:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#issuecomment-415585660",
      "id" : 415585660,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14035",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNTU4NTY2MA==",
      "updated_at" : "2018-12-28T14:22:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/415585660",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14035#discussion_r212682356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14035"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212682356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "note: \"push_back(Pair\" is deprecated in favor of pushKV",
      "commit_id" : "34c8e8e7cff4fa79264c510655f2320ac80e1513",
      "created_at" : "2018-08-24T16:23:37Z",
      "diff_hunk" : "@@ -1079,6 +1082,145 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+void utxoSetToJson(const SerializableUtxoSet& utxoSet, UniValue& vObjects, unsigned int minConf)\n+{\n+    for(auto outpoint: utxoSet)\n+    {\n+        Coin coin;\n+        if(minConf == 0)\n+        {\n+            LOCK(mempool.cs);\n+            CCoinsViewMemPool view(pcoinsTip.get(), mempool);\n+            if(!(view.GetCoin(outpoint, coin)))\n+                continue;\n+        }\n+        else if(!(pcoinsTip->GetCoin(outpoint, coin)))\n+            continue;\n+\n+        if(coin.out.IsNull() || coin.out.scriptPubKey.IsUnspendable())\n+            continue;\n+\n+        if(coin.nHeight != MEMPOOL_HEIGHT && !(chainActive[coin.nHeight] && chainActive[coin.nHeight]->phashBlock))\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Internal Error: !chainActive[coins.nHeight]\");\n+\n+        CBlockIndex *pindex = mapBlockIndex.find(pcoinsTip->GetBestBlock())->second;\n+\n+        uint64_t nConfirmations = 0;\n+        if ((unsigned int)coin.nHeight != MEMPOOL_HEIGHT)\n+            nConfirmations = pindex->nHeight - coin.nHeight + 1;\n+        if (nConfirmations < minConf)\n+            continue;\n+\n+        UniValue oScriptPubKey(UniValue::VOBJ);\n+        ScriptPubKeyToUniv(coin.out.scriptPubKey, oScriptPubKey, true);\n+\n+        UniValue o(UniValue::VOBJ);\n+        o.push_back(Pair(\"confirmations\", nConfirmations));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#discussion_r212682356",
      "id" : 212682356,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjY4MjM1Ng==",
      "original_commit_id" : "ebe3d1fb657f206e692de8406d11650890921ecb",
      "original_position" : 54,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 149370692,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14035",
      "updated_at" : "2018-11-13T18:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212682356",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Might be wortwhile to update it to using output descriptors, like `scantxoutset`: https://github.com/bitcoin/bitcoin/blob/master/src/rpc/blockchain.cpp#L2035",
      "created_at" : "2018-08-24T16:25:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#issuecomment-415810823",
      "id" : 415810823,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14035",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNTgxMDgyMw==",
      "updated_at" : "2018-08-24T16:25:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/415810823",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14035#discussion_r212710403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14035"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212710403"
         }
      },
      "author_association" : "NONE",
      "body" : "Corrected",
      "commit_id" : "34c8e8e7cff4fa79264c510655f2320ac80e1513",
      "created_at" : "2018-08-24T18:05:58Z",
      "diff_hunk" : "@@ -1079,6 +1082,145 @@ UniValue gettxout(const JSONRPCRequest& request)\n     return ret;\n }\n \n+void utxoSetToJson(const SerializableUtxoSet& utxoSet, UniValue& vObjects, unsigned int minConf)\n+{\n+    for(auto outpoint: utxoSet)\n+    {\n+        Coin coin;\n+        if(minConf == 0)\n+        {\n+            LOCK(mempool.cs);\n+            CCoinsViewMemPool view(pcoinsTip.get(), mempool);\n+            if(!(view.GetCoin(outpoint, coin)))\n+                continue;\n+        }\n+        else if(!(pcoinsTip->GetCoin(outpoint, coin)))\n+            continue;\n+\n+        if(coin.out.IsNull() || coin.out.scriptPubKey.IsUnspendable())\n+            continue;\n+\n+        if(coin.nHeight != MEMPOOL_HEIGHT && !(chainActive[coin.nHeight] && chainActive[coin.nHeight]->phashBlock))\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Internal Error: !chainActive[coins.nHeight]\");\n+\n+        CBlockIndex *pindex = mapBlockIndex.find(pcoinsTip->GetBestBlock())->second;\n+\n+        uint64_t nConfirmations = 0;\n+        if ((unsigned int)coin.nHeight != MEMPOOL_HEIGHT)\n+            nConfirmations = pindex->nHeight - coin.nHeight + 1;\n+        if (nConfirmations < minConf)\n+            continue;\n+\n+        UniValue oScriptPubKey(UniValue::VOBJ);\n+        ScriptPubKeyToUniv(coin.out.scriptPubKey, oScriptPubKey, true);\n+\n+        UniValue o(UniValue::VOBJ);\n+        o.push_back(Pair(\"confirmations\", nConfirmations));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#discussion_r212710403",
      "id" : 212710403,
      "in_reply_to_id" : 212682356,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjcxMDQwMw==",
      "original_commit_id" : "ebe3d1fb657f206e692de8406d11650890921ecb",
      "original_position" : 54,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 149404905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14035",
      "updated_at" : "2018-11-13T18:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212710403",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/42271287?v=4",
         "events_url" : "https://api.github.com/users/mgrychow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mgrychow/followers",
         "following_url" : "https://api.github.com/users/mgrychow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mgrychow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mgrychow",
         "id" : 42271287,
         "login" : "mgrychow",
         "node_id" : "MDQ6VXNlcjQyMjcxMjg3",
         "organizations_url" : "https://api.github.com/users/mgrychow/orgs",
         "received_events_url" : "https://api.github.com/users/mgrychow/received_events",
         "repos_url" : "https://api.github.com/users/mgrychow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mgrychow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mgrychow"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@instagibbs Thanks for the remarks, how about adding support for descriptors in separate PR?",
      "created_at" : "2018-08-24T18:08:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#issuecomment-415838376",
      "id" : 415838376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14035",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNTgzODM3Ng==",
      "updated_at" : "2018-08-24T18:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/415838376",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/42271287?v=4",
         "events_url" : "https://api.github.com/users/mgrychow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mgrychow/followers",
         "following_url" : "https://api.github.com/users/mgrychow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mgrychow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mgrychow",
         "id" : 42271287,
         "login" : "mgrychow",
         "node_id" : "MDQ6VXNlcjQyMjcxMjg3",
         "organizations_url" : "https://api.github.com/users/mgrychow/orgs",
         "received_events_url" : "https://api.github.com/users/mgrychow/received_events",
         "repos_url" : "https://api.github.com/users/mgrychow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mgrychow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mgrychow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@mgrychow, I recently started working on an address-based index (not just for UTXOs) at #14053. I can improve my PR quite a bit using your changes to the ValidationInterface. If you separated that change (adding CBlockUndo's) into it's own commit this PR would be a bit cleaner, and I could use it for the address index :)\r\n\r\nAnyway, will be reviewing this since it's pretty similar to the PR I just made. \r\n\r\n",
      "created_at" : "2018-08-24T18:57:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#issuecomment-415851603",
      "id" : 415851603,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14035",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNTg1MTYwMw==",
      "updated_at" : "2018-08-24T18:57:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/415851603",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@mgrychow Not going to bikeshed this PR to death, just noting it in case you've missed it.",
      "created_at" : "2018-08-24T18:59:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#issuecomment-415852168",
      "id" : 415852168,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14035",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNTg1MjE2OA==",
      "updated_at" : "2018-08-24T18:59:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/415852168",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14035#discussion_r212726312"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14035"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212726312"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "~~Is this check needed? In what case will a transaction be added to the mempool where this is true? I might be missing something.~~ (OP_RETURN outputs)",
      "commit_id" : "34c8e8e7cff4fa79264c510655f2320ac80e1513",
      "created_at" : "2018-08-24T19:04:32Z",
      "diff_hunk" : "@@ -0,0 +1,455 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/utxoscriptindex.h>\n+#include <util.h>\n+#include <script/standard.h>\n+#include <pubkey.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+\n+#include<boost/thread.hpp>\n+\n+\n+std::unique_ptr<UtxoScriptIndex> g_utxoscriptindex;\n+\n+static ScriptHash ScriptIndexHash(const CScript& in){\n+    return Hash160(in.begin(), in.end());\n+}\n+\n+class UtxoScriptIndexDBCursor\n+{\n+public:\n+    UtxoScriptIndexDBCursor(CDBIterator* cursor) : pcursor(cursor){}\n+\n+    bool GetKey(ScriptHash& key);\n+    bool GetValue(SerializableUtxoSet& utxoSet);\n+    unsigned int GetValueSize() const;\n+\n+    bool Valid() const;\n+    void Next();\n+\n+    std::pair<char, ScriptHash> keyTmp;\n+    std::unique_ptr<CDBIterator> pcursor;\n+};\n+\n+class UtxoScriptIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+\n+    bool WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos);\n+    bool ReadUtxos(const ScriptHash&, SerializableUtxoSet& utxoSet);\n+\n+    UtxoScriptIndexDBCursor* Cursor() const;\n+};\n+\n+UtxoScriptIndex::DB::DB(size_t nCacheSize, bool fMemory, bool fWipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"coinsbyscript\", nCacheSize, fMemory, fWipe)\n+{\n+\n+}\n+\n+bool UtxoScriptIndex::DB::WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos)\n+{\n+    CDBBatch batch(*this);\n+    for(const auto& scriptUtxo: scriptUtxos)\n+    {\n+        auto key = std::make_pair(DB_UTXO, std::ref(scriptUtxo.first));\n+        auto& value = scriptUtxo.second;\n+        if(scriptUtxo.second.empty())\n+            batch.Erase(key);\n+        else\n+            batch.Write(key,value);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool UtxoScriptIndex::DB::ReadUtxos(const ScriptHash& scriptId, SerializableUtxoSet& utxoSet)\n+{\n+    return Read(std::make_pair(DB_UTXO, scriptId), utxoSet);\n+}\n+\n+UtxoScriptIndexDBCursor* UtxoScriptIndex::DB::Cursor() const\n+{\n+    UtxoScriptIndexDBCursor* cursor = new UtxoScriptIndexDBCursor(\n+                                    const_cast<CDBWrapper*>(\n+                                        static_cast<const CDBWrapper*>(this))->NewIterator());\n+    cursor->pcursor->Seek(DB_UTXO);\n+    if(!(cursor->pcursor->Valid()))\n+        cursor->keyTmp.first = 0;\n+    else\n+        cursor->pcursor->GetKey(cursor->keyTmp);\n+    return cursor;\n+}\n+\n+bool UtxoScriptIndexDBCursor::GetKey(ScriptHash& key)\n+{\n+    if(keyTmp.first == DB_UTXO)\n+    {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool UtxoScriptIndexDBCursor::GetValue(SerializableUtxoSet& utxoSet)\n+{\n+    return pcursor->GetValue(utxoSet);\n+}\n+\n+bool UtxoScriptIndexDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_UTXO;\n+}\n+\n+void UtxoScriptIndexDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if(pcursor->Valid() && pcursor->GetKey(keyTmp))\n+        return;\n+    else\n+        keyTmp.first = 0;\n+}\n+\n+UtxoScriptIndex::UtxoScriptIndex(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    m_db(std::move(MakeUnique<UtxoScriptIndex::DB>(n_cache_size, f_memory, f_wipe)))\n+{\n+\n+}\n+\n+UtxoScriptIndex::~UtxoScriptIndex() {\n+    UnregisterValidationInterface(this);\n+}\n+\n+void UtxoScriptIndex::Start()\n+{\n+    RegisterValidationInterface(this);\n+}\n+\n+void UtxoScriptIndex::TransactionAddedToMempool(const CTransactionRef &ptxn) {\n+    LOCK(cs_utxoCacheMempool);\n+    const CTransaction &tx = *ptxn;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++)\n+    {\n+        if (tx.vout[i].IsNull() || tx.vout[i].scriptPubKey.IsUnspendable())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#discussion_r212726312",
      "id" : 212726312,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjcyNjMxMg==",
      "original_commit_id" : "37562b7e364022b66c073a207aa38428f7d8b4fa",
      "original_position" : 138,
      "path" : "src/index/utxoscriptindex.cpp",
      "position" : 137,
      "pull_request_review_id" : 149424924,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14035",
      "updated_at" : "2018-11-13T18:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212726312",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14035#discussion_r212727496"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14035"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212727496"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This could be a `do{ } while(i  > 0)`",
      "commit_id" : "34c8e8e7cff4fa79264c510655f2320ac80e1513",
      "created_at" : "2018-08-24T19:09:24Z",
      "diff_hunk" : "@@ -0,0 +1,455 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/utxoscriptindex.h>\n+#include <util.h>\n+#include <script/standard.h>\n+#include <pubkey.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+\n+#include<boost/thread.hpp>\n+\n+\n+std::unique_ptr<UtxoScriptIndex> g_utxoscriptindex;\n+\n+static ScriptHash ScriptIndexHash(const CScript& in){\n+    return Hash160(in.begin(), in.end());\n+}\n+\n+class UtxoScriptIndexDBCursor\n+{\n+public:\n+    UtxoScriptIndexDBCursor(CDBIterator* cursor) : pcursor(cursor){}\n+\n+    bool GetKey(ScriptHash& key);\n+    bool GetValue(SerializableUtxoSet& utxoSet);\n+    unsigned int GetValueSize() const;\n+\n+    bool Valid() const;\n+    void Next();\n+\n+    std::pair<char, ScriptHash> keyTmp;\n+    std::unique_ptr<CDBIterator> pcursor;\n+};\n+\n+class UtxoScriptIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+\n+    bool WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos);\n+    bool ReadUtxos(const ScriptHash&, SerializableUtxoSet& utxoSet);\n+\n+    UtxoScriptIndexDBCursor* Cursor() const;\n+};\n+\n+UtxoScriptIndex::DB::DB(size_t nCacheSize, bool fMemory, bool fWipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"coinsbyscript\", nCacheSize, fMemory, fWipe)\n+{\n+\n+}\n+\n+bool UtxoScriptIndex::DB::WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos)\n+{\n+    CDBBatch batch(*this);\n+    for(const auto& scriptUtxo: scriptUtxos)\n+    {\n+        auto key = std::make_pair(DB_UTXO, std::ref(scriptUtxo.first));\n+        auto& value = scriptUtxo.second;\n+        if(scriptUtxo.second.empty())\n+            batch.Erase(key);\n+        else\n+            batch.Write(key,value);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool UtxoScriptIndex::DB::ReadUtxos(const ScriptHash& scriptId, SerializableUtxoSet& utxoSet)\n+{\n+    return Read(std::make_pair(DB_UTXO, scriptId), utxoSet);\n+}\n+\n+UtxoScriptIndexDBCursor* UtxoScriptIndex::DB::Cursor() const\n+{\n+    UtxoScriptIndexDBCursor* cursor = new UtxoScriptIndexDBCursor(\n+                                    const_cast<CDBWrapper*>(\n+                                        static_cast<const CDBWrapper*>(this))->NewIterator());\n+    cursor->pcursor->Seek(DB_UTXO);\n+    if(!(cursor->pcursor->Valid()))\n+        cursor->keyTmp.first = 0;\n+    else\n+        cursor->pcursor->GetKey(cursor->keyTmp);\n+    return cursor;\n+}\n+\n+bool UtxoScriptIndexDBCursor::GetKey(ScriptHash& key)\n+{\n+    if(keyTmp.first == DB_UTXO)\n+    {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool UtxoScriptIndexDBCursor::GetValue(SerializableUtxoSet& utxoSet)\n+{\n+    return pcursor->GetValue(utxoSet);\n+}\n+\n+bool UtxoScriptIndexDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_UTXO;\n+}\n+\n+void UtxoScriptIndexDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if(pcursor->Valid() && pcursor->GetKey(keyTmp))\n+        return;\n+    else\n+        keyTmp.first = 0;\n+}\n+\n+UtxoScriptIndex::UtxoScriptIndex(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    m_db(std::move(MakeUnique<UtxoScriptIndex::DB>(n_cache_size, f_memory, f_wipe)))\n+{\n+\n+}\n+\n+UtxoScriptIndex::~UtxoScriptIndex() {\n+    UnregisterValidationInterface(this);\n+}\n+\n+void UtxoScriptIndex::Start()\n+{\n+    RegisterValidationInterface(this);\n+}\n+\n+void UtxoScriptIndex::TransactionAddedToMempool(const CTransactionRef &ptxn) {\n+    LOCK(cs_utxoCacheMempool);\n+    const CTransaction &tx = *ptxn;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++)\n+    {\n+        if (tx.vout[i].IsNull() || tx.vout[i].scriptPubKey.IsUnspendable())\n+            continue;\n+\n+        auto utxoKey = ScriptIndexHash(tx.vout[i].scriptPubKey);\n+        utxoCacheMempool[utxoKey].insert(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n+    }\n+}\n+\n+void UtxoScriptIndex::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n+    LOCK(cs_utxoCacheMempool);\n+    const CTransaction &tx = *ptx;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++)\n+    {\n+        if (tx.vout[i].IsNull() || tx.vout[i].scriptPubKey.IsUnspendable())\n+            continue;\n+\n+        std::map<ScriptHash, SerializableUtxoSet>::iterator it = utxoCacheMempool.find(ScriptIndexHash(tx.vout[i].scriptPubKey));\n+\n+        if (it != utxoCacheMempool.end())\n+        {\n+            it->second.erase(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n+            if (it->second.empty())\n+                utxoCacheMempool.erase(it);\n+        }\n+    }\n+}\n+\n+void UtxoScriptIndex::BlockConnected(const std::shared_ptr<const CBlock> &block,\n+                                     const CBlockIndex *pindex,\n+                                     const std::shared_ptr<const CBlockUndo> &blockundo,\n+                                     const std::vector<CTransactionRef> &txnConflicted)\n+{\n+    {\n+        LOCK(cs_utxoCache);\n+        removeSpentUtxosOnTipConnected(*block, *blockundo);\n+        addNewUtxosOnTipConnected(*block);\n+    }\n+    WriteBestBlock(block->GetHash());\n+}\n+\n+void UtxoScriptIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block,\n+                                        const std::shared_ptr<const CBlockUndo> &blockundo) {\n+    assert(block->vtx.size() > 0);\n+    LOCK(cs_utxoCache);\n+    restoreSpentUtxosOnTipDisconnected(*block, *blockundo);\n+    removeUtxosOnTipDisconnected(*block);\n+}\n+\n+BaseIndex::DB& UtxoScriptIndex::GetDB() const { return *m_db; }\n+\n+void UtxoScriptIndex::removeUtxo(const CTxOut& txout, const COutPoint outpoint)\n+{\n+    if(txout.IsNull() || txout.scriptPubKey.IsUnspendable())\n+        return;\n+    const ScriptHash utxoCacheKey = ScriptIndexHash(txout.scriptPubKey);\n+    loadToCache(utxoCacheKey);\n+    if(utxoCache.count(utxoCacheKey) == 0)\n+        return;\n+    SerializableUtxoSet& utxoCacheSet = utxoCache.at(utxoCacheKey);\n+        utxoCacheSet.erase(outpoint);\n+}\n+\n+void UtxoScriptIndex::removeSpentUtxosOnTipConnected(const CBlock& block, const CBlockUndo& blockundo)\n+{\n+\n+    for(unsigned int i = 1; i < block.vtx.size(); ++i)\n+    {\n+        for(unsigned int j = 0; j < (block.vtx[i])->vin.size(); ++j)\n+        {\n+            removeUtxo(blockundo.vtxundo[i-1].vprevout[j].out,\n+                       block.vtx[i]->vin[j].prevout);\n+        }\n+    }\n+}\n+\n+void UtxoScriptIndex::removeUtxosOnTipDisconnected(const CBlock& block)\n+{\n+    if(block.vtx.size() == 0)\n+        return;\n+\n+    unsigned int i = block.vtx.size() - 1;\n+    while(true)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#discussion_r212727496",
      "id" : 212727496,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjcyNzQ5Ng==",
      "original_commit_id" : "37562b7e364022b66c073a207aa38428f7d8b4fa",
      "original_position" : 219,
      "path" : "src/index/utxoscriptindex.cpp",
      "position" : 218,
      "pull_request_review_id" : 149424924,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14035",
      "updated_at" : "2018-11-13T18:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212727496",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14035#discussion_r212759261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14035"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212759261"
         }
      },
      "author_association" : "NONE",
      "body" : "Loop needs to execute for `i==0` too (that is block's tx with index 0); `i` is unsigned so after decrementation it overflows and such loop would be indefinite",
      "commit_id" : "34c8e8e7cff4fa79264c510655f2320ac80e1513",
      "created_at" : "2018-08-24T21:25:52Z",
      "diff_hunk" : "@@ -0,0 +1,455 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/utxoscriptindex.h>\n+#include <util.h>\n+#include <script/standard.h>\n+#include <pubkey.h>\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <txdb.h>\n+#include <ui_interface.h>\n+\n+#include<boost/thread.hpp>\n+\n+\n+std::unique_ptr<UtxoScriptIndex> g_utxoscriptindex;\n+\n+static ScriptHash ScriptIndexHash(const CScript& in){\n+    return Hash160(in.begin(), in.end());\n+}\n+\n+class UtxoScriptIndexDBCursor\n+{\n+public:\n+    UtxoScriptIndexDBCursor(CDBIterator* cursor) : pcursor(cursor){}\n+\n+    bool GetKey(ScriptHash& key);\n+    bool GetValue(SerializableUtxoSet& utxoSet);\n+    unsigned int GetValueSize() const;\n+\n+    bool Valid() const;\n+    void Next();\n+\n+    std::pair<char, ScriptHash> keyTmp;\n+    std::unique_ptr<CDBIterator> pcursor;\n+};\n+\n+class UtxoScriptIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+\n+    bool WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos);\n+    bool ReadUtxos(const ScriptHash&, SerializableUtxoSet& utxoSet);\n+\n+    UtxoScriptIndexDBCursor* Cursor() const;\n+};\n+\n+UtxoScriptIndex::DB::DB(size_t nCacheSize, bool fMemory, bool fWipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"coinsbyscript\", nCacheSize, fMemory, fWipe)\n+{\n+\n+}\n+\n+bool UtxoScriptIndex::DB::WriteUtxos(std::map<ScriptHash, SerializableUtxoSet>& scriptUtxos)\n+{\n+    CDBBatch batch(*this);\n+    for(const auto& scriptUtxo: scriptUtxos)\n+    {\n+        auto key = std::make_pair(DB_UTXO, std::ref(scriptUtxo.first));\n+        auto& value = scriptUtxo.second;\n+        if(scriptUtxo.second.empty())\n+            batch.Erase(key);\n+        else\n+            batch.Write(key,value);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool UtxoScriptIndex::DB::ReadUtxos(const ScriptHash& scriptId, SerializableUtxoSet& utxoSet)\n+{\n+    return Read(std::make_pair(DB_UTXO, scriptId), utxoSet);\n+}\n+\n+UtxoScriptIndexDBCursor* UtxoScriptIndex::DB::Cursor() const\n+{\n+    UtxoScriptIndexDBCursor* cursor = new UtxoScriptIndexDBCursor(\n+                                    const_cast<CDBWrapper*>(\n+                                        static_cast<const CDBWrapper*>(this))->NewIterator());\n+    cursor->pcursor->Seek(DB_UTXO);\n+    if(!(cursor->pcursor->Valid()))\n+        cursor->keyTmp.first = 0;\n+    else\n+        cursor->pcursor->GetKey(cursor->keyTmp);\n+    return cursor;\n+}\n+\n+bool UtxoScriptIndexDBCursor::GetKey(ScriptHash& key)\n+{\n+    if(keyTmp.first == DB_UTXO)\n+    {\n+        key = keyTmp.second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool UtxoScriptIndexDBCursor::GetValue(SerializableUtxoSet& utxoSet)\n+{\n+    return pcursor->GetValue(utxoSet);\n+}\n+\n+bool UtxoScriptIndexDBCursor::Valid() const\n+{\n+    return keyTmp.first == DB_UTXO;\n+}\n+\n+void UtxoScriptIndexDBCursor::Next()\n+{\n+    pcursor->Next();\n+    if(pcursor->Valid() && pcursor->GetKey(keyTmp))\n+        return;\n+    else\n+        keyTmp.first = 0;\n+}\n+\n+UtxoScriptIndex::UtxoScriptIndex(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    m_db(std::move(MakeUnique<UtxoScriptIndex::DB>(n_cache_size, f_memory, f_wipe)))\n+{\n+\n+}\n+\n+UtxoScriptIndex::~UtxoScriptIndex() {\n+    UnregisterValidationInterface(this);\n+}\n+\n+void UtxoScriptIndex::Start()\n+{\n+    RegisterValidationInterface(this);\n+}\n+\n+void UtxoScriptIndex::TransactionAddedToMempool(const CTransactionRef &ptxn) {\n+    LOCK(cs_utxoCacheMempool);\n+    const CTransaction &tx = *ptxn;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++)\n+    {\n+        if (tx.vout[i].IsNull() || tx.vout[i].scriptPubKey.IsUnspendable())\n+            continue;\n+\n+        auto utxoKey = ScriptIndexHash(tx.vout[i].scriptPubKey);\n+        utxoCacheMempool[utxoKey].insert(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n+    }\n+}\n+\n+void UtxoScriptIndex::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n+    LOCK(cs_utxoCacheMempool);\n+    const CTransaction &tx = *ptx;\n+    for (unsigned int i = 0; i < tx.vout.size(); i++)\n+    {\n+        if (tx.vout[i].IsNull() || tx.vout[i].scriptPubKey.IsUnspendable())\n+            continue;\n+\n+        std::map<ScriptHash, SerializableUtxoSet>::iterator it = utxoCacheMempool.find(ScriptIndexHash(tx.vout[i].scriptPubKey));\n+\n+        if (it != utxoCacheMempool.end())\n+        {\n+            it->second.erase(COutPoint(tx.GetHash(), static_cast<uint32_t>(i)));\n+            if (it->second.empty())\n+                utxoCacheMempool.erase(it);\n+        }\n+    }\n+}\n+\n+void UtxoScriptIndex::BlockConnected(const std::shared_ptr<const CBlock> &block,\n+                                     const CBlockIndex *pindex,\n+                                     const std::shared_ptr<const CBlockUndo> &blockundo,\n+                                     const std::vector<CTransactionRef> &txnConflicted)\n+{\n+    {\n+        LOCK(cs_utxoCache);\n+        removeSpentUtxosOnTipConnected(*block, *blockundo);\n+        addNewUtxosOnTipConnected(*block);\n+    }\n+    WriteBestBlock(block->GetHash());\n+}\n+\n+void UtxoScriptIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block,\n+                                        const std::shared_ptr<const CBlockUndo> &blockundo) {\n+    assert(block->vtx.size() > 0);\n+    LOCK(cs_utxoCache);\n+    restoreSpentUtxosOnTipDisconnected(*block, *blockundo);\n+    removeUtxosOnTipDisconnected(*block);\n+}\n+\n+BaseIndex::DB& UtxoScriptIndex::GetDB() const { return *m_db; }\n+\n+void UtxoScriptIndex::removeUtxo(const CTxOut& txout, const COutPoint outpoint)\n+{\n+    if(txout.IsNull() || txout.scriptPubKey.IsUnspendable())\n+        return;\n+    const ScriptHash utxoCacheKey = ScriptIndexHash(txout.scriptPubKey);\n+    loadToCache(utxoCacheKey);\n+    if(utxoCache.count(utxoCacheKey) == 0)\n+        return;\n+    SerializableUtxoSet& utxoCacheSet = utxoCache.at(utxoCacheKey);\n+        utxoCacheSet.erase(outpoint);\n+}\n+\n+void UtxoScriptIndex::removeSpentUtxosOnTipConnected(const CBlock& block, const CBlockUndo& blockundo)\n+{\n+\n+    for(unsigned int i = 1; i < block.vtx.size(); ++i)\n+    {\n+        for(unsigned int j = 0; j < (block.vtx[i])->vin.size(); ++j)\n+        {\n+            removeUtxo(blockundo.vtxundo[i-1].vprevout[j].out,\n+                       block.vtx[i]->vin[j].prevout);\n+        }\n+    }\n+}\n+\n+void UtxoScriptIndex::removeUtxosOnTipDisconnected(const CBlock& block)\n+{\n+    if(block.vtx.size() == 0)\n+        return;\n+\n+    unsigned int i = block.vtx.size() - 1;\n+    while(true)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#discussion_r212759261",
      "id" : 212759261,
      "in_reply_to_id" : 212727496,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMjc1OTI2MQ==",
      "original_commit_id" : "37562b7e364022b66c073a207aa38428f7d8b4fa",
      "original_position" : 219,
      "path" : "src/index/utxoscriptindex.cpp",
      "position" : 218,
      "pull_request_review_id" : 149465173,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14035",
      "updated_at" : "2018-11-13T18:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/212759261",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/42271287?v=4",
         "events_url" : "https://api.github.com/users/mgrychow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mgrychow/followers",
         "following_url" : "https://api.github.com/users/mgrychow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mgrychow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mgrychow",
         "id" : 42271287,
         "login" : "mgrychow",
         "node_id" : "MDQ6VXNlcjQyMjcxMjg3",
         "organizations_url" : "https://api.github.com/users/mgrychow/orgs",
         "received_events_url" : "https://api.github.com/users/mgrychow/received_events",
         "repos_url" : "https://api.github.com/users/mgrychow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mgrychow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mgrychow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-09-12T17:12:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#issuecomment-420726598",
      "id" : 420726598,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14035",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMDcyNjU5OA==",
      "updated_at" : "2018-09-12T17:12:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/420726598",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-11-05T11:17:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#issuecomment-435839636",
      "id" : 435839636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14035",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNTgzOTYzNg==",
      "updated_at" : "2018-11-05T11:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/435839636",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Rebased",
      "created_at" : "2018-11-14T10:39:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#issuecomment-438617351",
      "id" : 438617351,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14035",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzODYxNzM1MQ==",
      "updated_at" : "2018-11-14T10:39:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/438617351",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/42271287?v=4",
         "events_url" : "https://api.github.com/users/mgrychow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mgrychow/followers",
         "following_url" : "https://api.github.com/users/mgrychow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mgrychow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mgrychow",
         "id" : 42271287,
         "login" : "mgrychow",
         "node_id" : "MDQ6VXNlcjQyMjcxMjg3",
         "organizations_url" : "https://api.github.com/users/mgrychow/orgs",
         "received_events_url" : "https://api.github.com/users/mgrychow/received_events",
         "repos_url" : "https://api.github.com/users/mgrychow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mgrychow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mgrychow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-12-29T16:28:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#issuecomment-450504123",
      "id" : 450504123,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14035",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MDUwNDEyMw==",
      "updated_at" : "2018-12-29T16:28:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450504123",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",
      "created_at" : "2019-04-19T17:37:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14035#issuecomment-484966847",
      "id" : 484966847,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14035",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NDk2Njg0Nw==",
      "updated_at" : "2019-04-19T17:37:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/484966847",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
