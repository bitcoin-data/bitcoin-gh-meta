[
   {
      "author_association" : "MEMBER",
      "body" : "Concept/approach ACK",
      "created_at" : "2022-04-07T07:20:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1091167069",
      "id" : 1091167069,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24794",
      "node_id" : "IC_kwDOABII585BCeNd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091167069/reactions"
      },
      "updated_at" : "2022-04-07T07:20:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091167069",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844844754"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844844754"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No need to call out to pip here, Python provides introspection for this, but I think even this would work:\r\n```python3\r\nfor dep in DEPS:\r\n    try:\r\n        __import__(dep)\r\n    except ImportError:\r\n        print(f\"Skipping Python linting since {dep} is not installed.\")\r\n        exit(0)\r\n```",
      "commit_id" : "28e7af46b177d1d81a12e306994aac91e765b963",
      "created_at" : "2022-04-07T08:10:23Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name â¦ referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    list_out = subprocess.check_output(['pip3', 'list'], stderr=subprocess.DEVNULL).decode('utf-8')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844844754",
      "id" : 844844754,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yW07S",
      "original_commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "original_line" : 94,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "test/lint/lint-python.py",
      "position" : null,
      "pull_request_review_id" : 934650614,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844844754/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T11:16:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844844754",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think it's slightly weird that `pyzmq` is required for linting. I understand why this is though, avoiding that would require a stub library and isn't in scope here.",
      "created_at" : "2022-04-07T08:13:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1091268713",
      "id" : 1091268713,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24794",
      "node_id" : "IC_kwDOABII585BC3Bp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091268713/reactions"
      },
      "updated_at" : "2022-04-07T08:13:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091268713",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844848504"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844848504"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unrelated: If run outside the CI runner, this will likely result in `/test/.mypy_cache`, which may not be wanted?",
      "commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "created_at" : "2022-04-07T08:14:34Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844848504",
      "id" : 844848504,
      "line" : 16,
      "node_id" : "PRRC_kwDOABII584yW114",
      "original_commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "original_line" : 16,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "test/lint/lint-python.py",
      "position" : 16,
      "pull_request_review_id" : 934655954,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844848504/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T08:18:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844848504",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844848694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844848694"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    'W606',   # 'async' and 'await' are reserved keywords starting with Python 3.7\r\n```\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/24766#discussion_r843558638",
      "commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "created_at" : "2022-04-07T08:14:46Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name â¦ referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844848694",
      "id" : 844848694,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII584yW142",
      "original_commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "original_line" : 89,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "test/lint/lint-python.py",
      "position" : 89,
      "pull_request_review_id" : 934655954,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844848694/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-07T08:18:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844848694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844851739"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844851739"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        subprocess.check_call(mypy_args)\r\n    except subprocess.CalledProcessError:\r\n        exit(1)\r\n```\r\n\r\nHow is this different from the shorter alternative?\r\n\r\nSee:\r\n* https://docs.python.org/3/library/subprocess.html#subprocess.check_call\r\n* https://github.com/bitcoin/bitcoin/pull/24766#discussion_r843559966",
      "commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "created_at" : "2022-04-07T08:17:56Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name â¦ referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    list_out = subprocess.check_output(['pip3', 'list'], stderr=subprocess.DEVNULL).decode('utf-8')\n+\n+    for dep in DEPS:\n+        if dep not in list_out:\n+            print(f\"Skipping Python linting since {dep} is not installed.\")\n+            exit(0)\n+\n+\n+def main():\n+    check_dependencies()\n+\n+    if len(sys.argv) > 1:\n+        flake8_files = sys.argv[1:]\n+    else:\n+        files_args = ['git', 'ls-files', '*.py']\n+        flake8_files = subprocess.check_output(files_args).decode(\"utf-8\").splitlines()\n+\n+    flake8_args = ['flake8', '--ignore=B,C,E,F,I,N,W', f'--select={ENABLED}'] + flake8_files\n+    flake8_env = os.environ.copy()\n+    flake8_env[\"PYTHONWARNINGS\"] = \"ignore\"\n+\n+    try:\n+        flake8_out = subprocess.run(flake8_args, stdout=subprocess.PIPE, env=flake8_env)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)\n+\n+    print(flake8_out.stdout.decode(\"utf-8\"), end=\"\")\n+\n+    mypy_files = subprocess.check_output(FILES_ARGS).decode(\"utf-8\").splitlines()\n+    mypy_args = ['mypy', '--show-error-codes'] + mypy_files\n+\n+    try:\n+        mypy_out = subprocess.check_output(mypy_args, stderr=subprocess.STDOUT)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r844851739",
      "id" : 844851739,
      "line" : 130,
      "node_id" : "PRRC_kwDOABII584yW2ob",
      "original_commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "original_line" : 130,
      "original_position" : 130,
      "original_start_line" : 127,
      "path" : "test/lint/lint-python.py",
      "position" : 130,
      "pull_request_review_id" : 934655954,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844851739/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 127,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-07T08:18:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/844851739",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I was half hoping we could just call the [flake8 api directly](https://flake8.pycqa.org/en/latest/user/python-api.html), and check our files, rather than just moving to wrapping subprocess invocations of flake8 in python instead of bash. Maybe something for the future.",
      "created_at" : "2022-04-07T11:58:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1091646967",
      "id" : 1091646967,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24794",
      "node_id" : "IC_kwDOABII585BETX3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091646967/reactions"
      },
      "updated_at" : "2022-04-07T11:58:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1091646967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I was half hoping we could just call the [flake8 api directly](https://flake8.pycqa.org/en/latest/user/python-api.html), and check our files, rather than just moving to wrapping subprocess invocations of flake8 in python instead of bash. Maybe something for the future.\r\n\r\nThis sounds neat for a follow-up, but personally at least I think as a first step calling out to tools like `flake8` is fine. The biggest issue with subprocess is shell ambiguity (so avoid `shell=True`), and basic system commands that may differ. ",
      "created_at" : "2022-04-08T11:45:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1092776603",
      "id" : 1092776603,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24794",
      "node_id" : "IC_kwDOABII585BInKb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1092776603/reactions"
      },
      "updated_at" : "2022-04-08T11:45:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1092776603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744892"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yepp, I found that the canonical way seems to be using `pkg_resources`. I implemented it using that.",
      "commit_id" : "28e7af46b177d1d81a12e306994aac91e765b963",
      "created_at" : "2022-04-17T11:51:29Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name â¦ referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    list_out = subprocess.check_output(['pip3', 'list'], stderr=subprocess.DEVNULL).decode('utf-8')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744892",
      "id" : 851744892,
      "in_reply_to_id" : 844844754,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yxJh8",
      "original_commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "original_line" : 94,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "test/lint/lint-python.py",
      "position" : null,
      "pull_request_review_id" : 943940023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744892/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-17T11:51:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744897"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, I noticed this as well but it is the existing behavior. I used `getenv` with the empty fallback because I wanted to potentially change it to a better one but forgot to think about it. What would you suggest as a better fallback?",
      "commit_id" : "28e7af46b177d1d81a12e306994aac91e765b963",
      "created_at" : "2022-04-17T11:51:37Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744897",
      "id" : 851744897,
      "in_reply_to_id" : 844848504,
      "line" : 17,
      "node_id" : "PRRC_kwDOABII584yxJiB",
      "original_commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "original_line" : 17,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "test/lint/lint-python.py",
      "position" : 17,
      "pull_request_review_id" : 943940031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744897/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-17T11:51:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744907"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "28e7af46b177d1d81a12e306994aac91e765b963",
      "created_at" : "2022-04-17T11:51:41Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name â¦ referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744907",
      "id" : 851744907,
      "in_reply_to_id" : 844848694,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yxJiL",
      "original_commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "original_line" : 89,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "test/lint/lint-python.py",
      "position" : null,
      "pull_request_review_id" : 943940040,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744907/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-17T11:51:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744916"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744916"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, I tried this initially with `check_call` but in my testing I didn't seem to get the errors to my console. But I guess I did something wrong because with your code it seems to work now. Changed.",
      "commit_id" : "28e7af46b177d1d81a12e306994aac91e765b963",
      "created_at" : "2022-04-17T11:51:46Z",
      "diff_hunk" : "@@ -0,0 +1,136 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name â¦ referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606'   # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    list_out = subprocess.check_output(['pip3', 'list'], stderr=subprocess.DEVNULL).decode('utf-8')\n+\n+    for dep in DEPS:\n+        if dep not in list_out:\n+            print(f\"Skipping Python linting since {dep} is not installed.\")\n+            exit(0)\n+\n+\n+def main():\n+    check_dependencies()\n+\n+    if len(sys.argv) > 1:\n+        flake8_files = sys.argv[1:]\n+    else:\n+        files_args = ['git', 'ls-files', '*.py']\n+        flake8_files = subprocess.check_output(files_args).decode(\"utf-8\").splitlines()\n+\n+    flake8_args = ['flake8', '--ignore=B,C,E,F,I,N,W', f'--select={ENABLED}'] + flake8_files\n+    flake8_env = os.environ.copy()\n+    flake8_env[\"PYTHONWARNINGS\"] = \"ignore\"\n+\n+    try:\n+        flake8_out = subprocess.run(flake8_args, stdout=subprocess.PIPE, env=flake8_env)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)\n+\n+    print(flake8_out.stdout.decode(\"utf-8\"), end=\"\")\n+\n+    mypy_files = subprocess.check_output(FILES_ARGS).decode(\"utf-8\").splitlines()\n+    mypy_args = ['mypy', '--show-error-codes'] + mypy_files\n+\n+    try:\n+        mypy_out = subprocess.check_output(mypy_args, stderr=subprocess.STDOUT)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851744916",
      "id" : 851744916,
      "in_reply_to_id" : 844851739,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yxJiU",
      "original_commit_id" : "65e36e1263e53e34eb53a7ca7da3f6e2457f594a",
      "original_line" : 130,
      "original_position" : 130,
      "original_start_line" : 127,
      "path" : "test/lint/lint-python.py",
      "position" : null,
      "pull_request_review_id" : 943940051,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744916/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-17T11:51:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851744916",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think it's slightly weird that `pyzmq` is required for linting. I understand why this is though, avoiding that would require a stub library and isn't in scope here.\r\n\r\nI am slightly unsure if you would like me to make a change or not, but I think not. Otherwise, let me know :)\r\n\r\nI was thinking about this quite a bit when initially putting it on the list but after seeing the errors produced when `pyzmq` is missing I thought it would be better to make this explicit because otherwise it might lead to people wasting time debugging in the wrong direction.",
      "created_at" : "2022-04-17T11:55:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1100861029",
      "id" : 1100861029,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24794",
      "node_id" : "IC_kwDOABII585Bnc5l",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100861029/reactions"
      },
      "updated_at" : "2022-04-17T11:55:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100861029",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed review comments.",
      "created_at" : "2022-04-17T11:55:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1100861126",
      "id" : 1100861126,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24794",
      "node_id" : "IC_kwDOABII585Bnc7G",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100861126/reactions"
      },
      "updated_at" : "2022-04-17T11:55:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100861126",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851751520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851751520"
         }
      },
      "author_association" : "MEMBER",
      "body" : "how is this different from\r\n\r\n```suggestion\r\n    try:\r\n        subprocess.check_call(flake8_args, env=flake8_env)\r\n    except subprocess.CalledProcessError:\r\n        exit(1)\r\n```\r\n\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/24794#discussion_r844851739",
      "commit_id" : "28e7af46b177d1d81a12e306994aac91e765b963",
      "created_at" : "2022-04-17T12:48:58Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import pkg_resources\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name â¦ referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606,'  # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    working_set = {pkg.key for pkg in pkg_resources.working_set}\n+\n+    for dep in DEPS:\n+        if dep not in working_set:\n+            print(f\"Skipping Python linting since {dep} is not installed.\")\n+            exit(0)\n+\n+\n+def main():\n+    check_dependencies()\n+\n+    if len(sys.argv) > 1:\n+        flake8_files = sys.argv[1:]\n+    else:\n+        files_args = ['git', 'ls-files', '*.py']\n+        flake8_files = subprocess.check_output(files_args).decode(\"utf-8\").splitlines()\n+\n+    flake8_args = ['flake8', '--ignore=B,C,E,F,I,N,W', f'--select={ENABLED}'] + flake8_files\n+    flake8_env = os.environ.copy()\n+    flake8_env[\"PYTHONWARNINGS\"] = \"ignore\"\n+\n+    try:\n+        flake8_out = subprocess.run(flake8_args, stdout=subprocess.PIPE, env=flake8_env)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)\n+\n+    print(flake8_out.stdout.decode(\"utf-8\"), end=\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851751520",
      "id" : 851751520,
      "line" : 122,
      "node_id" : "PRRC_kwDOABII584yxLJg",
      "original_commit_id" : "28e7af46b177d1d81a12e306994aac91e765b963",
      "original_line" : 122,
      "original_position" : 122,
      "original_start_line" : 116,
      "path" : "test/lint/lint-python.py",
      "position" : 122,
      "pull_request_review_id" : 943945397,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851751520/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 116,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-17T12:48:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851751520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851813125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851813125"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Looking at the docs I got the impression that only `run` allowed to pass in a `env` argument but it seems it works and is just not explicitly named for `check_call`. So I changed this.",
      "commit_id" : "47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "created_at" : "2022-04-17T22:56:10Z",
      "diff_hunk" : "@@ -0,0 +1,134 @@\n+#!/usr/bin/env python3\n+#\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+Check for specified flake8 and mypy warnings in python files.\n+\"\"\"\n+\n+import os\n+import pkg_resources\n+import subprocess\n+import sys\n+\n+DEPS = ['flake8', 'mypy', 'pyzmq']\n+MYPY_CACHE_DIR = f\"{os.getenv('BASE_ROOT_DIR', '')}/test/.mypy_cache\"\n+FILES_ARGS = ['git', 'ls-files', 'test/functional/*.py', 'contrib/devtools/*.py']\n+\n+ENABLED = (\n+    'E101,'  # indentation contains mixed spaces and tabs\n+    'E112,'  # expected an indented block\n+    'E113,'  # unexpected indentation\n+    'E115,'  # expected an indented block (comment)\n+    'E116,'  # unexpected indentation (comment)\n+    'E125,'  # continuation line with same indent as next logical line\n+    'E129,'  # visually indented line with same indent as next logical line\n+    'E131,'  # continuation line unaligned for hanging indent\n+    'E133,'  # closing bracket is missing indentation\n+    'E223,'  # tab before operator\n+    'E224,'  # tab after operator\n+    'E242,'  # tab after ','\n+    'E266,'  # too many leading '#' for block comment\n+    'E271,'  # multiple spaces after keyword\n+    'E272,'  # multiple spaces before keyword\n+    'E273,'  # tab after keyword\n+    'E274,'  # tab before keyword\n+    'E275,'  # missing whitespace after keyword\n+    'E304,'  # blank lines found after function decorator\n+    'E306,'  # expected 1 blank line before a nested definition\n+    'E401,'  # multiple imports on one line\n+    'E402,'  # module level import not at top of file\n+    'E502,'  # the backslash is redundant between brackets\n+    'E701,'  # multiple statements on one line (colon)\n+    'E702,'  # multiple statements on one line (semicolon)\n+    'E703,'  # statement ends with a semicolon\n+    'E711,'  # comparison to None should be 'if cond is None:'\n+    'E714,'  # test for object identity should be \"is not\"\n+    'E721,'  # do not compare types, use \"isinstance()\"\n+    'E742,'  # do not define classes named \"l\", \"O\", or \"I\"\n+    'E743,'  # do not define functions named \"l\", \"O\", or \"I\"\n+    'E901,'  # SyntaxError: invalid syntax\n+    'E902,'  # TokenError: EOF in multi-line string\n+    'F401,'  # module imported but unused\n+    'F402,'  # import module from line N shadowed by loop variable\n+    'F403,'  # 'from foo_module import *' used; unable to detect undefined names\n+    'F404,'  # future import(s) name after other statements\n+    'F405,'  # foo_function may be undefined, or defined from star imports: bar_module\n+    'F406,'  # \"from module import *\" only allowed at module level\n+    'F407,'  # an undefined __future__ feature name was imported\n+    'F601,'  # dictionary key name repeated with different values\n+    'F602,'  # dictionary key variable name repeated with different values\n+    'F621,'  # too many expressions in an assignment with star-unpacking\n+    'F622,'  # two or more starred expressions in an assignment (a, *b, *c = d)\n+    'F631,'  # assertion test is a tuple, which are always True\n+    'F632,'  # use ==/!= to compare str, bytes, and int literals\n+    'F701,'  # a break statement outside of a while or for loop\n+    'F702,'  # a continue statement outside of a while or for loop\n+    'F703,'  # a continue statement in a finally block in a loop\n+    'F704,'  # a yield or yield from statement outside of a function\n+    'F705,'  # a return statement with arguments inside a generator\n+    'F706,'  # a return statement outside of a function/method\n+    'F707,'  # an except: block as not the last exception handler\n+    'F811,'  # redefinition of unused name from line N\n+    'F812,'  # list comprehension redefines 'foo' from line N\n+    'F821,'  # undefined name 'Foo'\n+    'F822,'  # undefined name name in __all__\n+    'F823,'  # local variable name â¦ referenced before assignment\n+    'F831,'  # duplicate argument name in function definition\n+    'F841,'  # local variable 'foo' is assigned to but never used\n+    'W191,'  # indentation contains tabs\n+    'W291,'  # trailing whitespace\n+    'W292,'  # no newline at end of file\n+    'W293,'  # blank line contains whitespace\n+    'W601,'  # .has_key() is deprecated, use \"in\"\n+    'W602,'  # deprecated form of raising exception\n+    'W603,'  # \"<>\" is deprecated, use \"!=\"\n+    'W604,'  # backticks are deprecated, use \"repr()\"\n+    'W605,'  # invalid escape sequence \"x\"\n+    'W606,'  # 'async' and 'await' are reserved keywords starting with Python 3.7\n+)\n+\n+\n+def check_dependencies():\n+    working_set = {pkg.key for pkg in pkg_resources.working_set}\n+\n+    for dep in DEPS:\n+        if dep not in working_set:\n+            print(f\"Skipping Python linting since {dep} is not installed.\")\n+            exit(0)\n+\n+\n+def main():\n+    check_dependencies()\n+\n+    if len(sys.argv) > 1:\n+        flake8_files = sys.argv[1:]\n+    else:\n+        files_args = ['git', 'ls-files', '*.py']\n+        flake8_files = subprocess.check_output(files_args).decode(\"utf-8\").splitlines()\n+\n+    flake8_args = ['flake8', '--ignore=B,C,E,F,I,N,W', f'--select={ENABLED}'] + flake8_files\n+    flake8_env = os.environ.copy()\n+    flake8_env[\"PYTHONWARNINGS\"] = \"ignore\"\n+\n+    try:\n+        flake8_out = subprocess.run(flake8_args, stdout=subprocess.PIPE, env=flake8_env)\n+    except subprocess.CalledProcessError as e:\n+        print(e.output.decode(\"utf-8\"), end=\"\")\n+        exit(1)\n+\n+    print(flake8_out.stdout.decode(\"utf-8\"), end=\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#discussion_r851813125",
      "id" : 851813125,
      "in_reply_to_id" : 851751520,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yxaMF",
      "original_commit_id" : "28e7af46b177d1d81a12e306994aac91e765b963",
      "original_line" : 122,
      "original_position" : 122,
      "original_start_line" : 116,
      "path" : "test/lint/lint-python.py",
      "position" : null,
      "pull_request_review_id" : 943992088,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24794",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851813125/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-17T22:56:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851813125",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK 47b66ac4acd148da9fd0d894574f8bb3b3b33368",
      "created_at" : "2022-04-18T16:50:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24794#issuecomment-1101560061",
      "id" : 1101560061,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24794",
      "node_id" : "IC_kwDOABII585BqHj9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101560061/reactions"
      },
      "updated_at" : "2022-04-18T16:50:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101560061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
