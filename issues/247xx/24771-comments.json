[
   {
      "author_association" : "MEMBER",
      "body" : "When releasing fully statically built binaries (e.g. #18110), the set of syscalls would be contained for that specific build. This would make the problem at least theoretically manageable.\r\n\r\nStill I'm not sure bitcoin core should be in the business of micro-managing syscalls. It's scope creep to Linux kernel internals.\r\n",
      "created_at" : "2022-04-05T10:42:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24771#issuecomment-1088545686",
      "id" : 1088545686,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24771",
      "node_id" : "IC_kwDOABII585A4eOW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1088545686/reactions"
      },
      "updated_at" : "2022-04-05T10:42:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1088545686",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems to me problem is that practicalswift was made syscall list too restrictive, whitelisting specific calls that threads have made in the past, instead of whitelisting complete groups of calls. For example whitelisting [`fchown`](https://github.com/bitcoin/bitcoin/blob/ee9af95f095474641400469a2940e0fd4a052ca3/src/util/syscall_sandbox.cpp#L585) but not whitelisting `chown` `fchownat` or `lchown`.\r\n\r\nIf we whitelisted whole groups of syscalls like firejail (https://github.com/netblue30/firejail/blob/master/etc/templates/syscalls.txt) instead of individual syscalls, it seems like it would solve this problem. It looks like most or all of the linked issues would have been solved using firejail's group definitions.\r\n\r\n> The whole idea of a syscall sandbox is fundamentally a layer violation. It's untenable when dynamic linking is involved, or dependencies we don't know A to Z, with evolving user-kernel space APIs.\r\n\r\nI think it is pretty common for security features to be layer violations, canonical example being network firewalls. And I think it should be pretty easy to sandbox normal libraries we use like zmq or leveldb. But Qt is a special case and a massive library that can't be reasonably sandboxed by aborting every time an unexpected syscall is made. A more reasonable approach to sandboxing Qt would be to return -1 for disallowed syscalls and log them, instead of aborting the application. It would also be reasonable to just not restrict what syscalls the GUI thread can make and rely on higher level sandboxing (bubblewrap, etc)",
      "created_at" : "2022-04-05T12:39:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24771#issuecomment-1088653914",
      "id" : 1088653914,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24771",
      "node_id" : "IC_kwDOABII585A44pa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1088653914/reactions"
      },
      "updated_at" : "2022-04-05T12:39:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1088653914",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Right. It would be fine to leave it up to the OS, or distribution, firejail, bubblewrap, apparmor, etc. What I'm less convinced of is having this in bitcoin core.\r\n\r\n> And I think it should be pretty easy to sandbox normal libraries we use like zmq or leveldb. \r\n\r\nMaybe on some OSes. Linux has a huge number of system calls, though, and it's completely unclear to me what is used when. It also varies over glibc versions, with some existing only for compatibility, for example.\r\n\r\n> If we whitelisted whole groups of syscalls like firejail (https://github.com/netblue30/firejail/blob/master/etc/templates/syscalls.txt) instead of individual syscalls\r\n\r\nSure, that's the idea, the problem is that it's a moving target.\r\n\r\nAnyway, if people want to keep maintaining this as an experimental feature that's fine with me. But I'd really not like to enable it by default, it would create many more issues than it would solve, I definitely don't want to handle crash issues or network DoS issues created by someone forgetting to add the zillionth syscall.\r\n\r\n",
      "created_at" : "2022-04-05T12:45:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24771#issuecomment-1088659457",
      "id" : 1088659457,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24771",
      "node_id" : "IC_kwDOABII585A46AB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1088659457/reactions"
      },
      "updated_at" : "2022-04-05T12:57:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1088659457",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Maybe little bit out of topic but related, and hopefully someone would be interested, also maybe usable later:\r\n\r\nI was also many times thinking about not only bitcoin wallet sandboxing. For example: having multiple D/QT wallets running and if one is malicious/has-bug and process has access to user files, it could lead not only to loosing all wallet dat, also revealing some more sensitive data. As I was more and more interested in using direct wallet-to-wallet atomic-swap trading/exchange platforms, so securing those wallets was crucial, not only sandboxing wallets from each other also protecting users privacy. So im trying to create scripts that securely(sandbox)/privately(tor) way would be able to build wallets, manage wallets, run wallets, also create and manage atomic-swap based liquidity pools. Still working on finalization/tests to upload also source. For now only readme/overview and two pdfs presentations. https://github.com/nnmfnwl7/cc.setup.helper.debian   ",
      "created_at" : "2022-04-20T12:46:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24771#issuecomment-1103891218",
      "id" : 1103891218,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24771",
      "node_id" : "IC_kwDOABII585BzAsS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103891218/reactions"
      },
      "updated_at" : "2022-04-20T12:46:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103891218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/57098026?v=4",
         "events_url" : "https://api.github.com/users/nnmfnwl7/events{/privacy}",
         "followers_url" : "https://api.github.com/users/nnmfnwl7/followers",
         "following_url" : "https://api.github.com/users/nnmfnwl7/following{/other_user}",
         "gists_url" : "https://api.github.com/users/nnmfnwl7/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/nnmfnwl7",
         "id" : 57098026,
         "login" : "nnmfnwl7",
         "node_id" : "MDQ6VXNlcjU3MDk4MDI2",
         "organizations_url" : "https://api.github.com/users/nnmfnwl7/orgs",
         "received_events_url" : "https://api.github.com/users/nnmfnwl7/received_events",
         "repos_url" : "https://api.github.com/users/nnmfnwl7/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/nnmfnwl7/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/nnmfnwl7/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/nnmfnwl7"
      }
   }
]
