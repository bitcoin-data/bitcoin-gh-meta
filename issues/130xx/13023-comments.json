[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like there's an alphabetic ordering here that may be good to preserve.",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-18T20:11:28Z",
      "diff_hunk" : "@@ -87,7 +87,8 @@ BITCOIN_TESTS =\\\n   test/txvalidationcache_tests.cpp \\\n   test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\\n-  test/util_tests.cpp\n+  test/util_tests.cpp \\\n+  test/validation_block_tests.cpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554249",
      "id" : 182554249,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 6,
      "path" : "src/Makefile.test.include",
      "position" : null,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554249",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554703"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> should *be* required here",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-18T20:13:05Z",
      "diff_hunk" : "@@ -112,4 +112,46 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n \n+BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n+{\n+    CScheduler scheduler;\n+\n+    // each queue should be well ordered with respect to itself but not other queues\n+    SingleThreadedSchedulerClient queue1(&scheduler);\n+    SingleThreadedSchedulerClient queue2(&scheduler);\n+\n+    // create more threads than queues\n+    // if the queues only permit execution of one task at once then\n+    // the extra threads should effectively be doing nothing\n+    // if they don't we'll get out of order behaviour\n+    boost::thread_group threads;\n+    for (int i = 0; i < 5; i++) {\n+        threads.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+    }\n+\n+    // these are not atomic, if SinglethreadedSchedulerClient prevents\n+    // parallel execution at the queue level no synchronization should required here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182554703",
      "id" : 182554703,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 22,
      "path" : "src/test/scheduler_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182554703",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182557843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182557843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be worth parameterizing `Block` with a `bool make_invalid` option to avoid the duplication here, but that's your call.",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-18T20:23:58Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182557843",
      "id" : 182557843,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 86,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182557843",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know we don't have columnar limits in the styleguide, but this line's pretty long...",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-18T20:24:55Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558115",
      "id" : 182558115,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 91,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558115",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558380"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Braces needed.",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-18T20:25:49Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182558380",
      "id" : 182558380,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 100,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113373610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182558380",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577318"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "clang-format would put those in I believe",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-18T21:37:33Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577318",
      "id" : 182577318,
      "in_reply_to_id" : 182558380,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 100,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113401722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577318",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577357"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Calling this `ignored` might be more straightforward",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-18T21:37:45Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)\n+        BuildChain(pblock->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\n+\n+    if (gen_fork) {\n+        blocks.push_back(GoodBlock(root));\n+        BuildChain(blocks.back()->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n+{\n+    // build a large-ish chain that's likely to have some forks\n+    std::vector<std::shared_ptr<const CBlock>> blocks;\n+    while (blocks.size() < 50) {\n+        blocks.clear();\n+        BuildChain(Params().GenesisBlock().GetHash(), 100, 5, 10, 5000, blocks);\n+    }\n+\n+    CValidationState state;\n+    std::vector<CBlockHeader> headers;\n+    std::transform(blocks.begin(), blocks.end(), std::back_inserter(headers), [](std::shared_ptr<const CBlock> b) { return b->GetBlockHeader(); });\n+\n+    // Process all the headers so we understand the toplogy of the chain\n+    BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n+\n+    // subscribe to events (this subscriber will validate event ordering)\n+    TestSubscriber sub(chainActive.Tip()->GetBlockHash());\n+    RegisterValidationInterface(&sub);\n+\n+    // create a bunch of threads that repeatedly process a block generated above at random\n+    // this will create parallelism and randomness inside validation - the ValidationInterface\n+    // will subscribe to events generated during block validation and assert on ordering invariance\n+    boost::thread_group threads;\n+    for (int i = 0; i < 10; i++) {\n+        threads.create_thread([&blocks]() {\n+            bool blah;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r182577357",
      "id" : 182577357,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 135,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 113401773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/182577357",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086368"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086368"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Extracted into FinalizeBlock - its probably worth refactoring BlockAssembler into a builder style class - would make unit tests much easier to write ... maybe one day",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-20T15:25:02Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086368",
      "id" : 183086368,
      "in_reply_to_id" : 182557843,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 86,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 114022197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086368",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086382"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086382"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "i agree with you - i originally had this on two lines - and then the linter put it all back on one",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-20T15:25:05Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086382",
      "id" : 183086382,
      "in_reply_to_id" : 182558115,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 91,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 114022219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086382",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086405"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "it doesn't! but i put them in now",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-20T15:25:09Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return pblock;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183086405",
      "id" : 183086405,
      "in_reply_to_id" : 182558380,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 100,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 114022245,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183086405",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated to address reviewer comments and fix a bug that this test seems to have uncovered",
      "created_at" : "2018-04-20T15:27:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-383132743",
      "id" : 383132743,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-04-20T15:27:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383132743",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183115412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183115412"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, definitely agree. ",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-20T17:14:09Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return Block(prev_hash);\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+    pblock->vtx.push_back(pblock->vtx[0]);\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus()))\n+        ++(pblock->nNonce);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183115412",
      "id" : 183115412,
      "in_reply_to_id" : 182557843,
      "original_commit_id" : "5f8f1bed6cfb6002e01c461f98dac7c0ea9290ff",
      "original_position" : 86,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 114058047,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183115412",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183487818"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183487818"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Might be good to add a comment here saying why it's important to recompute pindexMostWork each loop iteration (how sync could get stuck otherwise).",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-23T18:07:38Z",
      "diff_hunk" : "@@ -2673,9 +2673,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n \n             CBlockIndex *pindexOldTip = chainActive.Tip();\n-            if (pindexMostWork == nullptr) {\n-                pindexMostWork = FindMostWorkChain();\n-            }\n+            pindexMostWork = FindMostWorkChain();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183487818",
      "id" : 183487818,
      "original_commit_id" : "26bfdbaddbb9f13864deb7241c6d513f22c5ab62",
      "original_position" : 7,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 114495677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183487818",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183489473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183489473"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd think this could be written more simply as:\r\n\r\n```\r\nauto block = make_shared<CBlock>(ptemplate->block);\r\nblock->hashPrevBlock = ...\r\nreturn block;\r\n```\r\n\r\nIt looks like pblock is leaked currently, or is this not the case?",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-23T18:13:15Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r183489473",
      "id" : 183489473,
      "original_commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "original_position" : 61,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 114495677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183489473",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for opening this PR.  I thought it would be helpful for other reviewers to clarify the (IMO significant) bug here, so that we can properly evaluate fixes.\r\n\r\nIf ActivateBestChain is invoked simultaneously in separate threads, then we can end up at a lower-work tip, and remain stuck until the next block comes in.\r\n\r\n * Suppose in thread 1, we have just been delivered a block that causes us to try to activate two blocks in ABC.  We connect 1 of them in ABCStep, and then release cs_main before connecting the second.\r\n * In thread 2, suppose we have been delivered a 3rd block (say via rpc) that builds on the first two.  It invokes ABC and gets to run after the first block has been connected in thread 1.  It connects one block, releases cs_main, and then connects one more, and finishes.\r\n * When thread 1 gets to run again, the most work chain has advanced, but (before this PR) we don't refresh pindexMostWork (except when we find an invalid block).  Consequently we would invoke ABCStep with a *less work tip* than our current tip(!).  This would cause us to disconnect our tip and return.\r\n\r\nSome travis failures have been observed due to this bug, as seen for instance here: https://travis-ci.org/bitcoin/bitcoin/jobs/370848272.  The test that sometimes fails, `rpc_deprecated.py`, generates blocks on two nodes roughly simultaneously, so one of the nodes is generating blocks in an rpc thread while also processing blocks on the network thread, which I believe is enough to trigger this bug.",
      "created_at" : "2018-04-26T15:53:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-384693081",
      "id" : 384693081,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-04-26T15:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384693081",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r184447870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184447870"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This might cause substantial slow-down during IBD or reindex, because currently FindMostWorkChain walks from the candidate tip to the fork point on the current chain to ensure none of the blocks are invalid.  We may be able to optimize that, but we also might want to consider another solution.",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-26T16:13:33Z",
      "diff_hunk" : "@@ -2673,9 +2673,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n \n             CBlockIndex *pindexOldTip = chainActive.Tip();\n-            if (pindexMostWork == nullptr) {\n-                pindexMostWork = FindMostWorkChain();\n-            }\n+            pindexMostWork = FindMostWorkChain();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r184447870",
      "id" : 184447870,
      "in_reply_to_id" : 183487818,
      "original_commit_id" : "26bfdbaddbb9f13864deb7241c6d513f22c5ab62",
      "original_position" : 7,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 115647578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184447870",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r184452863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184452863"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This method of constructing a bad block is not ideal, because this kind of invalidity is detected well before ConnectBlock.  In order to get better code coverage, I think it would be better to generate different kinds of invalid blocks, to test failure at different points in the validation process.\r\n\r\n(As it is,  I believe this method of making an invalid block is detectable in CheckBlock (merkle-tree fails validation due to duplicate transactions).  It would also fail in CheckBlock for having more than one coinbase, and it would fail in ContextualCheckBlock for having an invalid witness commitment.)",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-04-26T16:28:47Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    CBlock* pblock = new CBlock(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+\n+    return std::make_shared<CBlock>(*pblock);\n+}\n+\n+std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\n+{\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n+        ++(pblock->nNonce);\n+    }\n+\n+    return pblock;\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return FinalizeBlock(Block(prev_hash));\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+\n+    // a second coinbase will make this block invalid\n+    pblock->vtx.push_back(pblock->vtx[0]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r184452863",
      "id" : 184452863,
      "original_commit_id" : "6094ce73045fe0b4654ff94327c2059512af88fb",
      "original_position" : 91,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 115647578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184452863",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I have a branch where I changed the test you wrote to produce invalid blocks that would be detected in ConnectBlock, and where I have an alternate fix for the bug you found here, as well as a fix for the bug I mentioned in #13092: https://github.com/sdaftuar/bitcoin/commits/2018-04-alternate-abc-fix.  \r\n\r\nFor fixing the bug here, rather than invoke `FindMostWorkChain` on every loop iteration (which I expect to be very slow during reindex), I instead added a new test: if the tip has changed since the last loop iteration, or if pindexMostWork is no longer in setBlockIndexCandidates, then update pindexMostWork.  (I believe that only the first criteria is actually necessary, but included the second as belt-and-suspenders.)\r\n\r\nI compared this approach vs master for doing a reindex on my workstation, and saw < 3% slowdown (some slowdown was expected due to checking setBlockIndexCandidates each time).",
      "created_at" : "2018-04-27T15:22:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-385003478",
      "id" : 385003478,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-04-27T18:08:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385003478",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Nice - thanks for this. I wonder if it might be a bit more readable to explore feasibility of caching results internally in findmostworkchain instead of doing it in the activatebestchain loop - the control flow there is getting harder and harder to follow. I'm happy to explore that.",
      "created_at" : "2018-04-27T16:29:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-385023004",
      "id" : 385023004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-04-27T16:29:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385023004",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@TheBlueMatt and I discussed that idea offline (of rewriting `FindMostWorkChain` to use `g_failed_blocks`, our internal data structure for caching invalid blocks, to speed it up) but our initial reaction was that the review overhead to ensure correctness might be very high.  I'm open to other ideas though (and if you think reworking FMWC is practical please feel free to take a shot at it).",
      "created_at" : "2018-04-27T18:07:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-385049827",
      "id" : 385049827,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-03T19:28:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385049827",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sdaftuar - pulled in your commits.\r\n\r\nIts still hard for me to convince myself that the set of conditions you've defined are the only cases in which `pindexMostWork` needs to be refreshed. Maybe I'm just not familiar enough with those areas - I'll leave it to the people with more experience in that area to review.\r\n\r\nJust wanted to throw out one alternate way to do determine when to refresh most work tip that's (imo) a bit easier to convince myself behaves correctly. Instead of caching `pindexOldTip` and using that as well as a couple of other things to determine whether to refresh - how about giving setBlockIndexCandidates a sequence number that gets incremented every time it gets updated. Then all ABC has to do is record the last tip candidate set version it saw (instead of the old tip) and use that to determine whether a refresh may be necessary. You could do this in ABC or even internally in FindMostWorkChain.",
      "created_at" : "2018-05-04T15:57:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-386645842",
      "id" : 386645842,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-04T15:57:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386645842",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Copy of travis output:\r\n\r\n```\r\nRunning tests: validation_block_tests from test/validation_block_tests.cpp\r\nRunning 1 test case...\r\nTest cases order is shuffled using seed: 1374948318\r\nEntering test module \"Bitcoin Test Suite\"\r\ntest/validation_block_tests.cpp(24): Entering test suite \"validation_block_tests\"\r\ntest/validation_block_tests.cpp(125): Entering test case \"processnewblock_signals_ordering\"\r\ntest/validation_block_tests.cpp(160): info:  has passed\r\ntest/validation_block_tests.cpp(160): info: ProcessNewBlock(Params(), block, true, &ignored)\r\ntest/validation_block_tests.cpp(160): info: check \r\ntest/validation_block_tests.cpp(160): info: ProcessNewBlock(Params(), block, true, &ignored)\r\ntest/validation_block_tests.cpp(160): info: ProcessNewBlock(Params(), block, true, &ignored)\r\ntest/validation_block_tests.cpp(160): info: check \r\ntest/validation_block_tests.cpp(160): info:  has passed\r\ntest/validation_block_tests.cpp(160): info: ProcessNewBlock(Params(), block, true, &ignored)\r\nterminate called after throwing an instance of 'std::length_error'\r\n  what():  basic_string::_S_create\r\nmake[3]: *** [test/validation_block_tests.cpp.test] Error 1",
      "created_at" : "2018-05-04T18:04:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-386686703",
      "id" : 386686703,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-04T18:04:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386686703",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From some quick web searching, it seems that BOOST_CHECK may not be thread safe, so invoking it in each thread is likely the problem here.  Perhaps we should just `assert()` on the return value from `ProcessNewBlock()` (at line 160).",
      "created_at" : "2018-05-04T19:11:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-386704093",
      "id" : 386704093,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-04T19:11:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386704093",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I do occasionally see this failure when I run validation_block_tests in a tight loop (after fixing the BOOST_CHECK issue above):\r\n```\r\ntest/validation_block_tests.cpp(38): error in \"processnewblock_signals_ordering\": check m_expected_tip == block->hashPrevBlock failed [0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206 != 0000000000000000000000000000000000000000000000000000000000000000]\r\nSegmentation fault (core dumped)\r\n```\r\nEdit: perhaps this is also a threading issue though?",
      "created_at" : "2018-05-04T19:42:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-386712331",
      "id" : 386712331,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-04T19:43:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386712331",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmmm thats the genesis block which connects through a different path I believe",
      "created_at" : "2018-05-04T19:53:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-386714663",
      "id" : 386714663,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-04T19:53:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386714663",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sdaftuar - thats the genesis block getting activated. Feels like it may be more of a test artefact (wasn't there a recent change that randomizes test case execution order) than a threading issue?  I think solution for that is to just call PNB(genesis) at the very beginning.",
      "created_at" : "2018-05-04T20:07:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-386719151",
      "id" : 386719151,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-04T20:07:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386719151",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@skeees My reasoning is this:\r\n * Assume ABC never releases cs_main until the new tip has work >= that of the old tip..\r\n * Then it should be safe to always try to connect to pindexMostWork as long as it is still a candidate to be our tip (ie it's still in setBlockIndexCandidates).  Since we prune entries from setBlockIndexCandidates in ABCStep, if an entry is in setBlockIndexCandidates, then working towards it is still making progress (even if we might end up scrapping it for an even-more-work tip later -- it's no different from just learning about the more work tip after you had finished connecting the other blocks, rather than before).\r\n * However there is a small risk that we might have two threads that are simultaneously trying to connect several blocks towards two different tips, one of which has more work than the other, and both of which have more work than our prior tip.  Because ABCStep continues until it arrives at a block that has more work than the prior tip, this must converge, but it could annoyingly take a while (eg thread 1 connects 1 block out of 10, then thread 2 connects 2 blocks out of the 11 it needs to get to its desired tip, then thread 1 connects 3 blocks, and so on).  This is the convergence issue I alluded to in the code comment.\r\n * So as an optimization, we can just check to see if the tip has changed since we last left off.  If the tip has not changed we can use the assumption that we never release cs_main at a less-work tip than we were at before to be sure that whatever our pindexMostWork target from before is must still be a valid goal.  \r\nIn particular, it's not possible for (say) other threads invoking ABC concurrently to leave us at our tip if they have been connecting towards more-work tips.\r\n * I believe that checking for the tip change is sufficient for this to be safe, but as belt-and-suspenders I also included the check for pindexMostWork being in setBlockIndexCandidates, just in case.  I think the worst-case behavior if there's a hole in the logic would be the slow-convergence-issue in the event that multiple threads are trying to connect lots of blocks towards competing tips, which seems pretty low risk to me anyway.\r\n\r\nI believe that the fix to not release cs_main if we encounter an invalid block achieves the assumption listed at the top, and thus the rest follows.\r\n\r\n> Just wanted to throw out one alternate way to do determine when to refresh most work tip that's (imo) a bit easier to convince myself behaves correctly. Instead of caching pindexOldTip and using that as well as a couple of other things to determine whether to refresh - how about giving setBlockIndexCandidates a sequence number that gets incremented every time it gets updated. Then all ABC has to do is record the last tip candidate set version it saw (instead of the old tip) and use that to determine whether a refresh may be necessary. You could do this in ABC or even internally in FindMostWorkChain.\r\n\r\nThis might also be a reasonable solution; it seems like a bigger refactor to me since we don't have great encapsulation on setBlockIndexCandidates at the moment, but I agree that it could be a clearer logical change.\r\n\r\n@sipa Any thoughts on this issue?",
      "created_at" : "2018-05-04T20:08:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-386719376",
      "id" : 386719376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-04T20:08:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386719376",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r186246920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186246920"
         }
      },
      "author_association" : "MEMBER",
      "body" : "As discussed on IRC, there's a race condition where callbacks scheduled prior to a client subscribing to callbacks can be delivered to those clients, if the scheduler didn't finish draining its queue before the new subscriber is added.\r\n\r\nThat causes this test to (rarely) fail, because we initialize the TestSubscriber with the genesis block, even though it might be notified of the genesis block's connection (which has already happened at this point!) if the callbacks were delayed.  This can be reproduced by adding a `MilliSleep()` call to `SingleThreadedSchedulerClient::ProcessQueue()`.\r\n\r\nThe call to `ProcessNewBlock` at line 141 above doesn't fix this issue; instead we need to ensure that there are no outstanding callbacks at the time the TestSubscriber is created, for instance by calling `SyncWithValidationInterfaceQueue()`.  Also we should hold `cs_main` before accessing `chainActive`:\r\n\r\n```\r\n    SyncWithValidationInterfaceQueue();\r\n\r\n    const CBlockIndex *initial_tip = nullptr;\r\n    {\r\n        LOCK(cs_main);\r\n        initial_tip = chainActive.Tip();\r\n    }\r\n\r\n    // subscribe to events (this subscriber will validate event ordering)\r\n    TestSubscriber sub(initial_tip->GetBlockHash());\r\n```",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-05T00:35:55Z",
      "diff_hunk" : "@@ -0,0 +1,179 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chainparams.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <miner.h>\n+#include <random.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+struct RegtestingSetup : public TestingSetup {\n+    RegtestingSetup() : TestingSetup(CBaseChainParams::REGTEST) {}\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_block_tests, RegtestingSetup)\n+\n+struct TestSubscriber : public CValidationInterface {\n+    uint256 m_expected_tip;\n+\n+    TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n+\n+    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n+    }\n+\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex, const std::vector<CTransactionRef>& txnConflicted)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->hashPrevBlock);\n+        BOOST_CHECK_EQUAL(m_expected_tip, pindex->pprev->GetBlockHash());\n+\n+        m_expected_tip = block->GetHash();\n+    }\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock>& block)\n+    {\n+        BOOST_CHECK_EQUAL(m_expected_tip, block->GetHash());\n+\n+        m_expected_tip = block->hashPrevBlock;\n+    }\n+};\n+\n+std::shared_ptr<CBlock> Block(const uint256& prev_hash)\n+{\n+    static int i = 0;\n+    static uint64_t time = Params().GenesisBlock().nTime;\n+\n+    CScript pubKey;\n+    pubKey << i++ << OP_TRUE;\n+\n+    auto ptemplate = BlockAssembler(Params()).CreateNewBlock(pubKey, false);\n+    auto pblock = std::make_shared<CBlock>(ptemplate->block);\n+    pblock->hashPrevBlock = prev_hash;\n+    pblock->nTime = ++time;\n+\n+    CMutableTransaction txCoinbase(*pblock->vtx[0]);\n+    txCoinbase.vout.resize(1);\n+    txCoinbase.vin[0].scriptWitness.SetNull();\n+    pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+\n+    return pblock;\n+}\n+\n+std::shared_ptr<CBlock> FinalizeBlock(std::shared_ptr<CBlock> pblock)\n+{\n+    pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n+\n+    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n+        ++(pblock->nNonce);\n+    }\n+\n+    return pblock;\n+}\n+\n+// construct a valid block\n+const std::shared_ptr<const CBlock> GoodBlock(const uint256& prev_hash)\n+{\n+    return FinalizeBlock(Block(prev_hash));\n+}\n+\n+// construct an invalid block (but with a valid header)\n+const std::shared_ptr<const CBlock> BadBlock(const uint256& prev_hash)\n+{\n+    auto pblock = Block(prev_hash);\n+\n+    CMutableTransaction coinbase_spend;\n+    coinbase_spend.vin.push_back(CTxIn(COutPoint(pblock->vtx[0]->GetHash(), 0), CScript(), 0));\n+    coinbase_spend.vout.push_back(pblock->vtx[0]->vout[0]);\n+\n+    CTransactionRef tx = MakeTransactionRef(coinbase_spend);\n+    pblock->vtx.push_back(tx);\n+\n+    auto ret = FinalizeBlock(pblock);\n+    return ret;\n+}\n+\n+void BuildChain(const uint256& root, int height, const unsigned int invalid_rate, const unsigned int branch_rate, const unsigned int max_size, std::vector<std::shared_ptr<const CBlock>>& blocks)\n+{\n+    if (height <= 0 || blocks.size() >= max_size) return;\n+\n+    bool gen_invalid = GetRand(100) < invalid_rate;\n+    bool gen_fork = GetRand(100) < branch_rate;\n+\n+    const std::shared_ptr<const CBlock> pblock = gen_invalid ? BadBlock(root) : GoodBlock(root);\n+    blocks.push_back(pblock);\n+    if (!gen_invalid) {\n+        BuildChain(pblock->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\n+    }\n+\n+    if (gen_fork) {\n+        blocks.push_back(GoodBlock(root));\n+        BuildChain(blocks.back()->GetHash(), height - 1, invalid_rate, branch_rate, max_size, blocks);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n+{\n+    // build a large-ish chain that's likely to have some forks\n+    std::vector<std::shared_ptr<const CBlock>> blocks;\n+    while (blocks.size() < 50) {\n+        blocks.clear();\n+        BuildChain(Params().GenesisBlock().GetHash(), 100, 15, 10, 500, blocks);\n+    }\n+\n+    bool ignored;\n+    CValidationState state;\n+    std::vector<CBlockHeader> headers;\n+    std::transform(blocks.begin(), blocks.end(), std::back_inserter(headers), [](std::shared_ptr<const CBlock> b) { return b->GetBlockHeader(); });\n+\n+    // Process all the headers so we understand the toplogy of the chain\n+    BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n+    ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored);\n+\n+    // subscribe to events (this subscriber will validate event ordering)\n+    TestSubscriber sub(chainActive.Tip()->GetBlockHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r186246920",
      "id" : 186246920,
      "original_commit_id" : "04176fc02f7ca1c0c56bb0c87da90f83673e95a5",
      "original_position" : 144,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 117798048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186246920",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r186495495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186495495"
         }
      },
      "author_association" : "OWNER",
      "body" : "I believe it may be worth adding 16 bytes to the source code to give this the mildly less confusing name `m_chainstate_cs` instead.",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-07T17:46:00Z",
      "diff_hunk" : "@@ -144,6 +144,12 @@ class CChainState {\n       */\n     std::set<CBlockIndex*> g_failed_blocks;\n \n+    /**\n+     * the ChainState CriticalSection\n+     * A lock that must be held when modifying this ChainState - held in ActivateBestChain()\n+     */\n+    CCriticalSection m_cs_cs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r186495495",
      "id" : 186495495,
      "original_commit_id" : "c496b7b386a66fb4fc73d3bacd3db2a5c4bf7872",
      "original_position" : 8,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 118084725,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186495495",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r186510101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186510101"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I think it's worth commenting here with some explanation of the types of race conditions that this is designed to protect (along the lines of what is in the commit message, perhaps)",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-07T18:38:15Z",
      "diff_hunk" : "@@ -2652,6 +2658,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n     // sanely for performance or correctness!\n     AssertLockNotHeld(cs_main);\n+    LOCK(m_cs_cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r186510101",
      "id" : 186510101,
      "original_commit_id" : "c496b7b386a66fb4fc73d3bacd3db2a5c4bf7872",
      "original_position" : 17,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 118102784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186510101",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r186515013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186515013"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: perhaps add a comment explaining why this is added?  (guessing it's because you want to use uint256's in BOOST_CHECK_EQUAL())",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-07T18:55:17Z",
      "diff_hunk" : "@@ -119,5 +119,6 @@ struct TestMemPoolEntryHelper\n };\n \n CBlock getBlock13b8a();\n+std::ostream& operator<<(std::ostream& os, const uint256& num);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r186515013",
      "id" : 186515013,
      "original_commit_id" : "9dd61f272abc78e29762796eb7f7af90606d9e65",
      "original_position" : 4,
      "path" : "src/test/test_bitcoin.h",
      "position" : null,
      "pull_request_review_id" : 118102784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186515013",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r186518125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186518125"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: doesn't seem like these includes are necessary at all, am I missing some dependency?",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-07T19:06:13Z",
      "diff_hunk" : "@@ -0,0 +1,171 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iomanip>\n+#include <memory>\n+#include <sstream>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r186518125",
      "id" : 186518125,
      "original_commit_id" : "9dd61f272abc78e29762796eb7f7af90606d9e65",
      "original_position" : 7,
      "path" : "src/test/validation_block_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 118102784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186518125",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa - commits now correctly ordered and `m_cs_cs` renamed to `m_cs_chainstate`",
      "created_at" : "2018-05-07T19:44:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-387180410",
      "id" : 387180410,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-07T19:44:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387180410",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK ed1828c202c9f4376492c173e361814320a01ffa ",
      "created_at" : "2018-05-07T19:47:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-387181234",
      "id" : 387181234,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-07T19:47:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387181234",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187711869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187711869"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: `if (...`",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-11T19:31:02Z",
      "diff_hunk" : "@@ -2666,38 +2679,47 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             SyncWithValidationInterfaceQueue();\n         }\n \n-        const CBlockIndex *pindexFork;\n-        bool fInitialDownload;\n         {\n             LOCK(cs_main);\n-            ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n+            CBlockIndex * pindexOldTip;\n+            CBlockIndex * starting_tip = chainActive.Tip();\n+            bool blocks_connected = false;\n+            do {\n+                // We absolutely may not unlock cs_main until we've made forward progress\n+                // (with the exception of shutdown due to hardware issues, low disk space, etc).\n+                ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n+\n+                pindexOldTip = chainActive.Tip();\n+                if (pindexMostWork == nullptr) {\n+                    pindexMostWork = FindMostWorkChain();\n+                }\n \n-            CBlockIndex *pindexOldTip = chainActive.Tip();\n-            if (pindexMostWork == nullptr) {\n-                pindexMostWork = FindMostWorkChain();\n-            }\n+                // Whether we have anything to do at all.\n+                if (pindexMostWork == nullptr || pindexMostWork == chainActive.Tip()) {\n+                    break;\n+                }\n \n-            // Whether we have anything to do at all.\n-            if (pindexMostWork == nullptr || pindexMostWork == chainActive.Tip())\n-                return true;\n+                bool fInvalidFound = false;\n+                std::shared_ptr<const CBlock> nullBlockPtr;\n+                if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace))\n+                    return false;\n+                blocks_connected = true;\n \n-            bool fInvalidFound = false;\n-            std::shared_ptr<const CBlock> nullBlockPtr;\n-            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace))\n-                return false;\n+                if (fInvalidFound) {\n+                    // Wipe cache, we may need another branch now.\n+                    pindexMostWork = nullptr;\n+                }\n+                pindexNewTip = chainActive.Tip();\n \n-            if (fInvalidFound) {\n-                // Wipe cache, we may need another branch now.\n-                pindexMostWork = nullptr;\n-            }\n-            pindexNewTip = chainActive.Tip();\n-            pindexFork = chainActive.FindFork(pindexOldTip);\n-            fInitialDownload = IsInitialBlockDownload();\n+                for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n+                    assert(trace.pblock && trace.pindex);\n+                    GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.conflictedTxs);\n+                }\n+            } while (!chainActive.Tip() || (starting_tip && CBlockIndexWorkComparator()(chainActive.Tip(), starting_tip)));\n+            if(!blocks_connected) return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187711869",
      "id" : 187711869,
      "original_commit_id" : "8febf4850b11406883d457d3c63e713acfacf682",
      "original_position" : 96,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 119554360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187711869",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187712808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187712808"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> must be held when modifying this ChainState\r\n\r\nSeems like this statement is too broad; many aspects of this object are modified without this lock held (e.g. `g_failed_blocks`, `setBlockIndexCandidates`).",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-11T19:34:48Z",
      "diff_hunk" : "@@ -144,6 +144,12 @@ class CChainState {\n       */\n     std::set<CBlockIndex*> g_failed_blocks;\n \n+    /**\n+     * the ChainState CriticalSection\n+     * A lock that must be held when modifying this ChainState - held in ActivateBestChain()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187712808",
      "id" : 187712808,
      "original_commit_id" : "8febf4850b11406883d457d3c63e713acfacf682",
      "original_position" : 6,
      "path" : "src/validation.cpp",
      "position" : 6,
      "pull_request_review_id" : 119554360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187712808",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187712965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187712965"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I had a bit of trouble parsing this comment initially - might be easier to read if you wrote \"expensive-to-calculate\" instead?",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-11T19:35:33Z",
      "diff_hunk" : "@@ -2653,6 +2660,12 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n     // sanely for performance or correctness!\n     AssertLockNotHeld(cs_main);\n \n+    // ABC maintains a fair degree of expensive to calculate internal state",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187712965",
      "id" : 187712965,
      "original_commit_id" : "8febf4850b11406883d457d3c63e713acfacf682",
      "original_position" : 25,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 119554360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187712965",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187714139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187714139"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not sure if this is my fault or not, but this definitely needs to be finding the fork since starting_tip for the notifications, not just since the last loop iteration. Also, we should probably move the UpdatedBlockTip callback generation inside the pindexFork != pindexNewTip check as otherwise you'll get rather nonsense callbacks (and none of the callers seem to rely on any specific behavior). Either way behavior needs documentation in validationinterface.h (or I can do it in #12979 once this gets merged).",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-11T19:40:19Z",
      "diff_hunk" : "@@ -2666,38 +2666,47 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             SyncWithValidationInterfaceQueue();\n         }\n \n-        const CBlockIndex *pindexFork;\n-        bool fInitialDownload;\n         {\n             LOCK(cs_main);\n-            ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n+            CBlockIndex * pindexOldTip;\n+            CBlockIndex * starting_tip = chainActive.Tip();\n+            bool blocks_connected = false;\n+            do {\n+                // We absolutely may not unlock cs_main until we've made forward progress\n+                // (with the exception of shutdown due to hardware issues, low disk space, etc).\n+                ConnectTrace connectTrace(mempool); // Destructed before cs_main is unlocked\n+\n+                pindexOldTip = chainActive.Tip();\n+                if (pindexMostWork == nullptr) {\n+                    pindexMostWork = FindMostWorkChain();\n+                }\n \n-            CBlockIndex *pindexOldTip = chainActive.Tip();\n-            if (pindexMostWork == nullptr) {\n-                pindexMostWork = FindMostWorkChain();\n-            }\n+                // Whether we have anything to do at all.\n+                if (pindexMostWork == nullptr || pindexMostWork == chainActive.Tip()) {\n+                    break;\n+                }\n \n-            // Whether we have anything to do at all.\n-            if (pindexMostWork == nullptr || pindexMostWork == chainActive.Tip())\n-                return true;\n+                bool fInvalidFound = false;\n+                std::shared_ptr<const CBlock> nullBlockPtr;\n+                if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace))\n+                    return false;\n+                blocks_connected = true;\n \n-            bool fInvalidFound = false;\n-            std::shared_ptr<const CBlock> nullBlockPtr;\n-            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace))\n-                return false;\n+                if (fInvalidFound) {\n+                    // Wipe cache, we may need another branch now.\n+                    pindexMostWork = nullptr;\n+                }\n+                pindexNewTip = chainActive.Tip();\n \n-            if (fInvalidFound) {\n-                // Wipe cache, we may need another branch now.\n-                pindexMostWork = nullptr;\n-            }\n-            pindexNewTip = chainActive.Tip();\n-            pindexFork = chainActive.FindFork(pindexOldTip);\n-            fInitialDownload = IsInitialBlockDownload();\n+                for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n+                    assert(trace.pblock && trace.pindex);\n+                    GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.conflictedTxs);\n+                }\n+            } while (!chainActive.Tip() || (starting_tip && CBlockIndexWorkComparator()(chainActive.Tip(), starting_tip)));\n+            if(!blocks_connected) return true;\n \n-            for (const PerBlockConnectTrace& trace : connectTrace.GetBlocksConnected()) {\n-                assert(trace.pblock && trace.pindex);\n-                GetMainSignals().BlockConnected(trace.pblock, trace.pindex, trace.conflictedTxs);\n-            }\n+            const CBlockIndex * pindexFork = chainActive.FindFork(pindexOldTip);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187714139",
      "id" : 187714139,
      "original_commit_id" : "4931c6d298a4eb15eaf7ee06d5a947944d1356e7",
      "original_position" : 68,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 119556912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187714139",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187714426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187714426"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: comment is slightly wrong now, we dont release cs_main during large reorgs, only large connects.",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-11T19:41:43Z",
      "diff_hunk" : "@@ -2653,6 +2660,12 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n     // sanely for performance or correctness!\n     AssertLockNotHeld(cs_main);\n \n+    // ABC maintains a fair degree of expensive to calculate internal state\n+    // because this function periodically releases cs_main so that it does not lock up other threads for too long\n+    // during large re-orgs - and to allow for e.g. the callback queue to drain",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187714426",
      "id" : 187714426,
      "original_commit_id" : "1eee5ef33b0b28da510a400da951bd3f4a60dcb3",
      "original_position" : 27,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 119556912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187714426",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187718074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187718074"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This isnt sufficient - just because two things are ordered does not mean they have a consistent view into memory unless there was something that triggered a flush. In practice I believe the lock inside of the SingleThreadedSchedulerClient provides this, but that's certainly not guaranteed in the future. A release-acquire should be sufficient, however.",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-11T19:57:26Z",
      "diff_hunk" : "@@ -112,4 +112,46 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n \n+BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n+{\n+    CScheduler scheduler;\n+\n+    // each queue should be well ordered with respect to itself but not other queues\n+    SingleThreadedSchedulerClient queue1(&scheduler);\n+    SingleThreadedSchedulerClient queue2(&scheduler);\n+\n+    // create more threads than queues\n+    // if the queues only permit execution of one task at once then\n+    // the extra threads should effectively be doing nothing\n+    // if they don't we'll get out of order behaviour\n+    boost::thread_group threads;\n+    for (int i = 0; i < 5; i++) {\n+        threads.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+    }\n+\n+    // these are not atomic, if SinglethreadedSchedulerClient prevents\n+    // parallel execution at the queue level no synchronization should be required here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187718074",
      "id" : 187718074,
      "original_commit_id" : "9c31fa3228b444295b8b722252431ceaac8738ef",
      "original_position" : 22,
      "path" : "src/test/scheduler_tests.cpp",
      "position" : 22,
      "pull_request_review_id" : 119556912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T17:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187718074",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187779292"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187779292"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "don't quite understand what you mean here - isn't the whole purpose of SingleThreadedSchedulerClient to ensure internally consistent ordering/views of callbacks on a single client? if a memory barrier is somehow necessary to achieve this (like you I think the lock is sufficient for now) then that should be done in the SingleThreadedSchedulerClient and not be the caller's responsibility. This test was intended to demonstrate that the api guarantees this behavior to users.",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-12T18:04:16Z",
      "diff_hunk" : "@@ -112,4 +112,46 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n \n+BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n+{\n+    CScheduler scheduler;\n+\n+    // each queue should be well ordered with respect to itself but not other queues\n+    SingleThreadedSchedulerClient queue1(&scheduler);\n+    SingleThreadedSchedulerClient queue2(&scheduler);\n+\n+    // create more threads than queues\n+    // if the queues only permit execution of one task at once then\n+    // the extra threads should effectively be doing nothing\n+    // if they don't we'll get out of order behaviour\n+    boost::thread_group threads;\n+    for (int i = 0; i < 5; i++) {\n+        threads.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+    }\n+\n+    // these are not atomic, if SinglethreadedSchedulerClient prevents\n+    // parallel execution at the queue level no synchronization should be required here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187779292",
      "id" : 187779292,
      "in_reply_to_id" : 187718074,
      "original_commit_id" : "9c31fa3228b444295b8b722252431ceaac8738ef",
      "original_position" : 22,
      "path" : "src/test/scheduler_tests.cpp",
      "position" : 22,
      "pull_request_review_id" : 119632903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-12T18:04:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187779292",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187806582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187806582"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The C++ memory model does not provide any ordering guarantees across variables at different memory locations unless you have a) some operation dependency tree which creates such an order, or b) a rel_acq/seq_cst operation somewhere which implicitly creates such an order (which a mutex lock/unlock essentially implicitly creates). So if, eg, the SingleThreadedSchedulerClient used only relaxed operations to load the next callback to call, and both callback clients update the variable, there is no happens-before relationship created on the variable and you may not have consistent results. Having the rel_acq implied by the internal lock provides what you want implicitly, but its not a guarantee. A release/acquire operation should be sufficient here.",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-13T16:35:47Z",
      "diff_hunk" : "@@ -112,4 +112,46 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n \n+BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n+{\n+    CScheduler scheduler;\n+\n+    // each queue should be well ordered with respect to itself but not other queues\n+    SingleThreadedSchedulerClient queue1(&scheduler);\n+    SingleThreadedSchedulerClient queue2(&scheduler);\n+\n+    // create more threads than queues\n+    // if the queues only permit execution of one task at once then\n+    // the extra threads should effectively be doing nothing\n+    // if they don't we'll get out of order behaviour\n+    boost::thread_group threads;\n+    for (int i = 0; i < 5; i++) {\n+        threads.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+    }\n+\n+    // these are not atomic, if SinglethreadedSchedulerClient prevents\n+    // parallel execution at the queue level no synchronization should be required here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187806582",
      "id" : 187806582,
      "in_reply_to_id" : 187718074,
      "original_commit_id" : "9c31fa3228b444295b8b722252431ceaac8738ef",
      "original_position" : 22,
      "path" : "src/test/scheduler_tests.cpp",
      "position" : 22,
      "pull_request_review_id" : 119659952,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-14T16:26:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187806582",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187976777"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976777"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "oh hmm - but each client only interacts with its own \"counter\" there's no sharing across clients in this tests. I'm simply checking that for each client, its own callbacks are processed sequentially - which i think is something that the singlethreadedschedulerclient api is supposed to guarantee (otherwise might as well just use the raw scheduler) - and no current test existed",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-14T14:35:56Z",
      "diff_hunk" : "@@ -112,4 +112,46 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n \n+BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n+{\n+    CScheduler scheduler;\n+\n+    // each queue should be well ordered with respect to itself but not other queues\n+    SingleThreadedSchedulerClient queue1(&scheduler);\n+    SingleThreadedSchedulerClient queue2(&scheduler);\n+\n+    // create more threads than queues\n+    // if the queues only permit execution of one task at once then\n+    // the extra threads should effectively be doing nothing\n+    // if they don't we'll get out of order behaviour\n+    boost::thread_group threads;\n+    for (int i = 0; i < 5; i++) {\n+        threads.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+    }\n+\n+    // these are not atomic, if SinglethreadedSchedulerClient prevents\n+    // parallel execution at the queue level no synchronization should be required here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r187976777",
      "id" : 187976777,
      "in_reply_to_id" : 187718074,
      "original_commit_id" : "9c31fa3228b444295b8b722252431ceaac8738ef",
      "original_position" : 22,
      "path" : "src/test/scheduler_tests.cpp",
      "position" : 22,
      "pull_request_review_id" : 119862397,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-14T14:35:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187976777",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r188017471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188017471"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ugh, my memory of the C++ memory model was slightly faulty, I've updated the comment above, though its much less a concern now (however should sitll be fixed). You could use relaxed operations to try to optimistically fetch the next callback to execute, succeed, and then have one thread run a callback, the other thread run a second callback but for the same client, and create no dependancy. On many non-x86 platforms the CPU is free to reorder (apparently) unrelated stores/loads.",
      "commit_id" : "51539506577e5439c58b2e36c07d84f33bb4d4c5",
      "created_at" : "2018-05-14T16:29:43Z",
      "diff_hunk" : "@@ -112,4 +112,46 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n \n+BOOST_AUTO_TEST_CASE(singlethreadedscheduler_ordered)\n+{\n+    CScheduler scheduler;\n+\n+    // each queue should be well ordered with respect to itself but not other queues\n+    SingleThreadedSchedulerClient queue1(&scheduler);\n+    SingleThreadedSchedulerClient queue2(&scheduler);\n+\n+    // create more threads than queues\n+    // if the queues only permit execution of one task at once then\n+    // the extra threads should effectively be doing nothing\n+    // if they don't we'll get out of order behaviour\n+    boost::thread_group threads;\n+    for (int i = 0; i < 5; i++) {\n+        threads.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n+    }\n+\n+    // these are not atomic, if SinglethreadedSchedulerClient prevents\n+    // parallel execution at the queue level no synchronization should be required here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#discussion_r188017471",
      "id" : 188017471,
      "in_reply_to_id" : 187718074,
      "original_commit_id" : "9c31fa3228b444295b8b722252431ceaac8738ef",
      "original_position" : 22,
      "path" : "src/test/scheduler_tests.cpp",
      "position" : 22,
      "pull_request_review_id" : 119912351,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13023",
      "updated_at" : "2018-05-14T16:29:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/188017471",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK non-test changes through a3ae8e68739023e5dba9e5cb190e707ed4603316, a3070a861bb3a76303b7859c4dd96ba886029111 would be fine with some release/acquire atomics, and 51539506577e5439c58b2e36c07d84f33bb4d4c5 looks awesome, though I haven't reviewed it fully.",
      "created_at" : "2018-05-14T16:33:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-388880844",
      "id" : 388880844,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-14T16:33:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388880844",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I will follow up offline in case I'm totally missing something - but I feel pretty strongly that sequential consistency should be guaranteed by the `SingleThreadedSchedulerClient` - whether the callbacks are actually run by one or multiple threads internally, it should feel single threaded (it's even named that way) and the caller shouldn't have to worry about it. Otherwise you open up a ton of surface area for more bugs like the ones being fixed here to creep in.\r\nOf course if there's something I'm missing in the current implementation of the `SingleThreadedSchedulerClient` that doesn't guarantee this ordering, I'm happy to fix it here, but it appears that the lock guarantees it now and I'd strongly advocate that any future implementations without the lock still maintain that guarantee.",
      "created_at" : "2018-05-14T18:02:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-388908666",
      "id" : 388908666,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-14T18:02:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388908666",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@skeees hmm, maybe we're talking past each other, but my point was that you can fully guarantee both ordering and only one callback executing at once *without* implying seq_cst/rel_acq in the C++ memory model. I dont think the memory consistency of a client should be implied by an API as it can impose runtime cost.",
      "created_at" : "2018-05-14T18:05:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-388909727",
      "id" : 388909727,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-14T18:06:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388909727",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok - I finally understand what you're saying. I still disagree. I think it makes the API pretty unusable if you drop that guarantee - and the theoretical (because its single threaded right now) performance tradeoff is worth the usability - and certainly it should not be called SingleThreaded anything since it drops the single threaded memory model. But in the interest of not delaying 0.16.1 I've removed that commit and will follow up in a separate PR.\r\n\r\nBtw though - I think the second test still has the same issue (different callbacks referencing the same unsynchronized memory)",
      "created_at" : "2018-05-14T20:19:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-388949034",
      "id" : 388949034,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-14T20:20:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388949034",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK 7b4be5089938b188ecca86742aa6aa4d2ec0c40e, though I didn't review the last test in detail (thanks for making that!).",
      "created_at" : "2018-05-15T19:49:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-389291443",
      "id" : 389291443,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-15T19:49:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389291443",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Compiling this locally gives me:\r\n```\r\n/.../bitcoin/src/test/validation_block_tests.cpp:73:13: error: use of undeclared identifier 'CheckProofOfWork'\r\n    while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\r\n            ^\r\n1 error generated.\r\n```\r\n\r\nAdding `#include <pow.h>` fixes it.\r\n",
      "created_at" : "2018-05-16T11:56:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-389492587",
      "id" : 389492587,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-16T11:56:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389492587",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks @laanwj - updated",
      "created_at" : "2018-05-16T12:29:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-389500956",
      "id" : 389500956,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-16T12:29:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389500956",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/195769?v=4",
         "events_url" : "https://api.github.com/users/skeees/events{/privacy}",
         "followers_url" : "https://api.github.com/users/skeees/followers",
         "following_url" : "https://api.github.com/users/skeees/following{/other_user}",
         "gists_url" : "https://api.github.com/users/skeees/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/skeees",
         "id" : 195769,
         "login" : "skeees",
         "organizations_url" : "https://api.github.com/users/skeees/orgs",
         "received_events_url" : "https://api.github.com/users/skeees/received_events",
         "repos_url" : "https://api.github.com/users/skeees/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/skeees/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/skeees/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/skeees"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK dd435ad40267f5c50ff17533c696f9302829a6a6",
      "created_at" : "2018-05-16T16:24:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-389580929",
      "id" : 389580929,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-16T16:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389580929",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Backported in #13317",
      "created_at" : "2018-05-28T09:37:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13023#issuecomment-392475570",
      "id" : 392475570,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13023",
      "updated_at" : "2018-05-28T09:37:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/392475570",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
