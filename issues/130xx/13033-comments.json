[
   {
      "author_association" : "MEMBER",
      "body" : "If anyone wants to read the old PR and has difficulty loading the page, it helps to use another browser session that's logged out.\r\n\r\nOnly comment of mine I'd like to export to this PR is the suggestion to backport \"the migration code that removes txindex without requiring a reindex would be useful for folks who regret having set `txindex=1` on a node with slow hardware.\"\r\n\r\nTested 3272b17637c5, including `kill -9`ing the migration from legacy to the new db.",
      "created_at" : "2018-04-20T09:49:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#issuecomment-383045954",
      "id" : 383045954,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13033",
      "updated_at" : "2018-04-20T09:49:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383045954",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Reverse chron. summary of ACKs from #11857:\r\n- @TheBlueMatt: utACK https://github.com/bitcoin/bitcoin/commit/523dd763bfe39150e369332e415215d33f2a3ef5\r\n- @jamesob: Tested ACK https://github.com/bitcoin/bitcoin/commit/ea8be45ace75b649584c163deca3051c4f33aa16\r\n- @jtimon: Concept ACK\r\n- @ryanofsky: utACK https://github.com/bitcoin/bitcoin/commit/806b2f1764b6e5a9c7abec887bfa89cd386648d8\r\n- @Sjors: Tested (ACK, maybe?) https://github.com/bitcoin/bitcoin/commit/806b2f1764b6e5a9c7abec887bfa89cd386648d8\r\n- @jonasschnelli: Concept ACK\r\n- @sipa: Concept ACK\r\n- @laanwj: Concept ACK\r\n",
      "created_at" : "2018-04-23T16:03:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#issuecomment-383629372",
      "id" : 383629372,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13033",
      "updated_at" : "2018-04-23T16:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383629372",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "I cannot view this PR (github always gives me the unicorn when I try to view it)\nLast IRC meeting more people had the problem.\nProbably best to reopen it as a new PR...\n",
      "created_at" : "2018-04-23T18:15:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#issuecomment-383671934",
      "id" : 383671934,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13033",
      "updated_at" : "2018-04-23T18:15:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383671934",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183750401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183750401"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Rename file? PR changed.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T14:24:20Z",
      "diff_hunk" : "@@ -0,0 +1,11 @@\n+Transaction index changes",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183750401",
      "id" : 183750401,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 1,
      "path" : "doc/release-notes-pr11857.md",
      "position" : null,
      "pull_request_review_id" : 114807393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183750401",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183750891"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183750891"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit, 2018? (and 2 more files)",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T14:25:31Z",
      "diff_hunk" : "@@ -0,0 +1,308 @@\n+// Copyright (c) 2017 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183750891",
      "id" : 183750891,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 1,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 114807393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183750891",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183759742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183759742"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In order to avoid locking and lookup here, how about adding the argument `CBlockIndex* pindex` to `TxToJSON`? (I know this is only called from `getrawtransaction`).",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T14:46:24Z",
      "diff_hunk" : "@@ -47,6 +48,8 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n \n     if (!hashBlock.IsNull()) {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183759742",
      "id" : 183759742,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 12,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 12,
      "pull_request_review_id" : 114807393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183759742",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183768895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183768895"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit, `LookupTransaction`.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T15:07:01Z",
      "diff_hunk" : "@@ -0,0 +1,94 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <threadinterrupt.h>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Sync the tx index with the block index starting from the current best\n+    /// block. Intended to be run in its own thread, m_thread_sync, and can be\n+    /// interrupted with m_interrupt. Once the txindex gets in sync, the\n+    /// m_synced flag is set and the BlockConnected ValidationInterface callback\n+    /// takes over and the sync thread exits.\n+    void ThreadSync();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+    /// Write the current chain block locator to the DB.\n+    bool WriteBestBlock();\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+    void SetBestChain(const CBlockLocator& locator) override;\n+\n+public:\n+    /// Constructs the TxIndex, which becomes available to be queried.\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);\n+\n+    /// Destructor interrupts sync thread if running and blocks until it exits.\n+    ~TxIndex();\n+\n+    /// Blocks the current thread until the transaction index is caught up to\n+    /// the current state of the block chain. This only blocks if the index has gotten in sync once\n+    /// and only needs to process blocks in the ValidationInterface queue. If the index is catching\n+    /// up from far behind, this method does not block and immediately returns false.\n+    bool BlockUntilSyncedToCurrentChain();\n+\n+    /// Look up a raw transaction by hash.\n+    ///\n+    /// @param[in]   tx_hash  The hash of the transaction to be returned.\n+    /// @param[out]  block_hash  The hash of the block the transaction is found in.\n+    /// @param[out]  tx  The raw transaction itself.\n+    /// @return  true if transaction is found, false otherwise\n+    bool FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183768895",
      "id" : 183768895,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 79,
      "path" : "src/index/txindex.h",
      "position" : null,
      "pull_request_review_id" : 114807393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183768895",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183768997"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183768997"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Drop `raw`?",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T15:07:15Z",
      "diff_hunk" : "@@ -0,0 +1,94 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <threadinterrupt.h>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Sync the tx index with the block index starting from the current best\n+    /// block. Intended to be run in its own thread, m_thread_sync, and can be\n+    /// interrupted with m_interrupt. Once the txindex gets in sync, the\n+    /// m_synced flag is set and the BlockConnected ValidationInterface callback\n+    /// takes over and the sync thread exits.\n+    void ThreadSync();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+    /// Write the current chain block locator to the DB.\n+    bool WriteBestBlock();\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+    void SetBestChain(const CBlockLocator& locator) override;\n+\n+public:\n+    /// Constructs the TxIndex, which becomes available to be queried.\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);\n+\n+    /// Destructor interrupts sync thread if running and blocks until it exits.\n+    ~TxIndex();\n+\n+    /// Blocks the current thread until the transaction index is caught up to\n+    /// the current state of the block chain. This only blocks if the index has gotten in sync once\n+    /// and only needs to process blocks in the ValidationInterface queue. If the index is catching\n+    /// up from far behind, this method does not block and immediately returns false.\n+    bool BlockUntilSyncedToCurrentChain();\n+\n+    /// Look up a raw transaction by hash.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183768997",
      "id" : 183768997,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 73,
      "path" : "src/index/txindex.h",
      "position" : null,
      "pull_request_review_id" : 114807393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183768997",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183769081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183769081"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Drop raw? ",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T15:07:29Z",
      "diff_hunk" : "@@ -0,0 +1,94 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <threadinterrupt.h>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Sync the tx index with the block index starting from the current best\n+    /// block. Intended to be run in its own thread, m_thread_sync, and can be\n+    /// interrupted with m_interrupt. Once the txindex gets in sync, the\n+    /// m_synced flag is set and the BlockConnected ValidationInterface callback\n+    /// takes over and the sync thread exits.\n+    void ThreadSync();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+    /// Write the current chain block locator to the DB.\n+    bool WriteBestBlock();\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+    void SetBestChain(const CBlockLocator& locator) override;\n+\n+public:\n+    /// Constructs the TxIndex, which becomes available to be queried.\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);\n+\n+    /// Destructor interrupts sync thread if running and blocks until it exits.\n+    ~TxIndex();\n+\n+    /// Blocks the current thread until the transaction index is caught up to\n+    /// the current state of the block chain. This only blocks if the index has gotten in sync once\n+    /// and only needs to process blocks in the ValidationInterface queue. If the index is catching\n+    /// up from far behind, this method does not block and immediately returns false.\n+    bool BlockUntilSyncedToCurrentChain();\n+\n+    /// Look up a raw transaction by hash.\n+    ///\n+    /// @param[in]   tx_hash  The hash of the transaction to be returned.\n+    /// @param[out]  block_hash  The hash of the block the transaction is found in.\n+    /// @param[out]  tx  The raw transaction itself.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183769081",
      "id" : 183769081,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 77,
      "path" : "src/index/txindex.h",
      "position" : null,
      "pull_request_review_id" : 114807393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183769081",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183779526"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183779526"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't understand this case, should exit instead?",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T15:34:21Z",
      "diff_hunk" : "@@ -0,0 +1,308 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        locator.SetNull();\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        int64_t last_locator_write_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                WriteBestBlock();\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    WriteBestBlock();\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n+                WriteBestBlock();\n+                last_locator_write_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+bool TxIndex::WriteBestBlock()\n+{\n+    LOCK(cs_main);\n+    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+        return error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+    return true;\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of \" /* Continued */\n+                      \"known best chain (tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best \" /* Continued */\n+                  \"chain (tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {\n+        error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        const CBlockIndex* chain_tip = chainActive.Tip();\n+        const CBlockIndex* best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    LogPrintf(\"%s: txindex is catching up on block notifications\\n\", __func__);\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const\n+{\n+    CDiskTxPos postx;\n+    if (!m_db->ReadTxPos(tx_hash, postx)) {\n+        return false;\n+    }\n+\n+    CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n+    }\n+    CBlockHeader header;\n+    try {\n+        file >> header;\n+        fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n+        file >> tx;\n+    } catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    if (tx->GetHash() != tx_hash) {\n+        return error(\"%s: txid mismatch\", __func__);\n+    }\n+    block_hash = header.GetHash();\n+    return true;\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183779526",
      "id" : 183779526,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 293,
      "path" : "src/index/txindex.cpp",
      "position" : 293,
      "pull_request_review_id" : 114807393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183779526",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183782972"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183782972"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Instead of nesting, repeat the lock:\r\n```cpp\r\nif (!request.params[1].isNull()) {\r\n    hashBlock = uint256S(request.params[1].get_str());\r\n    LOCK(cs_main);\r\n    ...\r\n} else {\r\n    LOCK(cs_main);\r\n    ...\r\n}\r\n```",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T15:43:40Z",
      "diff_hunk" : "@@ -229,29 +239,36 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n        oneTxid = hash;\n     }\n \n-    LOCK(cs_main);\n-\n     CBlockIndex* pblockindex = nullptr;\n-\n     uint256 hashBlock;\n-    if (!request.params[1].isNull())\n     {\n-        hashBlock = uint256S(request.params[1].get_str());\n-        pblockindex = LookupBlockIndex(hashBlock);\n-        if (!pblockindex) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-        }\n-    } else {\n-        // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n-        for (const auto& tx : setTxids) {\n-            const Coin& coin = AccessByTxid(*pcoinsTip, tx);\n-            if (!coin.IsSpent()) {\n-                pblockindex = chainActive[coin.nHeight];\n-                break;\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183782972",
      "id" : 183782972,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 86,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 114807393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183782972",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183825895"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183825895"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm pretty against adding more to this PR. Seems like a good follow-on cleanup item.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T17:56:36Z",
      "diff_hunk" : "@@ -47,6 +48,8 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n \n     if (!hashBlock.IsNull()) {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183825895",
      "id" : 183825895,
      "in_reply_to_id" : 183759742,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 12,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 12,
      "pull_request_review_id" : 114898736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183825895",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183827664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183827664"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "My thinking is that logging and running without the TxIndex is better than FatalError, but I could see it the other way too. Probably a good idea to add a log line at the very least.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T18:02:17Z",
      "diff_hunk" : "@@ -0,0 +1,308 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        locator.SetNull();\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        int64_t last_locator_write_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                WriteBestBlock();\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    WriteBestBlock();\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n+                WriteBestBlock();\n+                last_locator_write_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+bool TxIndex::WriteBestBlock()\n+{\n+    LOCK(cs_main);\n+    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+        return error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+    return true;\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of \" /* Continued */\n+                      \"known best chain (tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best \" /* Continued */\n+                  \"chain (tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {\n+        error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        const CBlockIndex* chain_tip = chainActive.Tip();\n+        const CBlockIndex* best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    LogPrintf(\"%s: txindex is catching up on block notifications\\n\", __func__);\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const\n+{\n+    CDiskTxPos postx;\n+    if (!m_db->ReadTxPos(tx_hash, postx)) {\n+        return false;\n+    }\n+\n+    CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n+    }\n+    CBlockHeader header;\n+    try {\n+        file >> header;\n+        fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n+        file >> tx;\n+    } catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    if (tx->GetHash() != tx_hash) {\n+        return error(\"%s: txid mismatch\", __func__);\n+    }\n+    block_hash = header.GetHash();\n+    return true;\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183827664",
      "id" : 183827664,
      "in_reply_to_id" : 183779526,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 293,
      "path" : "src/index/txindex.cpp",
      "position" : 293,
      "pull_request_review_id" : 114900858,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183827664",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183828483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183828483"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Your wish is my command.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T18:05:02Z",
      "diff_hunk" : "@@ -0,0 +1,94 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <threadinterrupt.h>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Sync the tx index with the block index starting from the current best\n+    /// block. Intended to be run in its own thread, m_thread_sync, and can be\n+    /// interrupted with m_interrupt. Once the txindex gets in sync, the\n+    /// m_synced flag is set and the BlockConnected ValidationInterface callback\n+    /// takes over and the sync thread exits.\n+    void ThreadSync();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+    /// Write the current chain block locator to the DB.\n+    bool WriteBestBlock();\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+    void SetBestChain(const CBlockLocator& locator) override;\n+\n+public:\n+    /// Constructs the TxIndex, which becomes available to be queried.\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);\n+\n+    /// Destructor interrupts sync thread if running and blocks until it exits.\n+    ~TxIndex();\n+\n+    /// Blocks the current thread until the transaction index is caught up to\n+    /// the current state of the block chain. This only blocks if the index has gotten in sync once\n+    /// and only needs to process blocks in the ValidationInterface queue. If the index is catching\n+    /// up from far behind, this method does not block and immediately returns false.\n+    bool BlockUntilSyncedToCurrentChain();\n+\n+    /// Look up a raw transaction by hash.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183828483",
      "id" : 183828483,
      "in_reply_to_id" : 183768997,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 73,
      "path" : "src/index/txindex.h",
      "position" : null,
      "pull_request_review_id" : 114901893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183828483",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183832216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183832216"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fair.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T18:17:11Z",
      "diff_hunk" : "@@ -47,6 +48,8 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n \n     if (!hashBlock.IsNull()) {\n+        LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183832216",
      "id" : 183832216,
      "in_reply_to_id" : 183759742,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 12,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 12,
      "pull_request_review_id" : 114906579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183832216",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183869704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183869704"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd say running without the desired functionality should exit.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T20:30:09Z",
      "diff_hunk" : "@@ -0,0 +1,308 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        locator.SetNull();\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        int64_t last_locator_write_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                WriteBestBlock();\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    WriteBestBlock();\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n+                WriteBestBlock();\n+                last_locator_write_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+bool TxIndex::WriteBestBlock()\n+{\n+    LOCK(cs_main);\n+    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+        return error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+    return true;\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of \" /* Continued */\n+                      \"known best chain (tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best \" /* Continued */\n+                  \"chain (tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {\n+        error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        const CBlockIndex* chain_tip = chainActive.Tip();\n+        const CBlockIndex* best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    LogPrintf(\"%s: txindex is catching up on block notifications\\n\", __func__);\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const\n+{\n+    CDiskTxPos postx;\n+    if (!m_db->ReadTxPos(tx_hash, postx)) {\n+        return false;\n+    }\n+\n+    CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n+    }\n+    CBlockHeader header;\n+    try {\n+        file >> header;\n+        fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n+        file >> tx;\n+    } catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    if (tx->GetHash() != tx_hash) {\n+        return error(\"%s: txid mismatch\", __func__);\n+    }\n+    block_hash = header.GetHash();\n+    return true;\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183869704",
      "id" : 183869704,
      "in_reply_to_id" : 183779526,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 293,
      "path" : "src/index/txindex.cpp",
      "position" : 293,
      "pull_request_review_id" : 114952666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183869704",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183894739"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183894739"
         }
      },
      "author_association" : "OWNER",
      "body" : "As this is called in the middle of `ThreadSync()`, shouldn't this be writing a locator for `pindex` rather than `chainActive`?",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T22:06:06Z",
      "diff_hunk" : "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        locator.SetNull();\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        int64_t last_locator_write_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                WriteBestBlock();\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    WriteBestBlock();\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n+                WriteBestBlock();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183894739",
      "id" : 183894739,
      "original_commit_id" : "40eabf6a71eef65cf66b20300988323fcc1afcb5",
      "original_position" : 111,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 114982812,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183894739",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183897451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183897451"
         }
      },
      "author_association" : "OWNER",
      "body" : "I agree with @promag. If the daemon can't provide the service that is requested, it should fail early. Otherwise you may just complicate debugging.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T22:20:16Z",
      "diff_hunk" : "@@ -0,0 +1,308 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        locator.SetNull();\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        int64_t last_locator_write_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                WriteBestBlock();\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    WriteBestBlock();\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n+                WriteBestBlock();\n+                last_locator_write_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+bool TxIndex::WriteBestBlock()\n+{\n+    LOCK(cs_main);\n+    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+        return error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+    return true;\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of \" /* Continued */\n+                      \"known best chain (tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best \" /* Continued */\n+                  \"chain (tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {\n+        error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        const CBlockIndex* chain_tip = chainActive.Tip();\n+        const CBlockIndex* best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    LogPrintf(\"%s: txindex is catching up on block notifications\\n\", __func__);\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const\n+{\n+    CDiskTxPos postx;\n+    if (!m_db->ReadTxPos(tx_hash, postx)) {\n+        return false;\n+    }\n+\n+    CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n+    }\n+    CBlockHeader header;\n+    try {\n+        file >> header;\n+        fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n+        file >> tx;\n+    } catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    if (tx->GetHash() != tx_hash) {\n+        return error(\"%s: txid mismatch\", __func__);\n+    }\n+    block_hash = header.GetHash();\n+    return true;\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183897451",
      "id" : 183897451,
      "in_reply_to_id" : 183779526,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 293,
      "path" : "src/index/txindex.cpp",
      "position" : 293,
      "pull_request_review_id" : 114985998,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183897451",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183906474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183906474"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, wow, oops. Good catch.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T23:13:04Z",
      "diff_hunk" : "@@ -0,0 +1,310 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        locator.SetNull();\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        int64_t last_locator_write_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                WriteBestBlock();\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    WriteBestBlock();\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n+                WriteBestBlock();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183906474",
      "id" : 183906474,
      "in_reply_to_id" : 183894739,
      "original_commit_id" : "40eabf6a71eef65cf66b20300988323fcc1afcb5",
      "original_position" : 111,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 114996406,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183906474",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183907852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183907852"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Changed to FatalError.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T23:22:24Z",
      "diff_hunk" : "@@ -0,0 +1,308 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        locator.SetNull();\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        int64_t last_locator_write_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                WriteBestBlock();\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    WriteBestBlock();\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n+                WriteBestBlock();\n+                last_locator_write_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\");\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.emplace_back(tx->GetHash(), pos);\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxs(vPos);\n+}\n+\n+bool TxIndex::WriteBestBlock()\n+{\n+    LOCK(cs_main);\n+    if (!m_db->WriteBestBlock(chainActive.GetLocator())) {\n+        return error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+    return true;\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        // Ensure block connects to an ancestor of the current best block. This should be the case\n+        // most of the time, but may not be immediately after the the sync thread catches up and sets\n+        // m_synced. Consider the case where there is a reorg and the blocks on the stale branch are\n+        // in the ValidationInterface queue backlog even after the sync thread has caught up to the\n+        // new chain tip. In this unlikely event, log a warning and let the queue clear.\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            LogPrintf(\"%s: WARNING: Block %s does not connect to an ancestor of \" /* Continued */\n+                      \"known best chain (tip=%s); not updating txindex\\n\",\n+                      __func__, pindex->GetBlockHash().ToString(),\n+                      best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+void TxIndex::SetBestChain(const CBlockLocator& locator)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    const uint256& locator_tip_hash = locator.vHave.front();\n+    const CBlockIndex* locator_tip_index;\n+    {\n+        LOCK(cs_main);\n+        locator_tip_index = LookupBlockIndex(locator_tip_hash);\n+    }\n+\n+    if (!locator_tip_index) {\n+        FatalError(\"%s: First block (hash=%s) in locator was not found\",\n+                   __func__, locator_tip_hash.ToString());\n+        return;\n+    }\n+\n+    // This checks that SetBestChain callbacks are received after BlockConnected. The check may fail\n+    // immediately after the the sync thread catches up and sets m_synced. Consider the case where\n+    // there is a reorg and the blocks on the stale branch are in the ValidationInterface queue\n+    // backlog even after the sync thread has caught up to the new chain tip. In this unlikely\n+    // event, log a warning and let the queue clear.\n+    const CBlockIndex* best_block_index = m_best_block_index.load();\n+    if (best_block_index->GetAncestor(locator_tip_index->nHeight) != locator_tip_index) {\n+        LogPrintf(\"%s: WARNING: Locator contains block (hash=%s) not on known best \" /* Continued */\n+                  \"chain (tip=%s); not writing txindex locator\\n\",\n+                  __func__, locator_tip_hash.ToString(),\n+                  best_block_index->GetBlockHash().ToString());\n+        return;\n+    }\n+\n+    if (!m_db->WriteBestBlock(locator)) {\n+        error(\"%s: Failed to write locator to disk\", __func__);\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        const CBlockIndex* chain_tip = chainActive.Tip();\n+        const CBlockIndex* best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    LogPrintf(\"%s: txindex is catching up on block notifications\\n\", __func__);\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& tx_hash, uint256& block_hash, CTransactionRef& tx) const\n+{\n+    CDiskTxPos postx;\n+    if (!m_db->ReadTxPos(tx_hash, postx)) {\n+        return false;\n+    }\n+\n+    CAutoFile file(OpenBlockFile(postx, true), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n+    }\n+    CBlockHeader header;\n+    try {\n+        file >> header;\n+        fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n+        file >> tx;\n+    } catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    if (tx->GetHash() != tx_hash) {\n+        return error(\"%s: txid mismatch\", __func__);\n+    }\n+    block_hash = header.GetHash();\n+    return true;\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183907852",
      "id" : 183907852,
      "in_reply_to_id" : 183779526,
      "original_commit_id" : "3272b17637c5f72f077ce1a5bf7f4e09847883a0",
      "original_position" : 293,
      "path" : "src/index/txindex.cpp",
      "position" : 293,
      "pull_request_review_id" : 114997985,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:22:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183907852",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183910622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183910622"
         }
      },
      "author_association" : "OWNER",
      "body" : "This function takes an argument now.",
      "commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "created_at" : "2018-04-24T23:40:56Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+constexpr int64_t SYNC_LOCATOR_WRITE_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records in the old database.\n+    if (!m_db->MigrateData(*pblocktree, chainActive.GetLocator())) {\n+        return false;\n+    }\n+\n+    CBlockLocator locator;\n+    if (!m_db->ReadBestBlock(locator)) {\n+        locator.SetNull();\n+    }\n+\n+    m_best_block_index = FindForkInGlobalIndex(chainActive, locator);\n+    m_synced = m_best_block_index.load() == chainActive.Tip();\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    const CBlockIndex* pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    const CBlockIndex* pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        int64_t last_locator_write_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                WriteBestBlock();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#discussion_r183910622",
      "id" : 183910622,
      "original_commit_id" : "8f1bfe1488ac84c4356857155d28cdad7a8a6413",
      "original_position" : 88,
      "path" : "src/index/txindex.cpp",
      "position" : 88,
      "pull_request_review_id" : 115001210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13033",
      "updated_at" : "2018-04-24T23:40:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183910622",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "utACK 9b2704777ceeca48d57ce058ae91674c7764b143\r\n\r\nAlso compared with a re-merge of master with 806b2f1 (which had utACK from @ryanofsky and @Sjors), with a re-merge of master with 523dd76 (which had utACK from @TheBlueMatt), and with a re-merge of master with ea8be45 (which had Tested ACK from @jamesob) to find the only differences are:\r\n* Adding an abstracted-out function `TxIndex::WriteBestBlock`, which is invoked additionally after interrupting the background sync and periodically.\r\n* Checks in `TxIndex::SetBestChain` to see if callbacks are received after BlockConnected.\r\n* Push down `cs_main` locks in `gettxoutproof`.\r\n* Simplification of `TxIndexDB::ReadBestBlock`.\r\n* Changes in comments and logging\r\n",
      "created_at" : "2018-04-26T01:20:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#issuecomment-384482634",
      "id" : 384482634,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13033",
      "updated_at" : "2018-04-26T01:37:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384482634",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ":tada: nice work, @jimpo.",
      "created_at" : "2018-04-26T04:50:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13033#issuecomment-384512294",
      "id" : 384512294,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13033",
      "updated_at" : "2018-04-26T04:50:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384512294",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
