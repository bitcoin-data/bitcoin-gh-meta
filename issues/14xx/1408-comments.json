[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r914353"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914353"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What is the big-picture purpose of CBlockStore ?\nIs it for storing blocks in the database?\nBeing told about new blocks and keeping track of the best chain?\nBoth? Something else?\n\nAnd what's up with ProcessCallbacks-- I'm not seeing why that's necessary, or why BlockStore would expose threads, but maybe that's because I don't understand the big-picture purpose/design.\n",
      "commit_id" : "e60084cae3add85c54878bd6f620b41f107dc691",
      "created_at" : "2012-06-01T12:27:15Z",
      "diff_hunk" : "@@ -0,0 +1,99 @@\n+#ifndef BITCOIN_BLOCKSTORE_H\n+#define BITCOIN_BLOCKSTORE_H\n+\n+// This API is considered stable ONLY for existing bitcoin codebases,\n+// any futher uses are not yet supported.\n+// This API is subject to change dramatically overnight, do not\n+// depend on it for anything.\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r914353",
      "id" : 914353,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNDM1Mw==",
      "original_commit_id" : "8ee69728898100400bcb8295c8666b8e101990e8",
      "original_line" : null,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/blockstore.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914353/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-07-02T01:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914353",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r914376"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914376"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The purpose of CBlockStore is to act as a hub (oops, Im gonna rename it to CHub) between p2p, wallet and the block storage.  The block storage (including being told about new blocks, holding the chain (or not, if SPV)) will be hidden behind CHub, as seen by p2p and wallet.  A CHub can then callback to a CBlockStore/CSPVBlockStore/etc.  Eventually, you could even run p2p and wallet clients in separate processes for additional security, that is the long-long-long term goal.\nIn terms of exposing threads, that is more for added functionality later which cleans up the API a bit (when you need to run n regular threads, and possibly multiple callback threads).\n",
      "commit_id" : "e60084cae3add85c54878bd6f620b41f107dc691",
      "created_at" : "2012-06-01T12:33:26Z",
      "diff_hunk" : "@@ -0,0 +1,99 @@\n+#ifndef BITCOIN_BLOCKSTORE_H\n+#define BITCOIN_BLOCKSTORE_H\n+\n+// This API is considered stable ONLY for existing bitcoin codebases,\n+// any futher uses are not yet supported.\n+// This API is subject to change dramatically overnight, do not\n+// depend on it for anything.\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r914376",
      "id" : 914376,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNDM3Ng==",
      "original_commit_id" : "8ee69728898100400bcb8295c8666b8e101990e8",
      "original_line" : null,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/blockstore.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914376/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-07-02T01:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914376",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated with all the feedback so far.  Any further work (aside from bug-fixes) will be done on other branches, so this branch is ready for review.  Take special note of the last commit (and its very long commit message).\n",
      "created_at" : "2012-06-02T02:43:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1408#issuecomment-6074405",
      "id" : 6074405,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1408",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzQ0MDU=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6074405/reactions"
      },
      "updated_at" : "2012-06-04T16:12:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6074405",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r951182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951182"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I suppose CHubListener could be derived protected. No class except CWallet should be able to call RegisterWithHub and related functions. The callback functions in CHubListener can be made protected directly I suppose - they are only intended to be overridden, not to be called by anyone except via CHub's signals.\n",
      "commit_id" : "e60084cae3add85c54878bd6f620b41f107dc691",
      "created_at" : "2012-06-08T14:47:54Z",
      "diff_hunk" : "@@ -57,7 +58,7 @@ class CKeyPool\n /** A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet : public CCryptoKeyStore\n+class CWallet : public CCryptoKeyStore, public CHubListener",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r951182",
      "id" : 951182,
      "line" : 61,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MTE4Mg==",
      "original_commit_id" : "b8fe0a02623063f261b87d82fb0ace0b426706af",
      "original_line" : null,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet.h",
      "position" : 13,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951182/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-07-02T01:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951182",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r951216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951216"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps we could have a class CHubClient, which has a pointer to a CHub in a protected field, and public methods EmitSome, which forward to the connected CHub (or maybe the EmitSome method's implementations could even be moved to CHubCLient). class CHubListener could then extend CHubClient and reuse the phub pointer in it.\n\nAdvantage: inside CWallet, you can simply call Emit\\* directory without qualifying with the phub pointer, while guaranteeing that the wallet will get callbacks from the same hub as the one it submits to.\n",
      "commit_id" : "e60084cae3add85c54878bd6f620b41f107dc691",
      "created_at" : "2012-06-08T14:51:12Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+#ifndef BITCOIN_HUB_H\n+#define BITCOIN_HUB_H\n+\n+// This API is considered stable ONLY for existing bitcoin codebases,\n+// any futher uses are not yet supported.\n+// This API is subject to change dramatically overnight, do not\n+// depend on it for anything.\n+\n+#include <boost/signals2/signal.hpp>\n+#include <queue>\n+\n+#include \"uint256.h\"\n+#include \"sync.h\"\n+\n+class CBlock;\n+class CMerkleTx;\n+class CTransaction;\n+class CAlert;\n+\n+class CHubSignalTable\n+{\n+public:\n+    CCriticalSection cs_sigCommitBlock;\n+    boost::signals2::signal<void (const CBlock&)> sigCommitBlock;\n+\n+    CCriticalSection cs_sigCommitTransactionToMemoryPool;\n+    boost::signals2::signal<void (const CTransaction&)> sigCommitTransactionToMemoryPool;\n+\n+    CCriticalSection cs_sigCommitAlert;\n+    boost::signals2::signal<void (const CAlert&)> sigCommitAlert;\n+    CCriticalSection cs_sigRemoveAlert;\n+    boost::signals2::signal<void (const CAlert&)> sigRemoveAlert;\n+\n+    CCriticalSection cs_sigAskForBlocks;\n+    boost::signals2::signal<void (const uint256, const uint256)> sigAskForBlocks;\n+};\n+\n+class CHubCallback\n+{\n+public:\n+    virtual ~CHubCallback() {};\n+    virtual void Signal(CHubSignalTable& sigtable) =0;\n+};\n+\n+class CHub\n+{\n+private:\n+    CHubSignalTable sigtable;\n+\n+    CCriticalSection cs_callbacks;\n+    std::queue<CHubCallback*> queueCallbacks;\n+    CSemaphore sem_callbacks;\n+\n+    bool fProcessCallbacks;\n+    int nCallbackThreads;\n+\n+    void SubmitCallbackCommitBlock(const CBlock &block);\n+\n+    bool EmitTransactionInner(CTransaction& tx, bool fCheckInputs);\n+    void SubmitCallbackCommitTransactionToMemoryPool(const CTransaction &tx);\n+\n+    void SubmitCallbackCommitAlert(const CAlert &alert);\n+    void SubmitCallbackRemoveAlert(const CAlert &alert);\n+public:\n+//Util methods\n+    // Loops to process callbacks (do not call manually, automatically started in the constructor)\n+        void ProcessCallbacks();\n+    // Stop callback processing threads \n+    void StopProcessCallbacks();\n+\n+    CHub();\n+    ~CHub()  { StopProcessCallbacks(); }\n+\n+//Register methods\n+    // Register a handler (of the form void f(const CBlock& block)) to be called after every block commit\n+    void RegisterCommitBlock(boost::function<void (const CBlock&)> func) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock.connect(func); }\n+\n+    // Register a handler (of the form void f(const CTransaction& tx)) to be called after every transaction commit to memory pool\n+    void RegisterCommitTransactionToMemoryPool(boost::function<void (const CTransaction&)> func) { LOCK(sigtable.cs_sigCommitTransactionToMemoryPool); sigtable.sigCommitTransactionToMemoryPool.connect(func); }\n+\n+    // Register a handler (of the form void f(const CAlert& alert)) to be called after every alert commit\n+    void RegisterCommitAlert(boost::function<void (const CAlert&)> func) { LOCK(sigtable.cs_sigCommitAlert); sigtable.sigCommitAlert.connect(func); }\n+    // Register a handler (of the form void f(const CAlert& alert)) to be called after every alert cancel or expire\n+    void RegisterRemoveAlert(boost::function<void (const CAlert&)> func) { LOCK(sigtable.cs_sigRemoveAlert); sigtable.sigRemoveAlert.connect(func); }\n+\n+    // Register a handler (of the form void f(const uint256 hashEnd, const uint256 hashOriginator)) to be called when we need to ask for blocks up to hashEnd\n+    //   Should always start from the best block (GetBestBlockIndex())\n+    //   The receiver should check if it has a peer which is known to have a block with hash hashOriginator and if it does, it should\n+    //    send the block query to that node.\n+    void RegisterAskForBlocks(boost::function<void (const uint256, const uint256)> func) { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks.connect(func); }\n+\n+//Blockchain access methods\n+    // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n+    //   be handled by listeners\n+    bool EmitBlock(CBlock& block);\n+    bool EmitAlert(CAlert& alert);\n+    // Emitting transactions already in a block is acceptable only if it is a supporting\n+    //   transaction for one of our own\n+    // fCheckInputs is ignored (and set to true) if !IsInitialBlockDownload() && !fClient\n+    // Only set fCheckInputs when tx is a supporting transaction for one of our own\n+    bool EmitTransaction(CMerkleTx& tx, bool fCheckInputs=true);\n+    bool EmitTransaction(CTransaction& tx, bool fCheckInputs=true);\n+\n+//Connected wallet/etc access methods\n+\n+    // Ask that any listeners who have access to ask other nodes for blocks\n+    // (ie net) ask for all blocks between GetBestBlockIndex() and hashEnd\n+    // If hashOriginator is specified, then a node which is known to have a block\n+    //   with that hash will be the one to get the block request, unless no connected\n+    //   nodes are known to have this block, in which case a random one will be queried.\n+    void AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator);\n+};\n+\n+// A simple generic CHub Listening class which can be extended, if you wish",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r951216",
      "id" : 951216,
      "line" : 114,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MTIxNg==",
      "original_commit_id" : "b8fe0a02623063f261b87d82fb0ace0b426706af",
      "original_line" : null,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/hub.h",
      "position" : 114,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951216/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-07-02T01:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/951216",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r957355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957355"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Currently pwalletMain->RegisterWithHub(phub) is called from init.cpp, and I kinda like that design.  That said, I did go ahead and make the callback virtual functions protected.\n",
      "commit_id" : "e60084cae3add85c54878bd6f620b41f107dc691",
      "created_at" : "2012-06-10T20:34:01Z",
      "diff_hunk" : "@@ -57,7 +58,7 @@ class CKeyPool\n /** A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n  */\n-class CWallet : public CCryptoKeyStore\n+class CWallet : public CCryptoKeyStore, public CHubListener",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r957355",
      "id" : 957355,
      "line" : 61,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NzM1NQ==",
      "original_commit_id" : "b8fe0a02623063f261b87d82fb0ace0b426706af",
      "original_line" : null,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/wallet.h",
      "position" : 13,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957355/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-07-02T01:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r957359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957359"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I had originally made CHubListener do that as well, but, as it turns out, we only ever call EmitTransaction from CWalletTx::AcceptWalletTransaction (which calls EmitTransaction on each supporting transaction first), and making the hub pointer public so that CWalletTx can call pwallet->phub->EmitTransaction seems kinda ugly to me.  Thus a CHubClient would be unused (currently), but ACK on the idea probably for a P2P/Net class.  One could move AcceptWalletTransaction code to CWallet, as its only used twice, but I find that to also be ugly...  In the end, since having more than one CHub in a given process is entirely unsupported, it seems cleaner to just use the global phub, but it wouldnt be hard to pass a phub pointer to CWalletTx::EmitTransaction if we wanted to support that (though a CHubClient::phub should be private, whereas that would require it be protected, so, again, I find that ugly...)\n",
      "commit_id" : "e60084cae3add85c54878bd6f620b41f107dc691",
      "created_at" : "2012-06-10T20:38:22Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+#ifndef BITCOIN_HUB_H\n+#define BITCOIN_HUB_H\n+\n+// This API is considered stable ONLY for existing bitcoin codebases,\n+// any futher uses are not yet supported.\n+// This API is subject to change dramatically overnight, do not\n+// depend on it for anything.\n+\n+#include <boost/signals2/signal.hpp>\n+#include <queue>\n+\n+#include \"uint256.h\"\n+#include \"sync.h\"\n+\n+class CBlock;\n+class CMerkleTx;\n+class CTransaction;\n+class CAlert;\n+\n+class CHubSignalTable\n+{\n+public:\n+    CCriticalSection cs_sigCommitBlock;\n+    boost::signals2::signal<void (const CBlock&)> sigCommitBlock;\n+\n+    CCriticalSection cs_sigCommitTransactionToMemoryPool;\n+    boost::signals2::signal<void (const CTransaction&)> sigCommitTransactionToMemoryPool;\n+\n+    CCriticalSection cs_sigCommitAlert;\n+    boost::signals2::signal<void (const CAlert&)> sigCommitAlert;\n+    CCriticalSection cs_sigRemoveAlert;\n+    boost::signals2::signal<void (const CAlert&)> sigRemoveAlert;\n+\n+    CCriticalSection cs_sigAskForBlocks;\n+    boost::signals2::signal<void (const uint256, const uint256)> sigAskForBlocks;\n+};\n+\n+class CHubCallback\n+{\n+public:\n+    virtual ~CHubCallback() {};\n+    virtual void Signal(CHubSignalTable& sigtable) =0;\n+};\n+\n+class CHub\n+{\n+private:\n+    CHubSignalTable sigtable;\n+\n+    CCriticalSection cs_callbacks;\n+    std::queue<CHubCallback*> queueCallbacks;\n+    CSemaphore sem_callbacks;\n+\n+    bool fProcessCallbacks;\n+    int nCallbackThreads;\n+\n+    void SubmitCallbackCommitBlock(const CBlock &block);\n+\n+    bool EmitTransactionInner(CTransaction& tx, bool fCheckInputs);\n+    void SubmitCallbackCommitTransactionToMemoryPool(const CTransaction &tx);\n+\n+    void SubmitCallbackCommitAlert(const CAlert &alert);\n+    void SubmitCallbackRemoveAlert(const CAlert &alert);\n+public:\n+//Util methods\n+    // Loops to process callbacks (do not call manually, automatically started in the constructor)\n+        void ProcessCallbacks();\n+    // Stop callback processing threads \n+    void StopProcessCallbacks();\n+\n+    CHub();\n+    ~CHub()  { StopProcessCallbacks(); }\n+\n+//Register methods\n+    // Register a handler (of the form void f(const CBlock& block)) to be called after every block commit\n+    void RegisterCommitBlock(boost::function<void (const CBlock&)> func) { LOCK(sigtable.cs_sigCommitBlock); sigtable.sigCommitBlock.connect(func); }\n+\n+    // Register a handler (of the form void f(const CTransaction& tx)) to be called after every transaction commit to memory pool\n+    void RegisterCommitTransactionToMemoryPool(boost::function<void (const CTransaction&)> func) { LOCK(sigtable.cs_sigCommitTransactionToMemoryPool); sigtable.sigCommitTransactionToMemoryPool.connect(func); }\n+\n+    // Register a handler (of the form void f(const CAlert& alert)) to be called after every alert commit\n+    void RegisterCommitAlert(boost::function<void (const CAlert&)> func) { LOCK(sigtable.cs_sigCommitAlert); sigtable.sigCommitAlert.connect(func); }\n+    // Register a handler (of the form void f(const CAlert& alert)) to be called after every alert cancel or expire\n+    void RegisterRemoveAlert(boost::function<void (const CAlert&)> func) { LOCK(sigtable.cs_sigRemoveAlert); sigtable.sigRemoveAlert.connect(func); }\n+\n+    // Register a handler (of the form void f(const uint256 hashEnd, const uint256 hashOriginator)) to be called when we need to ask for blocks up to hashEnd\n+    //   Should always start from the best block (GetBestBlockIndex())\n+    //   The receiver should check if it has a peer which is known to have a block with hash hashOriginator and if it does, it should\n+    //    send the block query to that node.\n+    void RegisterAskForBlocks(boost::function<void (const uint256, const uint256)> func) { LOCK(sigtable.cs_sigAskForBlocks); sigtable.sigAskForBlocks.connect(func); }\n+\n+//Blockchain access methods\n+    // Emit methods will verify the object, commit it to memory/disk and then place it in queue to\n+    //   be handled by listeners\n+    bool EmitBlock(CBlock& block);\n+    bool EmitAlert(CAlert& alert);\n+    // Emitting transactions already in a block is acceptable only if it is a supporting\n+    //   transaction for one of our own\n+    // fCheckInputs is ignored (and set to true) if !IsInitialBlockDownload() && !fClient\n+    // Only set fCheckInputs when tx is a supporting transaction for one of our own\n+    bool EmitTransaction(CMerkleTx& tx, bool fCheckInputs=true);\n+    bool EmitTransaction(CTransaction& tx, bool fCheckInputs=true);\n+\n+//Connected wallet/etc access methods\n+\n+    // Ask that any listeners who have access to ask other nodes for blocks\n+    // (ie net) ask for all blocks between GetBestBlockIndex() and hashEnd\n+    // If hashOriginator is specified, then a node which is known to have a block\n+    //   with that hash will be the one to get the block request, unless no connected\n+    //   nodes are known to have this block, in which case a random one will be queried.\n+    void AskForBlocks(const uint256 hashEnd, const uint256 hashOriginator);\n+};\n+\n+// A simple generic CHub Listening class which can be extended, if you wish",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1408#discussion_r957359",
      "id" : 957359,
      "line" : 114,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NzM1OQ==",
      "original_commit_id" : "b8fe0a02623063f261b87d82fb0ace0b426706af",
      "original_line" : null,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/hub.h",
      "position" : 114,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1408",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957359/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-07-02T01:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/957359",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This needs rebasing, and Im not going to keep rebasing this stuff without any interest in eventually merging.  If it ever gets interest, I may reopen.\n",
      "created_at" : "2012-07-05T20:15:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1408#issuecomment-6789402",
      "id" : 6789402,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1408",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODk0MDI=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6789402/reactions"
      },
      "updated_at" : "2012-07-05T20:15:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6789402",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
