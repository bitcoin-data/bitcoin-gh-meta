[
   {
      "author_association" : "MEMBER",
      "body" : "Rebased after ##10178 merge.",
      "created_at" : "2017-04-17T13:54:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-294489631",
      "id" : 294489631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI5NDQ4OTYzMQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294489631/reactions"
      },
      "updated_at" : "2017-04-17T13:54:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/294489631",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113017345"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113017345"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: i'm the last person who should comment on coding style, but isn't this easier to read:\r\n`std::atomic<bool> fCallbacksRunning(false)`",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-24T18:10:57Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113017345",
      "id" : 113017345,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzAxNzM0NQ==",
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_line" : 36,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34375067,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113017345/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113017345",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "node_id" : "MDQ6VXNlcjQzNjAzNDk=",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "fast review utACK\r\n",
      "created_at" : "2017-04-24T18:11:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-296775885",
      "id" : 296775885,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI5Njc3NTg4NQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296775885/reactions"
      },
      "updated_at" : "2017-04-24T18:11:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296775885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "node_id" : "MDQ6VXNlcjQzNjAzNDk=",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113068753"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113068753"
         }
      },
      "author_association" : "MEMBER",
      "body" : "My C++-fu is not good enough to get that to compile. Not actually sure why, though, frankly.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-24T22:08:36Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113068753",
      "id" : 113068753,
      "in_reply_to_id" : 113017345,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzA2ODc1Mw==",
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_line" : 36,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34430293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113068753/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113068753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113071523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113071523"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could you try\r\n```c++\r\nstd::atomic<bool> fCallbacksRunning = std::atomic<bool>(false);\r\n```\r\n?",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-24T22:25:55Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113071523",
      "id" : 113071523,
      "in_reply_to_id" : 113017345,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzA3MTUyMw==",
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_line" : 36,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34433090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113071523/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113071523",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113073136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113073136"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, that works, but I think thats worse than using the init wrapper, which is what that wrapper exists for.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-24T22:37:00Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113073136",
      "id" : 113073136,
      "in_reply_to_id" : 113017345,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzA3MzEzNg==",
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_line" : 36,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34434822,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113073136/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113073136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 010f3ae\r\n",
      "created_at" : "2017-04-25T12:55:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-297020818",
      "id" : 297020818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI5NzAyMDgxOA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297020818/reactions"
      },
      "updated_at" : "2017-06-28T15:22:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297020818",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't currently have tests written, but given nearly everything passes through I've found its pretty well-excersized by existing wallet functional tests. I'll add unit tests for this to my to-do list.\n\nOn April 25, 2017 8:55:34 AM EDT, \"Wladimir J. van der Laan\" <notifications@github.com> wrote:\n>utACK e5d0c66 - are you planning on adding tests for this functionality\n>later?\n",
      "created_at" : "2017-04-25T12:58:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-297021602",
      "id" : 297021602,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI5NzAyMTYwMg==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297021602/reactions"
      },
      "updated_at" : "2017-04-25T12:58:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297021602",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113189098"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113189098"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This doesn't seem exception-safe. If an exception is raised inside here, `fCallbacksRunning` will stay set forever.\r\n",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-25T13:06:35Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            callback();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113189098",
      "id" : 113189098,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzE4OTA5OA==",
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_line" : 59,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34556471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113189098/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113189098",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113214676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113214676"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed. Put a generic try {} catch(...) {Log} around it, not sure what else to do there.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-25T14:42:48Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            callback();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113214676",
      "id" : 113214676,
      "in_reply_to_id" : 113189098,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzIxNDY3Ng==",
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_line" : 59,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34584836,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113214676/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113214676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113345742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113345742"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use a std::unique_ptr instead?",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T00:59:08Z",
      "diff_hunk" : "@@ -4,49 +4,177 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            try {\n+                callback();\n+            } catch (...) {\n+                LogPrintf(\"Exception thrown in processing CValidationInterface callback\\n\");\n+            }\n+        }\n+    }\n+\n+    void AddToProcessQueue(const std::function<void (void)>& func) {\n+        if (!scheduler)\n+            return;\n+        {\n+            LOCK(cs_callbacksPending);\n+            callbacksPending.emplace_back(func);\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+};\n \n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {\n+    internals = new CMainSignalsInstance();\n+}\n+\n+CMainSignals::~CMainSignals() {\n+    delete internals;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113345742",
      "id" : 113345742,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM0NTc0Mg==",
      "original_commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "original_line" : 97,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34725080,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113345742/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113345742",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113345909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113345909"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's scary, it would lose a callback. Shouldn't it assert in this case?",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T01:00:50Z",
      "diff_hunk" : "@@ -4,49 +4,177 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            try {\n+                callback();\n+            } catch (...) {\n+                LogPrintf(\"Exception thrown in processing CValidationInterface callback\\n\");\n+            }\n+        }\n+    }\n+\n+    void AddToProcessQueue(const std::function<void (void)>& func) {\n+        if (!scheduler)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113345909",
      "id" : 113345909,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM0NTkwOQ==",
      "original_commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "original_line" : 69,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34725080,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113345909/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113345909",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113346076"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113346076"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Instead of looping until there are no more scheduled callbacks, isn't easier/better to return, but reschedule itself? That way a large set of queued callbacks won't prevent the scheduler from running other (non-callback) jobs in the mean time.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T01:03:04Z",
      "diff_hunk" : "@@ -4,49 +4,177 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113346076",
      "id" : 113346076,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM0NjA3Ng==",
      "original_commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "original_line" : 43,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34725080,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113346076/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113346076",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113375144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113375144"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You could catch the exception, clear the flag, and `throw` again. Though RAII is usually the best way in C++ to cover all exit paths.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T06:37:05Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            callback();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113375144",
      "id" : 113375144,
      "in_reply_to_id" : 113189098,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzM3NTE0NA==",
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_line" : 59,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34755983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113375144/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113375144",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113543573"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113543573"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use braced initialization in a class/struct definition:\r\n```c++\r\nstd::atomic<bool> fCallbacksRunning{false};\r\n```",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T19:38:16Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113543573",
      "id" : 113543573,
      "in_reply_to_id" : 113017345,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzU0MzU3Mw==",
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_line" : 36,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34941706,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113543573/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113543573",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113570307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113570307"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Cant, sadly, as the whole point was to not make CMainSignalsInterface sit in the .h to avoid having a bost/signals include in half our codebase.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T21:43:36Z",
      "diff_hunk" : "@@ -4,49 +4,177 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            try {\n+                callback();\n+            } catch (...) {\n+                LogPrintf(\"Exception thrown in processing CValidationInterface callback\\n\");\n+            }\n+        }\n+    }\n+\n+    void AddToProcessQueue(const std::function<void (void)>& func) {\n+        if (!scheduler)\n+            return;\n+        {\n+            LOCK(cs_callbacksPending);\n+            callbacksPending.emplace_back(func);\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+};\n \n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {\n+    internals = new CMainSignalsInstance();\n+}\n+\n+CMainSignals::~CMainSignals() {\n+    delete internals;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113570307",
      "id" : 113570307,
      "in_reply_to_id" : 113345742,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzU3MDMwNw==",
      "original_commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "original_line" : 97,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34971049,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113570307/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113570307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572738"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Rewrote to just use a regular bool inside the lock, no reason to really have an atomic here.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T21:56:31Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572738",
      "id" : 113572738,
      "in_reply_to_id" : 113017345,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzU3MjczOA==",
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_line" : 36,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34973636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572738/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572738",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572775"
         }
      },
      "author_association" : "MEMBER",
      "body" : "OK, made a local class that will RAII it :)",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T21:56:44Z",
      "diff_hunk" : "@@ -4,49 +4,172 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            callback();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572775",
      "id" : 113572775,
      "in_reply_to_id" : 113189098,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzU3Mjc3NQ==",
      "original_commit_id" : "e5d0c6662d1c2e51643a073135bbbeae86637ad1",
      "original_line" : 59,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34973676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572775/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572808"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T21:56:53Z",
      "diff_hunk" : "@@ -4,49 +4,177 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572808",
      "id" : 113572808,
      "in_reply_to_id" : 113346076,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzU3MjgwOA==",
      "original_commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "original_line" : 43,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34973712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572808/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572828"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572828"
         }
      },
      "author_association" : "MEMBER",
      "body" : "assert()ed",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T21:56:58Z",
      "diff_hunk" : "@@ -4,49 +4,177 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            try {\n+                callback();\n+            } catch (...) {\n+                LogPrintf(\"Exception thrown in processing CValidationInterface callback\\n\");\n+            }\n+        }\n+    }\n+\n+    void AddToProcessQueue(const std::function<void (void)>& func) {\n+        if (!scheduler)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113572828",
      "id" : 113572828,
      "in_reply_to_id" : 113345909,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzU3MjgyOA==",
      "original_commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "original_line" : 69,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34973732,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572828/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113572828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113573525"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113573525"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`std::unique_ptr` seems to work fine with forward-declared types: https://github.com/sipa/bitcoin/commit/a4ecaad",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T22:00:37Z",
      "diff_hunk" : "@@ -4,49 +4,177 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            try {\n+                callback();\n+            } catch (...) {\n+                LogPrintf(\"Exception thrown in processing CValidationInterface callback\\n\");\n+            }\n+        }\n+    }\n+\n+    void AddToProcessQueue(const std::function<void (void)>& func) {\n+        if (!scheduler)\n+            return;\n+        {\n+            LOCK(cs_callbacksPending);\n+            callbacksPending.emplace_back(func);\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+};\n \n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {\n+    internals = new CMainSignalsInstance();\n+}\n+\n+CMainSignals::~CMainSignals() {\n+    delete internals;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113573525",
      "id" : 113573525,
      "in_reply_to_id" : 113345742,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzU3MzUyNQ==",
      "original_commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "original_line" : 97,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34974459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113573525/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113573525",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113576299"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113576299"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well, I'll be! Took your patch and squashed (hope you dont mind).",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T22:16:59Z",
      "diff_hunk" : "@@ -4,49 +4,177 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            try {\n+                callback();\n+            } catch (...) {\n+                LogPrintf(\"Exception thrown in processing CValidationInterface callback\\n\");\n+            }\n+        }\n+    }\n+\n+    void AddToProcessQueue(const std::function<void (void)>& func) {\n+        if (!scheduler)\n+            return;\n+        {\n+            LOCK(cs_callbacksPending);\n+            callbacksPending.emplace_back(func);\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+};\n \n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {\n+    internals = new CMainSignalsInstance();\n+}\n+\n+CMainSignals::~CMainSignals() {\n+    delete internals;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113576299",
      "id" : 113576299,
      "in_reply_to_id" : 113345742,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzU3NjI5OQ==",
      "original_commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "original_line" : 97,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34977401,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113576299/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113576299",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113577966"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113577966"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry, but I'm going to insist that you maintain this commit intact (nevermind that it's likely the exact same patch you'd come up with if I hadn't shown you) forever in your PR history. Note: sarcasm.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-04-26T22:27:58Z",
      "diff_hunk" : "@@ -4,49 +4,177 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+#include \"init.h\"\n+#include \"scheduler.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <list>\n+#include <atomic>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CMainSignalsInstance {\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef>&)> BlockConnected;\n+    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n+    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+\n+    CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    std::atomic<bool> fCallbacksRunning = ATOMIC_VAR_INIT(false);\n+\n+    void ProcessQueue() {\n+        if (fCallbacksRunning.exchange(true)) {\n+            return;\n+        }\n+\n+        while (true) {\n+            std::function<void (void)> callback;\n+            {\n+                LOCK(cs_callbacksPending);\n+                if (callbacksPending.empty()) {\n+                    // We must set fCallbacksRunning to false with\n+                    // cs_callbacksRunning held - ensuring that there is no\n+                    // race condition in which we might add something to the\n+                    // queue, have the associated ProcessQueue call fail to get\n+                    // the fCallbacksRunning lock, but have already given up on\n+                    // doing more work in the previous ProcessQueue function.\n+                    fCallbacksRunning = false;\n+                    break;\n+                }\n+                callback = callbacksPending.front();\n+                callbacksPending.pop_front();\n+            }\n+            try {\n+                callback();\n+            } catch (...) {\n+                LogPrintf(\"Exception thrown in processing CValidationInterface callback\\n\");\n+            }\n+        }\n+    }\n+\n+    void AddToProcessQueue(const std::function<void (void)>& func) {\n+        if (!scheduler)\n+            return;\n+        {\n+            LOCK(cs_callbacksPending);\n+            callbacksPending.emplace_back(func);\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+};\n \n static CMainSignals g_signals;\n \n+CMainSignals::CMainSignals() {\n+    internals = new CMainSignalsInstance();\n+}\n+\n+CMainSignals::~CMainSignals() {\n+    delete internals;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r113577966",
      "id" : 113577966,
      "in_reply_to_id" : 113345742,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzU3Nzk2Ng==",
      "original_commit_id" : "1bcb07f716633a35ddb5e205c1fe12f5e60b5177",
      "original_line" : 97,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 34979189,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113577966/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113577966",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa re: unused and untested code, see #10286, which I think it would be reasonable to require at least concept acks on prior to merging this.",
      "created_at" : "2017-04-27T01:00:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-297582085",
      "id" : 297582085,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI5NzU4MjA4NQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297582085/reactions"
      },
      "updated_at" : "2017-04-27T01:00:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297582085",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114365749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114365749"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"Make ValidationInterface signals-type-agnostic\"\r\n\r\nI don't think you need to have this internals pointer in order to do the signal routing / CScheduler stuff that's ostensibly the motivation for this change. (The signals could just be regular class members.). If you like this better because it helps hide the boost dependency, though, that seems fine. This is just the pImpl pattern, http://stackoverflow.com/questions/8972588/is-the-pimpl-idiom-really-used-in-practice.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-05-02T16:43:09Z",
      "diff_hunk" : "@@ -32,52 +31,63 @@ void UnregisterAllValidationInterfaces();\n \n class CValidationInterface {\n protected:\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n-    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n-    virtual void SetBestChain(const CBlockLocator &locator) {}\n-    virtual void Inventory(const uint256 &hash) {}\n-    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};\n-    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n-};\n-\n-struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /** Notifies listeners of a transaction having been added to mempool. */\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n      */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &)> BlockConnected;\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n     /** Notifies listeners of a block being disconnected */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n-    /** Notifies listeners of a new active block chain. */\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n+    /** Notifies listeners of the new active block chain on-disk. */\n+    virtual void SetBestChain(const CBlockLocator &locator) {}\n     /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    virtual void Inventory(const uint256 &hash) {}\n     /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided CValidationState IsValid, the provided block\n      * is guaranteed to be the current best block at the time the\n      * callback was generated (not necessarily now)\n      */\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     /** Notifies listeners that a key for mining is required (coinbase) */\n-    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+};\n+\n+struct CMainSignalsInstance;\n+class CMainSignals {\n+private:\n+    std::unique_ptr<CMainSignalsInstance> internals;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114365749",
      "id" : 114365749,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM2NTc0OQ==",
      "original_commit_id" : "225f611659df7febc95768aa54687b2913423dbd",
      "original_line" : 72,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 35825576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114365749/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114365749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114371879"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114371879"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"Handle more than one CScheduler thread in CValidationInterface\"\r\n\r\nThis seems like it would a lot simpler it just spawned a single thread to run the callbacks in sequence instead of relying on CScheduler and then doing a bunch of synchronization on top of it to keep things scheduled and prevent more than one callback from executing at the same time.\r\n\r\nAlso, I think it would be nice if this functionality were implemented in a standalone class that could be unit tested.\r\n\r\nAnyway, implementation seems fine, I couldn't find any bugs.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-05-02T17:09:49Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114371879",
      "id" : 114371879,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM3MTg3OQ==",
      "original_commit_id" : "4fceec59372b778f9966485f2a13f97e21b1db4c",
      "original_line" : 34,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 35825576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114371879/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114371879",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114373991"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114373991"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"Handle more than one CScheduler thread in CValidationInterface\":\r\n\r\nShould pass `func` by value or rvalue reference so you can move it into the `callbacksPending` list without a copy.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-05-02T17:19:07Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+        // to ensure both happen safely even if callback() throws.\n+        struct RAIICallbacksRunning {\n+            CMainSignalsInstance* instance;\n+            RAIICallbacksRunning(CMainSignalsInstance* _instance) : instance(_instance) {}\n+            ~RAIICallbacksRunning() {\n+                {\n+                    LOCK(instance->cs_callbacksPending);\n+                    instance->fCallbacksRunning = false;\n+                }\n+                instance->MaybeScheduleProcessQueue();\n+            }\n+        } raiicallbacksrunning(this);\n+\n+        callback();\n+    }\n+\n+    void AddToProcessQueue(const std::function<void (void)>& func) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114373991",
      "id" : 114373991,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM3Mzk5MQ==",
      "original_commit_id" : "4fceec59372b778f9966485f2a13f97e21b1db4c",
      "original_line" : 79,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 35834475,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114373991/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114373991",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114374403"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114374403"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"Handle more than one CScheduler thread in CValidationInterface\"\r\n\r\nCould add `std::move` here.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-05-02T17:21:03Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114374403",
      "id" : 114374403,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDM3NDQwMw==",
      "original_commit_id" : "4fceec59372b778f9966485f2a13f97e21b1db4c",
      "original_line" : 58,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 35834948,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114374403/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114374403",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114409991"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114409991"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yea, the real motivation there was to not have to #include boost signals garbage everywhere, nothing more.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-05-02T19:56:34Z",
      "diff_hunk" : "@@ -32,52 +31,63 @@ void UnregisterAllValidationInterfaces();\n \n class CValidationInterface {\n protected:\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n-    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n-    virtual void SetBestChain(const CBlockLocator &locator) {}\n-    virtual void Inventory(const uint256 &hash) {}\n-    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};\n-    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n-};\n-\n-struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /** Notifies listeners of a transaction having been added to mempool. */\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n      */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &)> BlockConnected;\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n     /** Notifies listeners of a block being disconnected */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n-    /** Notifies listeners of a new active block chain. */\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n+    /** Notifies listeners of the new active block chain on-disk. */\n+    virtual void SetBestChain(const CBlockLocator &locator) {}\n     /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    virtual void Inventory(const uint256 &hash) {}\n     /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided CValidationState IsValid, the provided block\n      * is guaranteed to be the current best block at the time the\n      * callback was generated (not necessarily now)\n      */\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     /** Notifies listeners that a key for mining is required (coinbase) */\n-    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};\n     /**\n      * Notifies listeners that a block which builds directly on our current tip\n      * has been received and connected to the headers tree, though not validated yet */\n-    boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n+    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n+    friend void ::RegisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterValidationInterface(CValidationInterface*);\n+    friend void ::UnregisterAllValidationInterfaces();\n+};\n+\n+struct CMainSignalsInstance;\n+class CMainSignals {\n+private:\n+    std::unique_ptr<CMainSignalsInstance> internals;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114409991",
      "id" : 114409991,
      "in_reply_to_id" : 114365749,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQwOTk5MQ==",
      "original_commit_id" : "225f611659df7febc95768aa54687b2913423dbd",
      "original_line" : 72,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 35873591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114409991/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114409991",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114418023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114418023"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Moved to scheduler.h, testing left as an excersize for the reader :p.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-05-02T20:33:24Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114418023",
      "id" : 114418023,
      "in_reply_to_id" : 114371879,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQxODAyMw==",
      "original_commit_id" : "4fceec59372b778f9966485f2a13f97e21b1db4c",
      "original_line" : 34,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 35882571,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114418023/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114418023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114418053"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114418053"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-05-02T20:33:29Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();\n+            callbacksPending.pop_front();\n+        }\n+\n+        // RAII the setting of fCallbacksRunning and calling MaybeScheduleProcessQueue\n+        // to ensure both happen safely even if callback() throws.\n+        struct RAIICallbacksRunning {\n+            CMainSignalsInstance* instance;\n+            RAIICallbacksRunning(CMainSignalsInstance* _instance) : instance(_instance) {}\n+            ~RAIICallbacksRunning() {\n+                {\n+                    LOCK(instance->cs_callbacksPending);\n+                    instance->fCallbacksRunning = false;\n+                }\n+                instance->MaybeScheduleProcessQueue();\n+            }\n+        } raiicallbacksrunning(this);\n+\n+        callback();\n+    }\n+\n+    void AddToProcessQueue(const std::function<void (void)>& func) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114418053",
      "id" : 114418053,
      "in_reply_to_id" : 114373991,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQxODA1Mw==",
      "original_commit_id" : "4fceec59372b778f9966485f2a13f97e21b1db4c",
      "original_line" : 79,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 35882602,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114418053/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114418053",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114418066"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114418066"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-05-02T20:33:32Z",
      "diff_hunk" : "@@ -22,6 +27,64 @@ struct CMainSignalsInstance {\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n     CScheduler *scheduler = NULL;\n+\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    CCriticalSection cs_callbacksPending;\n+    std::list<std::function<void (void)>> callbacksPending;\n+    bool fCallbacksRunning = false;\n+\n+    void MaybeScheduleProcessQueue() {\n+        {\n+            LOCK(cs_callbacksPending);\n+            // Try to avoid scheduling too many copies here, but if we\n+            // accidentally have two ProcessQueue's scheduled at once its\n+            // not a big deal.\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+        }\n+        scheduler->schedule(std::bind(&CMainSignalsInstance::ProcessQueue, this));\n+    }\n+\n+    void ProcessQueue() {\n+        std::function<void (void)> callback;\n+        {\n+            LOCK(cs_callbacksPending);\n+            if (fCallbacksRunning) return;\n+            if (callbacksPending.empty()) return;\n+            fCallbacksRunning = true;\n+\n+            callback = callbacksPending.front();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r114418066",
      "id" : 114418066,
      "in_reply_to_id" : 114374403,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDQxODA2Ng==",
      "original_commit_id" : "4fceec59372b778f9966485f2a13f97e21b1db4c",
      "original_line" : 58,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 35882619,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114418066/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114418066",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 643a988101f12581725d08d71cfcb5d932a062ac. I like the new ProcessQueue location and std::move additions.",
      "created_at" : "2017-05-03T13:43:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-298914626",
      "id" : 298914626,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI5ODkxNDYyNg==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298914626/reactions"
      },
      "updated_at" : "2017-05-03T13:43:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/298914626",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Squashed and tweaked commit wording.",
      "created_at" : "2017-05-04T20:51:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-299305471",
      "id" : 299305471,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI5OTMwNTQ3MQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299305471/reactions"
      },
      "updated_at" : "2017-05-04T20:51:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299305471",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 830c26b55a2b4bc93509d3fa7f17a0b383a95835. Only change aside from the history squashing is switching to the schedule() default arg.",
      "created_at" : "2017-05-05T20:51:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-299572650",
      "id" : 299572650,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI5OTU3MjY1MA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299572650/reactions"
      },
      "updated_at" : "2017-05-05T20:51:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/299572650",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK. Since you're adding a new class, would you mind making a few changes to match the new naming rules in the style guide?",
      "created_at" : "2017-06-03T19:39:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-305996897",
      "id" : 305996897,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMwNTk5Njg5Nw==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305996897/reactions"
      },
      "updated_at" : "2017-06-03T19:39:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/305996897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Removed C prefix from classes without rebasing.",
      "created_at" : "2017-06-06T00:39:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-306348948",
      "id" : 306348948,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMwNjM0ODk0OA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306348948/reactions"
      },
      "updated_at" : "2017-06-06T00:39:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/306348948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Very minor rebase.",
      "created_at" : "2017-06-08T15:30:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-307139595",
      "id" : 307139595,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMwNzEzOTU5NQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307139595/reactions"
      },
      "updated_at" : "2017-06-08T15:30:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307139595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Status of this PR? It has had 4 utACKs (though @laanwj's is in [strikethrough](https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-297020818)) as well as comments from @mchrostowski in #10286.",
      "created_at" : "2017-06-12T17:50:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-307865610",
      "id" : 307865610,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMwNzg2NTYxMA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307865610/reactions"
      },
      "updated_at" : "2017-06-12T17:50:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307865610",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r121513653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121513653"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would you mind changing this to lowercase-only variable names (e.g. `m_cs_callbacks_pending`, `m_callbacks_pending`, `m_callbacks_running`)?",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-06-12T20:09:52Z",
      "diff_hunk" : "@@ -79,4 +81,26 @@ class CScheduler\n     bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n };\n \n+/**\n+ * Class used by CScheduler clients which may schedule multiple jobs\n+ * which are required to be run serially. Does not require such jobs\n+ * to be executed on the same thread, but no two jobs will be executed\n+ * at the same time.\n+ */\n+class SingleThreadedSchedulerClient {\n+private:\n+    CScheduler *m_pscheduler;\n+\n+    CCriticalSection m_cs_callbacksPending;\n+    std::list<std::function<void (void)>> m_callbacksPending;\n+    bool m_fCallbacksRunning = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r121513653",
      "id" : 121513653,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTUxMzY1Mw==",
      "original_commit_id" : "608fad0e17d47d0943ff5a9425c65a5ea4eeba6f",
      "original_line" : 96,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/scheduler.h",
      "position" : null,
      "pull_request_review_id" : 43548424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121513653/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121513653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r123134051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123134051"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-06-21T01:12:06Z",
      "diff_hunk" : "@@ -79,4 +81,26 @@ class CScheduler\n     bool shouldStop() { return stopRequested || (stopWhenEmpty && taskQueue.empty()); }\n };\n \n+/**\n+ * Class used by CScheduler clients which may schedule multiple jobs\n+ * which are required to be run serially. Does not require such jobs\n+ * to be executed on the same thread, but no two jobs will be executed\n+ * at the same time.\n+ */\n+class SingleThreadedSchedulerClient {\n+private:\n+    CScheduler *m_pscheduler;\n+\n+    CCriticalSection m_cs_callbacksPending;\n+    std::list<std::function<void (void)>> m_callbacksPending;\n+    bool m_fCallbacksRunning = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r123134051",
      "id" : 123134051,
      "in_reply_to_id" : 121513653,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMzEzNDA1MQ==",
      "original_commit_id" : "608fad0e17d47d0943ff5a9425c65a5ea4eeba6f",
      "original_line" : 96,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/scheduler.h",
      "position" : null,
      "pull_request_review_id" : 45307730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123134051/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123134051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Does the strikethrough utACK means you still have a concern?",
      "created_at" : "2017-06-23T01:51:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-310548915",
      "id" : 310548915,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMxMDU0ODkxNQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310548915/reactions"
      },
      "updated_at" : "2017-06-23T01:51:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310548915",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124408608"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124408608"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This potentially leaves events in the SingleThreadedSchedulerClient process queue with a dangling pointer to \"this\", no? I believe SingleThreadedSchedulerClient needs interrupt/stop functionality.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-06-27T22:04:46Z",
      "diff_hunk" : "@@ -21,22 +26,23 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n-    CScheduler *m_scheduler = NULL;\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    SingleThreadedSchedulerClient m_schedulerClient;\n+\n+    MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n };\n \n static CMainSignals g_signals;\n \n-CMainSignals::CMainSignals() {\n-    m_internals.reset(new MainSignalsInstance());\n-}\n-\n void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n-    assert(!m_internals->m_scheduler);\n-    m_internals->m_scheduler = &scheduler;\n+    assert(!m_internals);\n+    m_internals.reset(new MainSignalsInstance(&scheduler));\n }\n \n void CMainSignals::UnregisterBackgroundSignalScheduler() {\n-    m_internals->m_scheduler = NULL;\n+    m_internals.reset(nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124408608",
      "id" : 124408608,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDQwODYwOA==",
      "original_commit_id" : "cdf4cd8f54239bab6d5658ec6eec6c531f34091c",
      "original_line" : 44,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 46694277,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124408608/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124408608",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124419087"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124419087"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Interrupt() will stop the processing of events long before we ever call UnregisterBackgroundSignalScheduler in init/bitcoind.cpp/qt/bitcoin.cpp. There isnt really a great way to solve this, I think, without just making the CScheduler own the thread(/group), but I went ahead and pushed a commit which will just call any remaining callbacks when Unregister is called.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-06-27T23:11:18Z",
      "diff_hunk" : "@@ -21,22 +26,23 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n-    CScheduler *m_scheduler = NULL;\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    SingleThreadedSchedulerClient m_schedulerClient;\n+\n+    MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n };\n \n static CMainSignals g_signals;\n \n-CMainSignals::CMainSignals() {\n-    m_internals.reset(new MainSignalsInstance());\n-}\n-\n void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n-    assert(!m_internals->m_scheduler);\n-    m_internals->m_scheduler = &scheduler;\n+    assert(!m_internals);\n+    m_internals.reset(new MainSignalsInstance(&scheduler));\n }\n \n void CMainSignals::UnregisterBackgroundSignalScheduler() {\n-    m_internals->m_scheduler = NULL;\n+    m_internals.reset(nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124419087",
      "id" : 124419087,
      "in_reply_to_id" : 124408608,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDQxOTA4Nw==",
      "original_commit_id" : "cdf4cd8f54239bab6d5658ec6eec6c531f34091c",
      "original_line" : 44,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 46705568,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124419087/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124419087",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa Just that I had a concern at the time, and was too quick to utACK. I should re-review.",
      "created_at" : "2017-06-28T06:11:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-311565907",
      "id" : 311565907,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMxMTU2NTkwNw==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311565907/reactions"
      },
      "updated_at" : "2017-06-28T06:11:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/311565907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124460161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124460161"
         }
      },
      "author_association" : "MEMBER",
      "body" : "#10683 gets rid of `GetScriptForMining` in validationinterface, which I think it's good because it mutates its argument. Doing that in a decoupled thread would be disastrous.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-06-28T06:22:10Z",
      "diff_hunk" : "@@ -32,52 +32,67 @@ void UnregisterAllValidationInterfaces();\n \n class CValidationInterface {\n protected:\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n-    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n-    virtual void SetBestChain(const CBlockLocator &locator) {}\n-    virtual void Inventory(const uint256 &hash) {}\n-    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};\n-    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n-};\n-\n-struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /** Notifies listeners of a transaction having been added to mempool. */\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n      */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &)> BlockConnected;\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n     /** Notifies listeners of a block being disconnected */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n-    /** Notifies listeners of a new active block chain. */\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n+    /** Notifies listeners of the new active block chain on-disk. */\n+    virtual void SetBestChain(const CBlockLocator &locator) {}\n     /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    virtual void Inventory(const uint256 &hash) {}\n     /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided CValidationState IsValid, the provided block\n      * is guaranteed to be the current best block at the time the\n      * callback was generated (not necessarily now)\n      */\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     /** Notifies listeners that a key for mining is required (coinbase) */\n-    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124460161",
      "id" : 124460161,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDQ2MDE2MQ==",
      "original_commit_id" : "010f3aeb2fe913cc7cb13ba9f157bece72abaa9e",
      "original_line" : 60,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 46748634,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124460161/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124460161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124551923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124551923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "All of the move-to-background-thread stuff is going to be a slow per-function process. See, eg, #10652 which moves a few functions to the background for net_processing and, of course, #10286 which moves a few to the background for wallet. Agreed that GetScriptForMining should go away and then it wont be a concern :).",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-06-28T14:13:07Z",
      "diff_hunk" : "@@ -32,52 +32,67 @@ void UnregisterAllValidationInterfaces();\n \n class CValidationInterface {\n protected:\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n-    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n-    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n-    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n-    virtual void SetBestChain(const CBlockLocator &locator) {}\n-    virtual void Inventory(const uint256 &hash) {}\n-    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n-    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n-    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};\n-    virtual void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& block) {};\n-    friend void ::RegisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterValidationInterface(CValidationInterface*);\n-    friend void ::UnregisterAllValidationInterfaces();\n-};\n-\n-struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n-    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     /** Notifies listeners of a transaction having been added to mempool. */\n-    boost::signals2::signal<void (const CTransactionRef &)> TransactionAddedToMempool;\n+    virtual void TransactionAddedToMempool(const CTransactionRef &ptxn) {}\n     /**\n      * Notifies listeners of a block being connected.\n      * Provides a vector of transactions evicted from the mempool as a result.\n      */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex, const std::vector<CTransactionRef> &)> BlockConnected;\n+    virtual void BlockConnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex *pindex, const std::vector<CTransactionRef> &txnConflicted) {}\n     /** Notifies listeners of a block being disconnected */\n-    boost::signals2::signal<void (const std::shared_ptr<const CBlock> &)> BlockDisconnected;\n-    /** Notifies listeners of a new active block chain. */\n-    boost::signals2::signal<void (const CBlockLocator &)> SetBestChain;\n+    virtual void BlockDisconnected(const std::shared_ptr<const CBlock> &block) {}\n+    /** Notifies listeners of the new active block chain on-disk. */\n+    virtual void SetBestChain(const CBlockLocator &locator) {}\n     /** Notifies listeners about an inventory item being seen on the network. */\n-    boost::signals2::signal<void (const uint256 &)> Inventory;\n+    virtual void Inventory(const uint256 &hash) {}\n     /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n+    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     /**\n      * Notifies listeners of a block validation result.\n      * If the provided CValidationState IsValid, the provided block\n      * is guaranteed to be the current best block at the time the\n      * callback was generated (not necessarily now)\n      */\n-    boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n+    virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     /** Notifies listeners that a key for mining is required (coinbase) */\n-    boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n+    virtual void GetScriptForMining(std::shared_ptr<CReserveScript>&) {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r124551923",
      "id" : 124551923,
      "in_reply_to_id" : 124460161,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNDU1MTkyMw==",
      "original_commit_id" : "010f3aeb2fe913cc7cb13ba9f157bece72abaa9e",
      "original_line" : 60,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/validationinterface.h",
      "position" : null,
      "pull_request_review_id" : 46850995,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124551923/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/124551923",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK (after rebase) now that #10683 is in.",
      "created_at" : "2017-07-03T21:22:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-312735904",
      "id" : 312735904,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMxMjczNTkwNA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312735904/reactions"
      },
      "updated_at" : "2017-07-03T21:22:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312735904",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.",
      "created_at" : "2017-07-04T00:54:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-312756135",
      "id" : 312756135,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMxMjc1NjEzNQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312756135/reactions"
      },
      "updated_at" : "2017-07-04T00:54:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312756135",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Redid the shutdown callback-flushing at @morcos's request - now flushes earlier in the Shutdown() process in a much better location - after all our peers have stopped processing (and thus cant generate callbacks) and before wallet flushing.",
      "created_at" : "2017-07-07T15:17:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-313711092",
      "id" : 313711092,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMxMzcxMTA5Mg==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313711092/reactions"
      },
      "updated_at" : "2017-07-07T15:17:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313711092",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added a comment on flush/drop behavior - \r\n\"Any future callbacks will be dropped. This should absolutely be safe - if missing a callback results in an unrecoverable situation, unclean shutdown would too. The only reason to do the above flushes is to let the wallet catch up with our current chain to avoid any strange pruning edge cases and make next startup faster by avoiding rescan.\"\r\n\r\n",
      "created_at" : "2017-07-07T16:56:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-313736506",
      "id" : 313736506,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMxMzczNjUwNg==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313736506/reactions"
      },
      "updated_at" : "2017-07-07T16:56:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313736506",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 3192975",
      "created_at" : "2017-07-07T17:17:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-313741670",
      "id" : 313741670,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMxMzc0MTY3MA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313741670/reactions"
      },
      "updated_at" : "2017-07-07T17:17:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313741670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "node_id" : "MDQ6VXNlcjQzNjAzNDk=",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-utACK 3192975f1d177aa9f0bbd823c6387cfbfa943610, though very hesitantly after thinking through the tear-down some more. The shutdown process is going to get really hard to trace when callbacks start coming in on different threads.\r\n\r\nI really hope some ownership model will begin to emerge. ",
      "created_at" : "2017-07-07T23:38:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#issuecomment-313816720",
      "id" : 313816720,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10179",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDMxMzgxNjcyMA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313816720/reactions"
      },
      "updated_at" : "2017-07-07T23:38:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313816720",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126457653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126457653"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"Flush CValidationInterface callbacks prior to destruction\"\r\n\r\nShutdown order is convoluted enough that I think it would be good to add asserts, like asserting m_internals is non-null here and that scheduler is shut down or shutting down at this point (nThreadsServicingQueue == 0 || shouldStop). Latter might be more appropriate inside the scheduling code.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-07-10T15:35:20Z",
      "diff_hunk" : "@@ -44,6 +44,10 @@ void CMainSignals::UnregisterBackgroundSignalScheduler() {\n     m_internals.reset(nullptr);\n }\n \n+void CMainSignals::FlushBackgroundCallbacks() {\n+    m_internals->m_schedulerClient.EmptyQueue();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126457653",
      "id" : 126457653,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ1NzY1Mw==",
      "original_commit_id" : "3192975f1d177aa9f0bbd823c6387cfbfa943610",
      "original_line" : 48,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 48943283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126457653/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126457653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126473141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126473141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"Give CMainSignals a reference to the global scheduler\"\r\n\r\nIt seems like the right place for this unregister call would be earlier in Shutdown(), after scheduler thread is cancelled and the last signal is sent, for consistency with the register call, which is made when the scheduler thread is started.\r\n\r\nThis would let you flush the background queue when the signal scheduler is destroyed and not need separate `FlushBackgroundCallbacks` and `EmptyQueue` calls made in advance.\r\n\r\nAlso this would bring shutdown code closer to an raii-style ordering, which should make cleanup easier in the future and would make the various object lifetimes a little easier to understand now.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-07-10T16:32:59Z",
      "diff_hunk" : "@@ -251,6 +251,7 @@ void Shutdown()\n     }\n #endif\n     UnregisterAllValidationInterfaces();\n+    GetMainSignals().UnregisterBackgroundSignalScheduler();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126473141",
      "id" : 126473141,
      "line" : 267,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ3MzE0MQ==",
      "original_commit_id" : "cda1429d5bfee129a0d1f6f1c65962b30251bafb",
      "original_line" : 254,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 24,
      "pull_request_review_id" : 48943283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126473141/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126473141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126481557"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126481557"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"Flush CValidationInterface callbacks prior to destruction\"\r\n\r\nComment should point out that this should only be called when scheduler is not active. Otherwise this could burn cpu racing with scheduler thread to run the next callback.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-07-10T17:09:05Z",
      "diff_hunk" : "@@ -101,6 +101,9 @@ class SingleThreadedSchedulerClient {\n public:\n     SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}\n     void AddToProcessQueue(std::function<void (void)> func);\n+\n+    // Processes all remaining queue members on the calling thread, blocking until queue is empty",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126481557",
      "id" : 126481557,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ4MTU1Nw==",
      "original_commit_id" : "3192975f1d177aa9f0bbd823c6387cfbfa943610",
      "original_line" : 105,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/scheduler.h",
      "position" : null,
      "pull_request_review_id" : 48943283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126481557/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126481557",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126489884"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126489884"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"Support more than one CScheduler thread for serial clients\"\r\n\r\nIt'd be good to just reset the scheduler pointer here instead of going overboard and destroying all the boost signals at this point as well. It just seems like a random and unexpected thing to be doing in a function called `UnregisterBackgroundSignalScheduler` especially given new flush behavior which allows signals be forwarded after the scheduler is stopped.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-07-10T17:44:29Z",
      "diff_hunk" : "@@ -21,22 +26,23 @@ struct MainSignalsInstance {\n     boost::signals2::signal<void (std::shared_ptr<CReserveScript>&)> ScriptForMining;\n     boost::signals2::signal<void (const CBlockIndex *, const std::shared_ptr<const CBlock>&)> NewPoWValidBlock;\n \n-    CScheduler *m_scheduler = NULL;\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    SingleThreadedSchedulerClient m_schedulerClient;\n+\n+    MainSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n };\n \n static CMainSignals g_signals;\n \n-CMainSignals::CMainSignals() {\n-    m_internals.reset(new MainSignalsInstance());\n-}\n-\n void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n-    assert(!m_internals->m_scheduler);\n-    m_internals->m_scheduler = &scheduler;\n+    assert(!m_internals);\n+    m_internals.reset(new MainSignalsInstance(&scheduler));\n }\n \n void CMainSignals::UnregisterBackgroundSignalScheduler() {\n-    m_internals->m_scheduler = NULL;\n+    m_internals.reset(nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126489884",
      "id" : 126489884,
      "in_reply_to_id" : 124408608,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjQ4OTg4NA==",
      "original_commit_id" : "cdf4cd8f54239bab6d5658ec6eec6c531f34091c",
      "original_line" : 44,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 48943283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126489884/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126489884",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126573098"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126573098"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We cant unregister the background scheduler from the validation interface until we're sure nothing is gonna generate anymore callbacks (so, really, after the pcoinsTip/etc deletions). If we want to mirror the initialization order, we'd have to move it even further down, not up, as de-init in RAII order would be after wallet deltion.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-07-11T01:02:20Z",
      "diff_hunk" : "@@ -251,6 +251,7 @@ void Shutdown()\n     }\n #endif\n     UnregisterAllValidationInterfaces();\n+    GetMainSignals().UnregisterBackgroundSignalScheduler();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126573098",
      "id" : 126573098,
      "in_reply_to_id" : 126473141,
      "line" : 267,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU3MzA5OA==",
      "original_commit_id" : "cda1429d5bfee129a0d1f6f1c65962b30251bafb",
      "original_line" : 254,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 24,
      "pull_request_review_id" : 49069671,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126573098/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:08:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126573098",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126573737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126573737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added the assert instead",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-07-11T01:09:06Z",
      "diff_hunk" : "@@ -101,6 +101,9 @@ class SingleThreadedSchedulerClient {\n public:\n     SingleThreadedSchedulerClient(CScheduler *pschedulerIn) : m_pscheduler(pschedulerIn) {}\n     void AddToProcessQueue(std::function<void (void)> func);\n+\n+    // Processes all remaining queue members on the calling thread, blocking until queue is empty",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126573737",
      "id" : 126573737,
      "in_reply_to_id" : 126481557,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU3MzczNw==",
      "original_commit_id" : "3192975f1d177aa9f0bbd823c6387cfbfa943610",
      "original_line" : 105,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/scheduler.h",
      "position" : null,
      "pull_request_review_id" : 49070328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126573737/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:09:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126573737",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126573753"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126573753"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added.",
      "commit_id" : "1f668b646806f94acd851acdbd9939c24e0492d3",
      "created_at" : "2017-07-11T01:09:15Z",
      "diff_hunk" : "@@ -44,6 +44,10 @@ void CMainSignals::UnregisterBackgroundSignalScheduler() {\n     m_internals.reset(nullptr);\n }\n \n+void CMainSignals::FlushBackgroundCallbacks() {\n+    m_internals->m_schedulerClient.EmptyQueue();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10179#discussion_r126573753",
      "id" : 126573753,
      "in_reply_to_id" : 126457653,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjU3Mzc1Mw==",
      "original_commit_id" : "3192975f1d177aa9f0bbd823c6387cfbfa943610",
      "original_line" : 48,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 49070346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10179",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126573753/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2017-07-11T01:09:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126573753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
