[
   {
      "body" : "I'm not sure I like the idea of adding a command that changes the implied state of a peer via its attributes, rather than performing actions explicitly. The whitelist side-effects are especially hazy, see the brief discussion here: https://github.com/bitcoin/bitcoin/pull/10051#issuecomment-290622674.",
      "created_at" : "2017-04-06T18:05:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292258826",
      "id" : 292258826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-04-06T18:05:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292258826",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "@jnewbery:\r\nCan you elaborate the use-case for `disconnect`? IMO `setban` provides a similar interface, with disconnecting & banning for a specific timespan (`1h`, etc.) because, a pure `disconnect` does not prevent the peer from a direct re-connect.",
      "created_at" : "2017-04-06T18:26:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292265018",
      "id" : 292265018,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-04-06T18:26:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292265018",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Ah... an there is already the `disconnectnode` RPC call.",
      "created_at" : "2017-04-06T18:27:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292265363",
      "id" : 292265363,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-04-06T18:27:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292265363",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@jonasschnelli see #2729 and #6271 for history of the `disconnectnode` RPC. It's also useful in testing to be able to control the topology of the test nodes.\r\n\r\n@theuni - I agree that whitelisting is a mess and should be broken out into bits for controlling individual behaviours. Hence my original comment: \"I have a feeling we may want to make the whitelisting behaviour more granular and I don't want to commit us to a public API that we can't then change.\" I was thinking of your comment in #10051 but couldn't find the reference.\r\n\r\n> the idea of adding a command that changes the implied state of a peer via its attributes, rather than performing actions explicitly\r\n\r\nI don't understand what this means in the context of whitelisting. The idea is to update the peer's whitelist behaviour. What would performing actions explicitly entail?",
      "created_at" : "2017-04-06T20:22:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292305200",
      "id" : 292305200,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-04-06T20:22:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292305200",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "body" : "Closing in favour of #10143 for the immediate need (disconnect node by id), but I think this could still be a useful RPC in the future.",
      "created_at" : "2017-04-07T20:57:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-292649747",
      "id" : 292649747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-04-07T20:57:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292649747",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1063656?v=3",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Reopening with just the ability to update:\r\n\r\n- `fWhitelisted`\r\n- `m_manual_connection`\r\n\r\nThe net_processing functionality for the v0.15.0.2 PRs is disabled for manual connections, so this PR could be helpful for testing those changes.\r\n\r\n@sdaftuar ",
      "created_at" : "2017-10-26T22:19:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339817507",
      "id" : 339817507,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-10-26T22:19:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/339817507",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147375941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147375941"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is null instead.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T10:25:49Z",
      "diff_hunk" : "@@ -121,73 +182,79 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (request.params.size() >= 1 && request.params[0].isNum()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        if (g_connman->GetNodeStats(request.params[0].get_int(), stats)) {\n+            NodeStatsToJSON(stats, obj);\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n+\n+            ret.push_back(obj);\n+        }\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 3 || request.params.size() == 0)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network node (debug method).\\n\"\n+            \"\\nReturns updated information about the node. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"              (string, required) The node id (see getpeerinfo for a list of nodes with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the node is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the node was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if(!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    LOCK(cs_main);\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nodeid = request.params[0].get_int();\n+\n+    if (request.params.size() >= 2) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        if (!g_connman->SetWhitelisted(nodeid, request.params[1].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update node whitelisting\");\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if (request.params.size() >= 3) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147375941",
      "id" : 147375941,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzM3NTk0MQ==",
      "original_commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "original_position" : 190,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72463355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147375941",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147376503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147376503"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If not then raise invalid parameter?",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T10:29:03Z",
      "diff_hunk" : "@@ -121,73 +182,79 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (request.params.size() >= 1 && request.params[0].isNum()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        if (g_connman->GetNodeStats(request.params[0].get_int(), stats)) {\n+            NodeStatsToJSON(stats, obj);\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n+\n+            ret.push_back(obj);\n+        }\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 3 || request.params.size() == 0)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network node (debug method).\\n\"\n+            \"\\nReturns updated information about the node. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"              (string, required) The node id (see getpeerinfo for a list of nodes with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the node is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the node was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if(!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    LOCK(cs_main);\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nodeid = request.params[0].get_int();\n+\n+    if (request.params.size() >= 2) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        if (!g_connman->SetWhitelisted(nodeid, request.params[1].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update node whitelisting\");\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if (request.params.size() >= 3) {\n+        RPCTypeCheckArgument(request.params[2], UniValue::VBOOL);\n+        if (!g_connman->SetManualConnection(nodeid, request.params[2].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update node manual\");\n         }\n-        obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+    }\n \n-        ret.push_back(obj);\n+    UniValue entry(UniValue::VOBJ);\n+    CNodeStats stats;\n+\n+    if (g_connman->GetNodeStats(nodeid, stats)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147376503",
      "id" : 147376503,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzM3NjUwMw==",
      "original_commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "original_position" : 202,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72463355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147376503",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147376560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147376560"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Missing test for invalid node.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T10:29:26Z",
      "diff_hunk" : "@@ -121,73 +182,79 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (request.params.size() >= 1 && request.params[0].isNum()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        if (g_connman->GetNodeStats(request.params[0].get_int(), stats)) {\n+            NodeStatsToJSON(stats, obj);\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n+\n+            ret.push_back(obj);\n+        }\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 3 || request.params.size() == 0)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network node (debug method).\\n\"\n+            \"\\nReturns updated information about the node. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"              (string, required) The node id (see getpeerinfo for a list of nodes with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the node is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the node was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if(!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    LOCK(cs_main);\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nodeid = request.params[0].get_int();\n+\n+    if (request.params.size() >= 2) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        if (!g_connman->SetWhitelisted(nodeid, request.params[1].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update node whitelisting\");\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if (request.params.size() >= 3) {\n+        RPCTypeCheckArgument(request.params[2], UniValue::VBOOL);\n+        if (!g_connman->SetManualConnection(nodeid, request.params[2].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update node manual\");\n         }\n-        obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+    }\n \n-        ret.push_back(obj);\n+    UniValue entry(UniValue::VOBJ);\n+    CNodeStats stats;\n+\n+    if (g_connman->GetNodeStats(nodeid, stats)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147376560",
      "id" : 147376560,
      "in_reply_to_id" : 147376503,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzM3NjU2MA==",
      "original_commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "original_position" : 202,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72463355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147376560",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147377023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147377023"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not null instead.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T10:31:55Z",
      "diff_hunk" : "@@ -121,73 +182,79 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (request.params.size() >= 1 && request.params[0].isNum()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147377023",
      "id" : 147377023,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzM3NzAyMw==",
      "original_commit_id" : "4a51dbde81c76a8d0c7c8ed606c0f1c358fde4fe",
      "original_position" : 86,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72463355,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147377023",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review @promag . I've addressed all your comments.",
      "created_at" : "2017-10-27T14:06:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339981381",
      "id" : 339981381,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-10-27T14:06:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/339981381",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "whitelisting via rpc?? BIG BIG concept ACK. I am excited. It will make configuration of services depending on Bitcoin Core RPC and P2P so much easier.",
      "created_at" : "2017-10-27T14:32:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-339988630",
      "id" : 339988630,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-10-27T14:32:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/339988630",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147427787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147427787"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```cpp\r\nif (!...) {\r\n    throw ...;\r\n}\r\n```",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:35:38Z",
      "diff_hunk" : "@@ -121,73 +182,81 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();\n+        if (g_connman->GetNodeStats(node_id, stats)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147427787",
      "id" : 147427787,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQyNzc4Nw==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 130,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147427787",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147428864"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147428864"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit, `> 1`.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:39:24Z",
      "diff_hunk" : "@@ -65,12 +65,73 @@ UniValue ping(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+void NodeStatsToJSON(const CNodeStats& stats, UniValue& obj)\n+{\n+    CNodeStateStats statestats;\n+    bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n+    obj.push_back(Pair(\"id\", stats.nodeid));\n+    obj.push_back(Pair(\"addr\", stats.addrName));\n+    if (!(stats.addrLocal.empty()))\n+        obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+    if (stats.addrBind.IsValid())\n+        obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n+    obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n+    obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n+    obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n+    obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n+    obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n+    obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n+    obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n+    obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+    if (stats.dPingTime > 0.0)\n+        obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+    if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n+        obj.push_back(Pair(\"minping\", stats.dMinPing));\n+    if (stats.dPingWait > 0.0)\n+        obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n+    obj.push_back(Pair(\"version\", stats.nVersion));\n+    // Use the sanitized form of subver here, to avoid tricksy remote peers from\n+    // corrupting or modifying the JSON output by putting special characters in\n+    // their ver message.\n+    obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n+    obj.push_back(Pair(\"inbound\", stats.fInbound));\n+    obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n+    obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+    if (fStateStats) {\n+        obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n+        obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n+        obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n+        UniValue heights(UniValue::VARR);\n+        for (int height : statestats.vHeightInFlight) {\n+            heights.push_back(height);\n+        }\n+        obj.push_back(Pair(\"inflight\", heights));\n+    }\n+    obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+\n+    UniValue sendPerMsgCmd(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n+        if (i.second > 0)\n+            sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    }\n+    obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+\n+    UniValue recvPerMsgCmd(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n+        if (i.second > 0)\n+            recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    }\n+    obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+}\n+\n UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() >= 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147428864",
      "id" : 147428864,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQyODg2NA==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 66,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147428864",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147428979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147428979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit, same line or `{ }`.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:39:49Z",
      "diff_hunk" : "@@ -65,12 +65,73 @@ UniValue ping(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+void NodeStatsToJSON(const CNodeStats& stats, UniValue& obj)\n+{\n+    CNodeStateStats statestats;\n+    bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n+    obj.push_back(Pair(\"id\", stats.nodeid));\n+    obj.push_back(Pair(\"addr\", stats.addrName));\n+    if (!(stats.addrLocal.empty()))\n+        obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+    if (stats.addrBind.IsValid())\n+        obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n+    obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n+    obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n+    obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n+    obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n+    obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n+    obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n+    obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n+    obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+    if (stats.dPingTime > 0.0)\n+        obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+    if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n+        obj.push_back(Pair(\"minping\", stats.dMinPing));\n+    if (stats.dPingWait > 0.0)\n+        obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n+    obj.push_back(Pair(\"version\", stats.nVersion));\n+    // Use the sanitized form of subver here, to avoid tricksy remote peers from\n+    // corrupting or modifying the JSON output by putting special characters in\n+    // their ver message.\n+    obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n+    obj.push_back(Pair(\"inbound\", stats.fInbound));\n+    obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n+    obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+    if (fStateStats) {\n+        obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n+        obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n+        obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n+        UniValue heights(UniValue::VARR);\n+        for (int height : statestats.vHeightInFlight) {\n+            heights.push_back(height);\n+        }\n+        obj.push_back(Pair(\"inflight\", heights));\n+    }\n+    obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+\n+    UniValue sendPerMsgCmd(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n+        if (i.second > 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147428979",
      "id" : 147428979,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQyODk3OQ==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 50,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147428979",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147429388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147429388"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit, missing spaces after `for`.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:41:09Z",
      "diff_hunk" : "@@ -2521,6 +2521,18 @@ size_t CConnman::GetNodeCount(NumConnections flags)\n     return nNum;\n }\n \n+bool CConnman::GetNodeStats(NodeId nodeid, CNodeStats& stats)\n+{\n+    LOCK(cs_vNodes);\n+    for(CNode* pnode : vNodes) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147429388",
      "id" : 147429388,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQyOTM4OA==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 7,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147429388",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147429561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147429561"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same as above.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:41:47Z",
      "diff_hunk" : "@@ -65,12 +65,73 @@ UniValue ping(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+void NodeStatsToJSON(const CNodeStats& stats, UniValue& obj)\n+{\n+    CNodeStateStats statestats;\n+    bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n+    obj.push_back(Pair(\"id\", stats.nodeid));\n+    obj.push_back(Pair(\"addr\", stats.addrName));\n+    if (!(stats.addrLocal.empty()))\n+        obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+    if (stats.addrBind.IsValid())\n+        obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n+    obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n+    obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n+    obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n+    obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n+    obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n+    obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n+    obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n+    obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+    if (stats.dPingTime > 0.0)\n+        obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+    if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n+        obj.push_back(Pair(\"minping\", stats.dMinPing));\n+    if (stats.dPingWait > 0.0)\n+        obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n+    obj.push_back(Pair(\"version\", stats.nVersion));\n+    // Use the sanitized form of subver here, to avoid tricksy remote peers from\n+    // corrupting or modifying the JSON output by putting special characters in\n+    // their ver message.\n+    obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n+    obj.push_back(Pair(\"inbound\", stats.fInbound));\n+    obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n+    obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+    if (fStateStats) {\n+        obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n+        obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n+        obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n+        UniValue heights(UniValue::VARR);\n+        for (int height : statestats.vHeightInFlight) {\n+            heights.push_back(height);\n+        }\n+        obj.push_back(Pair(\"inflight\", heights));\n+    }\n+    obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+\n+    UniValue sendPerMsgCmd(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n+        if (i.second > 0)\n+            sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    }\n+    obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+\n+    UniValue recvPerMsgCmd(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n+        if (i.second > 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147429561",
      "id" : 147429561,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQyOTU2MQ==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 57,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147429561",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147430084"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit, the most common expression is\r\n```cpp\r\nif (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\r\n```",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:43:42Z",
      "diff_hunk" : "@@ -121,73 +182,81 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();\n+        if (g_connman->GetNodeStats(node_id, stats)) {\n+            NodeStatsToJSON(stats, obj);\n+            ret.push_back(obj);\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Node id %u not found\", node_id));\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n+\n+            ret.push_back(obj);\n+        }\n+    }\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 3 || request.params.size() == 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430084",
      "id" : 147430084,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQzMDA4NA==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 158,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147430084",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147430252"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit, space after `if`.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:44:17Z",
      "diff_hunk" : "@@ -121,73 +182,81 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();\n+        if (g_connman->GetNodeStats(node_id, stats)) {\n+            NodeStatsToJSON(stats, obj);\n+            ret.push_back(obj);\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Node id %u not found\", node_id));\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n+\n+            ret.push_back(obj);\n+        }\n+    }\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 3 || request.params.size() == 0)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network node (debug method).\\n\"\n+            \"\\nReturns updated information about the node. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"              (string, required) The node id (see getpeerinfo for a list of nodes with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the node is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the node was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n+\n+    if(!g_connman) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430252",
      "id" : 147430252,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQzMDI1Mg==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 172,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147430252",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147430787"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same validation of `getpeerinfo`.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:46:17Z",
      "diff_hunk" : "@@ -121,73 +182,81 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();\n+        if (g_connman->GetNodeStats(node_id, stats)) {\n+            NodeStatsToJSON(stats, obj);\n+            ret.push_back(obj);\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Node id %u not found\", node_id));\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n+\n+            ret.push_back(obj);\n+        }\n+    }\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() > 3 || request.params.size() == 0)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network node (debug method).\\n\"\n+            \"\\nReturns updated information about the node. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"              (string, required) The node id (see getpeerinfo for a list of nodes with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the node is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the node was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n+\n+    if(!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    LOCK(cs_main);\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nodeid = request.params[0].get_int();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430787",
      "id" : 147430787,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQzMDc4Nw==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 179,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147430787",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430945"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147430945"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Needs release notes.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:46:52Z",
      "diff_hunk" : "@@ -65,12 +65,73 @@ UniValue ping(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+void NodeStatsToJSON(const CNodeStats& stats, UniValue& obj)\n+{\n+    CNodeStateStats statestats;\n+    bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n+    obj.push_back(Pair(\"id\", stats.nodeid));\n+    obj.push_back(Pair(\"addr\", stats.addrName));\n+    if (!(stats.addrLocal.empty()))\n+        obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+    if (stats.addrBind.IsValid())\n+        obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n+    obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n+    obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n+    obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n+    obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n+    obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n+    obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n+    obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n+    obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+    if (stats.dPingTime > 0.0)\n+        obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+    if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n+        obj.push_back(Pair(\"minping\", stats.dMinPing));\n+    if (stats.dPingWait > 0.0)\n+        obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n+    obj.push_back(Pair(\"version\", stats.nVersion));\n+    // Use the sanitized form of subver here, to avoid tricksy remote peers from\n+    // corrupting or modifying the JSON output by putting special characters in\n+    // their ver message.\n+    obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n+    obj.push_back(Pair(\"inbound\", stats.fInbound));\n+    obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n+    obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+    if (fStateStats) {\n+        obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n+        obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n+        obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n+        UniValue heights(UniValue::VARR);\n+        for (int height : statestats.vHeightInFlight) {\n+            heights.push_back(height);\n+        }\n+        obj.push_back(Pair(\"inflight\", heights));\n+    }\n+    obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+\n+    UniValue sendPerMsgCmd(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n+        if (i.second > 0)\n+            sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+    }\n+    obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+\n+    UniValue recvPerMsgCmd(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n+        if (i.second > 0)\n+            recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    }\n+    obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+}\n+\n UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() >= 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147430945",
      "id" : 147430945,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQzMDk0NQ==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 66,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147430945",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147431612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147431612"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually I think this is more correct:\r\n - raise `RPC_INVALID_PARAMETER` if `node_id < 0`;\r\n - raise `RPC_INVALID_ADDRESS_OR_KEY` if `!GetNodeStats(...)`.\r\n\r\nNote: if you do this then add a test for 1st case.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:49:28Z",
      "diff_hunk" : "@@ -121,73 +182,81 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147431612",
      "id" : 147431612,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQzMTYxMg==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 129,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147431612",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147431901"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147431901"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Missing failure tests for getpeerinfo (maybe unrelated to this PR).",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T14:50:26Z",
      "diff_hunk" : "@@ -94,5 +95,31 @@ def _test_getpeerinfo(self):\n         assert_equal(peer_info[0][0]['addrbind'], peer_info[1][0]['addr'])\n         assert_equal(peer_info[1][0]['addrbind'], peer_info[0][0]['addr'])\n \n+        # Check that getpeerinfo can be called for a specific peer_id\n+        peer_id = peer_info[0][0]['id']\n+        assert_equal(peer_info[0][0]['addr'], self.nodes[0].getpeerinfo(peer_id)[0]['addr'])\n+        assert_equal(peer_info[0][0]['addrbind'], self.nodes[0].getpeerinfo(peer_id)[0]['addrbind'])\n+\n+        # Check that getpeerinfo fails for an invalid peer_id\n+        assert_raises_rpc_error(-8, \"not found\", self.nodes[0].getpeerinfo, 5000)\n+\n+\n+    def _test_updatepeer(self):\n+        self.log.info(\"Test updatepeer\")\n+\n+        # whitelist should be false, manual conection should be true\n+        peer_info = self.nodes[0].getpeerinfo()[0]\n+        assert not peer_info['whitelisted']\n+        assert peer_info['addnode']\n+\n+        # Update properties and verify that they've changed\n+        self.nodes[0].updatepeer(peer_info['id'], True, False)\n+        peer_info = self.nodes[0].getpeerinfo()[0]\n+        assert peer_info['whitelisted']\n+        assert not peer_info['addnode']\n+\n+        # Check that updatepeer fails for an invalid peer_id\n+        assert_raises_rpc_error(-8, \"not found\", self.nodes[0].updatepeer, 5000)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147431901",
      "id" : 147431901,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzQzMTkwMQ==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 36,
      "path" : "test/functional/net.py",
      "position" : null,
      "pull_request_review_id" : 72525299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147431901",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147500533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147500533"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think it's too important, but feel free to open a follow-up PR if you think it's required.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-27T19:43:36Z",
      "diff_hunk" : "@@ -121,73 +182,81 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r147500533",
      "id" : 147500533,
      "in_reply_to_id" : 147431612,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NzUwMDUzMw==",
      "original_commit_id" : "c799a6c16d72a15b10affc0c55257c1bc2c48828",
      "original_position" : 129,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 72611235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147500533",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@promag nits addressed in latest commit.",
      "created_at" : "2017-10-27T19:43:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-340067518",
      "id" : 340067518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-10-27T19:43:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340067518",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r148022442"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148022442"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit, missing space after `for`. Same below.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-31T14:59:01Z",
      "diff_hunk" : "@@ -2553,6 +2565,30 @@ bool CConnman::DisconnectNode(NodeId id)\n     return false;\n }\n \n+bool CConnman::SetWhitelisted(NodeId id, bool fWhitelisted)\n+{\n+    LOCK(cs_vNodes);\n+    for(CNode* pnode : vNodes) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r148022442",
      "id" : 148022442,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODAyMjQ0Mg==",
      "original_commit_id" : "b0da202a2895cad95f8ef479a3497a227e93bacb",
      "original_position" : 26,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 73200421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148022442",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r148030122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148030122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Remove lock or am I missing something?",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-10-31T15:22:19Z",
      "diff_hunk" : "@@ -121,73 +184,82 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();\n+        if (!g_connman->GetNodeStats(node_id, stats)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %u not found\", node_id));\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        NodeStatsToJSON(stats, obj);\n+        ret.push_back(obj);\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network peer (debug method).\\n\"\n+            \"\\nReturns updated information about the peer. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"id\\\"                (string, required) The peer id (see getpeerinfo for a list of peers with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the peer is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the peer was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n+\n+    if (!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r148030122",
      "id" : 148030122,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0ODAzMDEyMg==",
      "original_commit_id" : "b0da202a2895cad95f8ef479a3497a227e93bacb",
      "original_position" : 182,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 73200421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/148030122",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I agree with @promag `updatepeer id setting value (setting value ...)` would be easier to extend later.",
      "created_at" : "2017-10-31T19:36:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-340882821",
      "id" : 340882821,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-10-31T19:36:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340882821",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Nit, how about updatepeer id setting value (setting value ...)\r\n\r\nThis is a different scheme from all of the existing RPCs. I expect that there would need to be changes to the rpc framework to make this work.\r\n\r\nIt doesn't make sense to me have a completely different scheme for just this RPC method, since we already have named arguments.\r\n\r\nIf you disagree, perhaps you could implement the scheme you're talking about in a new branch?",
      "created_at" : "2017-10-31T22:40:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-340928560",
      "id" : 340928560,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-10-31T22:40:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340928560",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery how so? This is just 3 differents parameters of 3 strings.\r\n\r\nThe way you are doing now, if there is like 60 settings for one peer, we will have 60 parameters to this function. This does not seem very maintainable. In such case even  `updatewhitelist id true` would be better. We would have 60 functions, which is still better than 60 parameters.\r\n",
      "created_at" : "2017-11-02T00:59:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-341287363",
      "id" : 341287363,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-11-02T00:59:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/341287363",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> This is designed to be called using named arguments, but due to the RPC infrastructure can also be called with positional arguments (although doing so would be very fiddly).\r\n\r\n@jnewbery you too agree that this is by design bad for positional arguments (considering the possible settings can be extended).\r\n\r\nAnother approach is to use something like `sendmany`: `updatepeer {\\\"setting\\\":value, ...}`.\r\n\r\nFWIW I already gave my utACK Ã°ÂÂÂ ",
      "created_at" : "2017-11-02T01:15:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-341289626",
      "id" : 341289626,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-11-02T01:16:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/341289626",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@NicolasDorier \r\n\r\n> how so? This is just 3 differents parameters of 3 strings\r\n\r\nRight, but all RPCs currently support positional arguments, where the position of the argument determines its meaning. I don't necessarily agree that it's always appropriate, but having a single RPC that doesn't adhere to that scheme is confusing and inconsistent.\r\n\r\nUsing named arguments have been around for at least two releases now, so there's no need to use positional arguments at all.\r\n\r\nRebased",
      "created_at" : "2017-11-14T18:34:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-344354270",
      "id" : 344354270,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-11-14T18:34:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/344354270",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "yeah we talked about it, I understand now why named args make sense. Concept ACK.",
      "created_at" : "2017-11-20T12:49:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-345686197",
      "id" : 345686197,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-11-20T12:49:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/345686197",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@NicolasDorier - you've given this a *BIG BIG concept ACK*. Mind reviewing? :slightly_smiling_face: ",
      "created_at" : "2017-11-29T21:25:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-348001110",
      "id" : 348001110,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-11-29T21:25:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348001110",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Sure will review and test today.",
      "created_at" : "2017-11-30T01:57:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-348058191",
      "id" : 348058191,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-11-30T01:57:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348058191",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r153969175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153969175"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The loop will get repeated all over the place for each field. (Already two times)\r\n\r\nI think a better approach would be to lock at `updatepeer` level and fetch the right CNode there at the beginning of the call. And change fields directly from there.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-11-30T02:02:32Z",
      "diff_hunk" : "@@ -2571,6 +2583,30 @@ bool CConnman::DisconnectNode(NodeId id)\n     return false;\n }\n \n+bool CConnman::SetWhitelisted(NodeId id, bool fWhitelisted)\n+{\n+    LOCK(cs_vNodes);\n+    for(CNode* pnode : vNodes) {\n+        if (id == pnode->id) {\n+            pnode->fWhitelisted = fWhitelisted;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CConnman::SetManualConnection(NodeId id, bool manual)\n+{\n+    LOCK(cs_vNodes);\n+    for(CNode* pnode : vNodes) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r153969175",
      "id" : 153969175,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mzk2OTE3NQ==",
      "original_commit_id" : "c072501ac4e32dccf508d9b40e56570a15338ce9",
      "original_position" : 38,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 80059110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153969175",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r153969407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153969407"
         }
      },
      "author_association" : "MEMBER",
      "body" : "See my above comment, by fetching once the node at the start of this method, you can remove all those `if` as you already know if the CNode with such id already exist. It makes things a bit easier to test and prevent monkey coding each time we want to add a new field.\r\n\r\nThis RPC error is also untestable as it makes you reproduce a difficult race condition. (need to drop the node after the previosu GetNodeStates but before this call)",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-11-30T02:04:15Z",
      "diff_hunk" : "@@ -121,73 +184,82 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();\n+        if (!g_connman->GetNodeStats(node_id, stats)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %u not found\", node_id));\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        NodeStatsToJSON(stats, obj);\n+        ret.push_back(obj);\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network peer (debug method).\\n\"\n+            \"\\nReturns updated information about the peer. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"id\\\"                (string, required) The peer id (see getpeerinfo for a list of peers with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the peer is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the peer was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n+\n+    if (!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    LOCK(cs_main);\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int node_id = request.params[0].get_int();\n+\n+    CNodeStats stats;\n+    if (!g_connman->GetNodeStats(node_id, stats)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %u not found\", node_id));\n+    }\n+\n+    if (!request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        if (!g_connman->SetWhitelisted(node_id, request.params[1].isTrue())) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Failed to update peer whitelisting\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r153969407",
      "id" : 153969407,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mzk2OTQwNw==",
      "original_commit_id" : "c072501ac4e32dccf508d9b40e56570a15338ce9",
      "original_position" : 195,
      "path" : "src/rpc/net.cpp",
      "position" : 199,
      "pull_request_review_id" : 80059374,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153969407",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r153969790"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153969790"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This method would also be removed if fetching CNode was done at the updatepeer level.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-11-30T02:07:33Z",
      "diff_hunk" : "@@ -2539,6 +2539,18 @@ size_t CConnman::GetNodeCount(NumConnections flags)\n     return nNum;\n }\n \n+bool CConnman::GetNodeStats(NodeId nodeid, CNodeStats& stats)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r153969790",
      "id" : 153969790,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mzk2OTc5MA==",
      "original_commit_id" : "c072501ac4e32dccf508d9b40e56570a15338ce9",
      "original_position" : 4,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 80059772,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/153969790",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery do you need more help on this PR? I am really interested into seeing it merged.",
      "created_at" : "2017-12-07T07:33:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-349886489",
      "id" : 349886489,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-12-07T07:33:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/349886489",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r155547583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155547583"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-12-07T15:09:40Z",
      "diff_hunk" : "@@ -2553,6 +2565,30 @@ bool CConnman::DisconnectNode(NodeId id)\n     return false;\n }\n \n+bool CConnman::SetWhitelisted(NodeId id, bool fWhitelisted)\n+{\n+    LOCK(cs_vNodes);\n+    for(CNode* pnode : vNodes) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r155547583",
      "id" : 155547583,
      "in_reply_to_id" : 148022442,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTU0NzU4Mw==",
      "original_commit_id" : "b0da202a2895cad95f8ef479a3497a227e93bacb",
      "original_position" : 26,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 81883967,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155547583",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r155548049"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155548049"
         }
      },
      "author_association" : "MEMBER",
      "body" : "you're right - I don't think this is required",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2017-12-07T15:11:31Z",
      "diff_hunk" : "@@ -121,73 +184,82 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();\n+        if (!g_connman->GetNodeStats(node_id, stats)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %u not found\", node_id));\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        NodeStatsToJSON(stats, obj);\n+        ret.push_back(obj);\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network peer (debug method).\\n\"\n+            \"\\nReturns updated information about the peer. See getpeerinfo() for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"id\\\"                (string, required) The peer id (see getpeerinfo for a list of peers with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the peer is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the peer was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n+\n+    if (!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r155548049",
      "id" : 155548049,
      "in_reply_to_id" : 148030122,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NTU0ODA0OQ==",
      "original_commit_id" : "b0da202a2895cad95f8ef479a3497a227e93bacb",
      "original_position" : 182,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 81884580,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155548049",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@NicolasDorier: Sorry for dropping this - I've rebased on master and squashed all nits.\r\n\r\nI'm not sure about your suggestion for locking in updatepeer and fetching the `CNode`. `cs_vNodes` isn't currently locked anywhere outsdie `CConman`, which I think is a good property to maintain.",
      "created_at" : "2017-12-07T16:43:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350024909",
      "id" : 350024909,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-12-07T16:43:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350024909",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery in this case, I would suggest to have a method on CConman `bool CConman::UpdateSetting(nodeid, str,value)` because there is high ratio of ceremonial monkey copy pasta code everytimes we will need to add one property here.",
      "created_at" : "2017-12-08T05:15:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350174592",
      "id" : 350174592,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-12-08T05:29:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350174592",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm still with @theuni on this one, not super happy with the idea of changing properties about peers that net_processing/net both consider \"constant\". Would prefer we add some (undocumented?) options to addnode (or a new RPC) which lets you control the flags of a peer as you create a connection.",
      "created_at" : "2017-12-08T16:00:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350299532",
      "id" : 350299532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-12-08T16:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350299532",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@theuni's comment was:\r\n\r\n> the idea of adding a command that changes the implied state of a peer via its attributes, rather than performing actions explicitly\r\n\r\nI don't understand what's meant by 'performing actions explicitly', but I'm happy to modify this PR if there are concrete suggestions.\r\n\r\n> not super happy with the idea of changing properties about peers that net_processing/net both consider \"constant\"\r\n\r\nCan you articulate what makes you not happy? Being able to change the properties of a connection without having to delete/recreate that object is generally very useful, since cycling a connection has many side-effects. As far as I can see, the only stateful impact of starting with `fWhitelisted` rather than updating it later is this call to `AddLocal()` in `BindListenPort()`:\r\n\r\n```\r\n    if (addrBind.IsRoutable() && fDiscover && !fWhitelisted)\r\n        AddLocal(addrBind, LOCAL_BIND);\r\n```\r\n\r\nI can't see any other reason to be concerned about updating `fWhitelisted` dynamically.",
      "created_at" : "2017-12-08T17:44:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350325940",
      "id" : 350325940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-12-08T17:44:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350325940",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I might be slightly more OK with changing fWhitelisted on a peer after its up, as that may be useful \"in the real world\" outside of tests, but I'm super not a fan of changing manual_connection. One thing @theuni and I have talked about is being more aggressive about CNode representing a \"connection handle\" where its potentially allowed to have a few constant members which are general information about the connection, eg whether it was automatically or manually added, the remote address, etc.\r\nOne thing you might imagine is inserting a peer into a set/map (eg compact blocks HB mode peers set, the (implied) set of nPreferredDownload peers (which we currently track with fPreferredDownload, but we could actually take it as implication based on const values in CNode)) or otherwise performing (between-message-)stateful behavior on a peer based on such (constant) information about a connection. In each of these cases, having such constant information change out from under you could potentially introduce races/bugs.\r\n\r\n> cycling a connection has many side-effects.\r\n\r\nI'm not sure what side-effects there are that couldn't be reproduced on a new connection after cycling the connection. It ends up being an unrealistic test if you dont do that anyway. Maybe I'm just missing the motivation of cases that wouldnt be better tested by cycling a connection?",
      "created_at" : "2017-12-08T18:43:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350340169",
      "id" : 350340169,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-12-08T18:43:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350340169",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> One thing you might imagine...\r\n\r\nYou're describing things that _may_ happen in future changes in abstract terms, particularly when you talk about between-message-stateful behaviour.\r\n\r\n`m_manual_connection` is certainly a better name than `fAddNode`, but I still don't think it really captures what the property means. Really it's something like 'preferred_peer' - it's a peer that we don't want to disconnect or punish for bad behaviour. How it was connected isn't really relevant. We may want to prefer a peer that has connected inbound to us, and we may want to connect outbound to a peer without preferring it. In that context, I think it makes sense to want to set this property manually after connection, without having to disconnect and go through the version-verack-getheaders-headers handshaking.\r\n\r\nThis is undoubtedly useful for testing, but I could also imagine it being useful, for example in a business that has more than one bitcoin node and wants to be able to manage their network topology.\r\n\r\nThinking forward a bit more, I think it'd also be beneficial to break out the whitelist behaviour to be more granular, and again be able to update those properties dynamically.",
      "created_at" : "2017-12-08T21:38:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-350378639",
      "id" : 350378639,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2017-12-08T21:38:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350378639",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169887796"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/169887796"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could you maybe make an (optionally inline) method `find_node_by_id` that the above methods use? Looks a bit copy-pastey.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2018-02-22T08:51:34Z",
      "diff_hunk" : "@@ -2577,6 +2589,30 @@ bool CConnman::DisconnectNode(NodeId id)\n     return false;\n }\n \n+bool CConnman::SetWhitelisted(NodeId id, bool fWhitelisted)\n+{\n+    LOCK(cs_vNodes);\n+    for (CNode* pnode : vNodes) {\n+        if (id == pnode->id) {\n+            pnode->fWhitelisted = fWhitelisted;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CConnman::SetManualConnection(NodeId id, bool manual)\n+{\n+    LOCK(cs_vNodes);\n+    for (CNode* pnode : vNodes) {\n+        if (id == pnode->id) {\n+            pnode->m_manual_connection = manual;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169887796",
      "id" : 169887796,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTg4Nzc5Ng==",
      "original_commit_id" : "0a002002f3f3b816a02ed84b99fa0181ac76e096",
      "original_position" : 46,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 98484547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/169887796",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169888223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/169888223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: No period at end (seems to be the norm). Also add this to the first line (`\"getpeerinfo \\\"id\\\"\\n\"`)",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2018-02-22T08:53:22Z",
      "diff_hunk" : "@@ -65,12 +65,80 @@ UniValue ping(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+void NodeStatsToJSON(const CNodeStats& stats, UniValue& obj)\n+{\n+    CNodeStateStats state_stats;\n+    bool got_state_stats = GetNodeStateStats(stats.nodeid, state_stats);\n+    obj.push_back(Pair(\"id\", stats.nodeid));\n+    obj.push_back(Pair(\"addr\", stats.addrName));\n+    if (!(stats.addrLocal.empty())) {\n+        obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+    }\n+    if (stats.addrBind.IsValid()) {\n+        obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n+    }\n+    obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n+    obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n+    obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n+    obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n+    obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n+    obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n+    obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n+    obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+    if (stats.dPingTime > 0.0) {\n+        obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+    }\n+    if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6) {\n+        obj.push_back(Pair(\"minping\", stats.dMinPing));\n+    }\n+    if (stats.dPingWait > 0.0) {\n+        obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n+    }\n+    obj.push_back(Pair(\"version\", stats.nVersion));\n+    // Use the sanitized form of subver here, to avoid tricksy remote peers from\n+    // corrupting or modifying the JSON output by putting special characters in\n+    // their ver message.\n+    obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n+    obj.push_back(Pair(\"inbound\", stats.fInbound));\n+    obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n+    obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+    if (got_state_stats) {\n+        obj.push_back(Pair(\"banscore\", state_stats.nMisbehavior));\n+        obj.push_back(Pair(\"synced_headers\", state_stats.nSyncHeight));\n+        obj.push_back(Pair(\"synced_blocks\", state_stats.nCommonHeight));\n+        UniValue heights(UniValue::VARR);\n+        for (int height : state_stats.vHeightInFlight) {\n+            heights.push_back(height);\n+        }\n+        obj.push_back(Pair(\"inflight\", heights));\n+    }\n+    obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+\n+    UniValue bytes_sent_per_message(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n+        if (i.second > 0) {\n+            bytes_sent_per_message.push_back(Pair(i.first, i.second));\n+        }\n+    }\n+    obj.push_back(Pair(\"bytessent_per_msg\", bytes_sent_per_message));\n+\n+    UniValue bytes_recvd_per_message(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n+        if (i.second > 0) {\n+            bytes_recvd_per_message.push_back(Pair(i.first, i.second));\n+        }\n+    }\n+    obj.push_back(Pair(\"bytesrecv_per_msg\", bytes_recvd_per_message));\n+}\n+\n UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n             \"getpeerinfo\\n\"\n-            \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n+            \"\\nReturns data about connected network nodes as a json array of objects.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"id\\\"         (numeric, optional) Only return information about the peer with the specified id.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169888223",
      "id" : 169888223,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTg4ODIyMw==",
      "original_commit_id" : "0a002002f3f3b816a02ed84b99fa0181ac76e096",
      "original_position" : 79,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 98484547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/169888223",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169888849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/169888849"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`\"updatepeer \\\"id\\\" ( \\\"whitelisted\\\" \\\"manual_connection\\\" )\\n\"`",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2018-02-22T08:56:08Z",
      "diff_hunk" : "@@ -121,73 +189,80 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();\n+        if (!g_connman->GetNodeStats(node_id, stats)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %u not found\", node_id));\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        NodeStatsToJSON(stats, obj);\n+        ret.push_back(obj);\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169888849",
      "id" : 169888849,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTg4ODg0OQ==",
      "original_commit_id" : "0a002002f3f3b816a02ed84b99fa0181ac76e096",
      "original_position" : 167,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 98484547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/169888849",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169889059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/169889059"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: `node_id` is an `int`, so `%d` not `%u`.",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2018-02-22T08:57:04Z",
      "diff_hunk" : "@@ -121,73 +189,80 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();\n+        if (!g_connman->GetNodeStats(node_id, stats)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %u not found\", node_id));\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        NodeStatsToJSON(stats, obj);\n+        ret.push_back(obj);\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network peer (debug method).\\n\"\n+            \"\\nReturns updated information about the peer. See the help text for getpeerinfo for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"id\\\"                (string, required) The peer id (see getpeerinfo for a list of peers with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the peer is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the peer was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if (!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int node_id = request.params[0].get_int();\n+\n+    CNodeStats stats;\n+    if (!g_connman->GetNodeStats(node_id, stats)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %u not found\", node_id));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r169889059",
      "id" : 169889059,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2OTg4OTA1OQ==",
      "original_commit_id" : "0a002002f3f3b816a02ed84b99fa0181ac76e096",
      "original_position" : 192,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 98484547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/169889059",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r190711373"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190711373"
         }
      },
      "author_association" : "MEMBER",
      "body" : "refactored out",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2018-05-24T19:54:46Z",
      "diff_hunk" : "@@ -2577,6 +2589,30 @@ bool CConnman::DisconnectNode(NodeId id)\n     return false;\n }\n \n+bool CConnman::SetWhitelisted(NodeId id, bool fWhitelisted)\n+{\n+    LOCK(cs_vNodes);\n+    for (CNode* pnode : vNodes) {\n+        if (id == pnode->id) {\n+            pnode->fWhitelisted = fWhitelisted;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CConnman::SetManualConnection(NodeId id, bool manual)\n+{\n+    LOCK(cs_vNodes);\n+    for (CNode* pnode : vNodes) {\n+        if (id == pnode->id) {\n+            pnode->m_manual_connection = manual;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r190711373",
      "id" : 190711373,
      "in_reply_to_id" : 169887796,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDcxMTM3Mw==",
      "original_commit_id" : "0a002002f3f3b816a02ed84b99fa0181ac76e096",
      "original_position" : 46,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 123147907,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190711373",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r190711669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190711669"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2018-05-24T19:56:03Z",
      "diff_hunk" : "@@ -65,12 +65,80 @@ UniValue ping(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+void NodeStatsToJSON(const CNodeStats& stats, UniValue& obj)\n+{\n+    CNodeStateStats state_stats;\n+    bool got_state_stats = GetNodeStateStats(stats.nodeid, state_stats);\n+    obj.push_back(Pair(\"id\", stats.nodeid));\n+    obj.push_back(Pair(\"addr\", stats.addrName));\n+    if (!(stats.addrLocal.empty())) {\n+        obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+    }\n+    if (stats.addrBind.IsValid()) {\n+        obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n+    }\n+    obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n+    obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n+    obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n+    obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n+    obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n+    obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n+    obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n+    obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+    if (stats.dPingTime > 0.0) {\n+        obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+    }\n+    if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6) {\n+        obj.push_back(Pair(\"minping\", stats.dMinPing));\n+    }\n+    if (stats.dPingWait > 0.0) {\n+        obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n+    }\n+    obj.push_back(Pair(\"version\", stats.nVersion));\n+    // Use the sanitized form of subver here, to avoid tricksy remote peers from\n+    // corrupting or modifying the JSON output by putting special characters in\n+    // their ver message.\n+    obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n+    obj.push_back(Pair(\"inbound\", stats.fInbound));\n+    obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n+    obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+    if (got_state_stats) {\n+        obj.push_back(Pair(\"banscore\", state_stats.nMisbehavior));\n+        obj.push_back(Pair(\"synced_headers\", state_stats.nSyncHeight));\n+        obj.push_back(Pair(\"synced_blocks\", state_stats.nCommonHeight));\n+        UniValue heights(UniValue::VARR);\n+        for (int height : state_stats.vHeightInFlight) {\n+            heights.push_back(height);\n+        }\n+        obj.push_back(Pair(\"inflight\", heights));\n+    }\n+    obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+\n+    UniValue bytes_sent_per_message(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n+        if (i.second > 0) {\n+            bytes_sent_per_message.push_back(Pair(i.first, i.second));\n+        }\n+    }\n+    obj.push_back(Pair(\"bytessent_per_msg\", bytes_sent_per_message));\n+\n+    UniValue bytes_recvd_per_message(UniValue::VOBJ);\n+    for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n+        if (i.second > 0) {\n+            bytes_recvd_per_message.push_back(Pair(i.first, i.second));\n+        }\n+    }\n+    obj.push_back(Pair(\"bytesrecv_per_msg\", bytes_recvd_per_message));\n+}\n+\n UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n             \"getpeerinfo\\n\"\n-            \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n+            \"\\nReturns data about connected network nodes as a json array of objects.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"id\\\"         (numeric, optional) Only return information about the peer with the specified id.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r190711669",
      "id" : 190711669,
      "in_reply_to_id" : 169888223,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDcxMTY2OQ==",
      "original_commit_id" : "0a002002f3f3b816a02ed84b99fa0181ac76e096",
      "original_position" : 79,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 123148308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190711669",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r190711896"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190711896"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "7807d959d5ba64ad6bdca76adbad8348a8ea2a3d",
      "created_at" : "2018-05-24T19:57:02Z",
      "diff_hunk" : "@@ -121,73 +189,80 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n-\n     UniValue ret(UniValue::VARR);\n \n-    for (const CNodeStats& stats : vstats) {\n+    if (!request.params[0].isNull()) {\n         UniValue obj(UniValue::VOBJ);\n-        CNodeStateStats statestats;\n-        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n-        if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n-        if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n-        if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n-        // Use the sanitized form of subver here, to avoid tricksy remote peers from\n-        // corrupting or modifying the JSON output by putting special characters in\n-        // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n-            UniValue heights(UniValue::VARR);\n-            for (int height : statestats.vHeightInFlight) {\n-                heights.push_back(height);\n-            }\n-            obj.push_back(Pair(\"inflight\", heights));\n+        CNodeStats stats;\n+\n+        int node_id = request.params[0].get_int();\n+        if (!g_connman->GetNodeStats(node_id, stats)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %u not found\", node_id));\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        NodeStatsToJSON(stats, obj);\n+        ret.push_back(obj);\n+    } else {\n+        std::vector<CNodeStats> vstats;\n+        g_connman->GetNodeStats(vstats);\n+\n+        for (const CNodeStats& stats : vstats) {\n+            UniValue obj(UniValue::VOBJ);\n+            NodeStatsToJSON(stats, obj);\n \n-        UniValue sendPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+            ret.push_back(obj);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue updatepeer(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"updatepeer\\n\"\n+            \"\\nUpdate settings for a network peer (debug method).\\n\"\n+            \"\\nReturns updated information about the peer. See the help text for getpeerinfo for the format of the returned object.\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"id\\\"                (string, required) The peer id (see getpeerinfo for a list of peers with their ids)\\n\"\n+            \"2. \\\"whitelisted\\\"       (bool, optional) whether the peer is whitelisted\\n\"\n+            \"3. \\\"manual_connection\\\" (bool, optional) whether the peer was manually added\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"updatepeer\", \"0 true\")\n+            + HelpExampleRpc(\"updatepeer\", \"0, true\")\n+        );\n \n-        UniValue recvPerMsgCmd(UniValue::VOBJ);\n-        for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n-            if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+    if (!g_connman) {\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n+\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int node_id = request.params[0].get_int();\n+\n+    CNodeStats stats;\n+    if (!g_connman->GetNodeStats(node_id, stats)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Node id %u not found\", node_id));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#discussion_r190711896",
      "id" : 190711896,
      "in_reply_to_id" : 169889059,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MDcxMTg5Ng==",
      "original_commit_id" : "0a002002f3f3b816a02ed84b99fa0181ac76e096",
      "original_position" : 192,
      "path" : "src/rpc/net.cpp",
      "position" : null,
      "pull_request_review_id" : 123148630,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10160",
      "updated_at" : "2018-07-23T15:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190711896",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Fixed @kallewoof review comments.",
      "created_at" : "2018-05-24T19:57:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-391839757",
      "id" : 391839757,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "updated_at" : "2018-05-24T19:57:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391839757",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "There doesn't seem to much appetite for this. Closing.",
      "created_at" : "2018-07-23T17:56:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-407146189",
      "id" : 407146189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNzE0NjE4OQ==",
      "updated_at" : "2018-07-23T17:56:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/407146189",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I liked it :(",
      "created_at" : "2018-07-24T03:23:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-407268229",
      "id" : 407268229,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNzI2ODIyOQ==",
      "updated_at" : "2018-07-24T03:23:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/407268229",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Marked \"up for grabs\". (Conversation is locked, so a new pull will need to be opened either way).",
      "created_at" : "2022-05-04T13:23:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10160#issuecomment-1117309257",
      "id" : 1117309257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10160",
      "node_id" : "IC_kwDOABII585CmMlJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1117309257/reactions"
      },
      "updated_at" : "2022-05-04T13:23:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1117309257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
