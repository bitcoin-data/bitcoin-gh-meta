[
   {
      "author_association" : "MEMBER",
      "body" : "Ping @theuni.",
      "created_at" : "2020-06-24T02:08:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-648538999",
      "id" : 648538999,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODUzODk5OQ==",
      "updated_at" : "2020-06-24T02:08:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648538999",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 402980d7d0299769e147688250235339908523c7\r\nIt might aid discoverability to refer to this list of pitfalls in `developer-notes.md`.",
      "created_at" : "2020-06-24T12:50:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-648799528",
      "id" : 648799528,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODc5OTUyOA==",
      "updated_at" : "2020-06-24T12:50:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648799528",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK 402980d7d0299769e147688250235339908523c7",
      "created_at" : "2020-06-24T14:27:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-648854853",
      "id" : 648854853,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODg1NDg1Mw==",
      "updated_at" : "2020-06-24T14:27:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648854853",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK modulo adding a reference in `developer-notes.md` to ease discoverability as suggested by @laanwj :)\r\n\r\nPrediction: We'll need a similar life-time issue warning in the developer notes once we get the sharp edges of `std::string_view` to play with :)",
      "created_at" : "2020-06-24T14:55:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-648872233",
      "id" : 648872233,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODg3MjIzMw==",
      "updated_at" : "2020-06-24T14:55:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648872233",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r444961222"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444961222"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/accept as Span/accept a Span/",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-24T15:01:19Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r444961222",
      "id" : 444961222,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2MTIyMg==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 51,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : null,
      "pull_request_review_id" : 436735896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/444961222",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445025361"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445025361"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Turns out clang actually has a newish attribute to detect this!\r\nhttps://reviews.llvm.org/rL338464\r\n\r\nI can confirm that this case is detected with clang-10 and the following change to span.h:\r\n```diff\r\n-    constexpr Span(V&& v) noexcept : m_data(v.data()), m_size(v.size()) {}\r\n+    constexpr Span(V&& v __attribute__((lifetimebound))) noexcept : m_data(v.data()), m_size(v.size()) {}\r\n```\r\nA new warning is given:\r\n```\r\nspantest.cpp:12:24: warning: temporary whose address is used as value of local variable 'sp' will be destroyed at the end of the full-expression [-Wdangling]\r\n    Span<const int> sp(std::vector<int>{1, 2, 3});\r\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~\r\n1 warning generated.\r\n```\r\nIt currently warns about several uses in #13062.\r\nI'm going through them now to see if they're false-positives.",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-24T16:36:09Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445025361",
      "id" : 445025361,
      "line" : 44,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNTM2MQ==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 44,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : 24,
      "pull_request_review_id" : 436819014,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445025361",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445029671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445029671"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in cases *where* a function..",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-24T16:43:22Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible\n+ *   range-like object. For example, this works:\n+*\n+ *       void Foo(Span<const int> arg);\n+ *\n+ *       Foo(std::vector<int>{1, 2, 3}); // Works\n+ *\n+ *   This is very useful in cases a function truly does not care about the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445029671",
      "id" : 445029671,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyOTY3MQ==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 58,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : null,
      "pull_request_review_id" : 436824565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445029671",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445032414"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445032414"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@theuni Interesting!\r\n\r\nI expect that there is one particular false positive: when you're converting a temporary *Span* to a compatible one. We could introduce a separate constructor for that, which then doesn't get the attribute. On the other hand, perhaps that interferes with useful detection too.",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-24T16:47:41Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445032414",
      "id" : 445032414,
      "in_reply_to_id" : 445025361,
      "line" : 44,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMjQxNA==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 44,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : 24,
      "pull_request_review_id" : 436828024,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445032414",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445069891"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445069891"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@sipa Yes, that seems to be the bulk of them.\r\n\r\n~I can't figure out why this _isn't_ UB (from ParseScript()):~\r\n```c++\r\n    if (Func(\"pkh\", expr)) {\r\n        auto pubkey = ParsePubkey(key_exp_index, expr, ctx != ParseScriptContext::P2WSH, out, error);\r\n```\r\n~Remember that ```Func()``` takes a ```std::string```, not a c string. So in the example above, presumably ```expr``` ends up pointing to somewhere inside the temporary string's memory after ```Func()``` returns. As you [pointed out](https://github.com/bitcoin/bitcoin/pull/18468#discussion_r443000807), for string literals that's the lifetime of the program. But in this case, I think we're relying on the fact that std::string's .data() returns that exact pointer. Is that guaranteed to be the case?~\r\n\r\nEdit: Nevermind. Guess I read the body of ```Func()``` too quickly. The modified span is not created from the string param.",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-24T17:53:10Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445069891",
      "id" : 445069891,
      "in_reply_to_id" : 445025361,
      "line" : 44,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2OTg5MQ==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 44,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : 24,
      "pull_request_review_id" : 436876915,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445069891",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445105927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445105927"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> We could introduce a separate constructor for that, which then doesn't get the attribute. On the other hand, perhaps that interferes with useful detection too.\r\n\r\nIndeed giving Span a (default) move ctor causes all current ```lifetimebound``` false-positives to go away, but still warns when intentionally inserting your UB example.",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-24T18:58:51Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445105927",
      "id" : 445105927,
      "in_reply_to_id" : 445025361,
      "line" : 44,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNTkyNw==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 44,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : 24,
      "pull_request_review_id" : 436923155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445105927",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445652881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445652881"
         }
      },
      "author_association" : "NONE",
      "body" : "reference should be plural or have article",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-25T15:39:19Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible\n+ *   range-like object. For example, this works:\n+*\n+ *       void Foo(Span<const int> arg);\n+ *\n+ *       Foo(std::vector<int>{1, 2, 3}); // Works\n+ *\n+ *   This is very useful in cases a function truly does not care about the\n+ *   container, and only about having exactly a range of elements. However\n+ *   it may also be surprising to see automatic conversions in this case.\n+ *\n+ *   When a function accepts a Span with a mutable element type, it will not\n+ *   accept temporaries; only variables or other references. For example:\n+ *\n+ *       void FooMut(Span<int> arg);\n+ *\n+ *       FooMut(std::vector<int>{1, 2, 3}); // Does not compile\n+ *       std::vector<int> baz{1, 2, 3};\n+ *       FooMut(baz); // Works\n+ *\n+ *   This is similar to how functions that take (non-const) lvalue reference",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r445652881",
      "id" : 445652881,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1Mjg4MQ==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 71,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : null,
      "pull_request_review_id" : 437619855,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/445652881",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/284023?v=4",
         "events_url" : "https://api.github.com/users/ysangkok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ysangkok/followers",
         "following_url" : "https://api.github.com/users/ysangkok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ysangkok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ysangkok",
         "id" : 284023,
         "login" : "ysangkok",
         "node_id" : "MDQ6VXNlcjI4NDAyMw==",
         "organizations_url" : "https://api.github.com/users/ysangkok/orgs",
         "received_events_url" : "https://api.github.com/users/ysangkok/received_events",
         "repos_url" : "https://api.github.com/users/ysangkok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ysangkok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ysangkok"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Related: I've pushed a branch here which adds the lifetimebound annotation: https://github.com/theuni/bitcoin/commits/lifetimebound\r\n\r\nThe changes are actually very simple, but the commit messages are verbose and reflect my (hopefully correct?) understanding of what's going on.\r\n\r\n@sipa Would you like me to PR that separately for discussion? Or (if you actually want them) do you want to pull them into #13062 ?",
      "created_at" : "2020-06-25T22:01:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-649839833",
      "id" : 649839833,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTgzOTgzMw==",
      "updated_at" : "2020-06-25T22:01:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649839833",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@theuni That looks great; I think you should PR it separately (as master stands to benefit from it independent of any other Span-related changes).",
      "created_at" : "2020-06-25T22:10:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-649842936",
      "id" : 649842936,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTg0MjkzNg==",
      "updated_at" : "2020-06-25T22:10:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649842936",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 402980d7d0299769e147688250235339908523c7",
      "created_at" : "2020-06-25T23:56:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-649874237",
      "id" : 649874237,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTg3NDIzNw==",
      "updated_at" : "2020-06-25T23:56:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649874237",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed all comments, I believe.",
      "created_at" : "2020-06-26T20:50:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-650394756",
      "id" : 650394756,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1MDM5NDc1Ng==",
      "updated_at" : "2020-06-26T20:50:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650394756",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446403829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446403829"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-26T20:50:33Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible\n+ *   range-like object. For example, this works:\n+*\n+ *       void Foo(Span<const int> arg);\n+ *\n+ *       Foo(std::vector<int>{1, 2, 3}); // Works\n+ *\n+ *   This is very useful in cases a function truly does not care about the\n+ *   container, and only about having exactly a range of elements. However\n+ *   it may also be surprising to see automatic conversions in this case.\n+ *\n+ *   When a function accepts a Span with a mutable element type, it will not\n+ *   accept temporaries; only variables or other references. For example:\n+ *\n+ *       void FooMut(Span<int> arg);\n+ *\n+ *       FooMut(std::vector<int>{1, 2, 3}); // Does not compile\n+ *       std::vector<int> baz{1, 2, 3};\n+ *       FooMut(baz); // Works\n+ *\n+ *   This is similar to how functions that take (non-const) lvalue reference",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446403829",
      "id" : 446403829,
      "in_reply_to_id" : 445652881,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwMzgyOQ==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 71,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : null,
      "pull_request_review_id" : 438587286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446403829",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404098"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404098"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-26T20:51:13Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible\n+ *   range-like object. For example, this works:\n+*\n+ *       void Foo(Span<const int> arg);\n+ *\n+ *       Foo(std::vector<int>{1, 2, 3}); // Works\n+ *\n+ *   This is very useful in cases a function truly does not care about the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404098",
      "id" : 446404098,
      "in_reply_to_id" : 445029671,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDA5OA==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 58,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : null,
      "pull_request_review_id" : 438587650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404098",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404286"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Discussion on this moved to #19387.",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-26T20:51:47Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404286",
      "id" : 446404286,
      "in_reply_to_id" : 445025361,
      "line" : 44,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDI4Ng==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 44,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : 24,
      "pull_request_review_id" : 438587908,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404286",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404341"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404341"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-26T20:51:58Z",
      "diff_hunk" : "@@ -21,6 +21,62 @@\n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n  * It implements a subset of C++20's std::span.\n+ *\n+ * Things to be aware of when writing code that deals with Spans:\n+ *\n+ * - Similar to references themselves, Spans are subject to reference lifetime\n+ *   issues. The user is responsible for making sure the objects pointed to by\n+ *   a Span live as long as the Span is used. For example:\n+ *\n+ *       std::vector<int> vec{1,2,3,4};\n+ *       Span<int> sp(vec);\n+ *       vec.push_back(5);\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   may exhibit undefined behavior, as increasing the size of a vector may\n+ *   invalidate references.\n+ *\n+ * - One particular pitfall is that Spans can be constructed from temporaries,\n+ *   but this is unsafe when the Span is stored in a variable, outliving the\n+ *   temporary. For example, this will compile, but exhibits undefined behavior:\n+ *\n+ *       Span<const int> sp(std::vector<int>{1, 2, 3});\n+ *       printf(\"%i\\n\", sp.front()); // UB!\n+ *\n+ *   The lifetime of the vector ends when the statement it is created in ends.\n+ *   Thus the Span is left with a dangling reference, and using it is undefined.\n+ *\n+ * - Due to Span's automatic creation from range-like objects (arrays, and data\n+ *   types that expose a data() and size() member function), functions that\n+ *   accept as Span as input parameter can be called with any compatible",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#discussion_r446404341",
      "id" : 446404341,
      "in_reply_to_id" : 444961222,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNDM0MQ==",
      "original_commit_id" : "402980d7d0299769e147688250235339908523c7",
      "original_line" : 51,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : null,
      "pull_request_review_id" : 438587996,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19367",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-26T20:54:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/446404341",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK fab57e2b9bc4577fcfcd9fbddbc35d96046c5d88",
      "created_at" : "2020-06-29T13:18:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19367#issuecomment-651114979",
      "id" : 651114979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19367",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1MTExNDk3OQ==",
      "updated_at" : "2020-06-29T13:18:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/651114979",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
