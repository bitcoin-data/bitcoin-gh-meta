[
   {
      "author_association" : "MEMBER",
      "body" : "Not sure what to do here. Except for the last one they seem all bugs in the static analyser. I recommend filing bugs upstream.\r\n\r\nFor the last one, it might be preferable to `assert` on the pindex to avoid forwarding a nullptr",
      "created_at" : "2020-06-24T14:04:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19372#issuecomment-648841597",
      "id" : 648841597,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19372",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODg0MTU5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-06-24T14:04:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648841597",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Below are some recent Coverity warnings. I've excluded warnings in GUI code. Usual disclaimers apply :)\r\n\r\n```\r\n*** CID 360898:  Uninitialized members  (UNINIT_CTOR)\r\n/src/rpc/util.cpp: 436 in RPCHelpMan::RPCHelpMan(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::vector<RPCArg, std::allocator<RPCArg>>, RPCResults, RPCExamples)()\r\n430             }\r\n431             return ret;\r\n432         }\r\n433     };\r\n434     \r\n435     RPCHelpMan::RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples)\r\n>>>     CID 360898:  Uninitialized members  (UNINIT_CTOR)\r\n>>>     Non-static class member field \"m_results.m_results\" is not initialized in this constructor nor in any functions that it calls.\r\n436         : RPCHelpMan{std::move(name), std::move(description), std::move(args), std::move(results), std::move(examples), nullptr} {}\r\n437     \r\n438     RPCHelpMan::RPCHelpMan(std::string name, std::string description, std::vector<RPCArg> args, RPCResults results, RPCExamples examples, RPCMethodImpl fun)\r\n439         : m_name{std::move(name)},\r\n440           m_fun{std::move(fun)},\r\n441           m_description{std::move(description)},\r\n```\r\n\r\n```\r\n*** CID 361023:  Uninitialized members  (UNINIT_CTOR)\r\n/src/net.cpp: 2275 in CConnman::CConnman(unsigned long, unsigned long, bool)()\r\n2269     {\r\n2270         SetTryNewOutboundPeer(false);\r\n2271     \r\n2272         Options connOptions;\r\n2273         Init(connOptions);\r\n2274         SetNetworkActive(network_active);\r\n>>>     CID 361023:  Uninitialized members  (UNINIT_CTOR)\r\n>>>     Non-static class member \"fMsgProcWake\" is not initialized in this constructor nor in any functions that it calls.\r\n2275     }\r\n2276     \r\n2277     NodeId CConnman::GetNewNodeId()\r\n2278     {\r\n2279         return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\r\n2280     }\r\n```",
      "created_at" : "2020-08-11T09:01:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19372#issuecomment-671824167",
      "id" : 671824167,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19372",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MTgyNDE2Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-11T09:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671824167",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The first one is another false positive and the second one is never read uninitialized. Though, it could be initialized to the same value that it is set in `Start()`",
      "created_at" : "2020-08-11T09:14:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19372#issuecomment-671830646",
      "id" : 671830646,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19372",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MTgzMDY0Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-11T09:14:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671830646",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke I should probably add that these are unfiltered Coverity reports so false positives are unfortunately expected (as with most static analyzer tools).\r\n\r\nMy idea is to make this issue a tracking issue where new static analyser warnings are posted say once per month effectively mimicking [how the static analyser part works in Intel's 0-DAY CI Kernel Test Service](https://01.org/lkp/documentation/0-day-test-service) (used in the Linux kernel project). With the difference that this would be low volume and monthly (instead of the super high volume and immediate `kbuild-all@lists.01.org` list :)).\r\n\r\nWe would have caught some nasty bugs in our code base earlier if we'd gotten more eyes on the Coverity reports. Anecdotal evidence: I've *tried* to keep track of Coverity reports for the past three/four years, but despite that I've sometimes accidentally skipped some reports only to find out that an issue I later found using another method (say fuzzing, manual review, dynamic analysis, another static analysis tool, etc.) was reported in my inbox all along thanks to Coverity :)",
      "created_at" : "2020-08-11T10:14:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19372#issuecomment-671859320",
      "id" : 671859320,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19372",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MTg1OTMyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-11T10:43:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671859320",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
