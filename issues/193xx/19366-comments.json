[
   {
      "author_association" : "MEMBER",
      "body" : "The `wallet_basic.py --descriptors` CI failure seems entirely unrelated :)\r\n\r\nReported as #19369.",
      "created_at" : "2020-06-24T05:49:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648605037",
      "id" : 648605037,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19366",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODYwNTAzNw==",
      "updated_at" : "2020-06-24T05:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648605037",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa @theuni I think this is in reply to the recent IRC conversation?\r\n\r\nFor reference:\r\n\r\n```\r\n[12:33] <sipa> MarcoFalke: i'm finding it a bit annoying that codebase changes often break existing fuzz tests, which require travis or an entirely separate build to find out\r\n[12:33] <sipa> what do you think about \"building\" the fuzz tests in normal make all mode (but without the actual fuzzing enabled)\r\n[12:34] <sipa> one caveat is that the fuzz tests currently already need c++17\r\n[12:48] <bitcoin-git> [bitcoin] hebasto closed pull request #18710: Add local thread pool to CCheckQueue (master...200419-thread-pool) https://github.com/bitcoin/bitcoin/pull/18710\r\n[12:49] <bitcoin-git> [bitcoin] hebasto reopened pull request #18710: Add local thread pool to CCheckQueue (master...200419-thread-pool) https://github.com/bitcoin/bitcoin/pull/18710\r\n[13:11] <cfields> sipa / MarcoFalke: See top 2 commits here for how that could work: https://github.com/theuni/bitcoin/commits/build-fuzz\r\n[13:57] <wumpus> sipa: I'm not sure it should be the default, but I do agree it should be easier (e.g. a single configure option) to build the fuzz tests as well sa everything else\r\n[13:57] <wumpus> having to do a second build with either-or exclusive options is kind of a time sink and easy to forget\r\n[13:58] <sipa> wumpus: it seems that building the actual fuzz tests within one configure is very hard\r\n[13:59] <wumpus> okay\r\n[13:59] <sipa> but just something that can test whether the fuzz tests build is great already, i think\r\n[13:59] <sipa> because it's really easy to introduce compile errors in them (and this will likely worsen as their coverage increases)\r\n[14:00] <wumpus> right\r\n[14:01] <sipa> we could even have a minimal main() for the fake-fuzz tests that reads a single input from stdin, and runs the test code on it\r\n[14:02] <sipa> or all entries in a directory... meaning it'd be actually useful as a test harness; you just wouldn't be able to fuzz with it\r\n[14:06] <wumpus> that's a neat idea, at least the building feels less like dead weight in that case\r\n[14:09] <sipa> as the travis fuzz build isn't actually doing any fuzzing, this may even be sufficient there\r\n[14:09] <bitcoin-git> [bitcoin] jnewbery opened pull request #19364: net processing: Move orphan reprocessing to a global (master...2020-06-global-orphans) https://github.com/bitcoin/bitcoin/pull/19364\r\n[14:11] <cfields> it seems getting them to link as real progs will have linker issues due to missing libs. I guess the linker doesn't go looking for unresolved symbols with no main?\r\n[14:11] <sipa> cfields: hmm, what symbols are missing?\r\n[14:12] <cfields> sipa: zmq/miniupnpc/etc.\r\n[14:12] <sipa> oh\r\n[14:12] <sipa> that sounds fixable?\r\n[14:12] <cfields> We could tack them on, but that kinda sucks.\r\n[14:13] <cfields> Yeah, there's another approach though to avoid linking altogether though, 1 sec.\r\n[14:13] <sipa> or maybe it's just not an issue\r\n[14:13] <sipa> because if it's not a problem for real fuzzing, why would it here?\r\n[14:13] <sipa> perhaps it's due to not having main() indeed\r\n[14:17] <cfields> different approach: https://github.com/theuni/bitcoin/commit/d36b2b9cfe7d3916f261e88b63c03a7a3edd9ea5\r\n[14:17] <cfields> That one's verbose though, requires us to c/p the object names to that list.\r\n[14:20] <sipa> that's somewhat annoying (it's already annoying to need to add a blob to the makefile for every new fuzz test)\r\n[14:20] <sipa> but not terrible i guess\r\n[14:24] <cfields> I'll play with the linker errors a bit, see if there's a quick fix.\r\n[14:49] <wumpus> even just compiling and not linking would find the largest part of the errors introduced by changes and drift i guess\r\n[14:50] <wumpus> link-time errors are kind of rare",
      "created_at" : "2020-06-24T11:18:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648759521",
      "id" : 648759521,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19366",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODc1OTUyMQ==",
      "updated_at" : "2020-06-24T11:18:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648759521",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'd say they should be compiled by default, just like bench and the unit tests, and the gui, and the gui tests. No one is running the benchmarks to do actual benchmarking in a usual development workflow. They are merely compiled to be smoke-run once in `make check`. I don't see why the fuzz tests should be different. They should be built and maybe even smoke tested (with the empty input or so) by default.\r\n\r\nSimilar to `--disable-tests`, `--disable-gui-tests`, `--disable-bench`, there should be a `--disable-fuzz` option.\r\n\r\nThe reason that fuzz tests are handled differently is because I am lacking the background in automake to do even the most simplest task. (I leave improvements in the build system for others to implement. E.g. #18527 :grimacing: )\r\n\r\nAnyway, I think all the tests should be handled the same by the build system and `make check`.",
      "created_at" : "2020-06-24T11:27:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648763070",
      "id" : 648763070,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19366",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODc2MzA3MA==",
      "updated_at" : "2020-06-24T11:27:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648763070",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'd say they should be compiled by default, just like bench and the unit tests, and the gui, and the gui tests. No one is running the benchmarks to do actual benchmarking in a usual development workflow. They are merely compiled to be smoke-run once in make check. I don't see why the fuzz tests should be different. They should be built and maybe even smoke tested (with the empty input or so) by default.\r\n\r\nConcept ACK. I think we'd want to skip building them in gitian (to save time for every platform, the result isn't shipped), but for a normal developer build it'd make sense.",
      "created_at" : "2020-06-24T12:07:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648780240",
      "id" : 648780240,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19366",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODc4MDI0MA==",
      "updated_at" : "2020-06-24T12:07:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648780240",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Jup, I think gitian/guix set `--disable-bench`, so they could also disable the fuzz tests",
      "created_at" : "2020-06-24T12:29:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648790269",
      "id" : 648790269,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19366",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODc5MDI2OQ==",
      "updated_at" : "2020-06-24T12:29:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648790269",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke I hadn't seen that conversation (I'm not on IRC), so this PR isn't a reply to it :)\r\n\r\nI've simply needed this myself many times when using the fuzzing harnesses as simple application entry points for concolic testing tools, abstract interpretation static analysis tools, etc which analyze the possible execution flow from `main` and onwards :)\r\n\r\nIn other words, being able to build the fuzz targets (non-instrumented using `--enable-fuzz`) is of much value also outside of fuzzing :)\r\n\r\nThis PR is restoring how things worked under Linux prior to the \"macOS libFuzzer linker issue\" fixed in #18008 (I'm upstreaming a local fix I've had for this).\r\n\r\nRegarding the quoted IRC conversation: I fully agree that we should start building the fuzzing harnesses by default, but I think that is largely unrelated to this PR.\r\n\r\nFWIW, the coverage of the fuzzing harnesses is quickly approaching the coverage reached by the unit tests (see [unit test coverage](https://marcofalke.github.io/btc_cov/test_bitcoin.coverage/index.html) and [fuzz test coverage](https://marcofalke.github.io/btc_cov/fuzz.coverage/index.html)). Hopefully writing fuzz tests to show a basic level of robustness for new code will soon be almost as natural as writing unit or functional tests for new code :)  Building the fuzzers by default will hopefully help us get there even sooner.",
      "created_at" : "2020-06-24T13:20:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648815499",
      "id" : 648815499,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19366",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODgxNTQ5OQ==",
      "updated_at" : "2020-06-24T13:55:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648815499",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "review ACK fdb933cf68f777bb5e0aaabc6216c5b54b4b28f1",
      "created_at" : "2020-06-24T13:27:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-648819247",
      "id" : 648819247,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19366",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0ODgxOTI0Nw==",
      "updated_at" : "2020-06-24T13:27:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/648819247",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 1087807b2bc56b9c7e7a5471c83f6ecfae79b048",
      "created_at" : "2020-06-26T18:38:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19366#issuecomment-650334110",
      "id" : 650334110,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19366",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1MDMzNDExMA==",
      "updated_at" : "2020-06-26T18:38:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/650334110",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
