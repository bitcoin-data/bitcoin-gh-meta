{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "## Problem\r\n\r\nEncrypting a wallet through JSON RPC or Qt *appears to* allow a user to include null characters in the passphrase, but silently ignores everything including and after the first null character.\r\n\r\nFor instance (on regtest), trying to set a passphrase of \"`a{null character}b`\":\r\n\r\n`curl --user __cookie__ --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"a\\u0000b\"]}' -H 'content-type: text/plain;' http://127.0.0.1:18443/`\r\n\r\nThis will succeed, but allow the user to unlock with the passphrase \"`a`\", instead of the expected full passphrase (which also works):\r\n\r\n`curl --user __cookie__ --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"walletpassphrase\", \"params\": [\"a\",10]}' -H 'content-type: text/plain;' http://127.0.0.1:18443/`\r\n\r\nI am also able to replicate it in Qt on my macOS machine by running `printf 'a\\0b' | pbcopy` and pasting the result into the passphrase dialog. \r\n\r\nMy main concern is a user thinking that they're generating, say, 32 random bytes as a passphrase, and if they're unlucky and get a zero in the first few bytes, it unexpectedly cuts their security down to almost nothing. \r\n\r\n## Root Cause\r\n\r\nThe reason is due to our `SecureString` type. `SecureString` is a `std::string` specialization with a secure allocator. However, when assigned, it's treated like a C- string (no explicit length and null-terminated). See the [original PR](https://github.com/bitcoin/bitcoin/pull/666) for more details.\r\n\r\n## Potential Solutions\r\n\r\nI think there are two plausible approaches to take. The first (and my preference) is to allow and support null characters, and I will submit a PR that enables that (by making `SecureString` use the entire string). The second is to explicitly reject any passphrases that contain null characters.\r\n\r\nOne significant complication may be that, if anyone is *already* using a passphrase with a null, then my first solution would stop their wallet from unlocking. However, it would still be unlockable just by trimming the null and any subsequent characters.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27067/comments",
   "created_at" : "2023-02-09T18:44:23Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27067/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/27067",
   "id" : 1578414218,
   "labels" : [
      {
         "color" : "FBBAAB",
         "default" : false,
         "description" : null,
         "id" : 64585,
         "name" : "Bug",
         "node_id" : "MDU6TGFiZWw2NDU4NQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug"
      },
      {
         "color" : "08a781",
         "default" : false,
         "description" : null,
         "id" : 149424,
         "name" : "Wallet",
         "node_id" : "MDU6TGFiZWwxNDk0MjQ=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27067/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII585eFLCK",
   "number" : 27067,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27067/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27067/timeline",
   "title" : "Wallet passphrases silently ignore everything after a null character",
   "updated_at" : "2023-02-13T08:09:32Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27067",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/116917595?v=4",
      "events_url" : "https://api.github.com/users/john-moffett/events{/privacy}",
      "followers_url" : "https://api.github.com/users/john-moffett/followers",
      "following_url" : "https://api.github.com/users/john-moffett/following{/other_user}",
      "gists_url" : "https://api.github.com/users/john-moffett/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/john-moffett",
      "id" : 116917595,
      "login" : "john-moffett",
      "node_id" : "U_kgDOBvgFWw",
      "organizations_url" : "https://api.github.com/users/john-moffett/orgs",
      "received_events_url" : "https://api.github.com/users/john-moffett/received_events",
      "repos_url" : "https://api.github.com/users/john-moffett/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/john-moffett/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/john-moffett/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/john-moffett"
   }
}
