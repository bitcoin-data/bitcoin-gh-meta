[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-02-01T20:42:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#issuecomment-1412695691",
      "id" : 1412695691,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27019",
      "node_id" : "IC_kwDOABII585UNAaL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412695691/reactions"
      },
      "updated_at" : "2023-02-01T20:42:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1412695691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1094183174"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094183174"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\nbench/mempool_eviction.cpp:42:105: runtime error: unsigned integer overflow: 0 - 1 cannot be represented in type 'unsigned long'",
      "commit_id" : "1fed1e3b0a0382322e236f3230aa9b3361c424b5",
      "created_at" : "2023-02-02T08:27:38Z",
      "diff_hunk" : "@@ -21,116 +21,65 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n {\n-    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n-\n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n \n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n+            if (put_index < txns.size()) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1094183174",
      "id" : 1094183174,
      "line" : 42,
      "node_id" : "PRRC_kwDOABII585BN-kG",
      "original_commit_id" : "1fed1e3b0a0382322e236f3230aa9b3361c424b5",
      "original_line" : 42,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : 65,
      "pull_request_review_id" : 1280537976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094183174/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-02T08:27:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094183174",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1094629151"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094629151"
         }
      },
      "author_association" : "MEMBER",
      "body" : "found the issue, thanks",
      "commit_id" : "4d5a2ee9aebb8ae779019843acbbac44a7ecf540",
      "created_at" : "2023-02-02T14:47:40Z",
      "diff_hunk" : "@@ -21,116 +21,65 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n {\n-    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n-\n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n \n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n+            if (put_index < txns.size()) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1094629151",
      "id" : 1094629151,
      "in_reply_to_id" : 1094183174,
      "line" : 43,
      "node_id" : "PRRC_kwDOABII585BPrcf",
      "original_commit_id" : "1fed1e3b0a0382322e236f3230aa9b3361c424b5",
      "original_line" : 43,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : 66,
      "pull_request_review_id" : 1281207133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094629151/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-02-02T14:47:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1094629151",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143826570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143826570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why this size exactly - the first tx isn't guaranteed to be the smallest or anything? Why not just 0?",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-21T18:19:47Z",
      "diff_hunk" : "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143826570",
      "id" : 1143826570,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ELWiK",
      "original_commit_id" : "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "original_line" : 71,
      "original_position" : 143,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : null,
      "pull_request_review_id" : 1351144851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143826570/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-21T18:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143826570",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143839532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143839532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I could be reading this code wrong, but isn't each tx taking inputs from each tx before it? It's still parents-and-child technically but it's also a chain.\r\n\r\n```suggestion\r\n    // Where each tx takes an input from all prior txns\r\n```",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-21T18:29:45Z",
      "diff_hunk" : "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143839532",
      "id" : 1143839532,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ELZss",
      "original_commit_id" : "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "original_line" : 27,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : null,
      "pull_request_review_id" : 1351144851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143839532/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-21T18:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143839532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143841355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143841355"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Er, what does this comment mean?",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-21T18:31:38Z",
      "diff_hunk" : "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));\n+        assert(pool.size() == 0);\n+    });\n+}\n+\n+static void MempoolConstructionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n+{\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n+\n+    /* Now we're ready */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143841355",
      "id" : 1143841355,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585ELaJL",
      "original_commit_id" : "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "original_line" : 85,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : 157,
      "pull_request_review_id" : 1351144851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143841355/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-21T18:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143841355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143849591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143849591"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why? I don't think it has any impact on the construction performance?",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-21T18:39:50Z",
      "diff_hunk" : "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));\n+        assert(pool.size() == 0);\n+    });\n+}\n+\n+static void MempoolConstructionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n+{\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n+\n+    /* Now we're ready */\n+    CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n     bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n-        AddTx(tx1_r, 10000LL, pool);\n-        AddTx(tx2_r, 5000LL, pool);\n-        AddTx(tx3_r, 20000LL, pool);\n-        AddTx(tx4_r, 7000LL, pool);\n-        AddTx(tx5_r, 1000LL, pool);\n-        AddTx(tx6_r, 1100LL, pool);\n-        AddTx(tx7_r, 9000LL, pool);\n-        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n-        pool.TrimToSize(GetVirtualTransactionSize(*tx1_r));\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143849591",
      "id" : 1143849591,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ELcJ3",
      "original_commit_id" : "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "original_line" : 91,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : null,
      "pull_request_review_id" : 1351144851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143849591/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-21T18:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143849591",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143851697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143851697"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I think we tend to prefer this\r\n```suggestion\r\n        for (size_t i{0}; i < txns.size(); ++i) {\r\n```",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-21T18:42:05Z",
      "diff_hunk" : "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143851697",
      "id" : 1143851697,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ELcqx",
      "original_commit_id" : "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "original_line" : 64,
      "original_position" : 136,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : null,
      "pull_request_review_id" : 1351144851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143851697/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-21T18:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143851697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143918290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143918290"
         }
      },
      "author_association" : "MEMBER",
      "body" : "hmmm, I don't recall. I can just set to 0",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-21T19:48:27Z",
      "diff_hunk" : "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143918290",
      "id" : 1143918290,
      "in_reply_to_id" : 1143826570,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ELs7S",
      "original_commit_id" : "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "original_line" : 71,
      "original_position" : 143,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : null,
      "pull_request_review_id" : 1351278447,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143918290/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-21T19:48:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143918290",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143923923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143923923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "will remove",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-21T19:54:43Z",
      "diff_hunk" : "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));\n+        assert(pool.size() == 0);\n+    });\n+}\n+\n+static void MempoolConstructionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n+{\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n+\n+    /* Now we're ready */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143923923",
      "id" : 1143923923,
      "in_reply_to_id" : 1143841355,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585ELuTT",
      "original_commit_id" : "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "original_line" : 85,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : 157,
      "pull_request_review_id" : 1351286944,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143923923/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-21T19:54:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143923923",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143932896"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143932896"
         }
      },
      "author_association" : "MEMBER",
      "body" : "looks like something that doesn't matter, based on me getting rid of that factor. Removed.",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-21T20:04:38Z",
      "diff_hunk" : "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));\n+        assert(pool.size() == 0);\n+    });\n+}\n+\n+static void MempoolConstructionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n+{\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n+\n+    /* Now we're ready */\n+    CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n     bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n-        AddTx(tx1_r, 10000LL, pool);\n-        AddTx(tx2_r, 5000LL, pool);\n-        AddTx(tx3_r, 20000LL, pool);\n-        AddTx(tx4_r, 7000LL, pool);\n-        AddTx(tx5_r, 1000LL, pool);\n-        AddTx(tx6_r, 1100LL, pool);\n-        AddTx(tx7_r, 9000LL, pool);\n-        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n-        pool.TrimToSize(GetVirtualTransactionSize(*tx1_r));\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1143932896",
      "id" : 1143932896,
      "in_reply_to_id" : 1143849591,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585ELwfg",
      "original_commit_id" : "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "original_line" : 91,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : null,
      "pull_request_review_id" : 1351301107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143932896/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-21T20:04:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1143932896",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144457060"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144457060"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Didn't remove?",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-22T09:18:08Z",
      "diff_hunk" : "@@ -21,116 +21,96 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where the final tx takes an input from all ancestors\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);\n+            }\n+        }\n+        txns.push_back(MakeTransactionRef(tx));\n+    }\n+}\n+\n+static void MempoolEvictionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n {\n     const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n-    CMutableTransaction tx1 = CMutableTransaction();\n-    tx1.vin.resize(1);\n-    tx1.vin[0].scriptSig = CScript() << OP_1;\n-    tx1.vin[0].scriptWitness.stack.push_back({1});\n-    tx1.vout.resize(1);\n-    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n-    tx1.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx2 = CMutableTransaction();\n-    tx2.vin.resize(1);\n-    tx2.vin[0].scriptSig = CScript() << OP_2;\n-    tx2.vin[0].scriptWitness.stack.push_back({2});\n-    tx2.vout.resize(1);\n-    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n-    tx2.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx3 = CMutableTransaction();\n-    tx3.vin.resize(1);\n-    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n-    tx3.vin[0].scriptSig = CScript() << OP_2;\n-    tx3.vin[0].scriptWitness.stack.push_back({3});\n-    tx3.vout.resize(1);\n-    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n-    tx3.vout[0].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx4 = CMutableTransaction();\n-    tx4.vin.resize(2);\n-    tx4.vin[0].prevout.SetNull();\n-    tx4.vin[0].scriptSig = CScript() << OP_4;\n-    tx4.vin[0].scriptWitness.stack.push_back({4});\n-    tx4.vin[1].prevout.SetNull();\n-    tx4.vin[1].scriptSig = CScript() << OP_4;\n-    tx4.vin[1].scriptWitness.stack.push_back({4});\n-    tx4.vout.resize(2);\n-    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[0].nValue = 10 * COIN;\n-    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n-    tx4.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx5 = CMutableTransaction();\n-    tx5.vin.resize(2);\n-    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n-    tx5.vin[0].scriptSig = CScript() << OP_4;\n-    tx5.vin[0].scriptWitness.stack.push_back({4});\n-    tx5.vin[1].prevout.SetNull();\n-    tx5.vin[1].scriptSig = CScript() << OP_5;\n-    tx5.vin[1].scriptWitness.stack.push_back({5});\n-    tx5.vout.resize(2);\n-    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[0].nValue = 10 * COIN;\n-    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n-    tx5.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx6 = CMutableTransaction();\n-    tx6.vin.resize(2);\n-    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n-    tx6.vin[0].scriptSig = CScript() << OP_4;\n-    tx6.vin[0].scriptWitness.stack.push_back({4});\n-    tx6.vin[1].prevout.SetNull();\n-    tx6.vin[1].scriptSig = CScript() << OP_6;\n-    tx6.vin[1].scriptWitness.stack.push_back({6});\n-    tx6.vout.resize(2);\n-    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[0].nValue = 10 * COIN;\n-    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n-    tx6.vout[1].nValue = 10 * COIN;\n-\n-    CMutableTransaction tx7 = CMutableTransaction();\n-    tx7.vin.resize(2);\n-    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n-    tx7.vin[0].scriptSig = CScript() << OP_5;\n-    tx7.vin[0].scriptWitness.stack.push_back({5});\n-    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n-    tx7.vin[1].scriptSig = CScript() << OP_6;\n-    tx7.vin[1].scriptWitness.stack.push_back({6});\n-    tx7.vout.resize(2);\n-    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[0].nValue = 10 * COIN;\n-    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n-    tx7.vout[1].nValue = 10 * COIN;\n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n \n+    /* Now we're ready */\n     CTxMemPool& pool = *Assert(testing_setup->m_node.mempool);\n     LOCK2(cs_main, pool.cs);\n-    // Create transaction references outside the \"hot loop\"\n-    const CTransactionRef tx1_r{MakeTransactionRef(tx1)};\n-    const CTransactionRef tx2_r{MakeTransactionRef(tx2)};\n-    const CTransactionRef tx3_r{MakeTransactionRef(tx3)};\n-    const CTransactionRef tx4_r{MakeTransactionRef(tx4)};\n-    const CTransactionRef tx5_r{MakeTransactionRef(tx5)};\n-    const CTransactionRef tx6_r{MakeTransactionRef(tx6)};\n-    const CTransactionRef tx7_r{MakeTransactionRef(tx7)};\n+    bench.run([&]() NO_THREAD_SAFETY_ANALYSIS {\n+        for (size_t i=0; i<txns.size(); i++) {\n+            // Monotonically decreasing fees\n+            AddTx(txns[i], (txns.size() - i)*1000LL, pool);\n+        }\n+        assert(pool.size() == txns.size());\n+        pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+        assert(pool.size() == txns.size() - 1);\n+        pool.TrimToSize(GetVirtualTransactionSize(*txns[0]));\n+        assert(pool.size() == 0);\n+    });\n+}\n+\n+static void MempoolConstructionInner(benchmark::Bench& bench, size_t num_packages, size_t package_size)\n+{\n+    const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n \n+    std::vector<CTransactionRef> txns;\n+\n+    for (size_t i=0; i<num_packages; i++) {\n+        add_parents_child(txns, package_size, i);\n+    }\n+\n+    /* Now we're ready */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144457060",
      "id" : 1144457060,
      "in_reply_to_id" : 1143841355,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII585ENwdk",
      "original_commit_id" : "a3a2e82a6eb70cd73723af38fa1a456ab553981d",
      "original_line" : 85,
      "original_position" : 158,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : 157,
      "pull_request_review_id" : 1352051877,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144457060/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-22T09:26:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144457060",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144457784"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144457784"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you apply the changes to the other loops too? i.e.\r\n```suggestion\r\n        for (size_t put_index{0}; put_index < num_puts; ++put_index) {\r\n```",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-22T09:18:40Z",
      "diff_hunk" : "@@ -21,116 +21,94 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where each tx takes an input from all prior txns\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144457784",
      "id" : 1144457784,
      "line" : 34,
      "node_id" : "PRRC_kwDOABII585ENwo4",
      "original_commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_line" : 34,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : 18,
      "pull_request_review_id" : 1352051877,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144457784/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-22T09:26:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144457784",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144470215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144470215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Wait, if you're using `txns[put_index]` *and* you're using the same `txns` reference each time you call `add_parents_child`, aren't you having all subsequent packages spend outputs from txns[0:24] too? That means all these packages conflict with each other.\r\n\r\nYou could fix this by adding `set_num * package_size` or something to the index. But what would probably make a better interface is if `add_parents_child` returns the list of transactions it creates, and you append them to your larger list of packages.",
      "commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "created_at" : "2023-03-22T09:26:41Z",
      "diff_hunk" : "@@ -21,116 +21,94 @@ static void AddTx(const CTransactionRef& tx, const CAmount& nFee, CTxMemPool& po\n         spendsCoinbase, sigOpCost, lp));\n }\n \n-// Right now this is only testing eviction performance in an extremely small\n-// mempool. Code needs to be written to generate a much wider variety of\n-// unique transactions for a more meaningful performance measurement.\n-static void MempoolEviction(benchmark::Bench& bench)\n+void add_parents_child(std::vector<CTransactionRef>& txns, size_t package_size, size_t set_num)\n+{\n+    // N+1 N-input-N-output txns, in a parents-and-child package\n+    // Where each tx takes an input from all prior txns\n+    const size_t num_puts = std::max(package_size - 1, (size_t)1);\n+    const size_t num_txns = package_size;\n+    for (size_t txn_index=0; txn_index<num_txns; txn_index++) {\n+        CMutableTransaction tx = CMutableTransaction();\n+        tx.vin.resize(num_puts);\n+        tx.vout.resize(num_puts);\n+        for (size_t put_index=0; put_index<num_puts; put_index++) {\n+            tx.vin[put_index].scriptSig = CScript() << CScriptNum(txn_index);\n+            tx.vin[put_index].scriptWitness.stack.push_back({1});\n+            tx.vout[put_index].scriptPubKey = CScript() << CScriptNum(set_num); // Ensures unique txid with set_num\n+            tx.vout[put_index].nValue = txn_index;\n+\n+            if (put_index < txn_index) {\n+                // We spend put_index's txn's in the next available slot for each previous transaction\n+                assert(put_index + txn_index >= 1);\n+                tx.vin[put_index].prevout = COutPoint(txns[put_index]->GetHash(), put_index + txn_index - 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27019#discussion_r1144470215",
      "id" : 1144470215,
      "line" : 43,
      "node_id" : "PRRC_kwDOABII585ENzrH",
      "original_commit_id" : "a6fc02baae1be4b849653448d0522f99064aa94f",
      "original_line" : 43,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/bench/mempool_eviction.cpp",
      "position" : 27,
      "pull_request_review_id" : 1352051877,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27019",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144470215/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-03-22T09:26:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1144470215",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
