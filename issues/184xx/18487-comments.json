[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2020-04-01T09:56:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#issuecomment-607153672",
      "id" : 607153672,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzE1MzY3Mg==",
      "updated_at" : "2020-04-03T19:58:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607153672",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402400566"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402400566"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would be nice to add a comment why this scope is needed for `cs_wallet`",
      "commit_id" : "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "created_at" : "2020-04-02T15:23:32Z",
      "diff_hunk" : "@@ -1918,43 +1918,46 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402400566",
      "id" : 402400566,
      "line" : 1960,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMDU2Ng==",
      "original_commit_id" : "0944cafe294d4ee009b615fc8d8caca77c117481",
      "original_line" : 1960,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 74,
      "pull_request_review_id" : 386536469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T16:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402400566",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402402433"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402402433"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok.",
      "commit_id" : "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "created_at" : "2020-04-02T15:25:49Z",
      "diff_hunk" : "@@ -1918,43 +1918,46 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402402433",
      "id" : 402402433,
      "in_reply_to_id" : 402400566,
      "line" : 1960,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwMjQzMw==",
      "original_commit_id" : "0944cafe294d4ee009b615fc8d8caca77c117481",
      "original_line" : 1960,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 74,
      "pull_request_review_id" : 386538685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T16:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402402433",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Can be tested with #18507 ",
      "created_at" : "2020-04-02T15:27:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#issuecomment-607915726",
      "id" : 607915726,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzkxNTcyNg==",
      "updated_at" : "2020-04-02T15:27:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607915726",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402407866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402407866"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should this say \"locked\" instead of \"loaded\"?",
      "commit_id" : "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "created_at" : "2020-04-02T15:33:01Z",
      "diff_hunk" : "@@ -1918,47 +1918,52 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }\n \n     // Keep a weak pointer to the wallet so that it is possible to unload the\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402407866",
      "id" : 402407866,
      "line" : 1969,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwNzg2Ng==",
      "original_commit_id" : "47dd37cc83bdcaf19a3abe95950b2409baae6249",
      "original_line" : 1969,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 83,
      "pull_request_review_id" : 386545557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T16:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402407866",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402408647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402408647"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why \"currently\"? Is there a plan to change this in the future?\r\n\r\nAlso, could add a `AssertLockNotHeld(cs_wallet);` to accommodate  the comment?",
      "commit_id" : "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "created_at" : "2020-04-02T15:34:08Z",
      "diff_hunk" : "@@ -1918,47 +1918,52 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }\n \n     // Keep a weak pointer to the wallet so that it is possible to unload the\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.\n+    // Currently this must be called without locks held otherwise a deadlock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402408647",
      "id" : 402408647,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwODY0Nw==",
      "original_commit_id" : "47dd37cc83bdcaf19a3abe95950b2409baae6249",
      "original_line" : 1965,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 386545557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T16:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402408647",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402410809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402410809"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Instead of plain hashtag and number, which is hard to quickly look up (especially without internet), what about describing the issue here briefly?",
      "commit_id" : "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "created_at" : "2020-04-02T15:37:09Z",
      "diff_hunk" : "@@ -1918,47 +1918,52 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }\n \n     // Keep a weak pointer to the wallet so that it is possible to unload the\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.\n+    // Currently this must be called without locks held otherwise a deadlock\n+    // can occur with cs_wallet. For more details see #18487.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402410809",
      "id" : 402410809,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMDgwOQ==",
      "original_commit_id" : "47dd37cc83bdcaf19a3abe95950b2409baae6249",
      "original_line" : 1966,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 386545557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T16:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402410809",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402433672"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402433672"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The comment from the pull request description seems suitable",
      "commit_id" : "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "created_at" : "2020-04-02T16:08:56Z",
      "diff_hunk" : "@@ -1918,47 +1918,52 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }\n \n     // Keep a weak pointer to the wallet so that it is possible to unload the\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.\n+    // Currently this must be called without locks held otherwise a deadlock\n+    // can occur with cs_wallet. For more details see #18487.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402433672",
      "id" : 402433672,
      "in_reply_to_id" : 402410809,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMzY3Mg==",
      "original_commit_id" : "47dd37cc83bdcaf19a3abe95950b2409baae6249",
      "original_line" : 1966,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 386578396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T16:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402433672",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 47dd37cc83bdcaf19a3abe95950b2409baae6249 only tested that this avoids the node freezing. Didn't look at how libevent works or how the deadlock happens or if this breaks other stuff.",
      "created_at" : "2020-04-02T16:09:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#issuecomment-607940922",
      "id" : 607940922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzk0MDkyMg==",
      "updated_at" : "2020-04-02T16:09:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607940922",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402440776"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402440776"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, loaded. This is to handle the case a wallet is unloaded before the timer is triggered.",
      "commit_id" : "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "created_at" : "2020-04-02T16:19:25Z",
      "diff_hunk" : "@@ -1918,47 +1918,52 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }\n \n     // Keep a weak pointer to the wallet so that it is possible to unload the\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402440776",
      "id" : 402440776,
      "in_reply_to_id" : 402407866,
      "line" : 1969,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MDc3Ng==",
      "original_commit_id" : "47dd37cc83bdcaf19a3abe95950b2409baae6249",
      "original_line" : 1969,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 83,
      "pull_request_review_id" : 386538685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T16:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402440776",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402441700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402441700"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Why \"currently\"? Is there a plan to change this in the future?\r\n\r\nNo plans. However I think it could be improved because after the timer stays in `deadlineTimers` after being triggered.",
      "commit_id" : "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "created_at" : "2020-04-02T16:20:47Z",
      "diff_hunk" : "@@ -1918,47 +1918,52 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }\n \n     // Keep a weak pointer to the wallet so that it is possible to unload the\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.\n+    // Currently this must be called without locks held otherwise a deadlock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402441700",
      "id" : 402441700,
      "in_reply_to_id" : 402408647,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTcwMA==",
      "original_commit_id" : "47dd37cc83bdcaf19a3abe95950b2409baae6249",
      "original_line" : 1965,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 386538685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T16:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402441700",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402441861"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402441861"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Also, could add a `AssertLockNotHeld(cs_wallet);` to accommodate the comment?\r\n\r\nDone.",
      "commit_id" : "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "created_at" : "2020-04-02T16:21:04Z",
      "diff_hunk" : "@@ -1918,47 +1918,52 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }\n \n     // Keep a weak pointer to the wallet so that it is possible to unload the\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.\n+    // Currently this must be called without locks held otherwise a deadlock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402441861",
      "id" : 402441861,
      "in_reply_to_id" : 402408647,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTg2MQ==",
      "original_commit_id" : "47dd37cc83bdcaf19a3abe95950b2409baae6249",
      "original_line" : 1965,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 386538685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T16:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402441861",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402442061"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402442061"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Will improve&mix.",
      "commit_id" : "7b8e15728d1ad058a4b7d7569fd5d5ba6806ca28",
      "created_at" : "2020-04-02T16:21:20Z",
      "diff_hunk" : "@@ -1918,47 +1918,52 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    auto locked_chain = pwallet->chain().lock();\n-    LOCK(pwallet->cs_wallet);\n-\n-    if (!pwallet->IsCrypted()) {\n-        throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n-    }\n+    int64_t nSleepTime;\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n \n-    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n-    SecureString strWalletPass;\n-    strWalletPass.reserve(100);\n-    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n-    strWalletPass = request.params[0].get_str().c_str();\n+        if (!pwallet->IsCrypted()) {\n+            throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+        }\n \n-    // Get the timeout\n-    int64_t nSleepTime = request.params[1].get_int64();\n-    // Timeout cannot be negative, otherwise it will relock immediately\n-    if (nSleepTime < 0) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n-    }\n-    // Clamp timeout\n-    constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n-    if (nSleepTime > MAX_SLEEP_TIME) {\n-        nSleepTime = MAX_SLEEP_TIME;\n-    }\n+        // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n+        SecureString strWalletPass;\n+        strWalletPass.reserve(100);\n+        // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+        // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+        strWalletPass = request.params[0].get_str().c_str();\n+\n+        // Get the timeout\n+        nSleepTime = request.params[1].get_int64();\n+        // Timeout cannot be negative, otherwise it will relock immediately\n+        if (nSleepTime < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Timeout cannot be negative.\");\n+        }\n+        // Clamp timeout\n+        constexpr int64_t MAX_SLEEP_TIME = 100000000; // larger values trigger a macos/libevent bug?\n+        if (nSleepTime > MAX_SLEEP_TIME) {\n+            nSleepTime = MAX_SLEEP_TIME;\n+        }\n \n-    if (strWalletPass.empty()) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n-    }\n+        if (strWalletPass.empty()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"passphrase can not be empty\");\n+        }\n \n-    if (!pwallet->Unlock(strWalletPass)) {\n-        throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n+        if (!pwallet->Unlock(strWalletPass)) {\n+            throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n \n-    pwallet->TopUpKeyPool();\n+        pwallet->TopUpKeyPool();\n \n-    pwallet->nRelockTime = GetTime() + nSleepTime;\n+        pwallet->nRelockTime = GetTime() + nSleepTime;\n+    }\n \n     // Keep a weak pointer to the wallet so that it is possible to unload the\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.\n+    // Currently this must be called without locks held otherwise a deadlock\n+    // can occur with cs_wallet. For more details see #18487.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#discussion_r402442061",
      "id" : 402442061,
      "in_reply_to_id" : 402410809,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MjA2MQ==",
      "original_commit_id" : "47dd37cc83bdcaf19a3abe95950b2409baae6249",
      "original_line" : 1966,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 386538685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18487",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-02T16:25:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/402442061",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 7b8e15728d, only tested that this avoids the node freezing. Did not look at how libevent works or how the deadlock happens or if this breaks other stuff. ð\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 7b8e15728d, only tested that this avoids the node freezing. Did not look at how libevent works or how the deadlock happens or if this breaks other stuff. ð\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjKCgwAjQesMVDRk/0HJqT63QzYXgsky/+kGB7rdd3glG/ytl06M6dgM3bgepAv\r\nt2Jfe/uGUugB9v0ettQ5/MkXewKi/r9dllozXIf6ZYyW0tzQKN22kSO6ybRcn0bL\r\nGJDJeK35QG5CEoRB8kJiwohGhxPBeI0HF9LkkfEb7eLsXJGH4hliuQ9xpc0KGr32\r\n0Sj3SUttKlK4xUbyDVyC7VOGeD53ZphJFiq+HPMY3lm6FmXn5Z2wXv6/FeV2jFQb\r\noxCCJ52gBzijv5YImikXjeOBEElUhI2IuIKCmTvNgXFv3T/c/ToSPShFpH2j2btP\r\ncCzsIK3pex8fJSZI1ZE+PszAeh2FejdDN144fP7Ds/9fOwXIARU/vPVCgXeDsHZe\r\n0yl17Qtl6p1YAGK2NGDXNM8UOA9MtzqAUyDBl4jRblIux3qEwEsxskjsDUv5d3JX\r\nIm6mmvKOk/5loNPGXNhIE150YdbYZ4PNKjy4ke6rLvMW60tX0PnhfwOKWGdVM5iw\r\nLxj6BnQy\r\n=jUhE\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `72e45144d2300c2bfb37bf5663a6b1678638fd7ac770b9ac957658a6a77b4224  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010872e45144d2300c2bfb37bf5663a6b1678638fd7ac770b9ac957658a6a77b4224f0109ca4b78eac0f9bc00e3fa6d9e07c621508fff0100d486fd595906b0f2e37c995bd6bdf4d08f12082668eceff96a8434888e60adc6e3bd8eaef49bf6defcfb4cf06320162a2754408f1045e86134cf0081b878fc32894389f0083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010359c91954884418e52df686749fb2ec908f1045e86134df0082c29508769168a540083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff01097250bf63f8fb92103baaad4d125418a08f02067053ad5be1fee548552b5f5eac723a10d5cafe82283a07c84f3deb924a0e34408f1045e86134cf00879fc4848f25e6ee20083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010b2184820e4d99f52920b22a7cd0fda6208f020e8e879f8d8b046c15439aed265a2f83ffbf83296fe7cb8029e4e3dfc468c066f08f1045e86134cf00895b0800664b9596c0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2020-04-02T16:31:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#issuecomment-607953365",
      "id" : 607953365,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzk1MzM2NQ==",
      "updated_at" : "2020-04-02T16:31:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607953365",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I didn't want to write libevent details in rpcwallet and also how RPCRunLater is implemented.",
      "created_at" : "2020-04-02T16:33:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#issuecomment-607954628",
      "id" : 607954628,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzk1NDYyOA==",
      "updated_at" : "2020-04-02T16:33:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607954628",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke the deadlock happens in this case: \r\n\r\n- (we are in one of the http thread)\r\n- walletpassphrase\r\n- RPCRunLater\r\n- ~HTTPEvent()\r\n- event_free()\r\n- event_del()\r\n- event_del_(, EVENT_DEL_AUTOBLOCK);\r\n\r\nAnd from libevent header\r\n```\r\n/** Argument for event_del_nolock_. Tells event_del to block on the event\r\n * if it is running in another thread and it doesn't have EV_FINALIZE set.\r\n */\r\n#define EVENT_DEL_AUTOBLOCK 2\r\n```\r\nAnd the event callback (triggered from the event base thread) will lock `cs_wallet` and deadlock:\r\nhttps://github.com/bitcoin/bitcoin/blob/b83565625e32b22395e28c1965b2e42fc17f04d7/src/wallet/rpcwallet.cpp#L1963-L1969\r\n\r\nAlso, I think its reasonable to reduce lock scope (which we already did in other cases for other reasons) than to change the `EV_FINALIZE` flag.\r\n\r\n> or if this breaks other stuff.\r\n\r\nI can't see how that could happen. but..",
      "created_at" : "2020-04-02T16:45:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#issuecomment-607961047",
      "id" : 607961047,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzk2MTA0Nw==",
      "updated_at" : "2020-04-02T17:27:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607961047",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > or if this breaks other stuff.\r\n> \r\n> I can't see how that could happen. but..\r\n\r\n@MarcoFalke but #18811 happened.",
      "created_at" : "2020-04-29T02:57:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18487#issuecomment-620964063",
      "id" : 620964063,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18487",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMDk2NDA2Mw==",
      "updated_at" : "2020-04-29T02:57:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/620964063",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   }
]
