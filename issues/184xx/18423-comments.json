[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18407 (tests: Add proof-of-work fuzzing harness by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-03-25T00:22:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18423#issuecomment-603572451",
      "id" : 603572451,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18423",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMzU3MjQ1MQ==",
      "updated_at" : "2020-03-25T00:22:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603572451",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18423#discussion_r397543903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18423"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397543903"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why does this need to be consumed? It seems the only purpose of the consumed bool is to exit early. The same can be achieved by the fuzz engine by just not providing any further input. So shouldn't the condition here be `fuzzed_data_provider.remaining_bytes()`?",
      "commit_id" : "102f3267e9e7925a7ea42f1181303cf1da8ce643",
      "created_at" : "2020-03-25T00:35:22Z",
      "diff_hunk" : "@@ -0,0 +1,44 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const Optional<BlockFilter> block_filter = ConsumeDeserializable<BlockFilter>(fuzzed_data_provider);\n+    if (!block_filter) {\n+        return;\n+    }\n+    {\n+        (void)block_filter->ComputeHeader(ConsumeUInt256(fuzzed_data_provider));\n+        (void)block_filter->GetBlockHash();\n+        (void)block_filter->GetEncodedFilter();\n+        (void)block_filter->GetHash();\n+    }\n+    {\n+        const BlockFilterType block_filter_type = block_filter->GetFilterType();\n+        (void)BlockFilterTypeName(block_filter_type);\n+    }\n+    {\n+        const GCSFilter gcs_filter = block_filter->GetFilter();\n+        (void)gcs_filter.GetN();\n+        (void)gcs_filter.GetParams();\n+        (void)gcs_filter.GetEncoded();\n+        (void)gcs_filter.Match(ConsumeRandomLengthByteVector(fuzzed_data_provider));\n+        GCSFilter::ElementSet element_set;\n+        while (fuzzed_data_provider.ConsumeBool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18423#discussion_r397543903",
      "id" : 397543903,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MzkwMw==",
      "original_commit_id" : "102f3267e9e7925a7ea42f1181303cf1da8ce643",
      "original_position" : 39,
      "path" : "src/test/fuzz/blockfilter.cpp",
      "position" : 39,
      "pull_request_review_id" : 380789200,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18423",
      "updated_at" : "2020-03-25T00:35:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397543903",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18423#discussion_r397778213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18423"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397778213"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, using `if (fuzzed_data_provider.remaining_bytes()) {` is possible but that would render the seed corpus invalid if we add input consuming code to be fuzzed in `blockfilter.cpp` going forward.\r\n\r\nUsing `if (fuzzed_data_provider.ConsumeBool()) {` instead avoids that problem: we can add code to be fuzzed that consumes input without invalidating the existing seed corpus.\r\n\r\nInvalidating in this context means changing the fuzzing coverage for a given input file.",
      "commit_id" : "102f3267e9e7925a7ea42f1181303cf1da8ce643",
      "created_at" : "2020-03-25T11:18:08Z",
      "diff_hunk" : "@@ -0,0 +1,44 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const Optional<BlockFilter> block_filter = ConsumeDeserializable<BlockFilter>(fuzzed_data_provider);\n+    if (!block_filter) {\n+        return;\n+    }\n+    {\n+        (void)block_filter->ComputeHeader(ConsumeUInt256(fuzzed_data_provider));\n+        (void)block_filter->GetBlockHash();\n+        (void)block_filter->GetEncodedFilter();\n+        (void)block_filter->GetHash();\n+    }\n+    {\n+        const BlockFilterType block_filter_type = block_filter->GetFilterType();\n+        (void)BlockFilterTypeName(block_filter_type);\n+    }\n+    {\n+        const GCSFilter gcs_filter = block_filter->GetFilter();\n+        (void)gcs_filter.GetN();\n+        (void)gcs_filter.GetParams();\n+        (void)gcs_filter.GetEncoded();\n+        (void)gcs_filter.Match(ConsumeRandomLengthByteVector(fuzzed_data_provider));\n+        GCSFilter::ElementSet element_set;\n+        while (fuzzed_data_provider.ConsumeBool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18423#discussion_r397778213",
      "id" : 397778213,
      "in_reply_to_id" : 397543903,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3ODIxMw==",
      "original_commit_id" : "102f3267e9e7925a7ea42f1181303cf1da8ce643",
      "original_position" : 39,
      "path" : "src/test/fuzz/blockfilter.cpp",
      "position" : 39,
      "pull_request_review_id" : 381055398,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18423",
      "updated_at" : "2020-03-25T11:19:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397778213",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18423#discussion_r397787918"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18423"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397787918"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please note that `fuzzed_data_provider.ConsumeBool()` will return `false` if `fuzzed_data_provider.remaining_bytes() == 0`.",
      "commit_id" : "102f3267e9e7925a7ea42f1181303cf1da8ce643",
      "created_at" : "2020-03-25T11:36:16Z",
      "diff_hunk" : "@@ -0,0 +1,44 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const Optional<BlockFilter> block_filter = ConsumeDeserializable<BlockFilter>(fuzzed_data_provider);\n+    if (!block_filter) {\n+        return;\n+    }\n+    {\n+        (void)block_filter->ComputeHeader(ConsumeUInt256(fuzzed_data_provider));\n+        (void)block_filter->GetBlockHash();\n+        (void)block_filter->GetEncodedFilter();\n+        (void)block_filter->GetHash();\n+    }\n+    {\n+        const BlockFilterType block_filter_type = block_filter->GetFilterType();\n+        (void)BlockFilterTypeName(block_filter_type);\n+    }\n+    {\n+        const GCSFilter gcs_filter = block_filter->GetFilter();\n+        (void)gcs_filter.GetN();\n+        (void)gcs_filter.GetParams();\n+        (void)gcs_filter.GetEncoded();\n+        (void)gcs_filter.Match(ConsumeRandomLengthByteVector(fuzzed_data_provider));\n+        GCSFilter::ElementSet element_set;\n+        while (fuzzed_data_provider.ConsumeBool()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18423#discussion_r397787918",
      "id" : 397787918,
      "in_reply_to_id" : 397543903,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4NzkxOA==",
      "original_commit_id" : "102f3267e9e7925a7ea42f1181303cf1da8ce643",
      "original_position" : 39,
      "path" : "src/test/fuzz/blockfilter.cpp",
      "position" : 39,
      "pull_request_review_id" : 381067001,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18423",
      "updated_at" : "2020-03-25T11:36:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397787918",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
