{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "In `MaybeSetPeerAsAnnouncingHeaderAndIDs()` we try to keep three high-bandwidth compact blocks peers by downgrading one from high-bandwidth to low-bandwidth, and promoting the peer that served us the most recent block to high-bandwidth:\r\n\r\n```\r\n        connman->ForNode(nodeid, [connman](CNode* pfrom){\r\n            AssertLockHeld(cs_main);\r\n            uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\r\n            if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\r\n                // As per BIP152, we only get 3 of our peers to announce\r\n                // blocks using compact encodings.\r\n                connman->ForNode(lNodesAnnouncingHeaderAndIDs.front(), [connman, nCMPCTBLOCKVersion](CNode* pnodeStop){\r\n                    AssertLockHeld(cs_main);\r\n                    connman->PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/false, nCMPCTBLOCKVersion));\r\n                    return true;\r\n                });\r\n                lNodesAnnouncingHeaderAndIDs.pop_front();\r\n            }\r\n            connman->PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, /*fAnnounceUsingCMPCTBLOCK=*/true, nCMPCTBLOCKVersion));\r\n            lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\r\n            return true;\r\n        });\r\n```\r\n\r\nNote that the `SENDCMPCT` that we send to the node we're downgrading has its `nCMPCTBLOCKVersion` set based on whether we're the node we're upgrading supports segwit or not.\r\n\r\nHere's the pre-v0.14 code for handling `SENDCMPCT`:\r\n\r\n```\r\n    else if (strCommand == NetMsgType::SENDCMPCT)\r\n    {\r\n        bool fAnnounceUsingCMPCTBLOCK = false;\r\n        uint64_t nCMPCTBLOCKVersion = 1;\r\n        vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\r\n        if (nCMPCTBLOCKVersion == 1) {\r\n            LOCK(cs_main);\r\n            State(pfrom->GetId())->fProvidesHeaderAndIDs = true;\r\n            State(pfrom->GetId())->fPreferHeaderAndIDs = fAnnounceUsingCMPCTBLOCK;\r\n        }\r\n    }\r\n```\r\n\r\nso if the peer that we're upgrading supports segwit and the node we're trying to downgrade doesn't, then the `SENDCMPCT` we send to the downgrading node will be version 2 and will be ignored.\r\n\r\nWe can fix this by setting the version correctly in the inner `connman->ForNode` block, but at this point I think we should probably just not try to set high-bandwidth mode for non-segwit nodes.\r\n\r\nIntroduced in #8393.\r\n\r\nThoughts @TheBlueMatt @sipa ?",
   "closed_at" : "2020-11-04T22:12:41Z",
   "closed_by" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
      "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
      "followers_url" : "https://api.github.com/users/jnewbery/followers",
      "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/jnewbery",
      "id" : 1063656,
      "login" : "jnewbery",
      "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
      "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
      "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
      "repos_url" : "https://api.github.com/users/jnewbery/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/jnewbery"
   },
   "comments" : 2,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18460/comments",
   "created_at" : "2020-03-28T22:43:31Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18460/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/18460",
   "id" : 589674089,
   "labels" : [
      {
         "color" : "FBBAAB",
         "default" : false,
         "description" : null,
         "id" : 64585,
         "name" : "Bug",
         "node_id" : "MDU6TGFiZWw2NDU4NQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18460/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU1ODk2NzQwODk=",
   "number" : 18460,
   "performed_via_github_app" : null,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Disabling high-bandwidth compact block relay from pre-segwit nodes doesn't work",
   "updated_at" : "2020-11-04T22:12:41Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18460",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
      "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
      "followers_url" : "https://api.github.com/users/jnewbery/followers",
      "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/jnewbery",
      "id" : 1063656,
      "login" : "jnewbery",
      "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
      "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
      "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
      "repos_url" : "https://api.github.com/users/jnewbery/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/jnewbery"
   }
}
