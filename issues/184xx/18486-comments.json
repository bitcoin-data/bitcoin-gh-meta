[
   {
      "author_association" : "MEMBER",
      "body" : "Just as a note, if we wanted to remove boost, `BOOST_TEST_MESSAGE` can be replaced by a simple `TEST_MESSAGE` macro with this diff:\r\n\r\n\r\n```diff\r\ndiff --git a/src/test/main.cpp b/src/test/main.cpp\r\nindex f32243d1d3..9bccbef805 100644\r\n--- a/src/test/main.cpp\r\n+++ b/src/test/main.cpp\r\n@@ -13,14 +13,19 @@\r\n \r\n #include <iostream>\r\n \r\n-/** Redirect debug log to unit_test.log files */\r\n-const std::function<void(const std::string&)> G_TEST_LOG_FUN = [](const std::string& s) {\r\n+bool IsTestLoggingEnabled()\r\n+{\r\n     static const bool should_log{std::any_of(\r\n         &boost::unit_test::framework::master_test_suite().argv[1],\r\n         &boost::unit_test::framework::master_test_suite().argv[boost::unit_test::framework::master_test_suite().argc],\r\n         [](const char* arg) {\r\n             return std::string{\"DEBUG_LOG_OUT\"} == arg;\r\n         })};\r\n-    if (!should_log) return;\r\n+    return should_log;\r\n+}\r\n+\r\n+/** Redirect debug log to unit_test.cpp.log files */\r\n+const std::function<void(const std::string&)> G_TEST_LOG_FUN = [](const std::string& s) {\r\n+    if (!IsTestLoggingEnabled()) return;\r\n     std::cout << s;\r\n };\r\ndiff --git a/src/test/util/logging.h b/src/test/util/logging.h\r\nindex 45ec44173c..f4ad232c6e 100644\r\n--- a/src/test/util/logging.h\r\n+++ b/src/test/util/logging.h\r\n@@ -11,6 +11,13 @@\r\n #include <list>\r\n #include <string>\r\n \r\n+bool IsTestLoggingEnabled();\r\n+\r\n+#define TEST_MESSAGE(blob)              \\\r\n+    if (IsTestLoggingEnabled()) {       \\\r\n+        std::cout << blob << std::endl; \\\r\n+    }\r\n+\r\n class DebugLogHelper\r\n {\r\n     const std::string m_message;\r\n",
      "created_at" : "2020-03-31T20:33:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18486#issuecomment-606859165",
      "id" : 606859165,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18486",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNjg1OTE2NQ==",
      "updated_at" : "2020-03-31T20:33:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606859165",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18486#discussion_r401216911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18486"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401216911"
         }
      },
      "author_association" : "MEMBER",
      "body" : "standard",
      "commit_id" : "7777703958937ec0ae609b1ee882f1bf2d113d10",
      "created_at" : "2020-03-31T21:09:29Z",
      "diff_hunk" : "@@ -17,26 +17,31 @@ and tests weren't explicitly disabled.\n \n After configuring, they can be run with `make check`.\n \n-To run the bitcoind tests manually, launch `src/test/test_bitcoin`. To recompile\n+To run the unit tests manually, launch `src/test/test_bitcoin`. To recompile\n after a test file was modified, run `make` and then run the test again. If you\n modify a non-test file, use `make -C src/test` to recompile only what's needed\n-to run the bitcoind tests.\n+to run the unit tests.\n \n-To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n+To add more unit tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the `test/` directory or add new .cpp files that\n implement new `BOOST_AUTO_TEST_SUITE` sections.\n \n-To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n+To run the GUI unit tests manually, launch `src/qt/test/test_bitcoin-qt`\n \n-To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n+To add more GUI unit tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file.\n \n ### Running individual tests\n \n-test_bitcoin has some built-in command-line arguments; for\n-example, to run just the getarg_tests verbosely:\n+`test_bitcoin` has some built-in command-line arguments; for\n+example, to run just the `getarg_tests` verbosely:\n \n-    test_bitcoin --log_level=all --run_test=getarg_tests\n+    test_bitcoin --log_level=all --run_test=getarg_tests -- DEBUG_LOG_OUT\n+\n+`log_level` controls the verbosity of the test framework, which logs when a\n+test case is entered, for example. The `DEBUG_LOG_OUT` after the two dashes\n+redirects the debug log, which would normally go to a file in the test datadir\n+(`BasicTestingSetup::m_path_root`), to the stdandard terminal output.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18486#discussion_r401216911",
      "id" : 401216911,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNjkxMQ==",
      "original_commit_id" : "faabce8c31909a7c1fb43113f1f1ba25c6963ae3",
      "original_line" : 44,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/test/README.md",
      "position" : null,
      "pull_request_review_id" : 385106705,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18486",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-31T21:14:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401216911",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18486#discussion_r401217554"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18486"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401217554"
         }
      },
      "author_association" : "MEMBER",
      "body" : "or maybe it's a mix of stdout and standard :)",
      "commit_id" : "7777703958937ec0ae609b1ee882f1bf2d113d10",
      "created_at" : "2020-03-31T21:10:50Z",
      "diff_hunk" : "@@ -17,26 +17,31 @@ and tests weren't explicitly disabled.\n \n After configuring, they can be run with `make check`.\n \n-To run the bitcoind tests manually, launch `src/test/test_bitcoin`. To recompile\n+To run the unit tests manually, launch `src/test/test_bitcoin`. To recompile\n after a test file was modified, run `make` and then run the test again. If you\n modify a non-test file, use `make -C src/test` to recompile only what's needed\n-to run the bitcoind tests.\n+to run the unit tests.\n \n-To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n+To add more unit tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the `test/` directory or add new .cpp files that\n implement new `BOOST_AUTO_TEST_SUITE` sections.\n \n-To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n+To run the GUI unit tests manually, launch `src/qt/test/test_bitcoin-qt`\n \n-To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n+To add more GUI unit tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file.\n \n ### Running individual tests\n \n-test_bitcoin has some built-in command-line arguments; for\n-example, to run just the getarg_tests verbosely:\n+`test_bitcoin` has some built-in command-line arguments; for\n+example, to run just the `getarg_tests` verbosely:\n \n-    test_bitcoin --log_level=all --run_test=getarg_tests\n+    test_bitcoin --log_level=all --run_test=getarg_tests -- DEBUG_LOG_OUT\n+\n+`log_level` controls the verbosity of the test framework, which logs when a\n+test case is entered, for example. The `DEBUG_LOG_OUT` after the two dashes\n+redirects the debug log, which would normally go to a file in the test datadir\n+(`BasicTestingSetup::m_path_root`), to the stdandard terminal output.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18486#discussion_r401217554",
      "id" : 401217554,
      "in_reply_to_id" : 401216911,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNzU1NA==",
      "original_commit_id" : "faabce8c31909a7c1fb43113f1f1ba25c6963ae3",
      "original_line" : 44,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/test/README.md",
      "position" : null,
      "pull_request_review_id" : 385107525,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18486",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-31T21:14:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401217554",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18486#discussion_r401220125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18486"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401220125"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> or maybe it's a mix of stdout and standard :)\r\n\r\nYes, in my brain I wanted to write `stdout`, but then decided to write the longer form after I started :)",
      "commit_id" : "7777703958937ec0ae609b1ee882f1bf2d113d10",
      "created_at" : "2020-03-31T21:15:59Z",
      "diff_hunk" : "@@ -17,26 +17,31 @@ and tests weren't explicitly disabled.\n \n After configuring, they can be run with `make check`.\n \n-To run the bitcoind tests manually, launch `src/test/test_bitcoin`. To recompile\n+To run the unit tests manually, launch `src/test/test_bitcoin`. To recompile\n after a test file was modified, run `make` and then run the test again. If you\n modify a non-test file, use `make -C src/test` to recompile only what's needed\n-to run the bitcoind tests.\n+to run the unit tests.\n \n-To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n+To add more unit tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the `test/` directory or add new .cpp files that\n implement new `BOOST_AUTO_TEST_SUITE` sections.\n \n-To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n+To run the GUI unit tests manually, launch `src/qt/test/test_bitcoin-qt`\n \n-To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n+To add more GUI unit tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file.\n \n ### Running individual tests\n \n-test_bitcoin has some built-in command-line arguments; for\n-example, to run just the getarg_tests verbosely:\n+`test_bitcoin` has some built-in command-line arguments; for\n+example, to run just the `getarg_tests` verbosely:\n \n-    test_bitcoin --log_level=all --run_test=getarg_tests\n+    test_bitcoin --log_level=all --run_test=getarg_tests -- DEBUG_LOG_OUT\n+\n+`log_level` controls the verbosity of the test framework, which logs when a\n+test case is entered, for example. The `DEBUG_LOG_OUT` after the two dashes\n+redirects the debug log, which would normally go to a file in the test datadir\n+(`BasicTestingSetup::m_path_root`), to the stdandard terminal output.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18486#discussion_r401220125",
      "id" : 401220125,
      "in_reply_to_id" : 401216911,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMDEyNQ==",
      "original_commit_id" : "faabce8c31909a7c1fb43113f1f1ba25c6963ae3",
      "original_line" : 44,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/test/README.md",
      "position" : null,
      "pull_request_review_id" : 385110643,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18486",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-31T21:16:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401220125",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18486#discussion_r401220347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18486"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401220347"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in commit 77777",
      "commit_id" : "7777703958937ec0ae609b1ee882f1bf2d113d10",
      "created_at" : "2020-03-31T21:16:29Z",
      "diff_hunk" : "@@ -17,26 +17,31 @@ and tests weren't explicitly disabled.\n \n After configuring, they can be run with `make check`.\n \n-To run the bitcoind tests manually, launch `src/test/test_bitcoin`. To recompile\n+To run the unit tests manually, launch `src/test/test_bitcoin`. To recompile\n after a test file was modified, run `make` and then run the test again. If you\n modify a non-test file, use `make -C src/test` to recompile only what's needed\n-to run the bitcoind tests.\n+to run the unit tests.\n \n-To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n+To add more unit tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n .cpp files in the `test/` directory or add new .cpp files that\n implement new `BOOST_AUTO_TEST_SUITE` sections.\n \n-To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n+To run the GUI unit tests manually, launch `src/qt/test/test_bitcoin-qt`\n \n-To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n+To add more GUI unit tests, add them to the `src/qt/test/` directory and\n the `src/qt/test/test_main.cpp` file.\n \n ### Running individual tests\n \n-test_bitcoin has some built-in command-line arguments; for\n-example, to run just the getarg_tests verbosely:\n+`test_bitcoin` has some built-in command-line arguments; for\n+example, to run just the `getarg_tests` verbosely:\n \n-    test_bitcoin --log_level=all --run_test=getarg_tests\n+    test_bitcoin --log_level=all --run_test=getarg_tests -- DEBUG_LOG_OUT\n+\n+`log_level` controls the verbosity of the test framework, which logs when a\n+test case is entered, for example. The `DEBUG_LOG_OUT` after the two dashes\n+redirects the debug log, which would normally go to a file in the test datadir\n+(`BasicTestingSetup::m_path_root`), to the stdandard terminal output.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18486#discussion_r401220347",
      "id" : 401220347,
      "in_reply_to_id" : 401216911,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyMDM0Nw==",
      "original_commit_id" : "faabce8c31909a7c1fb43113f1f1ba25c6963ae3",
      "original_line" : 44,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/test/README.md",
      "position" : null,
      "pull_request_review_id" : 385110901,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18486",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-03-31T21:16:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401220347",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18102 (doc: add src/test/ prefix to test_bitcoin in test README by yancyribbens)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-03-31T23:27:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18486#issuecomment-606938631",
      "id" : 606938631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18486",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNjkzODYzMQ==",
      "updated_at" : "2020-03-31T23:27:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606938631",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
