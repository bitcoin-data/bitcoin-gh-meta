[
   {
      "author_association" : "NONE",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13072 (Update createmultisig RPC to support segwit by ajtowns)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-06-19T22:39:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-398568509",
      "id" : 398568509,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDM5ODU2ODUwOQ==",
      "updated_at" : "2018-06-30T11:44:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/398568509",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. \r\n\r\n> users of IsMine don't care about the reason for non-mine-ness, only whether it is or not\r\n\r\nÃ°ÂÂÂ ",
      "created_at" : "2018-06-20T13:35:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-398750321",
      "id" : 398750321,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDM5ODc1MDMyMQ==",
      "updated_at" : "2018-06-20T13:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/398750321",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK bb582a5. Commits are clean, refactor and new tests LGTM (some nits aside).",
      "created_at" : "2018-06-26T14:10:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-400323130",
      "id" : 400323130,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwMDMyMzEzMA==",
      "updated_at" : "2018-06-26T14:10:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/400323130",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198170939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198170939"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The test passes if these `keystore.Add*` are removed. How could this be updated so that these are meaningful?",
      "commit_id" : "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
      "created_at" : "2018-06-26T14:38:21Z",
      "diff_hunk" : "@@ -398,178 +398,208 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n \n     CScript scriptPubKey;\n     isminetype result;\n-    bool isInvalid;\n \n     // P2PK compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PK uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(pubkeys[0].GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(uncompressedPubkey.GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2SH\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemScript;\n-        redeemScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+        CScript redeemScript = GetScriptForDestination(pubkeys[0].GetID());\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n \n         // Keystore does not have redeemScript or key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript but no key\n         keystore.AddCScript(redeemScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript and key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // (P2PKH inside) P2SH inside P2SH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemscript_inner = GetScriptForDestination(pubkeys[0].GetID());\n+        CScript redeemscript = GetScriptForDestination(CScriptID(redeemscript_inner));\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemscript));\n+\n+        keystore.AddCScript(redeemscript);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198170939",
      "id" : 198170939,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODE3MDkzOQ==",
      "original_commit_id" : "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
      "original_position" : 131,
      "path" : "src/test/script_standard_tests.cpp",
      "position" : 131,
      "pull_request_review_id" : 132051980,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491",
      "updated_at" : "2018-06-26T14:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198170939",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198330595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198330595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "They are meaningful. The tests verifies that *even when all scripts are known* the output isn't treated as ours. The positive test case is the variant without 2 nested P2SHs, where adding all scripts does result in treating the output as ours.",
      "commit_id" : "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
      "created_at" : "2018-06-26T23:50:50Z",
      "diff_hunk" : "@@ -398,178 +398,208 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n \n     CScript scriptPubKey;\n     isminetype result;\n-    bool isInvalid;\n \n     // P2PK compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PK uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(pubkeys[0].GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(uncompressedPubkey.GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2SH\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemScript;\n-        redeemScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+        CScript redeemScript = GetScriptForDestination(pubkeys[0].GetID());\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n \n         // Keystore does not have redeemScript or key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript but no key\n         keystore.AddCScript(redeemScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript and key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // (P2PKH inside) P2SH inside P2SH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemscript_inner = GetScriptForDestination(pubkeys[0].GetID());\n+        CScript redeemscript = GetScriptForDestination(CScriptID(redeemscript_inner));\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemscript));\n+\n+        keystore.AddCScript(redeemscript);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198330595",
      "id" : 198330595,
      "in_reply_to_id" : 198170939,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODMzMDU5NQ==",
      "original_commit_id" : "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
      "original_position" : 131,
      "path" : "src/test/script_standard_tests.cpp",
      "position" : 131,
      "pull_request_review_id" : 132243814,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491",
      "updated_at" : "2018-06-26T23:50:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198330595",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198521640"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198521640"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I understand. I was thinking in adding:\r\n```cpp\r\n        result = IsMine(keystore, redeemscript);\r\n        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\r\n```\r\nSo that these `keystore.Add*` make sense and can't be removed. Feel free to ignore.",
      "commit_id" : "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
      "created_at" : "2018-06-27T14:42:49Z",
      "diff_hunk" : "@@ -398,178 +398,208 @@ BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n \n     CScript scriptPubKey;\n     isminetype result;\n-    bool isInvalid;\n \n     // P2PK compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(pubkeys[0]);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PK uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForRawPubKey(uncompressedPubkey);\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH compressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(pubkeys[0].GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2PKH uncompressed\n     {\n         CBasicKeyStore keystore;\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        scriptPubKey = GetScriptForDestination(uncompressedPubkey.GetID());\n \n         // Keystore does not have key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has key\n         keystore.AddKey(uncompressedKey);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n     }\n \n     // P2SH\n     {\n         CBasicKeyStore keystore;\n \n-        CScript redeemScript;\n-        redeemScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-\n-        scriptPubKey.clear();\n-        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+        CScript redeemScript = GetScriptForDestination(pubkeys[0].GetID());\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemScript));\n \n         // Keystore does not have redeemScript or key\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript but no key\n         keystore.AddCScript(redeemScript);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_NO);\n-        BOOST_CHECK(!isInvalid);\n \n         // Keystore has redeemScript and key\n         keystore.AddKey(keys[0]);\n-        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        result = IsMine(keystore, scriptPubKey);\n         BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n-        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // (P2PKH inside) P2SH inside P2SH (invalid)\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemscript_inner = GetScriptForDestination(pubkeys[0].GetID());\n+        CScript redeemscript = GetScriptForDestination(CScriptID(redeemscript_inner));\n+        scriptPubKey = GetScriptForDestination(CScriptID(redeemscript));\n+\n+        keystore.AddCScript(redeemscript);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r198521640",
      "id" : 198521640,
      "in_reply_to_id" : 198170939,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5ODUyMTY0MA==",
      "original_commit_id" : "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
      "original_position" : 131,
      "path" : "src/test/script_standard_tests.cpp",
      "position" : 131,
      "pull_request_review_id" : 132465450,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491",
      "updated_at" : "2018-06-27T14:42:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/198521640",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK bb582a5.",
      "created_at" : "2018-07-02T18:28:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-401893258",
      "id" : 401893258,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwMTg5MzI1OA==",
      "updated_at" : "2018-07-02T18:28:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/401893258",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r199615198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199615198"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: existing typo `they`",
      "commit_id" : "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
      "created_at" : "2018-07-02T20:42:47Z",
      "diff_hunk" : "@@ -637,9 +637,7 @@ static UniValue decodescript(const JSONRPCRequest& request)\n             } else {\n                 // Scripts that are not fit for P2WPKH are encoded as P2WSH.\n                 // Newer segwit program versions should be considered when then become available.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13491#discussion_r199615198",
      "id" : 199615198,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTYxNTE5OA==",
      "original_commit_id" : "bb582a59c7532b0e4f647d9dfe50f0d816e81427",
      "original_position" : 3,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 3,
      "pull_request_review_id" : 133770304,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13491",
      "updated_at" : "2018-07-02T20:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199615198",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK bb582a5",
      "created_at" : "2018-07-02T20:55:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-401932474",
      "id" : 401932474,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwMTkzMjQ3NA==",
      "updated_at" : "2018-07-02T20:55:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/401932474",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK bb582a59c7532b0e4f647d9dfe50f0d816e81427",
      "created_at" : "2018-07-04T09:36:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13491#issuecomment-402424022",
      "id" : 402424022,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13491",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwMjQyNDAyMg==",
      "updated_at" : "2018-07-04T09:36:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/402424022",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
