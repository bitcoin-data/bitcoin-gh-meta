[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I would like to clean this up more and implement it on top of #25308 so the LoadChainstate function can use this class. But this class contains all the essential things I think are missing from BResult: support for error values, support for void values, support for multiple errors, chained errors, and warnings.\r\n\r\nWas motivated to work on this by suggestion to use BResult in #25308 https://github.com/bitcoin/bitcoin/pull/25308#issuecomment-1181674645 and by #25601, which adds the same error type functionality this PR does, but doesn't support returning custom errors for error handling and returning standardized errors for error reporting at the same time.",
      "created_at" : "2022-07-13T18:48:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#issuecomment-1183561635",
      "id" : 1183561635,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25608",
      "node_id" : "IC_kwDOABII585Gi7ej",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1183561635/reactions"
      },
      "updated_at" : "2022-07-13T18:48:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1183561635",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920399401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920399401"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Any reason not to just include this as a method called e.g. `result.ErrorsStr()`?",
      "commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "created_at" : "2022-07-13T18:48:16Z",
      "diff_hunk" : "@@ -0,0 +1,14 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+#include <util/string.h>\n+\n+namespace util {\n+bilingual_str ErrorDescription(const Result<void>& result)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920399401",
      "id" : 920399401,
      "line" : 9,
      "node_id" : "PRRC_kwDOABII58423C4p",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 9,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/util/result.cpp",
      "position" : 9,
      "pull_request_review_id" : 1037818667,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920399401/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-13T18:52:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920399401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920400885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920400885"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you meant `Result<T>`",
      "commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "created_at" : "2022-07-13T18:50:06Z",
      "diff_hunk" : "@@ -6,37 +6,117 @@\n #define BITCOIN_UTIL_RESULT_H\n \n #include <util/translation.h>\n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n+\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n+\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;\n+    std::vector<bilingual_str> m_warnings;\n \n public:\n-    BResult() : m_variant(Untranslated(\"\")) {}\n-    BResult(const T& _obj) : m_variant(_obj) {}\n-    BResult(const bilingual_str& error) : m_variant(error) {}\n+    //! Success case constructor.\n+    Result() = default;\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+    //! Error case constructor for a single error.\n+    Result(Error, bilingual_str error)\n+    {\n+        m_errors.emplace_back(std::move(error));\n+    }\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! Error case constructor for a chained error.\n+    Result(ErrorChain, bilingual_str error, Result<void>&& previous) : m_errors{std::move(previous.m_errors)}, m_warnings{std::move(previous.m_warnings)}\n+    {\n+        m_errors.emplace_back(std::move(error));\n     }\n \n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    //! Success check.\n+    operator bool() const { return m_errors.empty(); }\n+\n+    //! Error retrieval.\n+    const std::vector<bilingual_str>& GetErrors() const { return m_errors; }\n+    std::tuple<const std::vector<bilingual_str>&, const std::vector<bilingual_str>&> GetErrorsAndWarnings() const { return {m_errors, m_warnings}; }\n+};\n+\n+template<typename T>\n+class Result : public Result<void>\n+{\n+protected:\n+    T m_result;\n+\n+public:\n+    //! Constructors that forward to the base class and pass additional arguments to m_result.\n+    template<typename... Args>\n+    Result(Args&&... args) : m_result{std::forward<Args>(args)...} {}\n+    template<typename Str, typename...Args>\n+    Result(Error, Str&& str, Args&&... args) : Result<void>{Error{}, std::forward<Str>(str)}, m_result{std::forward<Args>(args)...} {};\n+    template<typename Str, typename Prev, typename...Args>\n+    Result(ErrorChain, Str&& str, Prev&& prev, Args&&... args) : Result<void>{ErrorChain{}, std::forward<Str>(str), std::forward<Prev>(prev)}, m_result{std::forward<Args>(args)...} {};\n+\n+    //! std::optional methods, so Result<T> can be easily swapped for\n+    //! std::optional<T> to add error reporting to existing code or remove it if",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920400885",
      "id" : 920400885,
      "line" : 83,
      "node_id" : "PRRC_kwDOABII58423DP1",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 83,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 100,
      "pull_request_review_id" : 1037820622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920400885/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-13T18:53:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920400885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920403378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920403378"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is an error formatting function and I think Result class should only be responsible for returning errors, not formatting them.\r\n\r\nAlso I generally think classes with private state should have fewer methods accessing that state to keep code readable and maintainable. If a function can use a class's public interface, it should use that instead of poking around at internals.",
      "commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "created_at" : "2022-07-13T18:53:16Z",
      "diff_hunk" : "@@ -0,0 +1,14 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or https://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+#include <util/string.h>\n+\n+namespace util {\n+bilingual_str ErrorDescription(const Result<void>& result)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920403378",
      "id" : 920403378,
      "in_reply_to_id" : 920399401,
      "line" : 9,
      "node_id" : "PRRC_kwDOABII58423D2y",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 9,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/util/result.cpp",
      "position" : 9,
      "pull_request_review_id" : 1037824186,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920403378/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-13T18:53:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920403378",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920409067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920409067"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think you meant `Result<T>`\r\n\r\nI should probably rewrite this comment but it is trying to say if you have an existing function returning `std::optional<T>` you can most likely change it to return `util::Result<T>` and provide error information to new callers without affecting existing callers.",
      "commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "created_at" : "2022-07-13T19:00:19Z",
      "diff_hunk" : "@@ -6,37 +6,117 @@\n #define BITCOIN_UTIL_RESULT_H\n \n #include <util/translation.h>\n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n+\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n+\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;\n+    std::vector<bilingual_str> m_warnings;\n \n public:\n-    BResult() : m_variant(Untranslated(\"\")) {}\n-    BResult(const T& _obj) : m_variant(_obj) {}\n-    BResult(const bilingual_str& error) : m_variant(error) {}\n+    //! Success case constructor.\n+    Result() = default;\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+    //! Error case constructor for a single error.\n+    Result(Error, bilingual_str error)\n+    {\n+        m_errors.emplace_back(std::move(error));\n+    }\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! Error case constructor for a chained error.\n+    Result(ErrorChain, bilingual_str error, Result<void>&& previous) : m_errors{std::move(previous.m_errors)}, m_warnings{std::move(previous.m_warnings)}\n+    {\n+        m_errors.emplace_back(std::move(error));\n     }\n \n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    //! Success check.\n+    operator bool() const { return m_errors.empty(); }\n+\n+    //! Error retrieval.\n+    const std::vector<bilingual_str>& GetErrors() const { return m_errors; }\n+    std::tuple<const std::vector<bilingual_str>&, const std::vector<bilingual_str>&> GetErrorsAndWarnings() const { return {m_errors, m_warnings}; }\n+};\n+\n+template<typename T>\n+class Result : public Result<void>\n+{\n+protected:\n+    T m_result;\n+\n+public:\n+    //! Constructors that forward to the base class and pass additional arguments to m_result.\n+    template<typename... Args>\n+    Result(Args&&... args) : m_result{std::forward<Args>(args)...} {}\n+    template<typename Str, typename...Args>\n+    Result(Error, Str&& str, Args&&... args) : Result<void>{Error{}, std::forward<Str>(str)}, m_result{std::forward<Args>(args)...} {};\n+    template<typename Str, typename Prev, typename...Args>\n+    Result(ErrorChain, Str&& str, Prev&& prev, Args&&... args) : Result<void>{ErrorChain{}, std::forward<Str>(str), std::forward<Prev>(prev)}, m_result{std::forward<Args>(args)...} {};\n+\n+    //! std::optional methods, so Result<T> can be easily swapped for\n+    //! std::optional<T> to add error reporting to existing code or remove it if",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920409067",
      "id" : 920409067,
      "in_reply_to_id" : 920400885,
      "line" : 83,
      "node_id" : "PRRC_kwDOABII58423FPr",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 83,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 100,
      "pull_request_review_id" : 1037831980,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920409067/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-13T19:00:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920409067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920413028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920413028"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Might be nice to have an interface that uses static constructor shorthands for concision, like\r\n```cpp\r\nreturn Result::Err(ret, StatusFailFn(arg), Untranslated(\"chained fail\"));\r\n```\r\nor for the function above\r\n```cpp\r\nreturn Result::Err(ret, Untranslated(\"status fail\"));\r\n```\r\n\r\nEdit: ah, I guess not so easy because in practice `Result` would need to be templated.",
      "commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "created_at" : "2022-07-13T19:05:41Z",
      "diff_hunk" : "@@ -0,0 +1,106 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(result_tests)\n+\n+util::Result<void> VoidSuccessFn()\n+{\n+    return {};\n+}\n+\n+util::Result<void> VoidFailFn()\n+{\n+    return {util::Error{}, Untranslated(\"void fail\")};\n+}\n+\n+util::Result<int> IntSuccessFn(int ret)\n+{\n+    return {ret};\n+}\n+\n+util::Result<int> IntFailFn()\n+{\n+    return {util::Error{}, Untranslated(\"int fail\")};\n+}\n+\n+enum FnStatus { SUCCESS, ERR1, ERR2 };\n+\n+util::Result<FnStatus> StatusSuccessFn(FnStatus ret)\n+{\n+    return {ret};\n+}\n+\n+util::Result<FnStatus> StatusFailFn(FnStatus ret)\n+{\n+    return {util::Error{}, Untranslated(\"status fail\"), ret};\n+}\n+\n+util::Result<int> ChainedFailFn(FnStatus arg, int ret)\n+{\n+    return {util::ErrorChain{}, Untranslated(\"chained fail\"), StatusFailFn(arg), ret};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920413028",
      "id" : 920413028,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII58423GNk",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/test/result_tests.cpp",
      "position" : 45,
      "pull_request_review_id" : 1037837927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920413028/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-13T19:07:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920413028",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920424075"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920424075"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh yeah, my mistake, misread :sweat_smile:. Existing comment seems fine.",
      "commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "created_at" : "2022-07-13T19:20:42Z",
      "diff_hunk" : "@@ -6,37 +6,117 @@\n #define BITCOIN_UTIL_RESULT_H\n \n #include <util/translation.h>\n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n+\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n+\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;\n+    std::vector<bilingual_str> m_warnings;\n \n public:\n-    BResult() : m_variant(Untranslated(\"\")) {}\n-    BResult(const T& _obj) : m_variant(_obj) {}\n-    BResult(const bilingual_str& error) : m_variant(error) {}\n+    //! Success case constructor.\n+    Result() = default;\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+    //! Error case constructor for a single error.\n+    Result(Error, bilingual_str error)\n+    {\n+        m_errors.emplace_back(std::move(error));\n+    }\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! Error case constructor for a chained error.\n+    Result(ErrorChain, bilingual_str error, Result<void>&& previous) : m_errors{std::move(previous.m_errors)}, m_warnings{std::move(previous.m_warnings)}\n+    {\n+        m_errors.emplace_back(std::move(error));\n     }\n \n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    //! Success check.\n+    operator bool() const { return m_errors.empty(); }\n+\n+    //! Error retrieval.\n+    const std::vector<bilingual_str>& GetErrors() const { return m_errors; }\n+    std::tuple<const std::vector<bilingual_str>&, const std::vector<bilingual_str>&> GetErrorsAndWarnings() const { return {m_errors, m_warnings}; }\n+};\n+\n+template<typename T>\n+class Result : public Result<void>\n+{\n+protected:\n+    T m_result;\n+\n+public:\n+    //! Constructors that forward to the base class and pass additional arguments to m_result.\n+    template<typename... Args>\n+    Result(Args&&... args) : m_result{std::forward<Args>(args)...} {}\n+    template<typename Str, typename...Args>\n+    Result(Error, Str&& str, Args&&... args) : Result<void>{Error{}, std::forward<Str>(str)}, m_result{std::forward<Args>(args)...} {};\n+    template<typename Str, typename Prev, typename...Args>\n+    Result(ErrorChain, Str&& str, Prev&& prev, Args&&... args) : Result<void>{ErrorChain{}, std::forward<Str>(str), std::forward<Prev>(prev)}, m_result{std::forward<Args>(args)...} {};\n+\n+    //! std::optional methods, so Result<T> can be easily swapped for\n+    //! std::optional<T> to add error reporting to existing code or remove it if",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920424075",
      "id" : 920424075,
      "in_reply_to_id" : 920400885,
      "line" : 83,
      "node_id" : "PRRC_kwDOABII58423I6L",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 83,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 100,
      "pull_request_review_id" : 1037853599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920424075/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-13T19:21:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920424075",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920425479"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920425479"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It would be possible and not very difficult to change syntax from\r\n\r\n```c++\r\nreturn {util::Error{}, \"error string\", error_value};\r\n``` \r\n\r\nto\r\n\r\n```c++\r\nreturn util::Error(\"error string\", error_value);\r\n```\r\n\r\nfor both Error and ErrorChain with some template magic. It just made the implementation a little uglier so I decided to drop it.",
      "commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "created_at" : "2022-07-13T19:22:37Z",
      "diff_hunk" : "@@ -0,0 +1,106 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/result.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(result_tests)\n+\n+util::Result<void> VoidSuccessFn()\n+{\n+    return {};\n+}\n+\n+util::Result<void> VoidFailFn()\n+{\n+    return {util::Error{}, Untranslated(\"void fail\")};\n+}\n+\n+util::Result<int> IntSuccessFn(int ret)\n+{\n+    return {ret};\n+}\n+\n+util::Result<int> IntFailFn()\n+{\n+    return {util::Error{}, Untranslated(\"int fail\")};\n+}\n+\n+enum FnStatus { SUCCESS, ERR1, ERR2 };\n+\n+util::Result<FnStatus> StatusSuccessFn(FnStatus ret)\n+{\n+    return {ret};\n+}\n+\n+util::Result<FnStatus> StatusFailFn(FnStatus ret)\n+{\n+    return {util::Error{}, Untranslated(\"status fail\"), ret};\n+}\n+\n+util::Result<int> ChainedFailFn(FnStatus arg, int ret)\n+{\n+    return {util::ErrorChain{}, Untranslated(\"chained fail\"), StatusFailFn(arg), ret};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920425479",
      "id" : 920425479,
      "in_reply_to_id" : 920413028,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII58423JQH",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/test/result_tests.cpp",
      "position" : 45,
      "pull_request_review_id" : 1037855580,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920425479/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-13T19:22:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920425479",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920454434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920454434"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe a `GetWarnings()` method ?\r\nOr `m_errors` and `m_warnings` can be public.\r\nI think there are some success cases that also return warnings. ",
      "commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "created_at" : "2022-07-13T20:01:00Z",
      "diff_hunk" : "@@ -6,37 +6,117 @@\n #define BITCOIN_UTIL_RESULT_H\n \n #include <util/translation.h>\n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n+\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n+\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;\n+    std::vector<bilingual_str> m_warnings;\n \n public:\n-    BResult() : m_variant(Untranslated(\"\")) {}\n-    BResult(const T& _obj) : m_variant(_obj) {}\n-    BResult(const bilingual_str& error) : m_variant(error) {}\n+    //! Success case constructor.\n+    Result() = default;\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+    //! Error case constructor for a single error.\n+    Result(Error, bilingual_str error)\n+    {\n+        m_errors.emplace_back(std::move(error));\n+    }\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! Error case constructor for a chained error.\n+    Result(ErrorChain, bilingual_str error, Result<void>&& previous) : m_errors{std::move(previous.m_errors)}, m_warnings{std::move(previous.m_warnings)}\n+    {\n+        m_errors.emplace_back(std::move(error));\n     }\n \n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    //! Success check.\n+    operator bool() const { return m_errors.empty(); }\n+\n+    //! Error retrieval.\n+    const std::vector<bilingual_str>& GetErrors() const { return m_errors; }\n+    std::tuple<const std::vector<bilingual_str>&, const std::vector<bilingual_str>&> GetErrorsAndWarnings() const { return {m_errors, m_warnings}; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r920454434",
      "id" : 920454434,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII58423QUi",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 64,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 81,
      "pull_request_review_id" : 1037899819,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920454434/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-13T20:16:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920454434",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25601](https://github.com/bitcoin/bitcoin/pull/25601) (util: Make `BResult` error a generic type instead of only `bilingual_str` by w0xlt)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-07-14T03:51:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#issuecomment-1183954772",
      "id" : 1183954772,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25608",
      "node_id" : "IC_kwDOABII585GkbdU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1183954772/reactions"
      },
      "updated_at" : "2022-07-19T22:48:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1183954772",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-07-14T09:12:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#issuecomment-1184198685",
      "id" : 1184198685,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25608",
      "node_id" : "IC_kwDOABII585GlXAd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184198685/reactions"
      },
      "updated_at" : "2022-07-14T09:12:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184198685",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r921049409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/921049409"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "how about moving the members into a single `std::unique_ptr`, something like this:\r\n\r\n```cpp\r\nprotected:\r\n    struct ErrorsAndWarnings {\r\n            std::vector<bilingual_str> m_errors;\r\n            std::vector<bilingual_str> m_warnings;\r\n    };\r\n    std::unique_ptr<ErrorsAndWarnings> m_errors_and_warnings{};\r\n```\r\n\r\nThis has the advantage that the default case when no error/warning happens is really fast: no temporary `std::vector` need to be constructed. Also, `sizeof()` is much smaller, only a single pointer. Then `Result` is also noncopyable. I think this would be an advantage, because usually these are supposed to be moved as the return value, and not copied.",
      "commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "created_at" : "2022-07-14T11:27:15Z",
      "diff_hunk" : "@@ -6,37 +6,117 @@\n #define BITCOIN_UTIL_RESULT_H\n \n #include <util/translation.h>\n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n+\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n+\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r921049409",
      "id" : 921049409,
      "line" : 40,
      "node_id" : "PRRC_kwDOABII58425hlB",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 40,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 44,
      "pull_request_review_id" : 1038713947,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/921049409/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-14T11:27:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/921049409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 39769cc0599a93cbc28e693f6fccbabedae67fb5 -> dd91f294206ac87b213d23bb76656a0a5f0f4781 ([`pr/bresult.2`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult.2) -> [`pr/bresult.3`](https://github.com/ryanofsky/bitcoin/commits/pr/bresult.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/bresult.2-rebase..pr/bresult.3)) due to conflict with #25594\r\n\r\n(@martinus suggestion to optimize happy path when there are no warnings or errors a makes a lot of sense so I started implementing that, but I figured I'd rebase this in the meantime due to the conflict)",
      "created_at" : "2022-07-19T16:45:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#issuecomment-1189322624",
      "id" : 1189322624,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25608",
      "node_id" : "IC_kwDOABII585G45-A",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1189322624/reactions"
      },
      "updated_at" : "2022-07-19T16:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1189322624",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r925879666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925879666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think this is true? `std::optional` with `nullopt` must not be dereferenced, whereas `Result` can be, and would return a default constructed object?",
      "commit_id" : "dd91f294206ac87b213d23bb76656a0a5f0f4781",
      "created_at" : "2022-07-20T17:34:42Z",
      "diff_hunk" : "@@ -7,42 +7,119 @@\n \n #include <util/translation.h>\n \n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;\n+    std::vector<bilingual_str> m_warnings;\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+public:\n+    //! Success case constructor.\n+    Result() = default;\n+\n+    //! Error case constructor for a single error.\n+    Result(Error, bilingual_str error)\n+    {\n+        m_errors.emplace_back(std::move(error));\n     }\n-    T ReleaseObj()\n+\n+    //! Error case constructor for a chained error.\n+    Result(ErrorChain, bilingual_str error, Result<void>&& previous) : m_errors{std::move(previous.m_errors)}, m_warnings{std::move(previous.m_warnings)}\n     {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n+        m_errors.emplace_back(std::move(error));\n     }\n \n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    //! Success check.\n+    operator bool() const { return m_errors.empty(); }\n+\n+    //! Error retrieval.\n+    const std::vector<bilingual_str>& GetErrors() const { return m_errors; }\n+    std::tuple<const std::vector<bilingual_str>&, const std::vector<bilingual_str>&> GetErrorsAndWarnings() const { return {m_errors, m_warnings}; }\n+};\n+\n+template<typename T>\n+class Result : public Result<void>\n+{\n+protected:\n+    T m_result;\n+\n+public:\n+    //! Constructors that forward to the base class and pass additional arguments to m_result.\n+    template<typename... Args>\n+    Result(Args&&... args) : m_result{std::forward<Args>(args)...} {}\n+    template<typename Str, typename...Args>\n+    Result(Error, Str&& str, Args&&... args) : Result<void>{Error{}, std::forward<Str>(str)}, m_result{std::forward<Args>(args)...} {};\n+    template<typename Str, typename Prev, typename...Args>\n+    Result(ErrorChain, Str&& str, Prev&& prev, Args&&... args) : Result<void>{ErrorChain{}, std::forward<Str>(str), std::forward<Prev>(prev)}, m_result{std::forward<Args>(args)...} {};\n+\n+    //! std::optional methods, so Result<T> can be easily swapped for\n+    //! std::optional<T> to add error reporting to existing code or remove it if",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r925879666",
      "id" : 925879666,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII5843L81y",
      "original_commit_id" : "dd91f294206ac87b213d23bb76656a0a5f0f4781",
      "original_line" : 84,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 104,
      "pull_request_review_id" : 1045428196,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925879666/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-20T17:38:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925879666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r925882047"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925882047"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think this is too helpful to force most call sites (that can use BResult or use it today) into a double wrapping `util::Result<std::optional<T>>`. I liked a single wrapping better.",
      "commit_id" : "dd91f294206ac87b213d23bb76656a0a5f0f4781",
      "created_at" : "2022-07-20T17:37:35Z",
      "diff_hunk" : "@@ -7,42 +7,119 @@\n \n #include <util/translation.h>\n \n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;\n+    std::vector<bilingual_str> m_warnings;\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+public:\n+    //! Success case constructor.\n+    Result() = default;\n+\n+    //! Error case constructor for a single error.\n+    Result(Error, bilingual_str error)\n+    {\n+        m_errors.emplace_back(std::move(error));\n     }\n-    T ReleaseObj()\n+\n+    //! Error case constructor for a chained error.\n+    Result(ErrorChain, bilingual_str error, Result<void>&& previous) : m_errors{std::move(previous.m_errors)}, m_warnings{std::move(previous.m_warnings)}\n     {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n+        m_errors.emplace_back(std::move(error));\n     }\n \n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    //! Success check.\n+    operator bool() const { return m_errors.empty(); }\n+\n+    //! Error retrieval.\n+    const std::vector<bilingual_str>& GetErrors() const { return m_errors; }\n+    std::tuple<const std::vector<bilingual_str>&, const std::vector<bilingual_str>&> GetErrorsAndWarnings() const { return {m_errors, m_warnings}; }\n+};\n+\n+template<typename T>\n+class Result : public Result<void>\n+{\n+protected:\n+    T m_result;\n+\n+public:\n+    //! Constructors that forward to the base class and pass additional arguments to m_result.\n+    template<typename... Args>\n+    Result(Args&&... args) : m_result{std::forward<Args>(args)...} {}\n+    template<typename Str, typename...Args>\n+    Result(Error, Str&& str, Args&&... args) : Result<void>{Error{}, std::forward<Str>(str)}, m_result{std::forward<Args>(args)...} {};\n+    template<typename Str, typename Prev, typename...Args>\n+    Result(ErrorChain, Str&& str, Prev&& prev, Args&&... args) : Result<void>{ErrorChain{}, std::forward<Str>(str), std::forward<Prev>(prev)}, m_result{std::forward<Args>(args)...} {};\n+\n+    //! std::optional methods, so Result<T> can be easily swapped for\n+    //! std::optional<T> to add error reporting to existing code or remove it if\n+    //! it is no longer needed.\n+    bool has_value() const { return m_errors.empty(); }\n+    const T& value() const { return m_result; }\n+    T& value() { return m_result; }\n+    template<typename U> T value_or(const U& default_value) const\n+    {\n+        return has_value() ? value() : default_value;\n     }\n+    const T* operator->() const { return &value(); }\n+    const T& operator*() const { return value(); }\n+    T* operator->() { return &value(); }\n+    T& operator*() { return value(); }\n+};\n+\n+//! Helper method to retrieve a simple error string from Result<T> or\n+//! Result<void>.\n+bilingual_str ErrorDescription(const Result<void>& result);\n+} // namespace util\n \n+/**\n+ * Backwards-compatible interface for util::Result class. New code should prefer\n+ * util::Result class which supports returning error information along with\n+ * result information and supports returing `void` and `bilingual_str` results.\n+*/\n+template<class T>\n+class BResult {\n+private:\n+    util::Result<std::optional<T>> m_result;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r925882047",
      "id" : 925882047,
      "line" : 112,
      "node_id" : "PRRC_kwDOABII5843L9a_",
      "original_commit_id" : "dd91f294206ac87b213d23bb76656a0a5f0f4781",
      "original_line" : 112,
      "original_position" : 132,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 132,
      "pull_request_review_id" : 1045428196,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925882047/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-20T17:38:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925882047",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r926632645"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926632645"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> how about moving the members into a single `std::unique_ptr`, something like this:\r\n\r\nThis is a great idea, and implemented in #25665",
      "commit_id" : "dd91f294206ac87b213d23bb76656a0a5f0f4781",
      "created_at" : "2022-07-21T12:47:26Z",
      "diff_hunk" : "@@ -6,37 +6,117 @@\n #define BITCOIN_UTIL_RESULT_H\n \n #include <util/translation.h>\n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n+\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n+\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r926632645",
      "id" : 926632645,
      "in_reply_to_id" : 921049409,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII5843O0rF",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 41,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 50,
      "pull_request_review_id" : 1046469268,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926632645/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-21T12:56:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926632645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r926633493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926633493"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Maybe a `GetWarnings()` method ? Or `m_errors` and `m_warnings` can be public. I think there are some success cases that also return warnings.\r\n\r\nYes sorry interface is just incomplete while in draft.",
      "commit_id" : "dd91f294206ac87b213d23bb76656a0a5f0f4781",
      "created_at" : "2022-07-21T12:48:20Z",
      "diff_hunk" : "@@ -6,37 +6,117 @@\n #define BITCOIN_UTIL_RESULT_H\n \n #include <util/translation.h>\n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n+\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n+\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;\n+    std::vector<bilingual_str> m_warnings;\n \n public:\n-    BResult() : m_variant(Untranslated(\"\")) {}\n-    BResult(const T& _obj) : m_variant(_obj) {}\n-    BResult(const bilingual_str& error) : m_variant(error) {}\n+    //! Success case constructor.\n+    Result() = default;\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+    //! Error case constructor for a single error.\n+    Result(Error, bilingual_str error)\n+    {\n+        m_errors.emplace_back(std::move(error));\n+    }\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+    //! Error case constructor for a chained error.\n+    Result(ErrorChain, bilingual_str error, Result<void>&& previous) : m_errors{std::move(previous.m_errors)}, m_warnings{std::move(previous.m_warnings)}\n+    {\n+        m_errors.emplace_back(std::move(error));\n     }\n \n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    //! Success check.\n+    operator bool() const { return m_errors.empty(); }\n+\n+    //! Error retrieval.\n+    const std::vector<bilingual_str>& GetErrors() const { return m_errors; }\n+    std::tuple<const std::vector<bilingual_str>&, const std::vector<bilingual_str>&> GetErrorsAndWarnings() const { return {m_errors, m_warnings}; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r926633493",
      "id" : 926633493,
      "in_reply_to_id" : 920454434,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII5843O04V",
      "original_commit_id" : "39769cc0599a93cbc28e693f6fccbabedae67fb5",
      "original_line" : 65,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 85,
      "pull_request_review_id" : 1046469268,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926633493/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-21T12:56:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926633493",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r926636596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926636596"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I don't think this is true? `std::optional` with `nullopt` must not be dereferenced, whereas `Result` can be, and would return a default constructed object?\r\n\r\nI can clarify comment, but this interface is superset of std::optional interface and allows dereferencing in cases when original object can't be derefenced. The object does not have to be default constructable since util::Error{} can forward any constructor arguments",
      "commit_id" : "dd91f294206ac87b213d23bb76656a0a5f0f4781",
      "created_at" : "2022-07-21T12:51:24Z",
      "diff_hunk" : "@@ -7,42 +7,119 @@\n \n #include <util/translation.h>\n \n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;\n+    std::vector<bilingual_str> m_warnings;\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+public:\n+    //! Success case constructor.\n+    Result() = default;\n+\n+    //! Error case constructor for a single error.\n+    Result(Error, bilingual_str error)\n+    {\n+        m_errors.emplace_back(std::move(error));\n     }\n-    T ReleaseObj()\n+\n+    //! Error case constructor for a chained error.\n+    Result(ErrorChain, bilingual_str error, Result<void>&& previous) : m_errors{std::move(previous.m_errors)}, m_warnings{std::move(previous.m_warnings)}\n     {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n+        m_errors.emplace_back(std::move(error));\n     }\n \n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    //! Success check.\n+    operator bool() const { return m_errors.empty(); }\n+\n+    //! Error retrieval.\n+    const std::vector<bilingual_str>& GetErrors() const { return m_errors; }\n+    std::tuple<const std::vector<bilingual_str>&, const std::vector<bilingual_str>&> GetErrorsAndWarnings() const { return {m_errors, m_warnings}; }\n+};\n+\n+template<typename T>\n+class Result : public Result<void>\n+{\n+protected:\n+    T m_result;\n+\n+public:\n+    //! Constructors that forward to the base class and pass additional arguments to m_result.\n+    template<typename... Args>\n+    Result(Args&&... args) : m_result{std::forward<Args>(args)...} {}\n+    template<typename Str, typename...Args>\n+    Result(Error, Str&& str, Args&&... args) : Result<void>{Error{}, std::forward<Str>(str)}, m_result{std::forward<Args>(args)...} {};\n+    template<typename Str, typename Prev, typename...Args>\n+    Result(ErrorChain, Str&& str, Prev&& prev, Args&&... args) : Result<void>{ErrorChain{}, std::forward<Str>(str), std::forward<Prev>(prev)}, m_result{std::forward<Args>(args)...} {};\n+\n+    //! std::optional methods, so Result<T> can be easily swapped for\n+    //! std::optional<T> to add error reporting to existing code or remove it if",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r926636596",
      "id" : 926636596,
      "in_reply_to_id" : 925879666,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII5843O1o0",
      "original_commit_id" : "dd91f294206ac87b213d23bb76656a0a5f0f4781",
      "original_line" : 84,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 104,
      "pull_request_review_id" : 1046469268,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926636596/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-21T12:56:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926636596",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r926638792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926638792"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I don't think this is too helpful to force most call sites (that can use BResult or use it today) into a double wrapping `util::Result<std::optional<T>>`. I liked a single wrapping better.\r\n\r\nRight this was supposed to be only temporary within the PR. A followup commit basically like 6a06a7c3ad264c0ddf4904949839be1ade8011a5 (from #25665) would replace `BResult<T>` with `util::Result<T>`\r\n\r\nstd::optional was used here just because it's the simplest type definition that preserves BResult semantics.",
      "commit_id" : "dd91f294206ac87b213d23bb76656a0a5f0f4781",
      "created_at" : "2022-07-21T12:53:30Z",
      "diff_hunk" : "@@ -7,42 +7,119 @@\n \n #include <util/translation.h>\n \n-#include <variant>\n+#include <optional>\n \n-/*\n- * 'BResult' is a generic class useful for wrapping a return object\n- * (in case of success) or propagating the error cause.\n-*/\n-template<class T>\n-class BResult {\n-private:\n-    std::variant<bilingual_str, T> m_variant;\n+namespace util {\n \n-public:\n-    BResult() : m_variant{Untranslated(\"\")} {}\n-    BResult(T obj) : m_variant{std::move(obj)} {}\n-    BResult(bilingual_str error) : m_variant{std::move(error)} {}\n+//! Function result type intended for high-level functions that return error and\n+//! warning strings in addition to normal result types.\n+//!\n+//! The Result<T> class is meant to be a drop-in replacement for\n+//! std::optional<T> except it has additional methods to return error and\n+//! warning strings for error reporting. Also, unlike std::optional, in order to\n+//! support error handling in cases where callees need to pass additional\n+//! information about failures back to callers, Result<T> objects can always be\n+//! dereferenced regardless of the function's success or failure.\n+//!\n+//! This class is not intended to be used by low-level functions that do not\n+//! return error or warning strings. These functions should use plain\n+//! std::optional or std::variant types instead.\n+//!\n+//! See unit tests in result_tests.cpp for example usages.\n+template<typename T>\n+class Result;\n+\n+//! Tag types for result constructors.\n+struct Error{};\n+struct ErrorChain{};\n \n-    /* Whether the function succeeded or not */\n-    bool HasRes() const { return std::holds_alternative<T>(m_variant); }\n+//! Result<void> specialization. Only returns errors and warnings, no values.\n+template<>\n+class Result<void>\n+{\n+protected:\n+    std::vector<bilingual_str> m_errors;\n+    std::vector<bilingual_str> m_warnings;\n \n-    /* In case of success, the result object */\n-    const T& GetObj() const {\n-        assert(HasRes());\n-        return std::get<T>(m_variant);\n+public:\n+    //! Success case constructor.\n+    Result() = default;\n+\n+    //! Error case constructor for a single error.\n+    Result(Error, bilingual_str error)\n+    {\n+        m_errors.emplace_back(std::move(error));\n     }\n-    T ReleaseObj()\n+\n+    //! Error case constructor for a chained error.\n+    Result(ErrorChain, bilingual_str error, Result<void>&& previous) : m_errors{std::move(previous.m_errors)}, m_warnings{std::move(previous.m_warnings)}\n     {\n-        assert(HasRes());\n-        return std::move(std::get<T>(m_variant));\n+        m_errors.emplace_back(std::move(error));\n     }\n \n-    /* In case of failure, the error cause */\n-    const bilingual_str& GetError() const {\n-        assert(!HasRes());\n-        return std::get<bilingual_str>(m_variant);\n+    //! Success check.\n+    operator bool() const { return m_errors.empty(); }\n+\n+    //! Error retrieval.\n+    const std::vector<bilingual_str>& GetErrors() const { return m_errors; }\n+    std::tuple<const std::vector<bilingual_str>&, const std::vector<bilingual_str>&> GetErrorsAndWarnings() const { return {m_errors, m_warnings}; }\n+};\n+\n+template<typename T>\n+class Result : public Result<void>\n+{\n+protected:\n+    T m_result;\n+\n+public:\n+    //! Constructors that forward to the base class and pass additional arguments to m_result.\n+    template<typename... Args>\n+    Result(Args&&... args) : m_result{std::forward<Args>(args)...} {}\n+    template<typename Str, typename...Args>\n+    Result(Error, Str&& str, Args&&... args) : Result<void>{Error{}, std::forward<Str>(str)}, m_result{std::forward<Args>(args)...} {};\n+    template<typename Str, typename Prev, typename...Args>\n+    Result(ErrorChain, Str&& str, Prev&& prev, Args&&... args) : Result<void>{ErrorChain{}, std::forward<Str>(str), std::forward<Prev>(prev)}, m_result{std::forward<Args>(args)...} {};\n+\n+    //! std::optional methods, so Result<T> can be easily swapped for\n+    //! std::optional<T> to add error reporting to existing code or remove it if\n+    //! it is no longer needed.\n+    bool has_value() const { return m_errors.empty(); }\n+    const T& value() const { return m_result; }\n+    T& value() { return m_result; }\n+    template<typename U> T value_or(const U& default_value) const\n+    {\n+        return has_value() ? value() : default_value;\n     }\n+    const T* operator->() const { return &value(); }\n+    const T& operator*() const { return value(); }\n+    T* operator->() { return &value(); }\n+    T& operator*() { return value(); }\n+};\n+\n+//! Helper method to retrieve a simple error string from Result<T> or\n+//! Result<void>.\n+bilingual_str ErrorDescription(const Result<void>& result);\n+} // namespace util\n \n+/**\n+ * Backwards-compatible interface for util::Result class. New code should prefer\n+ * util::Result class which supports returning error information along with\n+ * result information and supports returing `void` and `bilingual_str` results.\n+*/\n+template<class T>\n+class BResult {\n+private:\n+    util::Result<std::optional<T>> m_result;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#discussion_r926638792",
      "id" : 926638792,
      "in_reply_to_id" : 925882047,
      "line" : 112,
      "node_id" : "PRRC_kwDOABII5843O2LI",
      "original_commit_id" : "dd91f294206ac87b213d23bb76656a0a5f0f4781",
      "original_line" : 112,
      "original_position" : 132,
      "original_start_line" : null,
      "path" : "src/util/result.h",
      "position" : 132,
      "pull_request_review_id" : 1046469268,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25608",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926638792/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-21T12:58:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/926638792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Closing for now in favor of #25665 which implements Martinus suggestion. Will post a comparison of different approaches there.",
      "created_at" : "2022-07-21T12:55:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25608#issuecomment-1191450773",
      "id" : 1191450773,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25608",
      "node_id" : "IC_kwDOABII585HBBiV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191450773/reactions"
      },
      "updated_at" : "2022-07-21T12:55:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1191450773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
