{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Is it worth revisiting LTO compilation?\r\n\r\nI did some experimentation with LTO compilation and the results look promising :-)\r\n\r\nBinary size results (non-stripped binaries):\r\n\r\n* `bench_bitcoin` shrank from 74 678 800 to 39 695 288 bytes (-47 %)\r\n* `bitcoin-cli` shrank from 4 837 744 to 2 918 544 bytes (-40 %)\r\n* `bitcoin-tx` shrank from 15 206 720 to 7 717 608 bytes (-49 %)\r\n* `bitcoind` shrank from 102 004 960 to 70 706 000 bytes (-31 %)\r\n* `test_bitcoin` shrank from 161 739 656 to 100 838 072 bytes (-38 %)\r\n* `test_bitcoin_fuzzy` shrank from 15 929 968 to 6 036 176 bytes (-62 %)\r\n\r\nBinary size results (stripped binaries):\r\n\r\n* `bench_bitcoin` shrank from 5 632 272 to 3 722 720 bytes (-34 %)\r\n* `bitcoin-cli` shrank from 383 216 to 260 288 bytes (-32 %)\r\n* `bitcoin-tx` shrank from 1 399 112 to 936 080 bytes (-33 %)\r\n* `bitcoind` shrank from 6 639 336 to 6 044 520 bytes (-9 %)\r\n* `test_bitcoin` shrank from 12 067 056 to 10 853 616 bytes (-10 %)\r\n* `test_bitcoin_fuzzy` shrank from 1 468 976 to 428 160 bytes (-71 %)\r\n\r\nBenchmark results (insignificant relative changes omitted to reduce noise):\r\n\r\n* Runtime of benchmark `FastRandom_1bit` changed -7.9 % when enabling LTO\r\n* Runtime of benchmark `FastRandom_32bit` changed -6.7 % when enabling LTO\r\n* Runtime of benchmark `MatchGCSFilter` changed -11.5 % when enabling LTO\r\n* Runtime of benchmark `MempoolEviction` changed -13.3 % when enabling LTO\r\n* Runtime of benchmark `PrevectorDeserializeNontrivial` changed -58.1 % when enabling LTO\r\n* Runtime of benchmark `RollingBloom` changed -15.0 % when enabling LTO\r\n\r\nBelow is the log from my experimentation.\r\n\r\nLet me know if anything can be improved. Feedback appreciated.\r\n\r\n```shell\r\n# Build Bitcoin without LTO (baseline)\r\n$ git clone https://github.com/bitcoin/bitcoin bitcoin-without-lto\r\n$ cd bitcoin-without-lto\r\n$ export CC=\"clang\"\r\n$ export CXX=\"clang++\"\r\n$ export RANLIB=\"/usr/lib/llvm-6.0/bin/llvm-ranlib\"\r\n$ ./autogen.sh\r\n$ ./configure\r\n$ make\r\n$ cd ..\r\n\r\n# Build Bitcoin with LTO\r\n$ git clone https://github.com/bitcoin/bitcoin bitcoin-with-lto\r\n$ cd bitcoin-with-lto\r\n$ PREFIX=${PWD}/binutils-bin/\r\n$ mkdir binutils-bin\r\n$ apt install texinfo bison\r\n$ git clone --depth 1 git://sourceware.org/git/binutils-gdb.git binutils\r\n$ mkdir binutils-build\r\n$ cd binutils-build\r\n$ export CC=\"clang\"\r\n$ export CXX=\"clang++\"\r\n$ unset RANLIB\r\n$ ../binutils/configure --enable-gold --enable-plugins --disable-werror --prefix=${PREFIX}\r\n$ make all-gold\r\n$ make install\r\n$ cd ..\r\n$ ${PREFIX}/bin/ld.gold -plugin 2>&1 | grep -q \"plugin: missing argument\" && echo \"ld.gold has plugin support\" || echo \"ERROR: ld.gold lacks plugin support\"\r\n$ cp /usr/lib/llvm-6.0/lib/LLVMgold.so ${PREFIX}/lib/\r\n$ export PATH=\"${PREFIX}/bin:${PATH}\"\r\n$ export CC=\"clang -flto\"\r\n$ export CXX=\"clang++ -flto\"\r\n$ export RANLIB=\"/usr/lib/llvm-6.0/bin/llvm-ranlib\"\r\n$ ./autogen.sh\r\n$ ./configure\r\n$ make\r\n$ cd ..\r\n\r\n# Check binary sizes\r\n$ ls -Sl bitcoin-*-lto/src/bitcoind \\\r\n       bitcoin-*-lto/src/bitcoin-tx \\\r\n       bitcoin-*-lto/src/bench/bench_bitcoin \\\r\n       bitcoin-*-lto/src/bitcoin-cli \\\r\n       bitcoin-*-lto/src/test/test_bitcoin \\\r\n       bitcoin-*-lto/src/test/test_bitcoin_fuzzy\r\n-rwxr-xr-x 1 root root 161739656 Sep 20 11:57 bitcoin-without-lto/src/test/test_bitcoin\r\n-rwxr-xr-x 1 root root 102004960 Sep 20 11:57 bitcoin-without-lto/src/bitcoind\r\n-rwxr-xr-x 1 root root 100838072 Sep 20 12:12 bitcoin-with-lto/src/test/test_bitcoin\r\n-rwxr-xr-x 1 root root  74678800 Sep 20 11:57 bitcoin-without-lto/src/bench/bench_bitcoin\r\n-rwxr-xr-x 1 root root  70706000 Sep 20 12:11 bitcoin-with-lto/src/bitcoind\r\n-rwxr-xr-x 1 root root  39695288 Sep 20 12:10 bitcoin-with-lto/src/bench/bench_bitcoin\r\n-rwxr-xr-x 1 root root  15929968 Sep 20 11:57 bitcoin-without-lto/src/test/test_bitcoin_fuzzy\r\n-rwxr-xr-x 1 root root  15206720 Sep 20 11:57 bitcoin-without-lto/src/bitcoin-tx\r\n-rwxr-xr-x 1 root root   7717608 Sep 20 12:09 bitcoin-with-lto/src/bitcoin-tx\r\n-rwxr-xr-x 1 root root   6036176 Sep 20 12:09 bitcoin-with-lto/src/test/test_bitcoin_fuzzy\r\n-rwxr-xr-x 1 root root   4837744 Sep 20 11:57 bitcoin-without-lto/src/bitcoin-cli\r\n-rwxr-xr-x 1 root root   2918544 Sep 20 12:08 bitcoin-with-lto/src/bitcoin-cli\r\n$ strip bitcoin-*-lto/src/bitcoind \\\r\n       bitcoin-*-lto/src/bitcoin-tx \\\r\n       bitcoin-*-lto/src/bench/bench_bitcoin \\\r\n       bitcoin-*-lto/src/bitcoin-cli \\\r\n       bitcoin-*-lto/src/test/test_bitcoin \\\r\n       bitcoin-*-lto/src/test/test_bitcoin_fuzzy\r\n$ ls -Sl bitcoin-*-lto/src/bitcoind \\\r\n       bitcoin-*-lto/src/bitcoin-tx \\\r\n       bitcoin-*-lto/src/bench/bench_bitcoin \\\r\n       bitcoin-*-lto/src/bitcoin-cli \\\r\n       bitcoin-*-lto/src/test/test_bitcoin \\\r\n       bitcoin-*-lto/src/test/test_bitcoin_fuzzy\r\n-rwxr-xr-x 1 root root 12067056 Sep 20 15:54 bitcoin-without-lto/src/test/test_bitcoin\r\n-rwxr-xr-x 1 root root 10853616 Sep 20 15:54 bitcoin-with-lto/src/test/test_bitcoin\r\n-rwxr-xr-x 1 root root  6639336 Sep 20 15:54 bitcoin-without-lto/src/bitcoind\r\n-rwxr-xr-x 1 root root  6044520 Sep 20 15:54 bitcoin-with-lto/src/bitcoind\r\n-rwxr-xr-x 1 root root  5632272 Sep 20 15:54 bitcoin-without-lto/src/bench/bench_bitcoin\r\n-rwxr-xr-x 1 root root  3722720 Sep 20 15:54 bitcoin-with-lto/src/bench/bench_bitcoin\r\n-rwxr-xr-x 1 root root  1468976 Sep 20 15:54 bitcoin-without-lto/src/test/test_bitcoin_fuzzy\r\n-rwxr-xr-x 1 root root  1399112 Sep 20 15:54 bitcoin-without-lto/src/bitcoin-tx\r\n-rwxr-xr-x 1 root root   936080 Sep 20 15:54 bitcoin-with-lto/src/bitcoin-tx\r\n-rwxr-xr-x 1 root root   428160 Sep 20 15:54 bitcoin-with-lto/src/test/test_bitcoin_fuzzy\r\n-rwxr-xr-x 1 root root   383216 Sep 20 15:54 bitcoin-without-lto/src/bitcoin-cli\r\n-rwxr-xr-x 1 root root   260288 Sep 20 15:54 bitcoin-with-lto/src/bitcoin-cli\r\n\r\n# Gather performance measurements until ^C is pressed\r\n$ while true; do for SWITCH in with without; do echo \"# $SWITCH\"; \\\r\n    bitcoin-${SWITCH}-lto/src/bench/bench_bitcoin; done; done 2>&1 | \\\r\n    tee bench_bitcoin-lto-vs-non-lto\r\n\r\n# Summarize results\r\n$ ./parse_lto.py < bench_bitcoin-lto-vs-non-lto\r\n* Runtime of benchmark FastRandom_1bit changed -7.9 % when enabling LTO. Median total time was 4.4 seconds without LTO and 4.1 seconds with LTO. Based on 14 independent runs of bench_bitcoin.\r\n* Runtime of benchmark FastRandom_32bit changed -6.7 % when enabling LTO. Median total time was 5.8 seconds without LTO and 5.4 seconds with LTO. Based on 14 independent runs of bench_bitcoin.\r\n* Runtime of benchmark MatchGCSFilter changed -11.5 % when enabling LTO. Median total time was 8.3 seconds without LTO and 7.3 seconds with LTO. Based on 14 independent runs of bench_bitcoin.\r\n* Runtime of benchmark MempoolEviction changed -13.3 % when enabling LTO. Median total time was 4.6 seconds without LTO and 4.0 seconds with LTO. Based on 14 independent runs of bench_bitcoin.\r\n* Runtime of benchmark PrevectorDeserializeNontrivial changed -58.1 % when enabling LTO. Median total time was 8.2 seconds without LTO and 3.4 seconds with LTO. Based on 14 independent runs of bench_bitcoin.\r\n* Runtime of benchmark RollingBloom changed -15.0 % when enabling LTO. Median total time was 4.4 seconds without LTO and 3.7 seconds with LTO. Based on 14 independent runs of bench_bitcoin.\r\n\r\n# Environment\r\n$ clang++ --version | head -2\r\nclang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)\r\nTarget: x86_64-pc-linux-gnu\r\n$ dpkg -S $(which clang++)\r\nclang: /usr/bin/clang++\r\n$ dpkg -S /usr/lib/llvm-6.0/bin/llvm-ranlib\r\nllvm-6.0: /usr/lib/llvm-6.0/bin/llvm-ranlib\r\n$ dpkg -S /usr/lib/llvm-6.0/lib/LLVMgold.so\r\nllvm-6.0-dev: /usr/lib/llvm-6.0/lib/LLVMgold.so\r\n$ cat /etc/lsb-release\r\nDISTRIB_ID=Ubuntu\r\nDISTRIB_RELEASE=18.04\r\nDISTRIB_CODENAME=bionic\r\nDISTRIB_DESCRIPTION=\"Ubuntu 18.04.1 LTS\"\r\n```\r\n\r\nThis is the content of `parse_lto.py`:\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport collections\r\nimport statistics\r\nimport sys\r\n\r\nresults_lto = collections.defaultdict(list)\r\nresults_nonlto = collections.defaultdict(list)\r\nfor line in sys.stdin:\r\n    line = line.rstrip(\"\\n\")\r\n    if line.startswith(\"# Benchmark\"):\r\n        continue\r\n    if line.startswith(\"#\"):\r\n        lto_status = line[2:]\r\n        continue\r\n    assert(lto_status in [\"with\", \"without\"])\r\n    benchmark, _, _, total_time, _ = line.split(\", \", 4)\r\n    total_time = float(total_time)\r\n    if lto_status == \"with\":\r\n        results_lto[benchmark].append(total_time)\r\n        continue\r\n    if lto_status == \"without\":\r\n        results_nonlto[benchmark].append(total_time)\r\n        continue\r\n    assert(False)\r\n\r\nassert(len(results_lto) == len(results_nonlto))\r\nfor benchmark in sorted(results_lto):\r\n    least_observations = min(len(results_lto[benchmark]), len(results_nonlto[benchmark]))\r\n    results_lto[benchmark] = results_lto[benchmark][:least_observations]\r\n    results_nonlto[benchmark] = results_nonlto[benchmark][:least_observations]\r\nfor benchmark in sorted(results_lto):\r\n    assert(len(results_lto[benchmark]) == len(results_nonlto[benchmark]))\r\n    median_lto = statistics.median(results_lto[benchmark])\r\n    median_nonlto = statistics.median(results_nonlto[benchmark])\r\n    assert(median_nonlto != 0)\r\n    change = median_lto / median_nonlto - 1\r\n    if abs(change) < 0.05:\r\n        continue\r\n    print(\"* Runtime of benchmark {} changed {:.1f} % when enabling LTO. Median total time was {:.1f} seconds without LTO and {:.1f} seconds with LTO. Based on {} independent runs of bench_bitcoin.\".format(\r\n        benchmark, 100 * change, median_nonlto, median_lto, len(results_lto[benchmark])\r\n    ))\r\n```",
   "closed_at" : "2020-05-19T11:26:55Z",
   "closed_by" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   },
   "comments" : 7,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14277/comments",
   "created_at" : "2018-09-20T13:16:25Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14277/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/14277",
   "id" : 362182806,
   "labels" : [
      {
         "color" : "ebd775",
         "default" : false,
         "description" : null,
         "id" : 64584,
         "name" : "Brainstorming",
         "node_id" : "MDU6TGFiZWw2NDU4NA==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming"
      },
      {
         "color" : "5319e7",
         "default" : false,
         "description" : null,
         "id" : 61889416,
         "name" : "Build system",
         "node_id" : "MDU6TGFiZWw2MTg4OTQxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14277/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWUzNjIxODI4MDY=",
   "number" : 14277,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Revisit link-time optimization (LTO)? Some results from clang LTO compilation",
   "updated_at" : "2020-05-19T11:26:56Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14277",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
