[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #14335 (net: refactor: cleanup ThreadSocketHandler by pstratem)\n* #14147 (net: Refactor ThreadSocketHandler by pstratem)\n* #14046 (net: Refactor message parsing (CNetMessage), adds flexibility by jonasschnelli)\n* #14032 (Add p2p layer encryption with ECDH/ChaCha20Poly1305 by jonasschnelli)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-09-14T18:19:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14221#issuecomment-421443093",
      "id" : 421443093,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14221",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTQ0MzA5Mw==",
      "updated_at" : "2018-09-26T22:49:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421443093",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14221#discussion_r217902052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14221"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217902052"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IMO you could include this [m4](https://www.gnu.org/software/autoconf-archive/ax_have_poll.html) to detect if the system has poll.",
      "commit_id" : "9d5eef951345e309d4e2d55e254c193cc59d88f1",
      "created_at" : "2018-09-16T04:52:48Z",
      "diff_hunk" : "@@ -1269,6 +1269,7 @@ void CConnman::NotifyNumConnectionsChanged()\n     }\n }\n \n+#ifdef WIN32",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14221#discussion_r217902052",
      "id" : 217902052,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzkwMjA1Mg==",
      "original_commit_id" : "9d5eef951345e309d4e2d55e254c193cc59d88f1",
      "original_position" : 4,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 155731903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14221",
      "updated_at" : "2018-09-16T04:52:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217902052",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14221#discussion_r218012147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14221"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218012147"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-16 23:09:35 clang-tidy(pr=14221): src/net.cpp:1457:55: warning: implicit conversion 'std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]\r\n```\r\n\r\nSame below. Please fix throughout :-)",
      "commit_id" : "9d5eef951345e309d4e2d55e254c193cc59d88f1",
      "created_at" : "2018-09-17T10:02:31Z",
      "diff_hunk" : "@@ -1153,311 +1153,425 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     }\n }\n \n-void CConnman::ThreadSocketHandler()\n+void CConnman::DisconnectNodes()\n {\n-    unsigned int nPrevNodeCount = 0;\n-    while (!interruptNet)\n     {\n-        //\n-        // Disconnect nodes\n-        //\n-        {\n-            LOCK(cs_vNodes);\n+        LOCK(cs_vNodes);\n \n-            if (!fNetworkActive) {\n-                // Disconnect any connected nodes\n-                for (CNode* pnode : vNodes) {\n-                    if (!pnode->fDisconnect) {\n-                        LogPrint(BCLog::NET, \"Network not active, dropping peer=%d\\n\", pnode->GetId());\n-                        pnode->fDisconnect = true;\n-                    }\n+        if (!fNetworkActive) {\n+            // Disconnect any connected nodes\n+            for (CNode* pnode : vNodes) {\n+                if (!pnode->fDisconnect) {\n+                    LogPrint(BCLog::NET, \"Network not active, dropping peer=%d\\n\", pnode->GetId());\n+                    pnode->fDisconnect = true;\n                 }\n             }\n+        }\n \n-            // Disconnect unused nodes\n-            std::vector<CNode*> vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy)\n+        // Disconnect unused nodes\n+        std::vector<CNode*> vNodesCopy = vNodes;\n+        for (CNode* pnode : vNodesCopy)\n+        {\n+            if (pnode->fDisconnect)\n             {\n-                if (pnode->fDisconnect)\n-                {\n-                    // remove from vNodes\n-                    vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n+                // remove from vNodes\n+                vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n \n-                    // release outbound grant (if any)\n-                    pnode->grantOutbound.Release();\n+                // release outbound grant (if any)\n+                pnode->grantOutbound.Release();\n \n-                    // close socket and cleanup\n-                    pnode->CloseSocketDisconnect();\n+                // close socket and cleanup\n+                pnode->CloseSocketDisconnect();\n \n-                    // hold in disconnected pool until all refs are released\n-                    pnode->Release();\n-                    vNodesDisconnected.push_back(pnode);\n-                }\n+                // hold in disconnected pool until all refs are released\n+                pnode->Release();\n+                vNodesDisconnected.push_back(pnode);\n             }\n         }\n+    }\n+    {\n+        // Delete disconnected nodes\n+        std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n+        for (CNode* pnode : vNodesDisconnectedCopy)\n         {\n-            // Delete disconnected nodes\n-            std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            for (CNode* pnode : vNodesDisconnectedCopy)\n-            {\n-                // wait until threads are done using it\n-                if (pnode->GetRefCount() <= 0) {\n-                    bool fDelete = false;\n-                    {\n-                        TRY_LOCK(pnode->cs_inventory, lockInv);\n-                        if (lockInv) {\n-                            TRY_LOCK(pnode->cs_vSend, lockSend);\n-                            if (lockSend) {\n-                                fDelete = true;\n-                            }\n+            // wait until threads are done using it\n+            if (pnode->GetRefCount() <= 0) {\n+                bool fDelete = false;\n+                {\n+                    TRY_LOCK(pnode->cs_inventory, lockInv);\n+                    if (lockInv) {\n+                        TRY_LOCK(pnode->cs_vSend, lockSend);\n+                        if (lockSend) {\n+                            fDelete = true;\n                         }\n                     }\n-                    if (fDelete) {\n-                        vNodesDisconnected.remove(pnode);\n-                        DeleteNode(pnode);\n-                    }\n+                }\n+                if (fDelete) {\n+                    vNodesDisconnected.remove(pnode);\n+                    DeleteNode(pnode);\n                 }\n             }\n         }\n-        size_t vNodesSize;\n-        {\n-            LOCK(cs_vNodes);\n-            vNodesSize = vNodes.size();\n-        }\n-        if(vNodesSize != nPrevNodeCount) {\n-            nPrevNodeCount = vNodesSize;\n-            if(clientInterface)\n-                clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n+    }\n+}\n+\n+void CConnman::InactivityChecks()\n+{\n+    int64_t micro_time, nTime;\n+    {\n+        LOCK(cs_vNodes);\n+        micro_time = GetTimeMicros();\n+        nTime = micro_time / 1000000;\n+        for (CNode* pnode : vNodes) {\n+            if (nTime - pnode->nTimeConnected > 60)\n+            {\n+                if (pnode->nLastRecv == 0 || pnode->nLastSend == 0)\n+                {\n+                    LogPrint(BCLog::NET, \"socket no message in first 60 seconds, %d %d from %d\\n\", pnode->nLastRecv != 0, pnode->nLastSend != 0, pnode->GetId());\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (nTime - pnode->nLastSend > TIMEOUT_INTERVAL)\n+                {\n+                    LogPrintf(\"socket sending timeout: %is\\n\", nTime - pnode->nLastSend);\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (nTime - pnode->nLastRecv > (pnode->nVersion > BIP0031_VERSION ? TIMEOUT_INTERVAL : 90*60))\n+                {\n+                    LogPrintf(\"socket receive timeout: %is\\n\", nTime - pnode->nLastRecv);\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (pnode->nPingNonceSent && pnode->nPingUsecStart + TIMEOUT_INTERVAL * 1000000 < micro_time)\n+                {\n+                    LogPrintf(\"ping timeout: %fs\\n\", 0.000001 * (micro_time - pnode->nPingUsecStart));\n+                    pnode->fDisconnect = true;\n+                }\n+                else if (!pnode->fSuccessfullyConnected)\n+                {\n+                    LogPrint(BCLog::NET, \"version handshake timeout from %d\\n\", pnode->GetId());\n+                    pnode->fDisconnect = true;\n+                }\n+            }\n         }\n+    }\n+}\n \n-        //\n-        // Find which sockets have data to receive\n-        //\n-        struct timeval timeout;\n-        timeout.tv_sec  = 0;\n-        timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n-\n-        fd_set fdsetRecv;\n-        fd_set fdsetSend;\n-        fd_set fdsetError;\n-        FD_ZERO(&fdsetRecv);\n-        FD_ZERO(&fdsetSend);\n-        FD_ZERO(&fdsetError);\n-        SOCKET hSocketMax = 0;\n-        bool have_fds = false;\n+void CConnman::NotifyNumConnectionsChanged()\n+{\n+    size_t vNodesSize;\n+    {\n+        LOCK(cs_vNodes);\n+        vNodesSize = vNodes.size();\n+    }\n+    if(vNodesSize != nPrevNodeCount) {\n+        nPrevNodeCount = vNodesSize;\n+        if(clientInterface)\n+            clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n+    }\n+}\n \n-        for (const ListenSocket& hListenSocket : vhListenSocket) {\n-            FD_SET(hListenSocket.socket, &fdsetRecv);\n-            hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n-            have_fds = true;\n-        }\n+#ifdef WIN32\n+void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)\n+{\n+    struct timeval timeout;\n+    timeout.tv_sec  = 0;\n+    timeout.tv_usec = 50000; // frequency to poll pnode->vSend\n+\n+    fd_set fdsetRecv;\n+    fd_set fdsetSend;\n+    fd_set fdsetError;\n+    FD_ZERO(&fdsetRecv);\n+    FD_ZERO(&fdsetSend);\n+    FD_ZERO(&fdsetError);\n+    SOCKET hSocketMax = 0;\n+    bool have_fds = false;\n+\n+    for (const ListenSocket& hListenSocket : vhListenSocket) {\n+        FD_SET(hListenSocket.socket, &fdsetRecv);\n+        hSocketMax = std::max(hSocketMax, hListenSocket.socket);\n+        have_fds = true;\n+    }\n \n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes)\n         {\n-            LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodes)\n+            // Implement the following logic:\n+            // * If there is data to send, select() for sending data. As this only\n+            //   happens when optimistic write failed, we choose to first drain the\n+            //   write buffer in this case before receiving more. This avoids\n+            //   needlessly queueing received data, if the remote peer is not themselves\n+            //   receiving data. This means properly utilizing TCP flow control signalling.\n+            // * Otherwise, if there is space left in the receive buffer, select() for\n+            //   receiving data.\n+            // * Hand off all complete messages to the processor, to be handled without\n+            //   blocking here.\n+\n+            bool select_recv = !pnode->fPauseRecv;\n+            bool select_send;\n             {\n-                // Implement the following logic:\n-                // * If there is data to send, select() for sending data. As this only\n-                //   happens when optimistic write failed, we choose to first drain the\n-                //   write buffer in this case before receiving more. This avoids\n-                //   needlessly queueing received data, if the remote peer is not themselves\n-                //   receiving data. This means properly utilizing TCP flow control signalling.\n-                // * Otherwise, if there is space left in the receive buffer, select() for\n-                //   receiving data.\n-                // * Hand off all complete messages to the processor, to be handled without\n-                //   blocking here.\n-\n-                bool select_recv = !pnode->fPauseRecv;\n-                bool select_send;\n-                {\n-                    LOCK(pnode->cs_vSend);\n-                    select_send = !pnode->vSendMsg.empty();\n-                }\n+                LOCK(pnode->cs_vSend);\n+                select_send = !pnode->vSendMsg.empty();\n+            }\n \n-                LOCK(pnode->cs_hSocket);\n-                if (pnode->hSocket == INVALID_SOCKET)\n-                    continue;\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                continue;\n \n-                FD_SET(pnode->hSocket, &fdsetError);\n-                hSocketMax = std::max(hSocketMax, pnode->hSocket);\n-                have_fds = true;\n+            FD_SET(pnode->hSocket, &fdsetError);\n+            hSocketMax = std::max(hSocketMax, pnode->hSocket);\n+            have_fds = true;\n \n-                if (select_send) {\n-                    FD_SET(pnode->hSocket, &fdsetSend);\n-                    continue;\n-                }\n-                if (select_recv) {\n-                    FD_SET(pnode->hSocket, &fdsetRecv);\n-                }\n+            if (select_send) {\n+                FD_SET(pnode->hSocket, &fdsetSend);\n+                continue;\n+            }\n+            if (select_recv) {\n+                FD_SET(pnode->hSocket, &fdsetRecv);\n             }\n         }\n+    }\n \n-        int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n-                             &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-        if (interruptNet)\n+    int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n+                         &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n+    if (interruptNet)\n+        return;\n+\n+    if (nSelect == SOCKET_ERROR)\n+    {\n+        if (have_fds)\n+        {\n+            int nErr = WSAGetLastError();\n+            LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n+            for (unsigned int i = 0; i <= hSocketMax; i++)\n+                FD_SET(i, &fdsetRecv);\n+        }\n+        FD_ZERO(&fdsetSend);\n+        FD_ZERO(&fdsetError);\n+        if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n             return;\n+    }\n+\n+\n+    for (const ListenSocket& hListenSocket : vhListenSocket)\n+    {\n+        if (hListenSocket.socket == INVALID_SOCKET) continue;\n+        if (FD_ISSET(hListenSocket.socket, &fdsetRecv)) recv_set.insert(hListenSocket.socket);\n+    }\n \n-        if (nSelect == SOCKET_ERROR)\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes)\n         {\n-            if (have_fds)\n-            {\n-                int nErr = WSAGetLastError();\n-                LogPrintf(\"socket select error %s\\n\", NetworkErrorString(nErr));\n-                for (unsigned int i = 0; i <= hSocketMax; i++)\n-                    FD_SET(i, &fdsetRecv);\n-            }\n-            FD_ZERO(&fdsetSend);\n-            FD_ZERO(&fdsetError);\n-            if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n-                return;\n+            if (pnode->hSocket == INVALID_SOCKET) continue;\n+            if (FD_ISSET(pnode->hSocket, &fdsetRecv)) recv_set.insert(pnode->hSocket);\n+            if (FD_ISSET(pnode->hSocket, &fdsetSend)) send_set.insert(pnode->hSocket);\n+            if (FD_ISSET(pnode->hSocket, &fdsetError)) error_set.insert(pnode->hSocket);\n         }\n+    }\n+}\n+#else\n+void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_set, std::set<SOCKET> &error_set)\n+{\n+    std::vector<struct pollfd> pollfds;\n \n-        //\n-        // Accept new connections\n-        //\n-        for (const ListenSocket& hListenSocket : vhListenSocket)\n+    for (const ListenSocket& hListenSocket : vhListenSocket) {\n+        if (hListenSocket.socket == INVALID_SOCKET) continue;\n+\n+        struct pollfd pollfd;\n+        memset(&pollfd, 0, sizeof(struct pollfd));\n+        pollfd.fd = hListenSocket.socket;\n+        pollfd.events = POLLIN;\n+        pollfds.push_back(pollfd);\n+    }\n+\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes)\n         {\n-            if (hListenSocket.socket != INVALID_SOCKET && FD_ISSET(hListenSocket.socket, &fdsetRecv))\n+            // Implement the following logic:\n+            // * If there is data to send, select() for sending data. As this only\n+            //   happens when optimistic write failed, we choose to first drain the\n+            //   write buffer in this case before receiving more. This avoids\n+            //   needlessly queueing received data, if the remote peer is not themselves\n+            //   receiving data. This means properly utilizing TCP flow control signalling.\n+            // * Otherwise, if there is space left in the receive buffer, select() for\n+            //   receiving data.\n+            // * Hand off all complete messages to the processor, to be handled without\n+            //   blocking here.\n+\n+            bool select_recv = !pnode->fPauseRecv;\n+            bool select_send;\n             {\n-                AcceptConnection(hListenSocket);\n+                LOCK(pnode->cs_vSend);\n+                select_send = !pnode->vSendMsg.empty();\n+            }\n+\n+            LOCK(pnode->cs_hSocket);\n+            if (pnode->hSocket == INVALID_SOCKET)\n+                continue;\n+\n+            struct pollfd pollfd;\n+            memset(&pollfd, 0, sizeof(struct pollfd));\n+            pollfd.fd = pnode->hSocket;\n+\n+            if (select_send) {\n+                pollfd.events = POLLOUT;\n+                continue;\n             }\n+            if (select_recv) {\n+                pollfd.events = POLLIN;\n+            }\n+            pollfds.push_back(pollfd);\n+        }\n+    }\n+\n+    int nPoll = poll(&pollfds[0], pollfds.size(), 50);\n+\n+    if (nPoll < 0) {\n+        if (errno == EINTR) return;\n+        LogPrint(BCLog::NET, \"poll errno %s\\n\", strerror(errno));\n+    }\n+\n+    if (interruptNet) return;\n+\n+    for (struct pollfd pollfd : pollfds) {\n+        if (pollfd.revents & POLLIN) recv_set.insert(pollfd.fd);\n+        if (pollfd.revents & POLLOUT) send_set.insert(pollfd.fd);\n+        if (pollfd.revents & (POLLERR|POLLHUP)) error_set.insert(pollfd.fd);\n+    }\n+}\n+#endif\n+\n+void CConnman::SocketHandler()\n+{\n+    std::set<SOCKET> recv_set, send_set, error_set;\n+    SocketEvents(recv_set, send_set, error_set);\n+\n+    if (interruptNet) return;\n+\n+    //\n+    // Accept new connections\n+    //\n+    for (const ListenSocket& hListenSocket : vhListenSocket)\n+    {\n+        if (hListenSocket.socket != INVALID_SOCKET && recv_set.count(hListenSocket.socket))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14221#discussion_r218012147",
      "id" : 218012147,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODAxMjE0Nw==",
      "original_commit_id" : "9d5eef951345e309d4e2d55e254c193cc59d88f1",
      "original_position" : 435,
      "path" : "src/net.cpp",
      "position" : 435,
      "pull_request_review_id" : 155854229,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14221",
      "updated_at" : "2018-09-17T10:02:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218012147",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14221#discussion_r218012313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14221"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218012313"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-16 23:34:30 cppcheck(pr=14221): [src/net.cpp:1220]: (style) The scope of the variable 'micro_time' can be reduced.\r\n2018-09-16 23:34:30 cppcheck(pr=14221): [src/net.cpp:1220]: (style) The scope of the variable 'nTime' can be reduced.\r\n```",
      "commit_id" : "9d5eef951345e309d4e2d55e254c193cc59d88f1",
      "created_at" : "2018-09-17T10:03:08Z",
      "diff_hunk" : "@@ -1153,311 +1153,425 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     }\n }\n \n-void CConnman::ThreadSocketHandler()\n+void CConnman::DisconnectNodes()\n {\n-    unsigned int nPrevNodeCount = 0;\n-    while (!interruptNet)\n     {\n-        //\n-        // Disconnect nodes\n-        //\n-        {\n-            LOCK(cs_vNodes);\n+        LOCK(cs_vNodes);\n \n-            if (!fNetworkActive) {\n-                // Disconnect any connected nodes\n-                for (CNode* pnode : vNodes) {\n-                    if (!pnode->fDisconnect) {\n-                        LogPrint(BCLog::NET, \"Network not active, dropping peer=%d\\n\", pnode->GetId());\n-                        pnode->fDisconnect = true;\n-                    }\n+        if (!fNetworkActive) {\n+            // Disconnect any connected nodes\n+            for (CNode* pnode : vNodes) {\n+                if (!pnode->fDisconnect) {\n+                    LogPrint(BCLog::NET, \"Network not active, dropping peer=%d\\n\", pnode->GetId());\n+                    pnode->fDisconnect = true;\n                 }\n             }\n+        }\n \n-            // Disconnect unused nodes\n-            std::vector<CNode*> vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy)\n+        // Disconnect unused nodes\n+        std::vector<CNode*> vNodesCopy = vNodes;\n+        for (CNode* pnode : vNodesCopy)\n+        {\n+            if (pnode->fDisconnect)\n             {\n-                if (pnode->fDisconnect)\n-                {\n-                    // remove from vNodes\n-                    vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n+                // remove from vNodes\n+                vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n \n-                    // release outbound grant (if any)\n-                    pnode->grantOutbound.Release();\n+                // release outbound grant (if any)\n+                pnode->grantOutbound.Release();\n \n-                    // close socket and cleanup\n-                    pnode->CloseSocketDisconnect();\n+                // close socket and cleanup\n+                pnode->CloseSocketDisconnect();\n \n-                    // hold in disconnected pool until all refs are released\n-                    pnode->Release();\n-                    vNodesDisconnected.push_back(pnode);\n-                }\n+                // hold in disconnected pool until all refs are released\n+                pnode->Release();\n+                vNodesDisconnected.push_back(pnode);\n             }\n         }\n+    }\n+    {\n+        // Delete disconnected nodes\n+        std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n+        for (CNode* pnode : vNodesDisconnectedCopy)\n         {\n-            // Delete disconnected nodes\n-            std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            for (CNode* pnode : vNodesDisconnectedCopy)\n-            {\n-                // wait until threads are done using it\n-                if (pnode->GetRefCount() <= 0) {\n-                    bool fDelete = false;\n-                    {\n-                        TRY_LOCK(pnode->cs_inventory, lockInv);\n-                        if (lockInv) {\n-                            TRY_LOCK(pnode->cs_vSend, lockSend);\n-                            if (lockSend) {\n-                                fDelete = true;\n-                            }\n+            // wait until threads are done using it\n+            if (pnode->GetRefCount() <= 0) {\n+                bool fDelete = false;\n+                {\n+                    TRY_LOCK(pnode->cs_inventory, lockInv);\n+                    if (lockInv) {\n+                        TRY_LOCK(pnode->cs_vSend, lockSend);\n+                        if (lockSend) {\n+                            fDelete = true;\n                         }\n                     }\n-                    if (fDelete) {\n-                        vNodesDisconnected.remove(pnode);\n-                        DeleteNode(pnode);\n-                    }\n+                }\n+                if (fDelete) {\n+                    vNodesDisconnected.remove(pnode);\n+                    DeleteNode(pnode);\n                 }\n             }\n         }\n-        size_t vNodesSize;\n-        {\n-            LOCK(cs_vNodes);\n-            vNodesSize = vNodes.size();\n-        }\n-        if(vNodesSize != nPrevNodeCount) {\n-            nPrevNodeCount = vNodesSize;\n-            if(clientInterface)\n-                clientInterface->NotifyNumConnectionsChanged(vNodesSize);\n+    }\n+}\n+\n+void CConnman::InactivityChecks()\n+{\n+    int64_t micro_time, nTime;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14221#discussion_r218012313",
      "id" : 218012313,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODAxMjMxMw==",
      "original_commit_id" : "9d5eef951345e309d4e2d55e254c193cc59d88f1",
      "original_position" : 125,
      "path" : "src/net.cpp",
      "position" : 125,
      "pull_request_review_id" : 155854427,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14221",
      "updated_at" : "2018-09-17T10:03:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218012313",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
