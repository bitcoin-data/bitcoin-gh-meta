[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK.",
      "created_at" : "2018-09-15T09:46:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421546658",
      "id" : 421546658,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTU0NjY1OA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421546658/reactions"
      },
      "updated_at" : "2018-09-15T09:46:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421546658",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14224#discussion_r217881077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14224"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217881077"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can't we pass the functional tests with integer sanitizer even we suppress those cases?",
      "commit_id" : "0373038cedc07e3d775a1055c0da45f4e8fda2b7",
      "created_at" : "2018-09-15T09:48:27Z",
      "diff_hunk" : "@@ -117,6 +117,17 @@ jobs:\n         RUN_FUNCTIONAL_TESTS=false # Disabled for now, can be combined with the other x86_64 linux NO_DEPENDS job when functional tests pass the sanitizers\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=undefined CC=clang CXX=clang++\"\n+# x86_64 Linux (sanitizer: integer)\n+    - stage: test\n+      env: >-\n+        HOST=x86_64-unknown-linux-gnu\n+        PACKAGES=\"clang python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+        NO_DEPENDS=1\n+        RUN_BENCH=false\n+        UBSAN_OPTIONS=\"suppressions=../contrib/sanitizers-ubsan-integer.suppressions\"\n+        RUN_FUNCTIONAL_TESTS=false # Disabled for now, can be combined with the other x86_64 linux NO_DEPENDS job when functional tests pass the sanitizers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#discussion_r217881077",
      "id" : 217881077,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzg4MTA3Nw==",
      "original_commit_id" : "c65df56f68280a64dcc23f9d417c1605f9b82a18",
      "original_line" : 122,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : ".travis.yml",
      "position" : null,
      "pull_request_review_id" : 155709422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14224",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217881077/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2018-11-12T13:42:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217881077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14651](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14651.html) (Refactor: Fix compiler warning in prevector.h by ldm5180)\n* [#14605](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14605.html) (Return of the Banman by dongcarl)\n* [#14194](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14194.html) (Annotate unused parameters with [[maybe_unused]] by practicalswift)\n* [#13949](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13949.html) (Introduce MempoolObserver interface to break \"policy/fees -> txmempool -> policy/fees\" circular dependency by Empact)\n* [#13937](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13937.html) (Track best-possible-headers (TheBlueMatt) by Sjors)\n* [#13864](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13864.html) (validation: Document where we are intentionally ignoring bool return values from validation related functions by practicalswift)\n* [#13815](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13815.html) (util: Add [[nodiscard]] to all {Decode,Parse}[...](...) functions returning bool by practicalswift)\n* [#13804](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13804.html) (WIP: Transaction Pool Layer by MarcoFalke)\n* [#13062](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13062.html) (Make script interpreter independent from storage type CScript by sipa)\n* [#11535](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/11535.html) (Avoid unintentional unsigned integer wraparounds by practicalswift)\n* [#10729](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10729.html) (Wrap EvalScript in a ScriptExecution class by luke-jr)\n* [#10443](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10443.html) (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-09-15T12:44:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421564692",
      "id" : 421564692,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTU2NDY5Mg==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421564692/reactions"
      },
      "updated_at" : "2018-11-09T18:54:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421564692",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14224#discussion_r217886650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14224"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217886650"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I got it working locally but not on Travis which is a bit weird. I'm still investigating â the intention is to run also the functional tests under the sanitizer :-)",
      "commit_id" : "0373038cedc07e3d775a1055c0da45f4e8fda2b7",
      "created_at" : "2018-09-15T14:44:06Z",
      "diff_hunk" : "@@ -117,6 +117,17 @@ jobs:\n         RUN_FUNCTIONAL_TESTS=false # Disabled for now, can be combined with the other x86_64 linux NO_DEPENDS job when functional tests pass the sanitizers\n         GOAL=\"install\"\n         BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --enable-glibc-back-compat --enable-reduce-exports --with-gui=qt5 CPPFLAGS=-DDEBUG_LOCKORDER --with-sanitizers=undefined CC=clang CXX=clang++\"\n+# x86_64 Linux (sanitizer: integer)\n+    - stage: test\n+      env: >-\n+        HOST=x86_64-unknown-linux-gnu\n+        PACKAGES=\"clang python3-zmq qtbase5-dev qttools5-dev-tools libssl1.0-dev libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libprotobuf-dev protobuf-compiler libqrencode-dev\"\n+        NO_DEPENDS=1\n+        RUN_BENCH=false\n+        UBSAN_OPTIONS=\"suppressions=../contrib/sanitizers-ubsan-integer.suppressions\"\n+        RUN_FUNCTIONAL_TESTS=false # Disabled for now, can be combined with the other x86_64 linux NO_DEPENDS job when functional tests pass the sanitizers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#discussion_r217886650",
      "id" : 217886650,
      "in_reply_to_id" : 217881077,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzg4NjY1MA==",
      "original_commit_id" : "c65df56f68280a64dcc23f9d417c1605f9b82a18",
      "original_line" : 122,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : ".travis.yml",
      "position" : null,
      "pull_request_review_id" : 155715546,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14224",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217886650/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2018-11-12T13:42:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217886650",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "there are a few `#include<>` directives that changed order, was that deliberate?\r\nI take it the idea is to make new code that relies on unsigned wrap-around semantics to be annotated, and current annotations to be removed as code is fixed. Is that right?\r\nwould it make sense to use a different name for the macro? something like: `ALLOW_WRAPAROUND`.\r\n\r\nnit: technically unsigned integers don't overflow, all operators on unsigned have modulo-2 arithmetic, so all results will always fit in the resulting variable.",
      "created_at" : "2018-09-16T02:42:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421676888",
      "id" : 421676888,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTY3Njg4OA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421676888/reactions"
      },
      "updated_at" : "2018-09-16T02:42:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421676888",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/661450?v=4",
         "events_url" : "https://api.github.com/users/arvidn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/arvidn/followers",
         "following_url" : "https://api.github.com/users/arvidn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/arvidn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/arvidn",
         "id" : 661450,
         "login" : "arvidn",
         "node_id" : "MDQ6VXNlcjY2MTQ1MA==",
         "organizations_url" : "https://api.github.com/users/arvidn/orgs",
         "received_events_url" : "https://api.github.com/users/arvidn/received_events",
         "repos_url" : "https://api.github.com/users/arvidn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/arvidn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/arvidn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/arvidn"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Please don't just blindly permit existing cases that might actually be bugs. If we must do this with bypasses, the annotation macro should be different for cases where the modular arithmetic is intentional (e.g. hash functions) and where we're just silencing the warning in order to get something merged.",
      "created_at" : "2018-09-16T07:14:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421713875",
      "id" : 421713875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTcxMzg3NQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421713875/reactions"
      },
      "updated_at" : "2018-09-16T07:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421713875",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@arvidn `ALLOW_WRAPAROUND` is a much better name. Updated!\r\n\r\nYes, the include sorting was deliberate.\r\n\r\nYes, the idea is to make it so that new code that relies on unsigned wrap-around semantics is annotated. I've now added the following to the developer notes to clarify:\r\n\r\n> Do not rely on unsigned wrap-around semantics unless there are good reasons for doing so (e.g. hashing). Functions that rely on on unsigned wrap-around semantics should be annotated using `ALLOW_WRAPAROUND`.\r\n>- *Rationale*: Code relying on unsigned wrap-around semantics is legal and well-defined but error-prone.\r\n\r\nLooks good?",
      "created_at" : "2018-09-16T07:18:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421714404",
      "id" : 421714404,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTcxNDQwNA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421714404/reactions"
      },
      "updated_at" : "2018-09-16T07:18:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421714404",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't agree that it is error prone. I'm aware of no study which shows as much, and it's not my experience that _intentional_ use of modular arithmetic results in bugs.\r\n\r\nThe comment should state that intentional use of it needs to be annotated because unintended wraps are often bugs and we use instrumentation to look for those bugs.\r\n\r\nBut so long as the patch just papers over behaviour that is probably buggy-- or only not buggy by chance--, I think my position is NAK.\r\n\r\n",
      "created_at" : "2018-09-16T07:24:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421715160",
      "id" : 421715160,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTcxNTE2MA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421715160/reactions"
      },
      "updated_at" : "2018-09-16T07:24:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421715160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@gmaxwell The bulk of the existing ones were handled in #11535 which was submitted almost a year ago :-)\r\n\r\nMy main goal with this PR is to make sure we're not introducing new unintentional integer wrap arounds. Until #11535 is merged I'm afraid we need `ALLOW_WRAPAROUND` to make `-fsanitize=integer` pass, no?\r\n\r\nPlease advice on how to proceed :-)\r\n",
      "created_at" : "2018-09-16T07:24:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421715185",
      "id" : 421715185,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTcxNTE4NQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421715185/reactions"
      },
      "updated_at" : "2018-09-16T07:24:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421715185",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@gmaxwell Yes, _intentional_ use of wraparound semantics (e.g. hashing code) is obviously not problematic. I'll update the developer note to make that crystal clear.",
      "created_at" : "2018-09-16T07:27:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421715624",
      "id" : 421715624,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTcxNTYyNA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421715624/reactions"
      },
      "updated_at" : "2018-09-16T07:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421715624",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@gmaxwell \r\n\r\n> I don't agree that it is error prone. I'm aware of no study which shows as much\r\n\r\nFrom the paper \"Understanding Integer Overflow in C/C++\" co-authored by Regehr:\r\n\r\n_IOCâs instrumentation is designed to be semantically transparent for programs that conform to the C or C++ language standards, except in the case where a user requests additional checking for conforming but error-prone operations, e.g., wraparound with unsigned integer types._\r\n\r\n.-)\r\n",
      "created_at" : "2018-09-16T07:36:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421716641",
      "id" : 421716641,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTcxNjY0MQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421716641/reactions"
      },
      "updated_at" : "2018-09-16T07:37:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421716641",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@arvidn @gmaxwell Thanks for reviewing. I've now updated the developer notes and split the annotations in two as suggested by @gmaxwell: `ALLOW_WRAPAROUND` for intentional wraparounds and `WARNING_UNINTENTIONAL_WRAPAROUND` for unintentional wraparounds.\r\n\r\nCould you please re-review? :-)\r\n\r\nThese are the intentional wraparounds:\r\n\r\n```\r\n$ git grep ALLOW_WRAPAROUND -- \"*.cpp\" \"*.h\" \":(exclude)src/attributes.h\"\r\nsrc/bloom.cpp:ALLOW_WRAPAROUND static inline uint32_t RollingBloomHash(unsigned int nHashNum, uint32_t nTweak, const std::vector<unsigned char>& vDataToHash) {\r\nsrc/crypto/chacha20.cpp:ALLOW_WRAPAROUND void ChaCha20::Output(unsigned char* c, size_t bytes)\r\nsrc/crypto/ripemd160.cpp:ALLOW_WRAPAROUND void inline Round(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r)\r\nsrc/crypto/ripemd160.cpp:ALLOW_WRAPAROUND void Transform(uint32_t* s, const unsigned char* chunk)\r\nsrc/crypto/sha1.cpp:ALLOW_WRAPAROUND void inline Round(uint32_t a, uint32_t& b, uint32_t c, uint32_t d, uint32_t& e, uint32_t f, uint32_t k, uint32_t w)\r\nsrc/crypto/sha1.cpp:ALLOW_WRAPAROUND void Transform(uint32_t* s, const unsigned char* chunk)\r\nsrc/crypto/sha256.cpp:ALLOW_WRAPAROUND void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k)\r\nsrc/crypto/sha256.cpp:ALLOW_WRAPAROUND void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks)\r\nsrc/crypto/sha512.cpp:ALLOW_WRAPAROUND void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t& d, uint64_t e, uint64_t f, uint64_t g, uint64_t& h, uint64_t k, uint64_t w)\r\nsrc/crypto/sha512.cpp:ALLOW_WRAPAROUND void Transform(uint64_t* s, const unsigned char* chunk)\r\nsrc/hash.cpp:ALLOW_WRAPAROUND unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash)\r\nsrc/hash.cpp:ALLOW_WRAPAROUND CSipHasher& CSipHasher::Write(uint64_t data)\r\nsrc/hash.cpp:ALLOW_WRAPAROUND CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)\r\nsrc/hash.cpp:ALLOW_WRAPAROUND uint64_t CSipHasher::Finalize() const\r\nsrc/hash.cpp:ALLOW_WRAPAROUND uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val)\r\nsrc/hash.cpp:ALLOW_WRAPAROUND uint64_t SipHashUint256Extra(uint64_t k0, uint64_t k1, const uint256& val, uint32_t extra)\r\n```\r\n\r\nThese are the unintentional wraparounds:\r\n\r\n```\r\n$ git grep WARNING_UNINTENTIONAL_WRAPAROUND -- \"*.cpp\" \"*.h\" \":(exclude)src/attributes.h\"\r\nsrc/arith_uint256.h:    WARNING_UNINTENTIONAL_WRAPAROUND base_uint& operator++()\r\nsrc/bench/bench.h:    WARNING_UNINTENTIONAL_WRAPAROUND inline bool KeepRunning()\r\nsrc/chain.cpp:WARNING_UNINTENTIONAL_WRAPAROUND int64_t GetBlockProofEquivalentTime(const CBlockIndex& to, const CBlockIndex& from, const CBlockIndex& tip, const Consensus::Params& params)\r\nsrc/chain.h:    WARNING_UNINTENTIONAL_WRAPAROUND int Height() const {\r\nsrc/core_write.cpp:WARNING_UNINTENTIONAL_WRAPAROUND std::string FormatScript(const CScript& script)\r\nsrc/policy/fees.cpp:WARNING_UNINTENTIONAL_WRAPAROUND double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\r\nsrc/prevector.h:    WARNING_UNINTENTIONAL_WRAPAROUND reverse_iterator rbegin() { return reverse_iterator(item_ptr(size() - 1)); }\r\nsrc/prevector.h:    WARNING_UNINTENTIONAL_WRAPAROUND const_reverse_iterator rbegin() const { return const_reverse_iterator(item_ptr(size() - 1)); }\r\nsrc/script/interpreter.cpp:WARNING_UNINTENTIONAL_WRAPAROUND bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* serror)\r\nsrc/txmempool.cpp:WARNING_UNINTENTIONAL_WRAPAROUND void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)\r\nsrc/txmempool.cpp:WARNING_UNINTENTIONAL_WRAPAROUND void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)\r\nsrc/txmempool.cpp:WARNING_UNINTENTIONAL_WRAPAROUND void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount, int64_t modifySigOps)\r\nsrc/utilstrencodings.cpp:WARNING_UNINTENTIONAL_WRAPAROUND void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\r\nsrc/validation.cpp:WARNING_UNINTENTIONAL_WRAPAROUND DisconnectResult CChainState::DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view)\r\nsrc/validation.cpp:WARNING_UNINTENTIONAL_WRAPAROUND bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\r\nsrc/validation.cpp:WARNING_UNINTENTIONAL_WRAPAROUND bool LoadMempool(void)\r\n```\r\n\r\nLooks correct? :-)",
      "created_at" : "2018-09-16T13:04:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421762354",
      "id" : 421762354,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTc2MjM1NA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421762354/reactions"
      },
      "updated_at" : "2018-09-16T13:06:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421762354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@ken2812221 Now running also the functional tests and the quick bench test. Please re-review :-)",
      "created_at" : "2018-09-17T12:29:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-421995131",
      "id" : 421995131,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMTk5NTEzMQ==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421995131/reactions"
      },
      "updated_at" : "2018-09-17T12:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/421995131",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14224#discussion_r218094870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14224"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218094870"
         }
      },
      "author_association" : "NONE",
      "body" : "would it be unrealistic to fix all these before landing this patch, so this annotation is not needed?",
      "commit_id" : "0373038cedc07e3d775a1055c0da45f4e8fda2b7",
      "created_at" : "2018-09-17T14:37:40Z",
      "diff_hunk" : "@@ -439,6 +439,14 @@ General C++\n \n   - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n \n+- Do not rely on unsigned wrap-around semantics unless there are good reasons for doing so (e.g. hash functions).\n+  Functions that intentionally rely on unsigned wrap-around semantics should be annotated using `ALLOW_WRAPAROUND`.\n+  Functions that unintentionally trigger unsigned wrap-arounds should be annotated using\n+  `WARNING_UNINTENTIONAL_WRAPAROUND` while awaiting being fixed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#discussion_r218094870",
      "id" : 218094870,
      "line" : 450,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODA5NDg3MA==",
      "original_commit_id" : "9ce5e11584a08d5240e974e815f967d0beeeb078",
      "original_line" : 450,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : 7,
      "pull_request_review_id" : 155956980,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14224",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218094870/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2018-11-12T13:42:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218094870",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/661450?v=4",
         "events_url" : "https://api.github.com/users/arvidn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/arvidn/followers",
         "following_url" : "https://api.github.com/users/arvidn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/arvidn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/arvidn",
         "id" : 661450,
         "login" : "arvidn",
         "node_id" : "MDQ6VXNlcjY2MTQ1MA==",
         "organizations_url" : "https://api.github.com/users/arvidn/orgs",
         "received_events_url" : "https://api.github.com/users/arvidn/received_events",
         "repos_url" : "https://api.github.com/users/arvidn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/arvidn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/arvidn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/arvidn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14224#discussion_r218099806"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14224"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218099806"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@arvidn My main goal with this PR is to make it less likely that we introduce new unintentional wraparounds going forward, so I'll choose the quickest route to get this checked by Travis.\r\n\r\nThe progress in #11535 which fixes these cases has been quite slow during the last year, so perhaps it would make sense to first get this PR merged and then take on fixing `WARNING_UNINTENTIONAL_WRAPAROUND`? That way we get the much needed Travis checking sooner rather than later :-)",
      "commit_id" : "0373038cedc07e3d775a1055c0da45f4e8fda2b7",
      "created_at" : "2018-09-17T14:49:30Z",
      "diff_hunk" : "@@ -439,6 +439,14 @@ General C++\n \n   - *Rationale*: This avoids memory and resource leaks, and ensures exception safety\n \n+- Do not rely on unsigned wrap-around semantics unless there are good reasons for doing so (e.g. hash functions).\n+  Functions that intentionally rely on unsigned wrap-around semantics should be annotated using `ALLOW_WRAPAROUND`.\n+  Functions that unintentionally trigger unsigned wrap-arounds should be annotated using\n+  `WARNING_UNINTENTIONAL_WRAPAROUND` while awaiting being fixed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#discussion_r218099806",
      "id" : 218099806,
      "in_reply_to_id" : 218094870,
      "line" : 450,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODA5OTgwNg==",
      "original_commit_id" : "9ce5e11584a08d5240e974e815f967d0beeeb078",
      "original_line" : 450,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : 7,
      "pull_request_review_id" : 155963276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14224",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218099806/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2018-11-12T13:42:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218099806",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I've now changed this PR to only add annotations.\r\n\r\nThe Travis checking is added in #14252 independently of the annotations.\r\n\r\nAlso rebased.\r\n\r\n",
      "created_at" : "2018-09-21T13:06:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14224#issuecomment-423524356",
      "id" : 423524356,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14224",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyMzUyNDM1Ng==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/423524356/reactions"
      },
      "updated_at" : "2018-09-21T13:06:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/423524356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
