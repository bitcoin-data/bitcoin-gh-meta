[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18692878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18692878"
         }
      },
      "body" : "Nit: Just MIT",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-10T08:17:43Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18692878",
      "id" : 18692878,
      "original_commit_id" : "f9b84baf92709f986bfcf472a22a5fd296df2786",
      "original_position" : 3,
      "path" : "src/policy.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18692878",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18692897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18692897"
         }
      },
      "body" : "Nit: These need to go below our own headers.",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-10T08:18:09Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include <cmath>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18692897",
      "id" : 18692897,
      "original_commit_id" : "f9b84baf92709f986bfcf472a22a5fd296df2786",
      "original_position" : 8,
      "path" : "src/policy.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18692897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18692921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18692921"
         }
      },
      "body" : "The function name is now wrong, perhaps use ``__func__``!?",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-10T08:18:46Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include <cmath>\n+#include <string>\n+\n+#include \"amount.h\"\n+#include \"core.h\"\n+#include \"main.h\"\n+#include \"sync.h\"\n+#include \"txmempool.h\"\n+#include \"util.h\"\n+\n+bool CNodePolicy::AcceptTxPoolPreInputs(CTxMemPool& pool, CValidationState& state, const CTransaction& tx)\n+{\n+    // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n+    std::string reason;\n+    if (fRequireStandardTx && !IsStandardTx(tx, reason))\n+        return state.DoS(0,\n+                         error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18692921",
      "id" : 18692921,
      "original_commit_id" : "f9b84baf92709f986bfcf472a22a5fd296df2786",
      "original_position" : 24,
      "path" : "src/policy.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18692921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18692963"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18692963"
         }
      },
      "body" : "Same here ;).",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-10T08:19:40Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include <cmath>\n+#include <string>\n+\n+#include \"amount.h\"\n+#include \"core.h\"\n+#include \"main.h\"\n+#include \"sync.h\"\n+#include \"txmempool.h\"\n+#include \"util.h\"\n+\n+bool CNodePolicy::AcceptTxPoolPreInputs(CTxMemPool& pool, CValidationState& state, const CTransaction& tx)\n+{\n+    // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n+    std::string reason;\n+    if (fRequireStandardTx && !IsStandardTx(tx, reason))\n+        return state.DoS(0,\n+                         error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n+                         REJECT_NONSTANDARD, reason);\n+\n+    // Check for conflicts with in-memory transactions\n+    if (pool.lookupConflicts(tx, NULL))\n+    {\n+        // Disable replacement feature for now\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool CNodePolicy::AcceptTxWithInputs(CTxMemPool& pool, CValidationState& state, const CTransaction& tx, CCoinsViewCache& view)\n+{\n+    // Check for non-standard pay-to-script-hash in inputs\n+    if (fRequireStandardTx && !AreInputsStandard(tx, view))\n+        return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n+\n+    // Check that the transaction doesn't have an excessive number of\n+    // sigops, making it impossible to mine. Since the coinbase transaction\n+    // itself can contain sigops MAX_TX_SIGOPS is less than\n+    // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n+    // merely non-standard transaction.\n+    unsigned int nSigOps = GetLegacySigOpCount(tx);\n+    nSigOps += GetP2SHSigOpCount(tx, view);\n+    if (nSigOps > MAX_TX_SIGOPS)\n+        return state.DoS(0,\n+                         error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18692963",
      "id" : 18692963,
      "original_commit_id" : "f9b84baf92709f986bfcf472a22a5fd296df2786",
      "original_position" : 52,
      "path" : "src/policy.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18692963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18692990"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18692990"
         }
      },
      "body" : "Also just MIT",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-10T08:20:34Z",
      "diff_hunk" : "@@ -0,0 +1,36 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18692990",
      "id" : 18692990,
      "original_commit_id" : "f9b84baf92709f986bfcf472a22a5fd296df2786",
      "original_position" : 2,
      "path" : "src/policy.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18692990",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18693034"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18693034"
         }
      },
      "body" : "Why are all of these not using paramater names?",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-10T08:21:51Z",
      "diff_hunk" : "@@ -0,0 +1,36 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_H\n+#define BITCOIN_POLICY_H\n+\n+class CCoinsViewCache;\n+class CTransaction;\n+class CTxMemPool;\n+class CTxMemPoolEntry;\n+class CValidationState;\n+\n+class CNodePolicyBase\n+{\n+public:\n+    virtual bool AcceptTxPoolPreInputs(CTxMemPool& pool, CValidationState&, const CTransaction&) = 0;\n+    virtual bool AcceptTxWithInputs(CTxMemPool& pool, CValidationState&, const CTransaction&, CCoinsViewCache&) = 0;\n+    virtual bool AcceptMemPoolEntry(CTxMemPool& pool, CValidationState&, CTxMemPoolEntry&, CCoinsViewCache&, bool& fRateLimit) = 0;\n+    virtual bool RateLimitTx(CTxMemPool& pool, CValidationState&, CTxMemPoolEntry&, CCoinsViewCache&) = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18693034",
      "id" : 18693034,
      "original_commit_id" : "f9b84baf92709f986bfcf472a22a5fd296df2786",
      "original_position" : 20,
      "path" : "src/policy.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18693034",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18698211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18698211"
         }
      },
      "body" : "Just copying it from main.cpp, where the code came from. If you want it changed here, make a convincing argument to change it there first.",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-10T10:25:10Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18698211",
      "id" : 18698211,
      "original_commit_id" : "f9b84baf92709f986bfcf472a22a5fd296df2786",
      "original_position" : 3,
      "path" : "src/policy.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18698211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739071"
         }
      },
      "body" : "There's nothing meaningful to expand on beyond the type...",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-11T03:36:41Z",
      "diff_hunk" : "@@ -0,0 +1,36 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_H\n+#define BITCOIN_POLICY_H\n+\n+class CCoinsViewCache;\n+class CTransaction;\n+class CTxMemPool;\n+class CTxMemPoolEntry;\n+class CValidationState;\n+\n+class CNodePolicyBase\n+{\n+public:\n+    virtual bool AcceptTxPoolPreInputs(CTxMemPool& pool, CValidationState&, const CTransaction&) = 0;\n+    virtual bool AcceptTxWithInputs(CTxMemPool& pool, CValidationState&, const CTransaction&, CCoinsViewCache&) = 0;\n+    virtual bool AcceptMemPoolEntry(CTxMemPool& pool, CValidationState&, CTxMemPoolEntry&, CCoinsViewCache&, bool& fRateLimit) = 0;\n+    virtual bool RateLimitTx(CTxMemPool& pool, CValidationState&, CTxMemPoolEntry&, CCoinsViewCache&) = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739071",
      "id" : 18739071,
      "original_commit_id" : "f9b84baf92709f986bfcf472a22a5fd296df2786",
      "original_position" : 20,
      "path" : "src/policy.h",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739071",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739293"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739293"
         }
      },
      "body" : "Why bother with `fRateLimit/fLimitFree` at all here, since the logic boils down to:\r\n\r\n`fRateLimit = !fLimitFree ? false : false`\r\n\r\nYou could just write:\r\n``` c++\r\nif (!policy.AcceptMemPoolEntry(pool, state, entry, view, false))\r\n    return false;\r\n\r\nif (!policy.RateLimitTx(pool, state, entry, view))\r\n    return false;\r\n```\r\n\r\nIs it the idea that more behaviour will be added here or?",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-11T04:33:12Z",
      "diff_hunk" : "@@ -875,67 +858,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n         }\n \n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n-\n-        // Check that the transaction doesn't have an excessive number of\n-        // sigops, making it impossible to mine. Since the coinbase transaction\n-        // itself can contain sigops MAX_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n-        // merely non-standard transaction.\n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n-        if (nSigOps > MAX_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n-\n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n+        if (!policy.AcceptTxWithInputs(pool, state, tx, view))\n+            return false;\n+\n+        CAmount nFees = view.GetTxFees(tx);\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n-        unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Continuously rate-limit free (really, very-low-fee)transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n-        }\n+        bool fRateLimit = false;\n+        if (!policy.AcceptMemPoolEntry(pool, state, entry, view, fRateLimit))\n+            return false;\n+        if (!fLimitFree)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739293",
      "id" : 18739293,
      "original_commit_id" : "7c9d476086a398f9b2c00c816598d1294ff937ec",
      "original_position" : 127,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739293",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739295"
         }
      },
      "body" : "Not all transactions should be rate limited, for different reasons, some of which are policy (contracts with retailers?), some of which are not (local user manually wants to broadcast a transaction).",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-11T04:33:47Z",
      "diff_hunk" : "@@ -875,67 +858,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n         }\n \n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n-\n-        // Check that the transaction doesn't have an excessive number of\n-        // sigops, making it impossible to mine. Since the coinbase transaction\n-        // itself can contain sigops MAX_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n-        // merely non-standard transaction.\n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n-        if (nSigOps > MAX_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n-\n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n+        if (!policy.AcceptTxWithInputs(pool, state, tx, view))\n+            return false;\n+\n+        CAmount nFees = view.GetTxFees(tx);\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n-        unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Continuously rate-limit free (really, very-low-fee)transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n-        }\n+        bool fRateLimit = false;\n+        if (!policy.AcceptMemPoolEntry(pool, state, entry, view, fRateLimit))\n+            return false;\n+        if (!fLimitFree)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739295",
      "id" : 18739295,
      "original_commit_id" : "7c9d476086a398f9b2c00c816598d1294ff937ec",
      "original_position" : 127,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739300"
         }
      },
      "body" : "Notice fRateLimit is passed to AcceptMemPoolEntry by reference, and it may (and does in some cases by default) change it.",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-11T04:34:57Z",
      "diff_hunk" : "@@ -875,67 +858,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n         }\n \n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n-\n-        // Check that the transaction doesn't have an excessive number of\n-        // sigops, making it impossible to mine. Since the coinbase transaction\n-        // itself can contain sigops MAX_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n-        // merely non-standard transaction.\n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n-        if (nSigOps > MAX_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n-\n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n+        if (!policy.AcceptTxWithInputs(pool, state, tx, view))\n+            return false;\n+\n+        CAmount nFees = view.GetTxFees(tx);\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n-        unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Continuously rate-limit free (really, very-low-fee)transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n-        }\n+        bool fRateLimit = false;\n+        if (!policy.AcceptMemPoolEntry(pool, state, entry, view, fRateLimit))\n+            return false;\n+        if (!fLimitFree)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739300",
      "id" : 18739300,
      "original_commit_id" : "7c9d476086a398f9b2c00c816598d1294ff937ec",
      "original_position" : 127,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739300",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739311"
         }
      },
      "body" : "~~Is this meant to be `true`?~~",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-11T04:37:03Z",
      "diff_hunk" : "@@ -875,67 +858,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n         }\n \n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n-\n-        // Check that the transaction doesn't have an excessive number of\n-        // sigops, making it impossible to mine. Since the coinbase transaction\n-        // itself can contain sigops MAX_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n-        // merely non-standard transaction.\n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n-        if (nSigOps > MAX_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n-\n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n+        if (!policy.AcceptTxWithInputs(pool, state, tx, view))\n+            return false;\n+\n+        CAmount nFees = view.GetTxFees(tx);\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n-        unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Continuously rate-limit free (really, very-low-fee)transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n-        }\n+        bool fRateLimit = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739311",
      "id" : 18739311,
      "original_commit_id" : "7c9d476086a398f9b2c00c816598d1294ff937ec",
      "original_position" : 124,
      "path" : "src/main.cpp",
      "position" : 124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739311",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739319"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739319"
         }
      },
      "body" : "No, it's only potentially set to true inside AcceptMemPoolEntry",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-11T04:38:11Z",
      "diff_hunk" : "@@ -875,67 +858,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n         }\n \n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n-\n-        // Check that the transaction doesn't have an excessive number of\n-        // sigops, making it impossible to mine. Since the coinbase transaction\n-        // itself can contain sigops MAX_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n-        // merely non-standard transaction.\n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n-        if (nSigOps > MAX_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n-\n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n+        if (!policy.AcceptTxWithInputs(pool, state, tx, view))\n+            return false;\n+\n+        CAmount nFees = view.GetTxFees(tx);\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n-        unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Continuously rate-limit free (really, very-low-fee)transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n-        }\n+        bool fRateLimit = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739319",
      "id" : 18739319,
      "original_commit_id" : "7c9d476086a398f9b2c00c816598d1294ff937ec",
      "original_position" : 124,
      "path" : "src/main.cpp",
      "position" : 124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739319",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739327"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739327"
         }
      },
      "body" : "Right, the pass by reference was what I was missing.  LGTM then.",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-11T04:39:45Z",
      "diff_hunk" : "@@ -875,67 +858,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n         }\n \n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n-\n-        // Check that the transaction doesn't have an excessive number of\n-        // sigops, making it impossible to mine. Since the coinbase transaction\n-        // itself can contain sigops MAX_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n-        // merely non-standard transaction.\n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n-        if (nSigOps > MAX_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n-\n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n+        if (!policy.AcceptTxWithInputs(pool, state, tx, view))\n+            return false;\n+\n+        CAmount nFees = view.GetTxFees(tx);\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n-        unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Continuously rate-limit free (really, very-low-fee)transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n-        }\n+        bool fRateLimit = false;\n+        if (!policy.AcceptMemPoolEntry(pool, state, entry, view, fRateLimit))\n+            return false;\n+        if (!fLimitFree)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739327",
      "id" : 18739327,
      "original_commit_id" : "7c9d476086a398f9b2c00c816598d1294ff937ec",
      "original_position" : 127,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739327",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739392"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739392"
         }
      },
      "body" : "I agree this feels confusing. I wonder if it ought to be moved onto CValidationState so any step of the process can set it?",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-11T04:53:20Z",
      "diff_hunk" : "@@ -875,67 +858,27 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Bring the best block into scope\n         view.GetBestBlock();\n \n-        nValueIn = view.GetValueIn(tx);\n-\n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n         }\n \n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().RequireStandard() && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: : nonstandard transaction input\");\n-\n-        // Check that the transaction doesn't have an excessive number of\n-        // sigops, making it impossible to mine. Since the coinbase transaction\n-        // itself can contain sigops MAX_TX_SIGOPS is less than\n-        // MAX_BLOCK_SIGOPS; we still consider this an invalid rather than\n-        // merely non-standard transaction.\n-        unsigned int nSigOps = GetLegacySigOpCount(tx);\n-        nSigOps += GetP2SHSigOpCount(tx, view);\n-        if (nSigOps > MAX_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n-\n-        CAmount nValueOut = tx.GetValueOut();\n-        CAmount nFees = nValueIn-nValueOut;\n+        if (!policy.AcceptTxWithInputs(pool, state, tx, view))\n+            return false;\n+\n+        CAmount nFees = view.GetTxFees(tx);\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n-        unsigned int nSize = entry.GetTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n-        if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n-\n-        // Continuously rate-limit free (really, very-low-fee)transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < ::minRelayTxFee.GetFee(nSize))\n-        {\n-            static CCriticalSection csFreeLimiter;\n-            static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n-        }\n+        bool fRateLimit = false;\n+        if (!policy.AcceptMemPoolEntry(pool, state, entry, view, fRateLimit))\n+            return false;\n+        if (!fLimitFree)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18739392",
      "id" : 18739392,
      "original_commit_id" : "7c9d476086a398f9b2c00c816598d1294ff937ec",
      "original_position" : 127,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18739392",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18748941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18748941"
         }
      },
      "body" : "Why do we even need an object for policy? isnt it all static?\r\nMaybe best to just do a Params()-style Policy()?",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-12T18:02:42Z",
      "diff_hunk" : "@@ -55,6 +56,7 @@ unsigned int nCoinCacheSize = 5000;\n CFeeRate minRelayTxFee = CFeeRate(1000);\n \n CTxMemPool mempool(::minRelayTxFee);\n+CNodePolicy policy;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18748941",
      "id" : 18748941,
      "original_commit_id" : "752418d7906b2900f9493e6ab999904f31db94eb",
      "original_position" : 12,
      "path" : "src/main.cpp",
      "position" : 12,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18748941",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18748953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18748953"
         }
      },
      "body" : "All files need changing, but instead of doing it all at once, we're just changing it as files are updated. Please use just MIT.",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-12T18:04:36Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18748953",
      "id" : 18748953,
      "original_commit_id" : "f9b84baf92709f986bfcf472a22a5fd296df2786",
      "original_position" : 3,
      "path" : "src/policy.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18748953",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=3",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18749411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18749411"
         }
      },
      "body" : "This has been discussed already. I though we had merged a PR changing everything to just MIT already.\r\nThat would be simpler than warning people every time they copy the license from an outdated place.",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-12T19:15:25Z",
      "diff_hunk" : "@@ -0,0 +1,103 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18749411",
      "id" : 18749411,
      "original_commit_id" : "f9b84baf92709f986bfcf472a22a5fd296df2786",
      "original_position" : 3,
      "path" : "src/policy.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18749411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18749436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18749436"
         }
      },
      "body" : "~~A params-style global hidden behind a function you mean?\r\nI prefer a class.~~\r\n",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-12T19:18:09Z",
      "diff_hunk" : "@@ -55,6 +56,7 @@ unsigned int nCoinCacheSize = 5000;\n CFeeRate minRelayTxFee = CFeeRate(1000);\n \n CTxMemPool mempool(::minRelayTxFee);\n+CNodePolicy policy;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18749436",
      "id" : 18749436,
      "original_commit_id" : "752418d7906b2900f9493e6ab999904f31db94eb",
      "original_position" : 12,
      "path" : "src/main.cpp",
      "position" : 12,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-12-29T21:48:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18749436",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Idea ACK. @petertodd should also like this since he was positive about it when I proposed in #4298\r\nOn the class name, why not just CPolicy? Maybe better CStandardPolicy if we're going to later add an abstract CPolicy that CStandardPolicy (and maybe CReplaceByFeePolicy) derive from.\r\nMore things out of main.o, yes!",
      "created_at" : "2014-10-12T19:24:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#issuecomment-58818109",
      "id" : 58818109,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5071",
      "updated_at" : "2014-10-12T19:24:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/58818109",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18749486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18749486"
         }
      },
      "body" : "I don't think this should be called here. This should be in policy.cpp and the field in Policy is not really required.",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-12T19:25:48Z",
      "diff_hunk" : "@@ -650,6 +650,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n     const char* pszP2SH = \"/P2SH/\";\n     COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n \n+    policy.fRequireStandardTx = Params().RequireStandard();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18749486",
      "id" : 18749486,
      "original_commit_id" : "752418d7906b2900f9493e6ab999904f31db94eb",
      "original_position" : 4,
      "path" : "src/init.cpp",
      "position" : 4,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18749486",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "It would be easier to review if you first just moved code as functions with a move-only commit (without indentations) and then created the class and cleaned up. Like @jgarzik did in #4646",
      "created_at" : "2014-10-12T19:27:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#issuecomment-58818265",
      "id" : 58818265,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5071",
      "updated_at" : "2014-10-12T19:35:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/58818265",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18750745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18750745"
         }
      },
      "body" : "@TheBlueMatt It isn't inherently static. It might be nice to one day have nodes with multiple policies, using different ones based on transaction sources and mempools...",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-12T22:32:44Z",
      "diff_hunk" : "@@ -55,6 +56,7 @@ unsigned int nCoinCacheSize = 5000;\n CFeeRate minRelayTxFee = CFeeRate(1000);\n \n CTxMemPool mempool(::minRelayTxFee);\n+CNodePolicy policy;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r18750745",
      "id" : 18750745,
      "original_commit_id" : "752418d7906b2900f9493e6ab999904f31db94eb",
      "original_position" : 12,
      "path" : "src/main.cpp",
      "position" : 12,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/18750745",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r19380035"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19380035"
         }
      },
      "body" : "This has to be called here. When CNodePolicy is initialised, Policy() might not have been yet.",
      "commit_id" : "3b61d6813f204b913ff8fe435f37c16fe643f95c",
      "created_at" : "2014-10-26T09:14:02Z",
      "diff_hunk" : "@@ -650,6 +650,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n     const char* pszP2SH = \"/P2SH/\";\n     COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH));\n \n+    policy.fRequireStandardTx = Params().RequireStandard();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#discussion_r19380035",
      "id" : 19380035,
      "original_commit_id" : "752418d7906b2900f9493e6ab999904f31db94eb",
      "original_position" : 4,
      "path" : "src/init.cpp",
      "position" : 4,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5071",
      "updated_at" : "2014-10-26T09:26:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19380035",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "Rebased with requested changes.",
      "created_at" : "2014-10-26T09:28:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#issuecomment-60511547",
      "id" : 60511547,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5071",
      "updated_at" : "2014-10-26T09:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/60511547",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "Needs rebase. On top of #5521 ?\r\nAs said I would avoid the boolean attribute, it doesn't accomplish its goal of decoupling chainparams from policy.\r\n",
      "created_at" : "2014-12-21T13:01:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#issuecomment-67769744",
      "id" : 67769744,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5071",
      "updated_at" : "2014-12-21T13:04:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/67769744",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Here's a rebased version (not on top of #5521): https://github.com/jtimon/bitcoin/commits/nodepolicy_old",
      "created_at" : "2014-12-29T22:00:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#issuecomment-68307974",
      "id" : 68307974,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5071",
      "updated_at" : "2014-12-29T22:00:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68307974",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Here's a version rebased on top of #5114: https://github.com/jtimon/bitcoin/tree/nodepolicy_dust\r\nHere's a version rebased on top of #5114 and #5521: https://github.com/jtimon/bitcoin/tree/nodepolicy_5521_dust\r\nAnd, finally, here's a version on top of the updated #5180: https://github.com/jtimon/bitcoin/tree/nodepolicy_5180\r\n",
      "created_at" : "2014-12-30T01:30:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#issuecomment-68322099",
      "id" : 68322099,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5071",
      "updated_at" : "2014-12-30T01:30:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/68322099",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Closing.  No ACKs after a while, and it is intertwined with otherwise fast-moving policy code changes getting merged into the tree.\r\n\r\nIf this is in error, it can always be re-opened.\r\n",
      "created_at" : "2015-07-23T18:23:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5071#issuecomment-124195918",
      "id" : 124195918,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5071",
      "updated_at" : "2015-07-23T18:23:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124195918",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   }
]
