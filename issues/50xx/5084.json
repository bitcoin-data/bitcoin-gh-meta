{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "We are all aware of alternative implementations of the bitcoin protocol. I've even helped personally implement [two](https://github.com/indutny/bcoin) of [them](https://github.com/bitpay/bitcore). There is an obvious fundamental problem with all alternative implementations that I'm sure everyone here sees: They're not bug-for-bug compatible with Satoshi's original implementation.\n\nAs we see more and more production platforms ([BitPay](https://bitpay.com/), [Coinbase](https://www.coinbase.com/), [Circle](https://www.circle.com/), [Blockchain](https://blockchain.info/), etc.) that _absolutely_ depend on the adamant stability of their platform, with **so** much at stake, it is imperative that their backend protocol implementation be 100% compatible with the original protocol. That is non-trivial, and maybe even impossible to do with an alternative implementation.\n\nPlatforms and services like this are forced to use bitcoind as a backend on their servers if they want stability. Using just bitcoind with RPC calls has a number of limitations and hurdles.\n\n---\n\nThis pull request alters the autoconf files to allow something like this:\n\n``` bash\n$ git clone git://github.com/bitcoin/bitcoin.git\n$ cd bitcoin\n$ ./autogen.sh\n$ ./configure --enable-daemonlib\n$ make\n...\n$ ls -la src/libbitcoind.so\n```\n\nAny program, or binding for a platform (python, php, node.js, ruby, etc), can now link to the official bitcoin implementation. Luckily bitcoind decided not to use `static` functions and put function templates in every header file, which means linkage to any function in bitcoind should be fairly easily as every function is exposed to the program which links to it.\n## An Example\n\n``` bash\n# Write a program which links to libbitcoind\necho '#include \"bitcoind.h\"' > my_program.cc\necho '#include \"...\"' >> my_program.cc\necho 'extern bool AppInit(int, char **);' >> my_program.cc\necho 'int main(int argc, char **argv) {' >> my_program.cc\necho '  return AppInit(argc, argv) ? 0 : 1;' >> my_program.cc\necho '}' >> my_program.cc\n\n# Compile our program\ngcc -I$HOME/bitcoin/src -I$HOME/bitcoin/src/obj \\\n  -I$HOME/bitcoin/src/config -I$HOME/bitcoin/src/leveldb/include \\\n  -DHAVE_CONFIG_H -g -O2 -fexceptions -frtti -fpermissive \\\n  -o my_program my_program.cc \\\n  -lboost_system -lboost_filesystem -lboost_program_options \\\n  -lboost_thread -lboost_chrono -lssl -lcrypto \\\n  $HOME/bitcoin/src/libbitcoind.so\n\n# Start our process\n./my_program -server -daemon\n\n# Bitcoind logs should be spitting out\ntail -f ~/.bitcoin/debug.log\n```\n\nA contrived example: Obviously this capability would most likely be used to link to different platforms' modules/bindings with that binding being dynamically loaded into python's/node.js'/php's/ruby's memory.\n### A More Complete Example\n\nAt BitPay, I have written a fully fledged node.js binding which links to `libbitcoind.so` and can do almost anything an alternative bitcoin implementation can do. It is called [bitcoind.js](https://github.com/bitpay/bitcoind.js).\n\nFeel free to examine the [documentation](https://github.com/bitpay/bitcoind.js/blob/master/README.md#documentation) and [source](https://github.com/bitpay/bitcoind.js/blob/master/src/bitcoindjs.cc) to see the actual [benefits](https://github.com/bitpay/bitcoind.js/blob/master/lib/bitcoind.js) something like this would provide.\n## What this PR does:\n- Moves `main()` out of `bitcoind.cpp` and into `bitcoind_main.cpp`. Moves all includes and variables out of `bitcoind.cpp` and into `bitcoind.h` so it can be included by both `bitcoind.cpp` and `bitcoind_main.cpp` if necessary.\n- Exposes two or three functions in header files which will be useful for different platforms linking to libbitcoind. This required creating an `rpcwallet.h` header file.\n- Adds `--enable-daemonlib` argument to `configure.ac` - this enables `-fPIC` for all object files instead of -`fPIE`. It also sets an AM conditional which is checked for in the automake file. Also resets `-fvisibility` to its default.\n- When compiling the library, automake makes use of this `AM_CONDITIONAL` such that targets are overridden by one `all:` target compiling the library, and bitcoin-qt(+tests) is ignored.\n- Now that all object files can be compiled as position independent code, the custom `Makefile` target I've added (vanilla Make syntax - I'm sure automake can do something fancier and compile a shared object through the help of libtool, but I couldn't manage to make it work) can link these object files together into `libbitcoind.so` with `-shared -fPIC`.\n## Issues and potential annoyances:\n\nI figure I'll address these since I'm fairly certain these questions will be raised.\n- If you want to compile bitcoind or bitcoin-qt, the object files compiled for libbitcoind are essentially useless since they're not `-fPIE`. You have to clean and recompile for scratch.\n- Since bitcoind was never structured like a proper library, it's essentially one big mess: there is logging and arg parsing all over the place. A coder's best bet is to write their own stripped down version of `AppInit2()` which starts up the net.cpp threads and listens for `RequestShutdown`, eventually joining all threads. Currently, bitcoind.js simply starts up `AppInit2()` on a separate thread.\n- Name Mangling: Node.js module bindings are written in C++. Lua and Ruby bindings are canonically written in C, which means in order to use libbitcoind without guessing bizarre function names, functions will have to be exposed with `extern \"C\"` on non-OO functions to force the stopping of mangled names. Of course, the workaround would be for Lua and Ruby users to write a C++ wapper and then link to them from their C binding.\n- Internal API: When I first started writing bitcoind.js, I forked bitcoin v0.9.0 and turned it into a shared library. Once I rebased it onto the latest master, a lot of functions had changed and took differen params, a lot of classes were changed or added. I had to rewrite several functions. Any program depending on libbitcoind.so will have to deal with this as bitcoind is developed since it is not developed like a library.\n- The Build: I'm sure there's a slicker way to compile this as an `.so`. I'm really not an Automake guru. I've fooled around a bit with the build here, but at the end of the day, someone smarter than me could probably do a better job at writing a `src/Makefile.daemon.include`.\n  \n  The `noinst_LIBRARIES` libraries and other magical features of automake are simply ignored when `--enable-daemonlib` is used. The .mm.o target compiles all the object files necessary to link them up into a shared library with a vanilla make target.\n- Platforms: I'm not terribly familiar with OSX, but right now, I've only tested this build on Linux (Arch). I've had two friends try to build on OSX with unfortunate results that were apparently common in trying to compile bitcoind on OSX. I'm still unsure if this will work with Macintoshes. I have even less of an idea of how windows works compared to OSX.  Maybe it could be made into a `.dll` somehow.\n## The Score\n\nThere may be better ways of doing this, but I think if the future of bitcoin and the bitcoin world is to be a bright one, bitcoind _needs_ to be reshaped into an optional library in some form. I don't only speak on behalf of my employer here ([BitPay](https://bitpay.com/)), even though I'm sure we all agree. This also happens to be my personal opinion on the matter.\n\nI open this to discussion. I'm willing to do whatever it takes to make Bitcoin into a library.\n",
   "closed_at" : "2014-11-20T15:22:09Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
      "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/laanwj/followers",
      "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/laanwj",
      "id" : 126646,
      "login" : "laanwj",
      "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
      "organizations_url" : "https://api.github.com/users/laanwj/orgs",
      "received_events_url" : "https://api.github.com/users/laanwj/received_events",
      "repos_url" : "https://api.github.com/users/laanwj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/laanwj"
   },
   "comments" : 26,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5084/comments",
   "created_at" : "2014-10-13T23:17:05Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5084/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/5084",
   "id" : 45696201,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5084/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0MjI2Nzg2MTg=",
   "number" : 5084,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/5084.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/5084",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/5084.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/5084"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Allow compiling bitcoind as a shared library: libbitcoind.so",
   "updated_at" : "2014-11-20T15:22:09Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/5084",
   "user" : {
      "avatar_url" : "https://avatars2.githubusercontent.com/u/470564?v=4",
      "events_url" : "https://api.github.com/users/chjj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/chjj/followers",
      "following_url" : "https://api.github.com/users/chjj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/chjj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/chjj",
      "id" : 470564,
      "login" : "chjj",
      "node_id" : "MDQ6VXNlcjQ3MDU2NA==",
      "organizations_url" : "https://api.github.com/users/chjj/orgs",
      "received_events_url" : "https://api.github.com/users/chjj/received_events",
      "repos_url" : "https://api.github.com/users/chjj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/chjj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/chjj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/chjj"
   }
}
