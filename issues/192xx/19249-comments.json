[
   {
      "author_association" : "MEMBER",
      "body" : "@ajtowns @practicalswift @ryanofsky Mind reviewing this PR?",
      "created_at" : "2020-06-11T14:34:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642698927",
      "id" : 642698927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjY5ODkyNw==",
      "updated_at" : "2020-06-11T14:34:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642698927",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Please adjust the minimum clang version to https://releases.llvm.org/3.6.0/tools/clang/docs/ThreadSafetyAnalysis.html#negative\r\n\r\nThis should be uncontroversial, because even debian oldoldstable comes with clang-4 https://packages.debian.org/jessie/clang-4.0",
      "created_at" : "2020-06-11T14:40:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642702615",
      "id" : 642702615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjcwMjYxNQ==",
      "updated_at" : "2020-06-11T14:40:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642702615",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, but we'll have to opt-in to `-Wthread-safety-negative` (+ `-Werror=thread-safety-negative` in Travis) to get the benefit of those annotations? :)\r\n\r\nCan you add a temporary test case to verify that Travis catches an example incorrect lock?",
      "created_at" : "2020-06-11T15:07:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642722320",
      "id" : 642722320,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjcyMjMyMA==",
      "updated_at" : "2020-06-11T15:07:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642722320",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n> Concept ACK. Please adjust the minimum clang version to https://releases.llvm.org/3.6.0/tools/clang/docs/ThreadSafetyAnalysis.html#negative\r\n> \r\n> This should be uncontroversial, because even debian oldoldstable comes with clang-4 https://packages.debian.org/jessie/clang-4.0\r\n\r\nThis feature lives since the Clang version 3.5.0: https://github.com/llvm/llvm-project/commit/3efd0495a0813896e1559e532c5d9e581dd48c0e\r\n\r\nPlease note that the Clang version checking is required not only for this PR changes but also for all subsequent adding of  `EXCLUSIVE_LOCKS_REQUIRED(!mutex)` (see #19238).\r\n\r\nWould it be a rational decision to bump the minimum required Clang version from the current 3.3 to 3.5?",
      "created_at" : "2020-06-11T15:22:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642732970",
      "id" : 642732970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjczMjk3MA==",
      "updated_at" : "2020-06-11T15:22:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642732970",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Yes, as I said this should be uncontroversial, as all supported operating systems come with at least clang-4.0 (oldoldstable debian)",
      "created_at" : "2020-06-11T15:30:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642737626",
      "id" : 642737626,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjczNzYyNg==",
      "updated_at" : "2020-06-11T15:30:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642737626",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift \r\n> Concept ACK, but we'll have to opt-in to `-Wthread-safety-negative` (+ `-Werror=thread-safety-negative` in Travis) to get the benefit of those annotations? :)\r\n\r\nNot exactly :)\r\n\r\n`-Wthread-safety-negative` warns about absent negative annotations. It will be quite noisy in the current state of the code base. But it is our goal.\r\n\r\nWithout `-Wthread-safety-negative` the already added negative annotations work as expected (see: #19238).\r\n\r\n> Can you add a temporary test case to verify that Travis catches an example incorrect lock?\r\n\r\nDone in #19251.",
      "created_at" : "2020-06-11T15:43:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642752931",
      "id" : 642752931,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mjc1MjkzMQ==",
      "updated_at" : "2020-06-11T15:43:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642752931",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift \r\nThe first error catch: https://travis-ci.org/github/bitcoin/bitcoin/jobs/697279768#L3640",
      "created_at" : "2020-06-11T15:57:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642767429",
      "id" : 642767429,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mjc2NzQyOQ==",
      "updated_at" : "2020-06-11T15:57:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642767429",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n> Yes, as I said this should be uncontroversial, as all supported operating systems come with at least clang-4.0 (oldoldstable debian)\r\n\r\nhttps://packages.debian.org/jessie/clang:\r\n> Package: clang (1:3.5-25) ",
      "created_at" : "2020-06-11T16:38:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642797415",
      "id" : 642797415,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mjc5NzQxNQ==",
      "updated_at" : "2020-06-11T16:38:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642797415",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "https://packages.debian.org/jessie/clang-4.0",
      "created_at" : "2020-06-11T16:51:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642805267",
      "id" : 642805267,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjgwNTI2Nw==",
      "updated_at" : "2020-06-11T16:51:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642805267",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Also, I agree with @practicalswift that this should be added to the default flags. Otherwise it misses the whole point of helping developers write better code. There should not be a single negative annotation in our code, so there can't be any warnings. What am I missing?",
      "created_at" : "2020-06-11T17:01:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642810600",
      "id" : 642810600,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjgxMDYwMA==",
      "updated_at" : "2020-06-11T17:01:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642810600",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Also, I agree with @practicalswift that this should be added to the default flags. Otherwise it misses the whole point of helping developers write better code. There should not be a single negative annotation in our code, so there can't be any warnings. What am I missing?\r\n\r\nAll classes and free functions that use mutexes are required to be modernized as it done with the `CAddrMan` class in #19238. Only after that the `-Wthread-safety-negative` flag will be usable and useful without spammy warnings.\r\n\r\nAt the end of this way there is a hope to get rid of `RecursiveMutex`s completely.",
      "created_at" : "2020-06-11T17:14:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642819030",
      "id" : 642819030,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjgxOTAzMA==",
      "updated_at" : "2020-06-11T17:16:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642819030",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke @practicalswift \r\nOn the first stage, I see Negative Capabilities as a tool to refactor `RecursiveMutex`s into `Mutex`s with deadlock-free guaranties, and to verify the refactoring is done correctly.\r\n\r\nThe next stage is as @practicalswift said:\r\n\r\n> Concept ACK, but we'll have to opt-in to `-Wthread-safety-negative` (+ `-Werror=thread-safety-negative` in Travis) to get the benefit of those annotations? :)",
      "created_at" : "2020-06-11T17:24:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642823797",
      "id" : 642823797,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjgyMzc5Nw==",
      "updated_at" : "2020-06-11T17:25:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642823797",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Just to clarify with an example why `EXCLUSIVE_LOCKS_REQUIRED(!m)` makes sense without `-Wthread-safety-negative` (I added a buggy function `f()` which calls `size()` while holding the mutex):\r\n\r\n```c++\r\n556     size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\r\n557     {\r\n558         LOCK(m_addrman_mutex); // TODO: Cache this in an atomic to avoid this overhead\r\n559         return sizeNonLockerHelper();\r\n560     }\r\n561 \r\n562     void f()\r\n563     {\r\n564         LOCK(m_addrman_mutex);\r\n565         size();\r\n566     }\r\n```\r\n\r\nWhen this code is compiled with just [`-Wthread-safety`](https://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety) (as in current `master`) then it produces:\r\n\r\n```\r\nsrc/addrman.h:565:9: error: cannot call function 'size' while mutex 'm_addrman_mutex' is held [-Werror,-Wthread-safety-analysis]\r\n        size();\r\n        ^\r\n```\r\n\r\n[`-Wthread-safety`](https://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety) enables [`-Wthread-safety-analysis`](https://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-analysis) but not [-Wthread-safety-negative](https://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-negative).\r\n\r\nSo what does `-Wthread-safety-negative` do then? It warns whenever some function `LOCK()`s something without having `EXCLUSIVE_LOCKS_REQUIRED(!thatthing)`:\r\n```\r\nsrc/addrman.h:564:9: error: acquiring mutex 'm_addrman_mutex' requires negative capability '!m_addrman_mutex' [-Werror,-Wthread-safety-negative]\r\n        LOCK(m_addrman_mutex);\r\n        ^\r\n```",
      "created_at" : "2020-06-11T19:48:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642893541",
      "id" : 642893541,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mjg5MzU0MQ==",
      "updated_at" : "2020-06-11T19:48:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642893541",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Does it warn even for recursive mutexes?",
      "created_at" : "2020-06-11T22:33:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642964695",
      "id" : 642964695,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mjk2NDY5NQ==",
      "updated_at" : "2020-06-11T22:33:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642964695",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Approach ACK f8213c05f087e5fbb5d92a291f766b0baebc798f\r\n\r\nThis simply adds a member function and doesn't need to bump the minimum compiler version. I don't see a reason to disallow this annotation for temporary testing by not having the member function.",
      "created_at" : "2020-06-11T23:26:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-642979664",
      "id" : 642979664,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mjk3OTY2NA==",
      "updated_at" : "2020-06-11T23:26:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642979664",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "If we're even slightly worried about supporting old compilers, why not add a new macro to threadsafety.h?\r\n\r\n```c++\r\n#if defined(__clang__) && __clang_major__ >= 4\r\n#define EXCLUSIVE_LOCKS_FORBIDDEN(a) __attribute__((exclusive_locks_required(!a)))\r\n#else\r\n#define EXCLUSIVE_LOCKS_FORBIDDEN(a)\r\n#endif // clang 4\r\n\r\nclass CAddrMan {\r\n    ...\r\n    size_t size() const EXCLUSIVE_LOCKS_FORBIDDEN(m_addrman_mutex);\r\n    ...\r\n};\r\n```\r\n\r\nIt seems if you add member functions in CAddrMan that call things that forbid holding m_addrman_mutex, then you have to also mark those member functions as forbidding holding m_addrman_mutex, but for functions outside of those modules, you don't have to. If I do:\r\n\r\n```c++\r\n+void wtf(CConnman& c, const CService &addr, ServiceFlags nServices)\r\n+{\r\n+    LOCK(c.addrman.m_addrman_mutex);\r\n+    c.SetServices(addr, nServices);\r\n+}\r\n+\r\n void CConnman::SetServices(const CService &addr, ServiceFlags nServices)\r\n {\r\n     addrman.SetServices(addr, nServices);\r\n }\r\n```\r\n\r\n(and make addrman and m_addrman_mutex public members) then I don't get a compile time warning.\r\n\r\nBased on the [google paper](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/42958.pdf) I think the what's happening is \"The analyzer assumes that it holds a negative capability for any object that is not defined within the current lexical  scope\" -- so for mutexes that are private class members, it should be fine, I think; and also for module-specific globals. But I think it will not work right for cross-file globals like cs_main?",
      "created_at" : "2020-06-12T03:45:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-643048609",
      "id" : 643048609,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzA0ODYwOQ==",
      "updated_at" : "2020-06-12T03:45:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643048609",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n> Does it warn even for recursive mutexes?\r\n\r\nYes, it does. See:\r\n- https://travis-ci.org/github/bitcoin/bitcoin/jobs/697279768#L3640\r\n- https://travis-ci.org/github/bitcoin/bitcoin/jobs/697279769#L2114",
      "created_at" : "2020-06-12T07:33:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-643119899",
      "id" : 643119899,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzExOTg5OQ==",
      "updated_at" : "2020-06-12T07:33:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643119899",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n> This simply adds a member function and doesn't need to bump the minimum compiler version.\r\n\r\nAgree to postpone the minimum compiler version bumping until C++17.\r\n\r\nIn any case, Clang just ignores unknown annotations.\r\n\r\nFWIW, I've made some retro tests:\r\n\r\n- Clang 3.3\r\n```\r\n$ cat /etc/system-release\r\nFedora release 20 (Heisenbug)\r\n\r\n$ clang++ --version\r\nclang version 3.3 (tags/RELEASE_33/rc3)\r\nTarget: x86_64-redhat-linux-gnu\r\nThread model: posix\r\n\r\n$ ./autogen.sh\r\n$ ./configure --without-gui --disable-wallet CC=clang CXX=clang++\r\n$ make\r\n...\r\nIn file included from crypto/sha256.cpp:11:\r\n./compat/cpuid.h:17:5: error: use of undeclared identifier '__cpuid_count'\r\n    __cpuid_count(leaf, subleaf, a, b, c, d);\r\n    ^\r\n1 error generated.\r\n\r\nIn file included from init.cpp:35:\r\nIn file included from ./policy/policy.h:12:\r\nIn file included from ./script/standard.h:12:\r\nIn file included from /usr/include/boost/variant.hpp:17:\r\n/usr/include/boost/variant/variant.hpp:1751:9: error: call to member function 'convert_construct' is ambiguous\r\n        convert_construct( detail::variant::move(operand), 1L);\r\n        ^~~~~~~~~~~~~~~~~\r\n1 error generated.\r\n```\r\n\r\n- Clang 3.5\r\n```\r\n$ cat /etc/system-release\r\nFedora release 22 (Twenty Two)\r\n\r\n$ clang++ --version\r\nclang version 3.5.0 (tags/RELEASE_350/final)\r\nTarget: x86_64-redhat-linux-gnu\r\nThread model: posix\r\n\r\n$ ./autogen.sh\r\n$ ./configure --without-gui --disable-wallet CC=clang CXX=clang++\r\n$ make\r\n...\r\nIn file included from banman.cpp:8:\r\nIn file included from ./netaddress.h:12:\r\nIn file included from ./compat.h:32:\r\nIn file included from /usr/include/fcntl.h:302:\r\n/usr/include/bits/fcntl2.h:80:39: error: use of undeclared identifier '__builtin_va_arg_pack_len'\r\n      if ((__oflag & O_CREAT) != 0 && __va_arg_pack_len () < 1)\r\n                                      ^\r\n/usr/include/sys/cdefs.h:350:30: note: expanded from macro '__va_arg_pack_len'\r\n# define __va_arg_pack_len() __builtin_va_arg_pack_len ()\r\n                             ^\r\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\r\n20 errors generated.\r\n```",
      "created_at" : "2020-06-12T16:14:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-643358163",
      "id" : 643358163,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzM1ODE2Mw==",
      "updated_at" : "2020-06-12T16:14:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643358163",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ajtowns \r\n> Based on the [google paper](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/42958.pdf) I think the what's happening is \"The analyzer assumes that it holds a negative capability for any object that is not defined within the current lexical scope\" -- so for mutexes that are private class members, it should be fine, I think; and also for module-specific globals. But I think it will not work right for cross-file globals like cs_main?\r\n\r\nAgree with you.",
      "created_at" : "2020-06-14T06:47:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-643726686",
      "id" : 643726686,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzcyNjY4Ng==",
      "updated_at" : "2020-06-14T06:47:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643726686",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Currently all thread-safety macros map to attributes with identical names:\r\n```cpp\r\n#define FOO() __attribute__((foo))\r\n```\r\nThat is good because somebody who is familiar with the clang attributes, but not with bitcoin core specifics does not have to look up what a macro does in `src/threadsafety.h`. So, maybe refrain from adding `EXCLUSIVE_LOCKS_FORBIDDEN()`. Also, the current `EXCLUSIVE_LOCKS_REQUIRED()` allows to list more than one mutex: `EXCLUSIVE_LOCKS_REQUIRED(m1, !m2, m3)`, whereas the mentioned `EXCLUSIVE_LOCKS_FORBIDDEN()` would break in a strange way if passed something like `m1, !m2`.",
      "created_at" : "2020-06-15T16:02:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-644223945",
      "id" : 644223945,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDIyMzk0NQ==",
      "updated_at" : "2020-06-15T16:02:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644223945",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This looks like an uncontroversial addition of a member function with no risk of breaking anything, so I am planning to merge this in the coming days. To ask more c++ experienced people, @ryanofsky do you think this could break anything?",
      "created_at" : "2020-06-15T23:58:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19249#issuecomment-644451034",
      "id" : 644451034,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19249",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDQ1MTAzNA==",
      "updated_at" : "2020-06-15T23:58:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644451034",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
