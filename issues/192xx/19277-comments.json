[
   {
      "author_association" : "MEMBER",
      "body" : "Why would they be confusing? Replacing `assert` with `Assert` by accident will compile into the same binary. And replacing `Assert` with `assert` will either compile into the same binary or it won't compile at all.\r\n\r\nChanged to a macro, thx for the suggestion.",
      "created_at" : "2020-06-15T00:58:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-643850722",
      "id" : 643850722,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzg1MDcyMg==",
      "updated_at" : "2020-06-15T00:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643850722",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19184 (Overhaul transaction request logic by sipa)\n* #18923 (wallet: Never schedule MaybeCompactWalletDB when -flushwallet is off by MarcoFalke)\n* #18354 (Use shared pointers only in validation interface by bvbfan)\n* #16333 (test: Set BIP34Height = 2 for regtest by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-06-15T05:49:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-643916736",
      "id" : 643916736,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzkxNjczNg==",
      "updated_at" : "2020-06-15T19:50:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643916736",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`Assert()` seems weird to me too; I don't expect it to return a value. `ValidPointer()` or having it convert a `T*` to a `T&` and  using it as `SafeDeref(ptr).member` or similar would make more sense to me.\r\n\r\nEither way, might as well replace the remaining two `EnsureChainman()` calls in init.cpp and rpc/blockchain.cpp and remove the function from node/context.h entirely by the looks.",
      "created_at" : "2020-06-15T07:27:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-643954120",
      "id" : 643954120,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzk1NDEyMA==",
      "updated_at" : "2020-06-15T07:27:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643954120",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19277#discussion_r439985051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19277"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439985051"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure what is meant by *if the value compares equal to zero*.\r\n\r\nIf you retouch, s/undersirable/undesirable/ a few lines above.",
      "commit_id" : "fa90fb1987a0175e738d341a6b9ebf62d4bf6951",
      "created_at" : "2020-06-15T07:40:22Z",
      "diff_hunk" : "@@ -42,4 +42,22 @@ class NonFatalCheckError : public std::runtime_error\n         }                                                         \\\n     } while (false)\n \n+#if defined(NDEBUG)\n+#error \"Cannot compile without assertions!\"\n+#endif\n+\n+/** Helper for Assert(). TODO remove in C++14 and replace `decltype(get_pure_r_value(val))` with `T` (templated lambda) */\n+template <typename T>\n+T get_pure_r_value(T&& val)\n+{\n+    return std::forward<T>(val);\n+}\n+\n+/** Identity function. Abort if the value compares equal to zero */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#discussion_r439985051",
      "id" : 439985051,
      "line" : 56,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4NTA1MQ==",
      "original_commit_id" : "fa90fb1987a0175e738d341a6b9ebf62d4bf6951",
      "original_line" : 56,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/util/check.h",
      "position" : 15,
      "pull_request_review_id" : 430392113,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19277",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-15T07:45:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/439985051",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This used to be called `Ensure()` with a deref built in, but I changed it to `Assert` for the following reason: https://github.com/bitcoin/bitcoin/pull/18923#discussion_r436102933\r\n\r\nI am happy to pick either version, as long as reviewers are happy.",
      "created_at" : "2020-06-15T10:37:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644049087",
      "id" : 644049087,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDA0OTA4Nw==",
      "updated_at" : "2020-06-15T10:37:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644049087",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> replace the remaining two ...\r\n\r\nDone in the last force push.",
      "created_at" : "2020-06-15T10:43:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644051739",
      "id" : 644051739,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDA1MTczOQ==",
      "updated_at" : "2020-06-15T10:43:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644051739",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440095780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19277"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440095780"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"util: Add Assert identity function\" (faba565dbddc215ef3734b138b673263786fae53)\r\n\r\nI don't think this is doing what it's intended to do. It always prints `Assertion 'value' failed.` regardless of what `val` macro argument was passed in, I think defeating the purpose of using a macro.\r\n\r\nTo make it actually print the macro argument you could use the stringfication operator # like\r\n\r\n```\r\n#define ASSERT(x) [&]() -> decltype(x)& { auto& check = (x); assert(#x && check); return check; }()\r\n```\r\n\r\nFor `printf(\"i = %i\\n\", *Assert(i));` this changes output from\r\n\r\n```\r\noutput.s: ./example.cpp:34: main(int, char**)::<lambda(std::unique_ptr<int>&)>: Assertion `value' failed.\r\n```\r\n\r\nto\r\n\r\n```\r\noutput.s: ./example.cpp:34: main(int, char**)::<lambda()>: Assertion `\"i\" && check' failed.\r\n```\r\n\r\nhttps://godbolt.org/z/7Ke8ET",
      "commit_id" : "fab80fef61ddd4afeff6e497c7e76bffcd05e8a4",
      "created_at" : "2020-06-15T10:59:42Z",
      "diff_hunk" : "@@ -46,4 +46,18 @@ class NonFatalCheckError : public std::runtime_error\n #error \"Cannot compile without assertions!\"\n #endif\n \n+/** Helper for Assert(). TODO remove in C++14 and replace `decltype(get_pure_r_value(val))` with `T` (templated lambda) */\n+template <typename T>\n+T get_pure_r_value(T&& val)\n+{\n+    return std::forward<T>(val);\n+}\n+\n+/** Identity function. Abort if the value compares equal to zero */\n+#define Assert(val)                                                                   \\\n+    [&](decltype(get_pure_r_value(val))&& value) -> decltype(get_pure_r_value(val)) { \\\n+        assert(value);                                                                \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440095780",
      "id" : 440095780,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTc4MA==",
      "original_commit_id" : "faba565dbddc215ef3734b138b673263786fae53",
      "original_line" : 59,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/util/check.h",
      "position" : null,
      "pull_request_review_id" : 430513352,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19277",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-15T11:39:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440095780",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "For reviewers who think assert is \"weird\" and \"confusing\" and wouldn't \"expect it to return a value,\" I don't see what point you are making. If you saw `fun(*ASSERT(ptr))` and had to guess what it was doing, would you actually guess anything other than \"this is going to assert `ptr` is true, dereference it and pass it to `fun`? If not, what would your guess be?\r\n\r\nI like the name `ASSERT` for this macro, because c++ developers will generally know that a false assert will abort the program. If the name `ASSERT` is misleading or confusing in a specific way, something longer but more explicit like `ABORT_IF_NULL` would serve the purpose as well.\r\n\r\nAs long as this is aborting the program on failure, I think calling this `SafeDeref` or `Ensure` or hiding the `*` operation from the reader is exactly what we *don't* want here. We *don't* want a reviewer to look at this code and think that dereferencing the pointer is safe. We want a reviewer to look at this code and see that a pointer is being dereferenced, and that something bad will happen if the pointer is null, and look closely to make sure there are no code paths where it could be null. That is why it is better to keep the `*`, because reviewers will generally already do this when they see a pointer being dereferenced.\r\n\r\nI think the name `SafeDeref` is specifically bad because I'd expect a function with that name to either safely dereference the pointer or return a default constructed value. I think the name `Ensure` is specifically bad because there are other cases where `Ensure` is used in the code and it's basically harmless (throws JSON-RPC a REST exception and returns it to the client).",
      "created_at" : "2020-06-15T11:40:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644077052",
      "id" : 644077052,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDA3NzA1Mg==",
      "updated_at" : "2020-06-15T11:40:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644077052",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440116115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19277"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440116115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, fixed",
      "commit_id" : "fab80fef61ddd4afeff6e497c7e76bffcd05e8a4",
      "created_at" : "2020-06-15T11:42:23Z",
      "diff_hunk" : "@@ -46,4 +46,18 @@ class NonFatalCheckError : public std::runtime_error\n #error \"Cannot compile without assertions!\"\n #endif\n \n+/** Helper for Assert(). TODO remove in C++14 and replace `decltype(get_pure_r_value(val))` with `T` (templated lambda) */\n+template <typename T>\n+T get_pure_r_value(T&& val)\n+{\n+    return std::forward<T>(val);\n+}\n+\n+/** Identity function. Abort if the value compares equal to zero */\n+#define Assert(val)                                                                   \\\n+    [&](decltype(get_pure_r_value(val))&& value) -> decltype(get_pure_r_value(val)) { \\\n+        assert(value);                                                                \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440116115",
      "id" : 440116115,
      "in_reply_to_id" : 440095780,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjExNQ==",
      "original_commit_id" : "faba565dbddc215ef3734b138b673263786fae53",
      "original_line" : 59,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/util/check.h",
      "position" : null,
      "pull_request_review_id" : 430563401,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19277",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-15T11:42:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440116115",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I mean confusing not because of return value but because now it's valid to use `ASSERT()` instead of `assert()`.",
      "created_at" : "2020-06-15T11:46:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644079404",
      "id" : 644079404,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDA3OTQwNA==",
      "updated_at" : "2020-06-15T11:46:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644079404",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  it's valid to use ASSERT() instead of assert()\r\n\r\nYes, it is valid and should compile to the same binary. (Just like it is fine to replace `(++i)` with `(i++)` and it compiles to the same binary). Is there some obvious risk or downside I am missing?",
      "created_at" : "2020-06-15T11:49:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644080871",
      "id" : 644080871,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDA4MDg3MQ==",
      "updated_at" : "2020-06-15T11:49:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644080871",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ":) no downside. So we could just recommend the new macro for new code? Or add a note for when `assert()` should be used over `ASSERT()`.",
      "created_at" : "2020-06-15T11:54:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644083024",
      "id" : 644083024,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDA4MzAyNA==",
      "updated_at" : "2020-06-15T11:54:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644083024",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think we can leave it to code authors to pick whatever version they like more. There really shouldn't be any difference as long as the code compiles.",
      "created_at" : "2020-06-15T12:01:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644086441",
      "id" : 644086441,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDA4NjQ0MQ==",
      "updated_at" : "2020-06-15T12:01:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644086441",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440127583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19277"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440127583"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"util: Add Assert identity function\" (fa6ef701adba1cb48535cac25fd43c742a82e40d)\r\n\r\nNote: `decltype(get_pure_r_value(val))` is needed here in case the `val` expression is const, because just `decltype(val)` drops the const and results in an error trying to return a const reference from a lambda effectively declared to return a non-const reference. I think returning decltype(auto) would be another way to work around this once we update past c++11",
      "commit_id" : "fab80fef61ddd4afeff6e497c7e76bffcd05e8a4",
      "created_at" : "2020-06-15T12:05:13Z",
      "diff_hunk" : "@@ -46,4 +46,14 @@ class NonFatalCheckError : public std::runtime_error\n #error \"Cannot compile without assertions!\"\n #endif\n \n+/** Helper for Assert(). TODO remove in C++14 and replace `decltype(get_pure_r_value(val))` with `T` (templated lambda) */\n+template <typename T>\n+T get_pure_r_value(T&& val)\n+{\n+    return std::forward<T>(val);\n+}\n+\n+/** Identity function. Abort if the value compares equal to zero */\n+#define Assert(val) [&]() -> decltype(get_pure_r_value(val))& { auto& check = (val); assert(#val && check); return check; }()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440127583",
      "id" : 440127583,
      "line" : 57,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyNzU4Mw==",
      "original_commit_id" : "fa6ef701adba1cb48535cac25fd43c742a82e40d",
      "original_line" : 57,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/util/check.h",
      "position" : 25,
      "pull_request_review_id" : 430578496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19277",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-15T12:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440127583",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> For reviewers who think assert is \"weird\" and \"confusing\" and wouldn't \"expect it to return a value,\"\r\n\r\nI think it's important to keep scrutiny on the changes, not on the people. \"Tough on the changes, easy on the people.\" I've deleted my review.",
      "created_at" : "2020-06-15T12:09:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644093031",
      "id" : 644093031,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDA5MzAzMQ==",
      "updated_at" : "2020-06-15T12:09:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644093031",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I've deleted my review\r\n\r\nI found the review useful and I adjusted the commit based on the review to include motivation for the change (and fix the typo). Sometimes my commit messages are too short (i.e. empty) when they instead could include further background information and motivation for the changes, so at least I found the review helpful.",
      "created_at" : "2020-06-15T12:28:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644102618",
      "id" : 644102618,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDEwMjYxOA==",
      "updated_at" : "2020-06-15T12:28:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644102618",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re: @jonatack https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644093031\r\n\r\n> > For reviewers who think assert is \"weird\" and \"confusing\" and wouldn't \"expect it to return a value,\"\r\n> \r\n> I think it's important to keep scrutiny on the changes, not on the people. \"Tough on the changes, easy on the people.\" I've deleted my review.\r\n\r\nI'm confused. What did your review say? In my email it was a concept ACK with some suggestions not related to this.\r\n\r\nDid I phrase my comment badly? I don't think I was scrutinizing anything, just asking a literal, non-rhetorical question to reviewers expressing an opinion I didn't understand. It turned one reviewer clarified and didn't actually have that opinion, so I'm glad I asked. But if I should have asked differently, I'd like to know.",
      "created_at" : "2020-06-15T12:42:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644111245",
      "id" : 644111245,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDExMTI0NQ==",
      "updated_at" : "2020-06-15T12:42:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644111245",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK: this will help guide static analyzers and thus increase signal-to-noise in reports. And more generally: explicit guarantees are better than implicit guarantees :)",
      "created_at" : "2020-06-15T13:04:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644122216",
      "id" : 644122216,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDEyMjIxNg==",
      "updated_at" : "2020-06-15T13:04:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644122216",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Sorry for deleting. I was having an \"I suck\" moment.",
      "created_at" : "2020-06-15T13:36:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644139766",
      "id" : 644139766,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDEzOTc2Ng==",
      "updated_at" : "2020-06-15T13:36:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644139766",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK fab80fef61ddd4afeff6e497c7e76bffcd05e8a4.\r\n\r\nIndeed it's better with macro and templating ninjatsus. Applying\r\n```diff\r\n--- a/src/bitcoind.cpp\r\n+++ b/src/bitcoind.cpp\r\n@@ -44,6 +44,7 @@ static void WaitForShutdown(NodeContext& node)\r\n static bool AppInit(int argc, char* argv[])\r\n {\r\n     NodeContext node;\r\n+    Assert(node.chain);\r\n     node.chain = interfaces::MakeChain(node);\r\n\r\n     bool fRet = false;\r\n```\r\nGives\r\n```\r\nsrc/bitcoind -regtest\r\nAssertion failed: (\"node.chain\" && check), function operator(), file bitcoind.cpp, line 47.\r\n[1]    90659 abort      src/bitcoind -regtest\r\n```",
      "created_at" : "2020-06-15T14:19:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644164047",
      "id" : 644164047,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDE2NDA0Nw==",
      "updated_at" : "2020-06-15T14:19:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644164047",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> If you saw `fun(*ASSERT(ptr))` and had to guess what it was doing,\r\n\r\nWhy would you ever have to guess? I'd think \"ugh, what's going on, assert doesn't work like that\" and look at the source, and conclude \"oh, they're just doing some weird local convention where assert in all caps is slightly different than regular assert\". That's not a showstopper, it's just confusing.\r\n\r\nIf I saw `fun(Frobniz(ptr))`, I'd think \"well, Frobniz is new to me, better look at the source to see what it does\" followed by \"oh, it asserts if it's null, and otherwise passes it through, cool\".\r\n\r\n+1 on having `Ensure*` only do JSON RPC errors. Though, looking at it, the RPC system does both that and CHECK_NONFATAL which throws runtime_error instead, and points directly to where in the source the problem is; might be better to make use of that more consistently instead. \r\n\r\nAnything along the lines of `ABORT_IF_NULL`, `if_null_assert`, `BUG_IF_NULL`, `fatal_if_null`, `Require`, `RequireNonNull` or similar wouldn't be confusing to me. `fatal_if_null` might go nicely with `CHECK_NONFATAL`. Again, not a showstopper, I just think not overloading standard terms is an improvement.",
      "created_at" : "2020-06-15T15:15:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644197131",
      "id" : 644197131,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDE5NzEzMQ==",
      "updated_at" : "2020-06-15T15:15:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644197131",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > If you saw `fun(*ASSERT(ptr))` and had to guess what it was doing,\r\n> \r\n> Why would you ever have to guess?\r\n\r\nThanks, that's kind of my point. You don't have to guess. If you have any question, you can look at the `ASSERT` macro and see that it wraps standard `assert`. But when reading code, people make assumptions about how things work, and when the likely assumptions are wrong, it can be a problem for readability and a future source of bugs. I still don't understand why you are saying something is \"confusing\" when it doesn't appear there is any actual fact you think someone might be confused about, but it's clear you don't like the aesthetics of overloading the word \"assert\" here. This is bad, but not as bad as if you thought it caused a practical problem.\r\n\r\nRe suggestions:\r\n\r\n- ABORT_IF_NULL, BUG_IF_NULL, FATAL_IF_NULL all seem good to me\r\n- REQUIRE or REQUIRE_NOT_NULL seem reasonable to me. My first thought was that these seemed like pointless circumlocutions, trying to avoid the word \"assert\" for no reason. But maybe there is small difference in meaning since \"assert\" is something you'd say in english about a statement or fact, while \"require\" is something you could also say about an object.\r\n- IF_NULL_ASSERT doesn't seem to make logical sense, maybe it was meant to say IF_NULL_ABORT, which would be fine.\r\n\r\nAny case, I'm glad we seem to agree there's no readabilityÂ problem here. I think current PR is fine. My favorite name would probably be ASSERT, followed by one of the names that contains ABORT or FATAL, because REQUIRE doesn't sound scary enough, and doesn't make me think that world may end if the pointer is null. But Marco's the guy putting in the work here, and whatever name he likes I am happy with.",
      "created_at" : "2020-06-15T16:44:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644246166",
      "id" : 644246166,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDI0NjE2Ng==",
      "updated_at" : "2020-06-15T16:44:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644246166",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Another reason I like the name `Assert` is that this plays nicely with our long-term goal to have different levels of checks. See https://github.com/bitcoin/bitcoin/issues/4576#issuecomment-49883271 for context. It says: \"I guess we can have two levels, optional and mandatory checks.\"\r\n\r\nThe thread also mentions the danger of building with NDEBUG, which is forbidden since 9b59e3bda8c137bff885db5b1f9150346e36e076. Given that it is impossible to build with NDEBUG, no one is testing this configuration and it is effectively unsupported. However, the check is only in one place (main.cpp, or current master: validation and net_processing, or now: check.h). So certainly it is impossible to build `bitcoind` with NDEBUG. Though, I am less sure about other binaries. And certainly it is possible to (accidentally) build single modules with NDEBUG and then accidentally link them. Haven't checked if this is possible, but the potential risk seems already too high. To fix that, I could imagine a scripted-diff that changes `assert` to `Assert` and adds includes for check.h, which would abort compilation under NDEBUG.\r\n\r\nYet another reason I like `Assert` is that it could make it easier to privide a \"pimp-my-assert\" version of a plain `assert`. As an idea it could print additional information, for example:\r\n\r\n```cpp\r\n            tfm::format(std::cerr, \"%s:%d (%s)\\n\"                          \\\r\n                                   \"Internal bug detected: '%s'\\n\"         \\\r\n                                   \"Aborting!\\n\"                           \\\r\n                                   \"You may report this issue here: %s\\n\", \\\r\n                __FILE__, __LINE__, __func__,                              \\\r\n                (#condition),                                              \\\r\n                PACKAGE_BUGREPORT);                                        \\\r\n```\r\n\r\nExample taken from #17408.\r\n\r\nSo using the name `Assert` instead of e.g. `Require` would make the least amount of changes in the places where previously `assert` was used.\r\n\r\nUnrelated, but the discussion about `Assume` was in #16136.",
      "created_at" : "2020-06-15T22:29:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#issuecomment-644422700",
      "id" : 644422700,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19277",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDQyMjcwMA==",
      "updated_at" : "2020-06-15T22:29:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644422700",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440482580"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19277"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440482580"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for the hint. Whoever plays code-golf after we switch to C++17 should consider this.",
      "commit_id" : "fab80fef61ddd4afeff6e497c7e76bffcd05e8a4",
      "created_at" : "2020-06-15T22:30:40Z",
      "diff_hunk" : "@@ -46,4 +46,14 @@ class NonFatalCheckError : public std::runtime_error\n #error \"Cannot compile without assertions!\"\n #endif\n \n+/** Helper for Assert(). TODO remove in C++14 and replace `decltype(get_pure_r_value(val))` with `T` (templated lambda) */\n+template <typename T>\n+T get_pure_r_value(T&& val)\n+{\n+    return std::forward<T>(val);\n+}\n+\n+/** Identity function. Abort if the value compares equal to zero */\n+#define Assert(val) [&]() -> decltype(get_pure_r_value(val))& { auto& check = (val); assert(#val && check); return check; }()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19277#discussion_r440482580",
      "id" : 440482580,
      "in_reply_to_id" : 440127583,
      "line" : 57,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4MjU4MA==",
      "original_commit_id" : "fa6ef701adba1cb48535cac25fd43c742a82e40d",
      "original_line" : 57,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/util/check.h",
      "position" : 25,
      "pull_request_review_id" : 431037219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19277",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-15T22:30:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/440482580",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
