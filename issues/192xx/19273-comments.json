[
   {
      "author_association" : "MEMBER",
      "body" : "If it is impossible to return a nullptr, then why not return a plain `CBlockTemplate`?\r\n\r\n\r\n\r\n<!--\r\n\r\ndiff --git a/src/miner.cpp b/src/miner.cpp\r\nindex d9dcbe8a70..9569ab3ffb 100644\r\n--- a/src/miner.cpp\r\n+++ b/src/miner.cpp\r\n@@ -109,6 +109,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\r\n \r\n     if(!pblocktemplate.get())\r\n         return nullptr;\r\n+    CBlock* pblock;\r\n     pblock = &pblocktemplate->block; // pointer for convenience\r\n \r\n     // Add dummy coinbase tx as first transaction\r\n@@ -226,7 +227,7 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa\r\n \r\n void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\r\n {\r\n-    pblock->vtx.emplace_back(iter->GetSharedTx());\r\n+    pblocktemplate->block.vtx.emplace_back(iter->GetSharedTx());\r\n     pblocktemplate->vTxFees.push_back(iter->GetFee());\r\n     pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\r\n     nBlockWeight += iter->GetTxWeight();\r\ndiff --git a/src/miner.h b/src/miner.h\r\nindex 69296f9078..096585dfe4 100644\r\n--- a/src/miner.h\r\n+++ b/src/miner.h\r\n@@ -128,8 +128,6 @@ class BlockAssembler\r\n private:\r\n     // The constructed block template\r\n     std::unique_ptr<CBlockTemplate> pblocktemplate;\r\n-    // A convenience pointer that always refers to the CBlock in pblocktemplate\r\n-    CBlock* pblock;\r\n \r\n     // Configuration parameters for the block size\r\n     bool fIncludeWitness;\r\n",
      "created_at" : "2020-06-14T12:48:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643762257",
      "id" : 643762257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc2MjI1Nw==",
      "updated_at" : "2020-06-14T12:50:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643762257",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@MarcoFalke Good question.  I'm not sure what the motivation is behind the `BlockAssembler` class and its design.  Outside of tests, it's only ever used in `getblocktemplate` and `generateBlocks` in `rpc/mining.cpp`.  It is always created as an ephemeral object on the stack and then after it is done creating a `CBlockTemplate`, it is immediately destroyed after the stack frame ends. \r\n\r\nWhy it allocates a `CBlockTemplate` as a pointer and then returns it via a `unique_ptr` is a good question.  I guess because a block template is potentially very \"heavy\" and the people designing the subsystem didn't want to mess with `std::move` and/or rvalue reference `&&` semantics, and `unique_ptr` is just easier to think about for some people?  Or maybe this evolved from some older code that did it with raw pointers?  I don't know...  If I had done it perhaps I would have just used a `CBlockTemplate` and ensured it had proper `std::move` semantics and returned it directly by value, leveraging RVO and `&&` move semantics.\r\n",
      "created_at" : "2020-06-14T13:05:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643764116",
      "id" : 643764116,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc2NDExNg==",
      "updated_at" : "2020-06-14T13:06:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643764116",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "What I meant is that simply removing nullptr checks is scary and will also fail to compile on some compilers/sanitizers/static analysers with warnings and errors enabled. Also, if the template ever only exists on the stack, then I don't see why it should live in the heap.\r\n\r\nI am not sure if there is a way in C++ to ensure an object can be efficiently moved, but a pre-C++11 alternative would be:\r\n\r\n```cpp\r\nCBlockTemplate on_the_stack;\r\nBlockAssembler().CreateNewBlock(coinbase_script, on_the_stack);",
      "created_at" : "2020-06-14T13:25:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643766357",
      "id" : 643766357,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc2NjM1Nw==",
      "updated_at" : "2020-06-14T13:25:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643766357",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Yeah that was the pre-C++11 canonical way to do it.  Also just returning the value was pretty much always guaranteed to not produce any copies and be equivalent to the \"pass down a non-const ref\" way..  (RVO/copy elision basically does that for you internally anyway).  \r\n\r\nThe example you show is the cheapest way (as is a proper RVO return by value), for sure.  Move semantics are \"almost free\" too -- you just have to pay the extra cost of swapping pointers, etc (CBlockTemplate's heaviest members are the vector of tx refs and other stuff and so you pay the cost of that pointer swap...).\r\n\r\n> What I meant is that simply removing nullptr checks is scary and will also fail to compile\r\n\r\n:) It is only scary if you are thinking about it as just a fancy `malloc`. In C, definitely, not checking `NULL` is scary.  \r\n\r\nHowever, in C++, `new` can never return `nullptr` (at least not the  `new` used in this entire codebase).  It's guaranteed to throw or succeed.  Those are its only two postconditions.  In light of that, there are no sanitizers or compilers that will error out on it or  complain -- since the standard in C++  specifies exactly what new does...\r\n \r\nIf you find this PR useless or scary, feel free to close it.  I figured rather than complain I could help out and fix the little nits here and there.\r\n\r\nNo worries either way.\r\n",
      "created_at" : "2020-06-14T13:37:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643767759",
      "id" : 643767759,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc2Nzc1OQ==",
      "updated_at" : "2020-06-14T13:37:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643767759",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> new can never return nullptr\r\n\r\nOh, I meant that compilers can't know that `CreateNewBlock` never returns a nullptr.\r\n\r\n```cpp\r\nconst auto b = CreateNewBlock();\r\nb->Get();  // <-- Warning/Error here\r\n```\r\n\r\n> If you find this PR useless\r\n\r\nWe do appreciate refactoring changes that improve the code base. My feedback was about the current version of the pull request, which I believe can not be merged as-is.",
      "created_at" : "2020-06-14T14:11:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643771888",
      "id" : 643771888,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc3MTg4OA==",
      "updated_at" : "2020-06-14T14:11:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643771888",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Do you know of any static analyzer that would complain about this code?  The one I use (PVS studio) does not necessarily expect you to check `unique_ptr` return value since that is a very common and idiomatic pattern -- call a factory method returning `unique_ptr`.  Since `new` throws, it's considered by some to be an anti-pattern to check for nullptr (since it can never happen) --  unless the contract with the calling code specifies \"will return a nullptr on error\", which is not the case here.  \r\n\r\nI ran PVS studio on this codebase without my change -- and the check itself generated an issue (basically because nullptr can never be returned from new).\r\n\r\nI ran it with this change and it did not complain.  I can paste the log...\r\n\r\n> We do appreciate refactoring changes that improve the code base. \r\n\r\nOk well up to you man. Your codebase, you call the shots.  I am just trying to help. Feel free to close. No harm, no foul.\r\n",
      "created_at" : "2020-06-14T15:49:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643784975",
      "id" : 643784975,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc4NDk3NQ==",
      "updated_at" : "2020-06-14T15:52:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643784975",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "No static analyzer or compiler expects you to check every single pointer you get given or receive as a return value.  Having such a strict requirement would mean your code would be riddled with boilerplate checks everywhere.  (instead, at best, some static analyzers sometimes use heuristics to warn you about obviously bad usages).\r\n\r\nJust to reiterate -- code like this:\r\n\r\n```c++\r\nauto ptr = std::make_unique<MyClass>(arg1, arg2);\r\nif (!ptr)\r\n  // handle error here\r\n```\r\n\r\nIs unidiomatic and kind of silly... since it can never be false.  For that reason no static analyzer that I know of expects you to check `unique_ptr` return value either.  \r\n\r\nBackground: Usually static analyzers do not expect you to check for NULL for every single pointer return type you use.  Doing so would be boilerplate city.  They usually expect you to check for NULL before using only if the  analyzer concludes (based on heuristics) that the pointer may be NULL sometimes.  For example, if you later check for NULL in the function -- this indicates to the analyzer that you expect it to be NULL sometimes. If it cannot conclude that the pointer may be NULL, it will not complain.  ",
      "created_at" : "2020-06-14T16:03:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643786641",
      "id" : 643786641,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc4NjY0MQ==",
      "updated_at" : "2020-06-14T17:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643786641",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "For our codebase, unique_ptr means that the pointer can be null. E.g.\r\n\r\n* https://github.com/bitcoin/bitcoin/blob/195822f1e05e2f36002c906667d4c639663f23b5/src/node/context.h#L43\r\n* https://github.com/bitcoin/bitcoin/blob/195822f1e05e2f36002c906667d4c639663f23b5/src/net.h#L835\r\n* ...\r\n\r\nSo I think it would be confusing to have one exception where a pointer type is used but at the same time it can not be null.",
      "created_at" : "2020-06-14T17:48:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643799133",
      "id" : 643799133,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Mzc5OTEzMw==",
      "updated_at" : "2020-06-14T17:48:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643799133",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Right, but in this case the contract is that it cannot be null.  \r\n\r\nI get it -- this is a minor nit and not worth worrying about -- no worries.  I still maintain that it would be a code quality improvement.  It's a bit silly to see people checking `new`'s return value as if it can ever return `nullptr`.   If this doesn't utterly make you \"wtf\" when you read it:\r\n\r\n```c++\r\n    pblocktemplate.reset(new CBlockTemplate());\r\n\r\n    if(!pblocktemplate.get())\r\n        return nullptr;\r\n```\r\n\r\nThen that's your prerogative, I guess.\r\n\r\nBut I get it.  You don't want to worry about this.  Feel free to close this.  Like I said -- no harm done, no offense taken, and no worries.\r\n",
      "created_at" : "2020-06-14T18:44:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-643805864",
      "id" : 643805864,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MzgwNTg2NA==",
      "updated_at" : "2020-06-14T18:47:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/643805864",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19283 (refactor: Remove unused BlockAssembler::pblock member var by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-06-15T19:52:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-644344116",
      "id" : 644344116,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NDM0NDExNg==",
      "updated_at" : "2020-06-15T19:52:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/644344116",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I agree with @MarcoFalke. Please make it either impossible to return a nullptr (by returning a while object) or keep the checks somehow. Simply removing them is scary.\r\nEven though the check might, with some reasoning, be unnecessary right now, for maintainability and robustness some defense in depth doesn't hurt so NACK on this change as it is.",
      "created_at" : "2020-07-09T18:19:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-656278724",
      "id" : 656278724,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NjI3ODcyNA==",
      "updated_at" : "2020-07-09T18:19:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656278724",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-07-09T18:38:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-656287285",
      "id" : 656287285,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NjI4NzI4NQ==",
      "updated_at" : "2020-07-09T18:38:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656287285",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Please make it either impossible to return a nullptr (\r\n\r\nMy point is -- *It's already impossible to return a nullptr*.  Which is why the check is silly.   It's the equivalent of doing:\r\n\r\n```\r\n   int a = 2;\r\n   if (a != 2) {\r\n      // .... code here to throw\r\n   }\r\n```\r\n\r\nThe above example may seem like an exaggeration, of course -- but if you stop to think about it -- it really is that silly. Anyway, I'm closing this.  I feel like I'm  fighting against the wind here.  Good luck.\r\n",
      "created_at" : "2020-07-10T08:02:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19273#issuecomment-656543341",
      "id" : 656543341,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19273",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NjU0MzM0MQ==",
      "updated_at" : "2020-07-10T08:03:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/656543341",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   }
]
