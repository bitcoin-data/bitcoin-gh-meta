[
   {
      "author_association" : "MEMBER",
      "body" : "cc @vasild :)",
      "created_at" : "2020-06-10T15:41:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642092803",
      "id" : 642092803,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjA5MjgwMw==",
      "updated_at" : "2020-06-10T15:41:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642092803",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21940 (refactor: Mark CAddrMan::Select const by MarcoFalke)\n* #20233 (addrman: Make consistency checks a runtime option by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-06-10T16:50:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642132912",
      "id" : 642132912,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjEzMjkxMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-12T20:07:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642132912",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. I think the reason that `LOCKS_EXCLUDED` isn't widely used in the code base is that it doesn't propagate up the call stack, so has a rather limited use case. Though, the new syntax claims to do that.",
      "created_at" : "2020-06-10T16:51:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642133165",
      "id" : 642133165,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjEzMzE2NQ==",
      "updated_at" : "2020-06-10T16:51:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642133165",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "oh wait you are not adding the annotations. Any reason for that?",
      "created_at" : "2020-06-10T16:53:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642134036",
      "id" : 642134036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjEzNDAzNg==",
      "updated_at" : "2020-06-10T16:53:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642134036",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n> oh wait you are not adding the annotations. Any reason for that?\r\n\r\nAdded :)",
      "created_at" : "2020-06-10T17:01:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642138551",
      "id" : 642138551,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjEzODU1MQ==",
      "updated_at" : "2020-06-10T17:01:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642138551",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke probably a1071f8b9ae12bbb6f0fddae40655b3860c785f0 deserves its own PR as it blocks the similar changes in other parts of the code, right?",
      "created_at" : "2020-06-10T17:04:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642139964",
      "id" : 642139964,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjEzOTk2NA==",
      "updated_at" : "2020-06-10T17:04:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642139964",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438717497"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438717497"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It would be nice to implement that TODO comment because it would make it possible to avoid any mutex requirements from `size()`.\r\n\r\nI did so in https://github.com/vasild/bitcoin/commit/f25d8a7c6de0e45b037f91138e1b4a72e7a1653f. If you like it you can replace the commit `refactor: Prevent double lock in CAddrMan::size()` with that one. In this branch https://github.com/vasild/bitcoin/tree/200610-addrman-mx that is done and also the subsequent commits are adjusted.\r\n\r\nOr, if you don't like the caching, then maybe just delete the TODO comment.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-11T11:27:31Z",
      "diff_hunk" : "@@ -534,137 +553,133 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        LOCK(m_addrman_mutex); // TODO: Cache this in an atomic to avoid this overhead\n+        return sizeNonLockerHelper();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438717497",
      "id" : 438717497,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcxNzQ5Nw==",
      "original_commit_id" : "d9572933f1fb0201b259d9cb7b40873bdbad7b6f",
      "original_line" : 566,
      "original_position" : 234,
      "original_start_line" : 539,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 428821020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438717497",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438722555"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438722555"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and in `StdMutex` - I find this very confusing because it would end up with `m` being the same as `!m`. It is a huge hack imposed by clang. I would suggest to add some comment to explain what is that. Something like `Required by the clang thread safety instrumentation so that we can declare that a mutex should not be held when a function is called - EXCLUSIVE_LOCKS_REQUIRED(!m) (aka \"negative capabilities\")`.\r\n\r\nThe example in https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h also has some comment.\r\n\r\nPS I wonder what would `EXCLUSIVE_LOCKS_REQUIRED(!!m)` do. :eyes:",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-11T11:39:37Z",
      "diff_hunk" : "@@ -103,6 +103,9 @@ class LOCKABLE AnnotatedMixin : public PARENT\n     }\n \n     using UniqueLock = std::unique_lock<PARENT>;\n+#ifdef __clang__\n+    const AnnotatedMixin& operator!() const { return *this; }\n+#endif // __clang__",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438722555",
      "id" : 438722555,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjU1NQ==",
      "original_commit_id" : "d9572933f1fb0201b259d9cb7b40873bdbad7b6f",
      "original_line" : 117,
      "original_position" : 6,
      "original_start_line" : 106,
      "path" : "src/sync.h",
      "position" : null,
      "pull_request_review_id" : 428821020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438722555",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438796565"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438796565"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The commit you [suggested](https://github.com/vasild/bitcoin/commit/f25d8a7c6de0e45b037f91138e1b4a72e7a1653f) does change `CAddrMan::size()` behavior. So I'd prefer to keep this PR as clean refactoring with no behavior changes.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-11T13:46:34Z",
      "diff_hunk" : "@@ -534,137 +553,133 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        LOCK(m_addrman_mutex); // TODO: Cache this in an atomic to avoid this overhead\n+        return sizeNonLockerHelper();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438796565",
      "id" : 438796565,
      "in_reply_to_id" : 438717497,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5NjU2NQ==",
      "original_commit_id" : "d9572933f1fb0201b259d9cb7b40873bdbad7b6f",
      "original_line" : 566,
      "original_position" : 234,
      "original_start_line" : 539,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 428929366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438796565",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated d9572933f1fb0201b259d9cb7b40873bdbad7b6f -> b6712ece8ada3b1c9230f1264da81cbf11fe4595 ([pr19238.02](https://github.com/hebasto/bitcoin/commits/pr19238.02) -> [pr19238.04](https://github.com/hebasto/bitcoin/commits/pr19238.04)):\r\n\r\n- the commit \"Add means to handle negative capabilities in thread safety annotations\" has been separated into #19249, and this PR has been rebased on the latter one\r\n- negative mutex requirements added to each commit opportunistically",
      "created_at" : "2020-06-11T14:20:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-642690312",
      "id" : 642690312,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0MjY5MDMxMg==",
      "updated_at" : "2020-06-11T14:20:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/642690312",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438823196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438823196"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done in #19249.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-11T14:21:17Z",
      "diff_hunk" : "@@ -103,6 +103,9 @@ class LOCKABLE AnnotatedMixin : public PARENT\n     }\n \n     using UniqueLock = std::unique_lock<PARENT>;\n+#ifdef __clang__\n+    const AnnotatedMixin& operator!() const { return *this; }\n+#endif // __clang__",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438823196",
      "id" : 438823196,
      "in_reply_to_id" : 438722555,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyMzE5Ng==",
      "original_commit_id" : "d9572933f1fb0201b259d9cb7b40873bdbad7b6f",
      "original_line" : 117,
      "original_position" : 6,
      "original_start_line" : 106,
      "path" : "src/sync.h",
      "position" : null,
      "pull_request_review_id" : 428961910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438823196",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438843755"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438843755"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ok",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-11T14:50:31Z",
      "diff_hunk" : "@@ -534,137 +553,133 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        LOCK(m_addrman_mutex); // TODO: Cache this in an atomic to avoid this overhead\n+        return sizeNonLockerHelper();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r438843755",
      "id" : 438843755,
      "in_reply_to_id" : 438717497,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg0Mzc1NQ==",
      "original_commit_id" : "d9572933f1fb0201b259d9cb7b40873bdbad7b6f",
      "original_line" : 566,
      "original_position" : 234,
      "original_start_line" : 539,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 428989548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/438843755",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated b6712ece8ada3b1c9230f1264da81cbf11fe4595 -> 9cd0ed858c96b1052580e2044069c5cb9434628e ([pr19238.04](https://github.com/hebasto/bitcoin/commits/pr19238.04) -> [pr19238.05](https://github.com/hebasto/bitcoin/commits/pr19238.05)):\r\n\r\n- rebased due to the merging of #19249\r\n- all of the related code branches are covered by appropriate lock assertions to insure that the locking policy has not been changed by accident",
      "created_at" : "2020-06-17T11:29:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-645317642",
      "id" : 645317642,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTMxNzY0Mg==",
      "updated_at" : "2020-06-17T11:29:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645317642",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The OP has been updated.",
      "created_at" : "2020-06-17T11:33:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-645319647",
      "id" : 645319647,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTMxOTY0Nw==",
      "updated_at" : "2020-06-17T11:33:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645319647",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r441763265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441763265"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The pattern `AssertLockNotHeld(m); LOCK(m);` seems too verbose. Following that, should we add `AssertLockNotHeld()` before every `LOCK()` in the source code?\r\n\r\nWhat about adding `AssertLockNotHeld()` inside `LOCK()`?\r\n\r\nWhat happens if we try to lock a mutex which we already own?\r\nhttps://en.cppreference.com/w/cpp/thread/mutex/lock says:\r\n> If lock is called by a thread that already owns the mutex, the behavior is undefined\r\n\r\nThe following test case\r\n\r\n```cpp\r\nvoid f(Mutex& m)\r\n{\r\n    LOCK(m);\r\n}\r\n\r\nBOOST_AUTO_TEST_CASE(double_lock)\r\n{\r\n    Mutex m;\r\n    LOCK(m);\r\n    f(m);\r\n}\r\n```\r\n\r\nthrows an exception `std::__1::system_error: mutex lock failed: Resource deadlock avoided` by the OS itself (from inside `std::mutex::lock()`). So, we don't have a protection in our code and we need one because want to avoid the undefined behavior (can't rely on the OS to always throw an exception).\r\n\r\nThe following succeeds (why not also exception?):\r\n\r\n```\r\nvoid f(std::mutex& m) {\r\n    std::unique_lock<std::mutex> lock(m);\r\n}\r\n\r\nint main(int, char**) {\r\n    std::mutex m;\r\n    std::unique_lock<std::mutex> lock(m);\r\n    f(m);\r\n    return 0;\r\n}\r\n```",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-17T18:55:00Z",
      "diff_hunk" : "@@ -534,137 +559,145 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        return sizeNonLockerHelper();\n     }\n \n     //! Consistency check\n-    void Check()\n+    void Check() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n+        AssertLockNotHeld(m_addrman_mutex);\n #ifdef DEBUG_ADDRMAN\n-        {\n-            LOCK(cs);\n-            int err;\n-            if ((err=Check_()))\n-                LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n-        }\n-#endif\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n+#endif // DEBUG_ADDRMAN\n     }\n \n     //! Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         bool fRet = false;\n-        Check();\n+        CheckNonLockHelper();\n         fRet |= Add_(addr, source, nTimePenalty);\n-        Check();\n+        CheckNonLockHelper();\n         if (fRet) {\n             LogPrint(BCLog::ADDRMAN, \"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort(), source.ToString(), nTried, nNew);\n         }\n         return fRet;\n     }\n \n     //! Add multiple addresses.\n-    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         int nAdd = 0;\n-        Check();\n+        CheckNonLockHelper();\n         for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n             nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n-        Check();\n+        CheckNonLockHelper();\n         if (nAdd) {\n             LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n         }\n         return nAdd > 0;\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Good_(addr, test_before_evict, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Attempt_(addr, fCountFailure, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions()\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r441763265",
      "id" : 441763265,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2MzI2NQ==",
      "original_commit_id" : "9cd0ed858c96b1052580e2044069c5cb9434628e",
      "original_line" : 634,
      "original_position" : 336,
      "original_start_line" : 633,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 432686696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441763265",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r441793261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441793261"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Following that, should we add `AssertLockNotHeld()` before every `LOCK()` in the source code?\r\n\r\nOnly for `Mutex` instances, not for `RecursiveMutex` ones.\r\n\r\n> What about adding `AssertLockNotHeld()` inside `LOCK()`?\r\n\r\nNot now because the `RecursiveMutex` instance could be an argument of `LOCK()`.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-17T19:48:16Z",
      "diff_hunk" : "@@ -534,137 +559,145 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        return sizeNonLockerHelper();\n     }\n \n     //! Consistency check\n-    void Check()\n+    void Check() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n+        AssertLockNotHeld(m_addrman_mutex);\n #ifdef DEBUG_ADDRMAN\n-        {\n-            LOCK(cs);\n-            int err;\n-            if ((err=Check_()))\n-                LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n-        }\n-#endif\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n+#endif // DEBUG_ADDRMAN\n     }\n \n     //! Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         bool fRet = false;\n-        Check();\n+        CheckNonLockHelper();\n         fRet |= Add_(addr, source, nTimePenalty);\n-        Check();\n+        CheckNonLockHelper();\n         if (fRet) {\n             LogPrint(BCLog::ADDRMAN, \"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort(), source.ToString(), nTried, nNew);\n         }\n         return fRet;\n     }\n \n     //! Add multiple addresses.\n-    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         int nAdd = 0;\n-        Check();\n+        CheckNonLockHelper();\n         for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n             nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n-        Check();\n+        CheckNonLockHelper();\n         if (nAdd) {\n             LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n         }\n         return nAdd > 0;\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Good_(addr, test_before_evict, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Attempt_(addr, fCountFailure, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions()\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r441793261",
      "id" : 441793261,
      "in_reply_to_id" : 441763265,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5MzI2MQ==",
      "original_commit_id" : "9cd0ed858c96b1052580e2044069c5cb9434628e",
      "original_line" : 634,
      "original_position" : 336,
      "original_start_line" : 633,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 432722652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/441793261",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa Mind reviewing this PR?",
      "created_at" : "2020-06-18T09:09:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-645888631",
      "id" : 645888631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NTg4ODYzMQ==",
      "updated_at" : "2020-06-18T09:09:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/645888631",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442387548"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442387548"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What about checking, inside `LOCK()`, whether the mutex being locked is instance of `Mutex` (and not `RecursiveMutex`) and only asserting that we don't own it in that case:\r\n\r\n```diff\r\ndiff --git i/src/sync.h w/src/sync.h\r\nindex 60e5a87ae..36c348898 100644\r\n--- i/src/sync.h\r\n+++ w/src/sync.h\r\n@@ -10,12 +10,13 @@\r\n #include <util/macros.h>\r\n \r\n #include <condition_variable>\r\n #include <mutex>\r\n #include <string>\r\n #include <thread>\r\n+#include <type_traits>\r\n \r\n ////////////////////////////////////////////////\r\n //                                            //\r\n // THE SIMPLE DEFINITION, EXCLUDING DEBUG CODE //\r\n //                                            //\r\n ////////////////////////////////////////////////\r\n@@ -145,12 +146,15 @@ private:\r\n         return Base::owns_lock();\r\n     }\r\n \r\n public:\r\n     UniqueLock(Mutex& mutexIn, const char* pszName, const char* pszFile, int nLine, bool fTry = false) EXCLUSIVE_LOCK_FUNCTION(mutexIn) : Base(mutexIn, std::defer_lock)\r\n     {\r\n+        if (std::is_base_of<::Mutex, Mutex>::value) {\r\n+            AssertLockNotHeldInternal(pszName, pszFile, nLine, &mutexIn);\r\n+        }\r\n         if (fTry)\r\n             TryEnter(pszName, pszFile, nLine);\r\n         else\r\n             Enter(pszName, pszFile, nLine);\r\n     }\r\n \r\ndiff --git i/src/test/sync_tests.cpp w/src/test/sync_tests.cpp\r\nindex 5c6c2ee38..a66d55519 100644\r\n--- i/src/test/sync_tests.cpp\r\n+++ w/src/test/sync_tests.cpp\r\n@@ -46,7 +46,27 @@ BOOST_AUTO_TEST_CASE(potential_deadlock_detected)\r\n \r\n     #ifdef DEBUG_LOCKORDER\r\n     g_debug_lockorder_abort = prev;\r\n     #endif\r\n }\r\n \r\n+template <typename M>\r\n+void lock(M& m)\r\n+{\r\n+    LOCK(m);\r\n+}\r\n+\r\n+BOOST_AUTO_TEST_CASE(double_lock_mutex)\r\n+{\r\n+    Mutex m;\r\n+    LOCK(m);\r\n+    lock(m);\r\n+}\r\n+\r\n+BOOST_AUTO_TEST_CASE(double_lock_recursive_mutex)\r\n+{\r\n+    RecursiveMutex m;\r\n+    LOCK(m);\r\n+    lock(m);\r\n+}\r\n+\r\n BOOST_AUTO_TEST_SUITE_END()\r\n```\r\n\r\nIt works - the test `double_lock_mutex` fails because of the newly added check while the `double_lock_recursive_mutex` succeeds.\r\n\r\nThe double colon in `::Mutex` is required because the class template type `template <typename Mutex, ...> UniqueLock ...` shadows the global `typedef ... Mutex;`.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-18T17:26:29Z",
      "diff_hunk" : "@@ -534,137 +559,145 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        return sizeNonLockerHelper();\n     }\n \n     //! Consistency check\n-    void Check()\n+    void Check() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n+        AssertLockNotHeld(m_addrman_mutex);\n #ifdef DEBUG_ADDRMAN\n-        {\n-            LOCK(cs);\n-            int err;\n-            if ((err=Check_()))\n-                LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n-        }\n-#endif\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n+#endif // DEBUG_ADDRMAN\n     }\n \n     //! Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         bool fRet = false;\n-        Check();\n+        CheckNonLockHelper();\n         fRet |= Add_(addr, source, nTimePenalty);\n-        Check();\n+        CheckNonLockHelper();\n         if (fRet) {\n             LogPrint(BCLog::ADDRMAN, \"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort(), source.ToString(), nTried, nNew);\n         }\n         return fRet;\n     }\n \n     //! Add multiple addresses.\n-    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         int nAdd = 0;\n-        Check();\n+        CheckNonLockHelper();\n         for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n             nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n-        Check();\n+        CheckNonLockHelper();\n         if (nAdd) {\n             LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n         }\n         return nAdd > 0;\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Good_(addr, test_before_evict, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Attempt_(addr, fCountFailure, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions()\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442387548",
      "id" : 442387548,
      "in_reply_to_id" : 441763265,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4NzU0OA==",
      "original_commit_id" : "9cd0ed858c96b1052580e2044069c5cb9434628e",
      "original_line" : 634,
      "original_position" : 336,
      "original_start_line" : 633,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 433497636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442387548",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442394521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442394521"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@vasild Mind submitting a PR that it could be reviewed before this one?",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-18T17:38:55Z",
      "diff_hunk" : "@@ -534,137 +559,145 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        return sizeNonLockerHelper();\n     }\n \n     //! Consistency check\n-    void Check()\n+    void Check() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n+        AssertLockNotHeld(m_addrman_mutex);\n #ifdef DEBUG_ADDRMAN\n-        {\n-            LOCK(cs);\n-            int err;\n-            if ((err=Check_()))\n-                LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n-        }\n-#endif\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n+#endif // DEBUG_ADDRMAN\n     }\n \n     //! Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         bool fRet = false;\n-        Check();\n+        CheckNonLockHelper();\n         fRet |= Add_(addr, source, nTimePenalty);\n-        Check();\n+        CheckNonLockHelper();\n         if (fRet) {\n             LogPrint(BCLog::ADDRMAN, \"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort(), source.ToString(), nTried, nNew);\n         }\n         return fRet;\n     }\n \n     //! Add multiple addresses.\n-    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         int nAdd = 0;\n-        Check();\n+        CheckNonLockHelper();\n         for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n             nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n-        Check();\n+        CheckNonLockHelper();\n         if (nAdd) {\n             LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n         }\n         return nAdd > 0;\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Good_(addr, test_before_evict, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Attempt_(addr, fCountFailure, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions()\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442394521",
      "id" : 442394521,
      "in_reply_to_id" : 441763265,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NDUyMQ==",
      "original_commit_id" : "9cd0ed858c96b1052580e2044069c5cb9434628e",
      "original_line" : 634,
      "original_position" : 336,
      "original_start_line" : 633,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 433506718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442394521",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442410258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442410258"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Currently, it is assumed the following patterns:\r\n- for public interface methods:\r\n```\r\n# foo.h\r\nclass Foo\r\n{\r\npublic: void foo() EXCLUSIVE_LOCKS_REQUIRED(!m_mutex);\r\n}\r\n# foo.cpp\r\nvoid Foo::foo()\r\n{\r\n    AssertLockNotHeld(m_mutex);\r\n    LOCK(m_mutex);\r\n    // do magic\r\n}\r\n```\r\n\r\n- for internal methods that are called from critical sections:\r\n```\r\n# foo.h\r\nclass Foo\r\n{\r\npivate: void foo_cs() EXCLUSIVE_LOCKS_REQUIRED(m_mutex);\r\n}\r\n# foo.cpp\r\nvoid Foo::foo_cs()\r\n{\r\n    AssertLockHeld(m_mutex);\r\n    // do magic\r\n}\r\n```\r\n\r\nThe common places are thread safety annotations and lock assertions. It seems placing `AssertLockNotHeld()` into internals of the `LOCK()` breaks uniformity, no?",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-18T18:07:34Z",
      "diff_hunk" : "@@ -534,137 +559,145 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        return sizeNonLockerHelper();\n     }\n \n     //! Consistency check\n-    void Check()\n+    void Check() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n+        AssertLockNotHeld(m_addrman_mutex);\n #ifdef DEBUG_ADDRMAN\n-        {\n-            LOCK(cs);\n-            int err;\n-            if ((err=Check_()))\n-                LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n-        }\n-#endif\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n+#endif // DEBUG_ADDRMAN\n     }\n \n     //! Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         bool fRet = false;\n-        Check();\n+        CheckNonLockHelper();\n         fRet |= Add_(addr, source, nTimePenalty);\n-        Check();\n+        CheckNonLockHelper();\n         if (fRet) {\n             LogPrint(BCLog::ADDRMAN, \"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort(), source.ToString(), nTried, nNew);\n         }\n         return fRet;\n     }\n \n     //! Add multiple addresses.\n-    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         int nAdd = 0;\n-        Check();\n+        CheckNonLockHelper();\n         for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n             nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n-        Check();\n+        CheckNonLockHelper();\n         if (nAdd) {\n             LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n         }\n         return nAdd > 0;\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Good_(addr, test_before_evict, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Attempt_(addr, fCountFailure, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions()\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442410258",
      "id" : 442410258,
      "in_reply_to_id" : 441763265,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxMDI1OA==",
      "original_commit_id" : "9cd0ed858c96b1052580e2044069c5cb9434628e",
      "original_line" : 634,
      "original_position" : 336,
      "original_start_line" : 633,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 433527446,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442410258",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "btw, how about convention to add the `_cs` suffix to the name of the function that is called from within the critical section already guarded by the locked instance of the `Mutex`?",
      "created_at" : "2020-06-18T18:14:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-646226615",
      "id" : 646226615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjIyNjYxNQ==",
      "updated_at" : "2020-06-18T18:14:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646226615",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442450059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442450059"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Mind submitting a PR that it could be reviewed before this one?\r\n\r\nYes, I think that deserves a separate PR. I have to consider this a little bit before opening a PR. Maybe it would be possible to optimize it - the patch above would lock `lockdata.dd_mutex` and dig into the stack of locks for the current thread 2 times - once from the newly added `AssertLockNotHeld()` and a second time from `push_lock()`. It should be possible to do everything in `push_lock()` and avoid adding the call to `AssertLockNotHeld()`.\r\n\r\n> ...breaks uniformity, no?\r\n\r\nI don't see it that way - `LOCK()` already implies that we don't own the mutex.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-18T19:22:52Z",
      "diff_hunk" : "@@ -534,137 +559,145 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        return sizeNonLockerHelper();\n     }\n \n     //! Consistency check\n-    void Check()\n+    void Check() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n+        AssertLockNotHeld(m_addrman_mutex);\n #ifdef DEBUG_ADDRMAN\n-        {\n-            LOCK(cs);\n-            int err;\n-            if ((err=Check_()))\n-                LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n-        }\n-#endif\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n+#endif // DEBUG_ADDRMAN\n     }\n \n     //! Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         bool fRet = false;\n-        Check();\n+        CheckNonLockHelper();\n         fRet |= Add_(addr, source, nTimePenalty);\n-        Check();\n+        CheckNonLockHelper();\n         if (fRet) {\n             LogPrint(BCLog::ADDRMAN, \"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort(), source.ToString(), nTried, nNew);\n         }\n         return fRet;\n     }\n \n     //! Add multiple addresses.\n-    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         int nAdd = 0;\n-        Check();\n+        CheckNonLockHelper();\n         for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n             nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n-        Check();\n+        CheckNonLockHelper();\n         if (nAdd) {\n             LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n         }\n         return nAdd > 0;\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Good_(addr, test_before_evict, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Attempt_(addr, fCountFailure, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions()\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r442450059",
      "id" : 442450059,
      "in_reply_to_id" : 441763265,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MDA1OQ==",
      "original_commit_id" : "9cd0ed858c96b1052580e2044069c5cb9434628e",
      "original_line" : 634,
      "original_position" : 336,
      "original_start_line" : 633,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 433579363,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/442450059",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> btw, how about convention to add the `_cs` suffix to the name of the function that is called from within the critical section already guarded by the locked instance of the `Mutex`?\r\n\r\nI like it, and it is shorter than `...NonLockHelper()`, but what about the [CamelCaseConvention](\r\nhttps://github.com/bitcoin/bitcoin/blame/808ef36b89ea9ce72116bbd7ee479b984367dc60/doc/developer-notes.md#L87)? Also, it would get fuzzy if more than one mutex is involved and a method requires one to be held and the other not...",
      "created_at" : "2020-06-18T19:28:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-646262231",
      "id" : 646262231,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0NjI2MjIzMQ==",
      "updated_at" : "2020-06-18T19:28:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646262231",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r443132584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443132584"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here is a PR that would detect a double lock. With the check from inside `LOCK()` it makes unnecessary to add `AssertLockNotHeld()` calls before each `LOCK()`: https://github.com/bitcoin/bitcoin/pull/19337",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2020-06-20T13:52:56Z",
      "diff_hunk" : "@@ -534,137 +559,145 @@ friend class CAddrManTest;\n     }\n \n     //! Return the number of (unique) addresses in all tables.\n-    size_t size() const\n+    size_t size() const EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs); // TODO: Cache this in an atomic to avoid this overhead\n-        return vRandom.size();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        return sizeNonLockerHelper();\n     }\n \n     //! Consistency check\n-    void Check()\n+    void Check() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n+        AssertLockNotHeld(m_addrman_mutex);\n #ifdef DEBUG_ADDRMAN\n-        {\n-            LOCK(cs);\n-            int err;\n-            if ((err=Check_()))\n-                LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n-        }\n-#endif\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n+#endif // DEBUG_ADDRMAN\n     }\n \n     //! Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         bool fRet = false;\n-        Check();\n+        CheckNonLockHelper();\n         fRet |= Add_(addr, source, nTimePenalty);\n-        Check();\n+        CheckNonLockHelper();\n         if (fRet) {\n             LogPrint(BCLog::ADDRMAN, \"Added %s from %s: %i tried, %i new\\n\", addr.ToStringIPPort(), source.ToString(), nTried, nNew);\n         }\n         return fRet;\n     }\n \n     //! Add multiple addresses.\n-    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n         int nAdd = 0;\n-        Check();\n+        CheckNonLockHelper();\n         for (std::vector<CAddress>::const_iterator it = vAddr.begin(); it != vAddr.end(); it++)\n             nAdd += Add_(*it, source, nTimePenalty) ? 1 : 0;\n-        Check();\n+        CheckNonLockHelper();\n         if (nAdd) {\n             LogPrint(BCLog::ADDRMAN, \"Added %i addresses from %s: %i tried, %i new\\n\", nAdd, source.ToString(), nTried, nNew);\n         }\n         return nAdd > 0;\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Good_(addr, test_before_evict, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, bool fCountFailure, int64_t nTime = GetAdjustedTime()) EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);\n+        CheckNonLockHelper();\n         Attempt_(addr, fCountFailure, nTime);\n-        Check();\n+        CheckNonLockHelper();\n     }\n \n     //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n-    void ResolveCollisions()\n+    void ResolveCollisions() EXCLUSIVE_LOCKS_REQUIRED(!m_addrman_mutex)\n     {\n-        LOCK(cs);\n-        Check();\n+        AssertLockNotHeld(m_addrman_mutex);\n+        LOCK(m_addrman_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r443132584",
      "id" : 443132584,
      "in_reply_to_id" : 441763265,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjU4NA==",
      "original_commit_id" : "9cd0ed858c96b1052580e2044069c5cb9434628e",
      "original_line" : 634,
      "original_position" : 336,
      "original_start_line" : 633,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 434429871,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-01T23:43:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/443132584",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Note for reviewers: please review #19337 at fist.",
      "created_at" : "2020-06-20T13:56:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-646998921",
      "id" : 646998921,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0Njk5ODkyMQ==",
      "updated_at" : "2020-06-20T13:56:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/646998921",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-08-12T15:11:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-672933119",
      "id" : 672933119,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MjkzMzExOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-12T15:11:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672933119",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 9cd0ed858c96b1052580e2044069c5cb9434628e -> d985aeeac48114f1078980888303f34ffdb78e74 ([pr19238.05](https://github.com/hebasto/bitcoin/commits/pr19238.05) -> [pr19238.06](https://github.com/hebasto/bitcoin/commits/pr19238.06)):\r\n\r\n- rebased due to the conflict with #19658\r\n- implemented naming [convention](https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-646226615) with :+1:  from @ajtowns \r\n- separated commit with potentially controversial mutex renaming",
      "created_at" : "2020-08-15T18:38:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-674433777",
      "id" : 674433777,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDQzMzc3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-15T18:38:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674433777",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-10-11T02:23:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-706639470",
      "id" : 706639470,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwNjYzOTQ3MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-11T02:23:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/706639470",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Needs rebase.",
      "created_at" : "2020-12-31T13:12:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-752955434",
      "id" : 752955434,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1Mjk1NTQzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-31T13:12:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752955434",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated d985aeeac48114f1078980888303f34ffdb78e74 -> f1246cb12f573c4a8b32d75d6ea377eeec3b43e7 ([pr19238.06](https://github.com/hebasto/bitcoin/commits/pr19238.06) -> [pr19238.07](https://github.com/hebasto/bitcoin/commits/pr19238.07)):\r\n\r\n- rebased\r\n- dropped the mutex renaming commit",
      "created_at" : "2021-01-01T22:01:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-753390956",
      "id" : 753390956,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzM5MDk1Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-01T22:01:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753390956",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550865131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550865131"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you consolidate all the private members and protected members to be next to each other? Multiple private and protected access specifiers make this harder to read than is necessary.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-01-02T09:55:44Z",
      "diff_hunk" : "@@ -229,13 +229,48 @@ friend class CAddrManTest;\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    void CheckWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+#ifdef DEBUG_ADDRMAN\n+        AssertLockHeld(cs);\n+        if (const int err = Check_(); err != 0) {\n+            LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n+        }\n+#endif // DEBUG_ADDRMAN\n+    }\n+\n+    void ClearWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        AssertLockHeld(cs);\n+        std::vector<int>().swap(vRandom);\n+        nKey = insecure_rand.rand256();\n+        for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n+            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n+                vvNew[bucket][entry] = -1;\n+            }\n+        }\n+        for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; bucket++) {\n+            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n+                vvTried[bucket][entry] = -1;\n+            }\n+        }\n+\n+        nIdCount = 0;\n+        nTried = 0;\n+        nNew = 0;\n+        nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n+        mapInfo.clear();\n+        mapAddr.clear();\n+    }\n+\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n \n     //! Source of random numbers for randomization in inner loops\n     FastRandomContext insecure_rand;\n \n+private:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550865131",
      "id" : 550865131,
      "line" : 273,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg2NTEzMQ==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 273,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 56,
      "pull_request_review_id" : 560628840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-02T13:50:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550865131",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883088"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550883088"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think we need to expose this as a public method just for the addrman tests. Just release the lock in that test before calling `Attempt()`:\r\n\r\n```diff\r\n--- a/src/test/addrman_tests.cpp\r\n+++ b/src/test/addrman_tests.cpp\r\n@@ -73,13 +73,12 @@ public:\r\n     // Simulates connection failure so that we can test eviction of offline nodes\r\n     void SimConnFail(const CService& addr)\r\n     {\r\n-         LOCK(cs);\r\n-         int64_t nLastSuccess = 1;\r\n-         Good_(addr, true, nLastSuccess); // Set last good connection in the deep past.\r\n+         // Set last good connection in the deep past.\r\n+         WITH_LOCK(cs, {Good_(addr, true, /* nLastSuccess= */ 1);});\r\n \r\n          bool count_failure = false;\r\n          int64_t nLastTry = GetAdjustedTime()-61;\r\n-         AttemptWithLockHeld(addr, count_failure, nLastTry);\r\n+         Attempt(addr, count_failure, nLastTry);\r\n```\r\n\r\nThe unit test is single threaded, so there's no need to hold the mutex between `Good_()` and `Attempt()`.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-01-02T13:42:57Z",
      "diff_hunk" : "@@ -262,7 +297,7 @@ friend class CAddrManTest;\n     bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Mark an entry as attempted to connect.\n-    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void AttemptWithLockHeld(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883088",
      "id" : 550883088,
      "line" : 300,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MzA4OA==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 300,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 65,
      "pull_request_review_id" : 560628840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-02T13:50:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550883088",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550883172"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Make this (and other `Check()` functions) `const`?",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-01-02T13:43:32Z",
      "diff_hunk" : "@@ -229,13 +229,48 @@ friend class CAddrManTest;\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    void CheckWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883172",
      "id" : 550883172,
      "line" : 232,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MzE3Mg==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 232,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 15,
      "pull_request_review_id" : 560628840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-02T13:50:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550883172",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550883356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It'd be good to get rid of the `Clear()` functions entirely:\r\n\r\n- the call to `Clear()` in deserialize could be replaced with an assert that size() is 0 (we should never deserialize into a populated `CAddrman`)\r\n- the calls in the tests can be replaced by instantiating new `CAddrman`s. Clearing then reusing an existing `CAddrman` is not a realistic usage pattern.\r\n\r\nIf you don't want to do that in this PR, it feels like this function should be called `Clear_()` and be defined in the cpp file, for consistency with the other functions.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-01-02T13:45:48Z",
      "diff_hunk" : "@@ -229,13 +229,48 @@ friend class CAddrManTest;\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    void CheckWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+#ifdef DEBUG_ADDRMAN\n+        AssertLockHeld(cs);\n+        if (const int err = Check_(); err != 0) {\n+            LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n+        }\n+#endif // DEBUG_ADDRMAN\n+    }\n+\n+    void ClearWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883356",
      "id" : 550883356,
      "line" : 242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MzM1Ng==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 242,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 25,
      "pull_request_review_id" : 560628840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-02T14:01:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550883356",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550883659"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It feels like this is a good opportunity to make the access patterns consistent here:\r\n\r\n```diff\r\n@@ -689,13 +689,10 @@ public:\r\n     //! Randomly select an address in tried that another address is attempting to evict.\r\n     CAddrInfo SelectTriedCollision()\r\n     {\r\n-        CAddrInfo ret;\r\n-        {\r\n-            LOCK(cs);\r\n-            CheckWithLockHeld();\r\n-            ret = SelectTriedCollision_();\r\n-            CheckWithLockHeld();\r\n-        }\r\n+        LOCK(cs);\r\n+        CheckWithLockHeld();\r\n+        CAddrInfo ret = SelectTriedCollision_();\r\n+        CheckWithLockHeld();\r\n         return ret;\r\n     }\r\n \r\n@@ -704,26 +701,21 @@ public:\r\n      */\r\n     CAddrInfo Select(bool newOnly = false)\r\n     {\r\n-        CAddrInfo addrRet;\r\n-        {\r\n-            LOCK(cs);\r\n-            CheckWithLockHeld();\r\n-            addrRet = Select_(newOnly);\r\n-            CheckWithLockHeld();\r\n-        }\r\n+        LOCK(cs);\r\n+        CheckWithLockHeld();\r\n+        CAddrInfo addrRet = Select_(newOnly);\r\n+        CheckWithLockHeld();\r\n         return addrRet;\r\n     }\r\n \r\n     //! Return a bunch of addresses, selected at random.\r\n     std::vector<CAddress> GetAddr(size_t max_addresses, size_t max_pct)\r\n     {\r\n-        Check();\r\n+        LOCK(cs);\r\n+        CheckWithLockHeld();\r\n         std::vector<CAddress> vAddr;\r\n-        {\r\n-            LOCK(cs);\r\n-            GetAddr_(vAddr, max_addresses, max_pct);\r\n-        }\r\n-        Check();\r\n+        GetAddr_(vAddr, max_addresses, max_pct);\r\n+        CheckWithLockHeld();\r\n         return vAddr;\r\n     }\r\n```\r\n\r\n(i.e. for all of these functions take the lock, run Check(), run the inner function, run Check() again, release lock/return)",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-01-02T13:49:09Z",
      "diff_hunk" : "@@ -679,9 +692,9 @@ friend class CAddrManTest;\n         CAddrInfo ret;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r550883659",
      "id" : 550883659,
      "line" : 692,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg4MzY1OQ==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 692,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 190,
      "pull_request_review_id" : 560628840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-02T13:50:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550883659",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery Thank you for your review. While working on this pull I had similar thoughts about points you mentioned. So I'm happy to make some improvements.",
      "created_at" : "2021-01-02T13:57:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-753476817",
      "id" : 753476817,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzQ3NjgxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-02T13:57:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753476817",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@hebasto Whilst you're looking at this code, do you mind taking a look at #20233. Without that PR, `CAddrMan::Check()` is basically useless, since it's enabled by a compile-time option which I expect nobody uses. That PR would make it a runtime check, so that we could enable it for the unit, functional and fuzz tests. It's obviously much more likely to catch bugs if it's being run by those tests!",
      "created_at" : "2021-01-02T14:23:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-753479491",
      "id" : 753479491,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzQ3OTQ5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-02T14:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753479491",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> @hebasto Whilst you're looking at this code, do you mind taking a look at #20233. Without that PR, `CAddrMan::Check()` is basically useless, since it's enabled by a compile-time option which I expect nobody uses. That PR would make it a runtime check, so that we could enable it for the unit, functional and fuzz tests. It's obviously much more likely to catch bugs if it's being run by those tests!\r\n\r\nSure!",
      "created_at" : "2021-01-02T14:34:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-753480896",
      "id" : 753480896,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzQ4MDg5Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-02T14:34:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753480896",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r552349817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552349817"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I was expecting to see `EXCLUSIVE_LOCKS_REQUIRED(!cs)` added to these functions that lock `cs` to get compile time detection of double-locking. Any reason not to have them?",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-01-06T03:33:18Z",
      "diff_hunk" : "@@ -608,23 +625,19 @@ friend class CAddrManTest;\n     void Check()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r552349817",
      "id" : 552349817,
      "line" : 625,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM0OTgxNw==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 625,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 113,
      "pull_request_review_id" : 562304511,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T03:33:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552349817",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r557265083"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557265083"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : ":+1: This would make the `Check()` function unused, so it can be removed.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-01-14T09:44:26Z",
      "diff_hunk" : "@@ -679,9 +692,9 @@ friend class CAddrManTest;\n         CAddrInfo ret;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r557265083",
      "id" : 557265083,
      "in_reply_to_id" : 550883659,
      "line" : 692,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI2NTA4Mw==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 692,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 190,
      "pull_request_review_id" : 568066805,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T09:44:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557265083",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754 looks good, I agree with the above suggestions from @jnewbery and @ajtowns.",
      "created_at" : "2021-01-14T09:53:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-760086594",
      "id" : 760086594,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MDA4NjU5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T09:53:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760086594",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r557271783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557271783"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, class declaration is easier to read if there is just one instance of `public:`, `protected:` and `private:` (in that order).\r\n",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-01-14T09:54:56Z",
      "diff_hunk" : "@@ -229,13 +229,48 @@ friend class CAddrManTest;\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    void CheckWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+#ifdef DEBUG_ADDRMAN\n+        AssertLockHeld(cs);\n+        if (const int err = Check_(); err != 0) {\n+            LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n+        }\n+#endif // DEBUG_ADDRMAN\n+    }\n+\n+    void ClearWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        AssertLockHeld(cs);\n+        std::vector<int>().swap(vRandom);\n+        nKey = insecure_rand.rand256();\n+        for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n+            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n+                vvNew[bucket][entry] = -1;\n+            }\n+        }\n+        for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; bucket++) {\n+            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n+                vvTried[bucket][entry] = -1;\n+            }\n+        }\n+\n+        nIdCount = 0;\n+        nTried = 0;\n+        nNew = 0;\n+        nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n+        mapInfo.clear();\n+        mapAddr.clear();\n+    }\n+\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n \n     //! Source of random numbers for randomization in inner loops\n     FastRandomContext insecure_rand;\n \n+private:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r557271783",
      "id" : 557271783,
      "in_reply_to_id" : 550865131,
      "line" : 273,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI3MTc4Mw==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 273,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 56,
      "pull_request_review_id" : 568075305,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T09:54:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557271783",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637537333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637537333"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@jnewbery @vasild \r\n\r\nDone in #22025.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-05-23T12:16:12Z",
      "diff_hunk" : "@@ -229,13 +229,48 @@ friend class CAddrManTest;\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    void CheckWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+#ifdef DEBUG_ADDRMAN\n+        AssertLockHeld(cs);\n+        if (const int err = Check_(); err != 0) {\n+            LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n+        }\n+#endif // DEBUG_ADDRMAN\n+    }\n+\n+    void ClearWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+        AssertLockHeld(cs);\n+        std::vector<int>().swap(vRandom);\n+        nKey = insecure_rand.rand256();\n+        for (size_t bucket = 0; bucket < ADDRMAN_NEW_BUCKET_COUNT; bucket++) {\n+            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n+                vvNew[bucket][entry] = -1;\n+            }\n+        }\n+        for (size_t bucket = 0; bucket < ADDRMAN_TRIED_BUCKET_COUNT; bucket++) {\n+            for (size_t entry = 0; entry < ADDRMAN_BUCKET_SIZE; entry++) {\n+                vvTried[bucket][entry] = -1;\n+            }\n+        }\n+\n+        nIdCount = 0;\n+        nTried = 0;\n+        nNew = 0;\n+        nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n+        mapInfo.clear();\n+        mapAddr.clear();\n+    }\n+\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n \n     //! Source of random numbers for randomization in inner loops\n     FastRandomContext insecure_rand;\n \n+private:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637537333",
      "id" : 637537333,
      "in_reply_to_id" : 550865131,
      "line" : 273,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzUzNzMzMw==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 273,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 56,
      "pull_request_review_id" : 666261895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-23T12:16:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637537333",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637574215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637574215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This change is not trivial due to the non-const [`std::map::operator[]`](https://en.cppreference.com/w/cpp/container/map/operator_at):\r\n```\r\naddrman.cpp:433:20: error: no viable overloaded operator[] for type 'const std::map<CNetAddr, int>'\r\n        if (mapAddr[info] != n)\r\n            ~~~~~~~^~~~~\r\n```",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-05-23T16:59:14Z",
      "diff_hunk" : "@@ -229,13 +229,48 @@ friend class CAddrManTest;\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    void CheckWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637574215",
      "id" : 637574215,
      "in_reply_to_id" : 550883172,
      "line" : 232,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzU3NDIxNQ==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 232,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 15,
      "pull_request_review_id" : 666287335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-23T16:59:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637574215",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637580390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637580390"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@jnewbery \r\n> It'd be good to get rid of the `Clear()` functions entirely:\r\n\r\nI totally agree with you.\r\n\r\n>  - the call to `Clear()` in deserialize could be replaced with an assert that size() is 0 (we should never deserialize into a populated `CAddrman`)\r\n\r\nGoing to implement this suggestion.\r\n\r\n>  - the calls in the tests can be replaced by instantiating new `CAddrman`s. Clearing then reusing an existing `CAddrman` is not a realistic usage pattern.\r\n\r\nThis part is not trivial, and probably deserves its own pr.",
      "commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "created_at" : "2021-05-23T17:56:12Z",
      "diff_hunk" : "@@ -229,13 +229,48 @@ friend class CAddrManTest;\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    void CheckWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+#ifdef DEBUG_ADDRMAN\n+        AssertLockHeld(cs);\n+        if (const int err = Check_(); err != 0) {\n+            LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n+        }\n+#endif // DEBUG_ADDRMAN\n+    }\n+\n+    void ClearWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637580390",
      "id" : 637580390,
      "in_reply_to_id" : 550883356,
      "line" : 242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzU4MDM5MA==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 242,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 25,
      "pull_request_review_id" : 666291478,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-23T17:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637580390",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery @ajtowns @vasild \r\n\r\nThank you for your reviews!\r\n\r\nUpdated 0c0fb742ad7b686209efb627a8ec43d7f96c3754 -> 148a7c9454adc3e311867f3566e01d261b362f71 ([pr19238.08](https://github.com/hebasto/bitcoin/commits/pr19238.08) -> [pr19238.09](https://github.com/hebasto/bitcoin/commits/pr19238.09)):\r\n\r\n- addressed comments\r\n- rebased on top of the recent CI changes",
      "created_at" : "2021-05-23T18:30:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-846605462",
      "id" : 846605462,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NjYwNTQ2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-23T18:30:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/846605462",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637584320"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Of course! Done in 7f01942d2d3d9d66a8932d6a1fe08281d9b52273.",
      "commit_id" : "148a7c9454adc3e311867f3566e01d261b362f71",
      "created_at" : "2021-05-23T18:32:17Z",
      "diff_hunk" : "@@ -608,23 +625,19 @@ friend class CAddrManTest;\n     void Check()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584320",
      "id" : 637584320,
      "in_reply_to_id" : 552349817,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzU4NDMyMA==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 625,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 666294032,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-23T18:32:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637584320",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637584493"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! Done in e21c0dd57009197dfeedbc4ed4d30454b7a05cf6.",
      "commit_id" : "148a7c9454adc3e311867f3566e01d261b362f71",
      "created_at" : "2021-05-23T18:33:53Z",
      "diff_hunk" : "@@ -679,9 +692,9 @@ friend class CAddrManTest;\n         CAddrInfo ret;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584493",
      "id" : 637584493,
      "in_reply_to_id" : 550883659,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzU4NDQ5Mw==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 692,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 666294154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-23T18:33:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637584493",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637584595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! [Updated](https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-846605462).",
      "commit_id" : "148a7c9454adc3e311867f3566e01d261b362f71",
      "created_at" : "2021-05-23T18:34:51Z",
      "diff_hunk" : "@@ -229,13 +229,48 @@ friend class CAddrManTest;\n     //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n     std::set<int> m_tried_collisions;\n \n+    void CheckWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+#ifdef DEBUG_ADDRMAN\n+        AssertLockHeld(cs);\n+        if (const int err = Check_(); err != 0) {\n+            LogPrintf(\"ADDRMAN CONSISTENCY CHECK FAILED!!! err=%i\\n\", err);\n+        }\n+#endif // DEBUG_ADDRMAN\n+    }\n+\n+    void ClearWithLockHeld() EXCLUSIVE_LOCKS_REQUIRED(cs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584595",
      "id" : 637584595,
      "in_reply_to_id" : 550883356,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzU4NDU5NQ==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 242,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 666294232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-23T18:34:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637584595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637584712"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! Done in bc3694a49a93b9ae6f8cacfd0d5b1def5f09b004.",
      "commit_id" : "148a7c9454adc3e311867f3566e01d261b362f71",
      "created_at" : "2021-05-23T18:35:50Z",
      "diff_hunk" : "@@ -262,7 +297,7 @@ friend class CAddrManTest;\n     bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     //! Mark an entry as attempted to connect.\n-    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void AttemptWithLockHeld(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637584712",
      "id" : 637584712,
      "in_reply_to_id" : 550883088,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzU4NDcxMg==",
      "original_commit_id" : "0c0fb742ad7b686209efb627a8ec43d7f96c3754",
      "original_line" : 300,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 666294306,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-23T18:35:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637584712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637813423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637813423"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It is a matter of taste. Personally, I find the \"classic\" easier to read:\r\n```cpp\r\nconst int err = Check_();\r\nif (err != 0) {\r\n```\r\nIt is also more gdb-friendly because one can set breakpoint on the first or on the second line.",
      "commit_id" : "ee79105070778bd1f3f9693536e3c92801ae63a8",
      "created_at" : "2021-05-24T09:29:19Z",
      "diff_hunk" : "@@ -752,13 +611,161 @@ friend class CAddrManTest;\n     }\n \n     void SetServices(const CService &addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();\n         SetServices_(addr, nServices);\n         Check();\n     }\n \n+private:\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n+\n+    //! Serialization versions.\n+    enum Format : uint8_t {\n+        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n+        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n+        V2_ASMAP = 2,         //!< for files including asmap version\n+        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n+    };\n+\n+    //! The maximum format this software knows it can unserialize. Also, we always serialize\n+    //! in this format.\n+    //! The format (first byte in the serialized stream) can be higher than this and\n+    //! still this software may be able to unserialize the file - if the second byte\n+    //! (see `lowest_compatible` in `Unserialize()`) is less or equal to this.\n+    static constexpr Format FILE_FORMAT = Format::V3_BIP155;\n+\n+    //! The initial value of a field that is incremented every time an incompatible format\n+    //! change is made (such that old software versions would not be able to parse and\n+    //! understand the new file format). This is 32 because we overtook the \"key size\"\n+    //! field which was 32 historically.\n+    //! @note Don't increment this. Increment `lowest_compatible` in `Serialize()` instead.\n+    static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n+\n+    //! last used nId\n+    int nIdCount GUARDED_BY(cs);\n+\n+    //! table with information about all nIds\n+    std::map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n+\n+    //! find an nId based on its network address\n+    std::map<CNetAddr, int> mapAddr GUARDED_BY(cs);\n+\n+    //! randomly-ordered vector of all nIds\n+    std::vector<int> vRandom GUARDED_BY(cs);\n+\n+    // number of \"tried\" entries\n+    int nTried GUARDED_BY(cs);\n+\n+    //! list of \"tried\" buckets\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! number of (unique) \"new\" entries\n+    int nNew GUARDED_BY(cs);\n+\n+    //! list of \"new\" buckets\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! last time Good was called (memory only)\n+    int64_t nLastGood GUARDED_BY(cs);\n+\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n+    //! Source of random numbers for randomization in inner loops\n+    FastRandomContext insecure_rand;\n+\n+    //! Find an entry.\n+    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! find an entry, creating it if necessary.\n+    //! nTime and nServices of the found node are updated, if necessary.\n+    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Swap two elements in vRandom.\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Move an entry from the \"new\" table(s) to the \"tried\" table\n+    void MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Delete an entry. It must not be in tried, and have refcount 0.\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Mark an entry \"good\", possibly moving it from \"new\" to \"tried\".\n+    void Good_(const CService &addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Add an entry to the \"new\" table.\n+    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Mark an entry as attempted to connect.\n+    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n+    CAddrInfo Select_(bool newOnly) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Return a random to-be-evicted tried table address.\n+    CAddrInfo SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Consistency check\n+    void Check()\n+        EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+#ifdef DEBUG_ADDRMAN\n+        AssertLockHeld(cs);\n+        if (const int err = Check_(); err != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637813423",
      "id" : 637813423,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzgxMzQyMw==",
      "original_commit_id" : "148a7c9454adc3e311867f3566e01d261b362f71",
      "original_line" : 727,
      "original_position" : 411,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 666560548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-24T10:05:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637813423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637839950"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637839950"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! Updated.",
      "commit_id" : "ee79105070778bd1f3f9693536e3c92801ae63a8",
      "created_at" : "2021-05-24T10:14:43Z",
      "diff_hunk" : "@@ -752,13 +611,161 @@ friend class CAddrManTest;\n     }\n \n     void SetServices(const CService &addr, ServiceFlags nServices)\n+        EXCLUSIVE_LOCKS_REQUIRED(!cs)\n     {\n         LOCK(cs);\n         Check();\n         SetServices_(addr, nServices);\n         Check();\n     }\n \n+private:\n+    //! A mutex to protect the inner data structures.\n+    mutable Mutex cs;\n+\n+    //! Serialization versions.\n+    enum Format : uint8_t {\n+        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n+        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n+        V2_ASMAP = 2,         //!< for files including asmap version\n+        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n+    };\n+\n+    //! The maximum format this software knows it can unserialize. Also, we always serialize\n+    //! in this format.\n+    //! The format (first byte in the serialized stream) can be higher than this and\n+    //! still this software may be able to unserialize the file - if the second byte\n+    //! (see `lowest_compatible` in `Unserialize()`) is less or equal to this.\n+    static constexpr Format FILE_FORMAT = Format::V3_BIP155;\n+\n+    //! The initial value of a field that is incremented every time an incompatible format\n+    //! change is made (such that old software versions would not be able to parse and\n+    //! understand the new file format). This is 32 because we overtook the \"key size\"\n+    //! field which was 32 historically.\n+    //! @note Don't increment this. Increment `lowest_compatible` in `Serialize()` instead.\n+    static constexpr uint8_t INCOMPATIBILITY_BASE = 32;\n+\n+    //! last used nId\n+    int nIdCount GUARDED_BY(cs);\n+\n+    //! table with information about all nIds\n+    std::map<int, CAddrInfo> mapInfo GUARDED_BY(cs);\n+\n+    //! find an nId based on its network address\n+    std::map<CNetAddr, int> mapAddr GUARDED_BY(cs);\n+\n+    //! randomly-ordered vector of all nIds\n+    std::vector<int> vRandom GUARDED_BY(cs);\n+\n+    // number of \"tried\" entries\n+    int nTried GUARDED_BY(cs);\n+\n+    //! list of \"tried\" buckets\n+    int vvTried[ADDRMAN_TRIED_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! number of (unique) \"new\" entries\n+    int nNew GUARDED_BY(cs);\n+\n+    //! list of \"new\" buckets\n+    int vvNew[ADDRMAN_NEW_BUCKET_COUNT][ADDRMAN_BUCKET_SIZE] GUARDED_BY(cs);\n+\n+    //! last time Good was called (memory only)\n+    int64_t nLastGood GUARDED_BY(cs);\n+\n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discipline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n+    //! secret key to randomize bucket select with\n+    uint256 nKey;\n+\n+    //! Source of random numbers for randomization in inner loops\n+    FastRandomContext insecure_rand;\n+\n+    //! Find an entry.\n+    CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! find an entry, creating it if necessary.\n+    //! nTime and nServices of the found node are updated, if necessary.\n+    CAddrInfo* Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Swap two elements in vRandom.\n+    void SwapRandom(unsigned int nRandomPos1, unsigned int nRandomPos2) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Move an entry from the \"new\" table(s) to the \"tried\" table\n+    void MakeTried(CAddrInfo& info, int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Delete an entry. It must not be in tried, and have refcount 0.\n+    void Delete(int nId) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Clear a position in a \"new\" table. This is the only place where entries are actually deleted.\n+    void ClearNew(int nUBucket, int nUBucketPos) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Mark an entry \"good\", possibly moving it from \"new\" to \"tried\".\n+    void Good_(const CService &addr, bool test_before_evict, int64_t time) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Add an entry to the \"new\" table.\n+    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Mark an entry as attempted to connect.\n+    void Attempt_(const CService &addr, bool fCountFailure, int64_t nTime) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n+    CAddrInfo Select_(bool newOnly) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n+    void ResolveCollisions_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Return a random to-be-evicted tried table address.\n+    CAddrInfo SelectTriedCollision_() EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    //! Consistency check\n+    void Check()\n+        EXCLUSIVE_LOCKS_REQUIRED(cs)\n+    {\n+#ifdef DEBUG_ADDRMAN\n+        AssertLockHeld(cs);\n+        if (const int err = Check_(); err != 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#discussion_r637839950",
      "id" : 637839950,
      "in_reply_to_id" : 637813423,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzgzOTk1MA==",
      "original_commit_id" : "148a7c9454adc3e311867f3566e01d261b362f71",
      "original_line" : 727,
      "original_position" : 411,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 666595941,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19238",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-24T10:14:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637839950",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased ee79105070778bd1f3f9693536e3c92801ae63a8 -> e2787fb24a675e62a82bcb43400ad8e1a68761d2 ([pr19238.10](https://github.com/hebasto/bitcoin/commits/pr19238.10) -> [pr19238.11](https://github.com/hebasto/bitcoin/commits/pr19238.11)) due to the merging of #22025.",
      "created_at" : "2021-05-27T14:16:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-849672208",
      "id" : 849672208,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTY3MjIwOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-27T14:16:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849672208",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-06-12T04:42:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-859997457",
      "id" : 859997457,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1OTk5NzQ1Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-12T04:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859997457",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased e2787fb24a675e62a82bcb43400ad8e1a68761d2 -> af9550561d7fa8cfa8da910db3e46993f848a0f5 ([pr19238.11](https://github.com/hebasto/bitcoin/commits/pr19238.11) -> [pr19238.12](https://github.com/hebasto/bitcoin/commits/pr19238.12)) due to the conflict with #18722.",
      "created_at" : "2021-06-12T12:33:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860047512",
      "id" : 860047512,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDA0NzUxMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-12T12:33:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860047512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK af9550561d7fa8cfa8da910db3e46993f848a0f5",
      "created_at" : "2021-06-14T13:30:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860686329",
      "id" : 860686329,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDY4NjMyOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-14T13:30:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860686329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "There might be a silent merge conflict",
      "created_at" : "2021-06-14T14:17:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860721702",
      "id" : 860721702,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDcyMTcwMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-14T14:17:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860721702",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\ntest/fuzz/addrman.cpp:110:30: error: 'Check' is a private member of 'CAddrMan'\r\n    (void)/*const_*/addr_man.Check();\r\n                             ^\r\n./addrman.h:722:10: note: declared private here\r\n    void Check()\r\n         ^\r\n1 error generated.\r\n",
      "created_at" : "2021-06-14T14:19:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860723498",
      "id" : 860723498,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDcyMzQ5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-14T14:19:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860723498",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> There might be a silent merge conflict\r\n\r\nWith #21941. Rebasing.",
      "created_at" : "2021-06-14T14:24:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860726973",
      "id" : 860726973,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDcyNjk3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-14T14:24:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860726973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke @jnewbery @vasild \r\n\r\nRebased af9550561d7fa8cfa8da910db3e46993f848a0f5 -> ae98aec9c0521cdcec76459c8200bd45ff6a1485 ([pr19238.12](https://github.com/hebasto/bitcoin/commits/pr19238.12) -> [pr19238.13](https://github.com/hebasto/bitcoin/commits/pr19238.13)) due to the silent merge conflict with #21941.",
      "created_at" : "2021-06-14T14:30:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19238#issuecomment-860731808",
      "id" : 860731808,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19238",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDczMTgwOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-14T14:30:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860731808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   }
]
