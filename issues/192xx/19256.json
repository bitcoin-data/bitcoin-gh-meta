{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "[`optional_last_value`](https://www.boost.org/doc/libs/1_73_0/doc/html/boost/signals2/optional_last_value.html), which does not throw, has replaced `last_value` as\r\nBoosts default combiner. Besides being better supported, it also doesn't\r\ntrigger gcc's `-Wmaybe-unitialized` warning, presumably because exceptions no\r\nlonger bubble-up out of signals:\r\n\r\n```bash\r\nIn file included from ui_interface.cpp:9:\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp: In member function 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]':\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp:54:36: warning: '*((void*)& value +1)' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n         if(value) return value.get();\r\n                                    ^\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp:43:21: note: '*((void*)& value +1)' was declared here\r\n         optional<T> value;\r\n                     ^~~~~\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp: In member function 'boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::result_type boost::signals2::detail::signal_impl<R(Args ...), Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::operator()(Args ...) [with Combiner = boost::signals2::last_value<bool>; Group = int; GroupCompare = std::less<int>; SlotFunction = boost::function<bool(const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; ExtendedSlotFunction = boost::function<bool(const boost::signals2::connection&, const bilingual_str&, const std::__cxx11::basic_string<char>&, const std::__cxx11::basic_string<char>&, unsigned int)>; Mutex = boost::signals2::mutex; R = bool; Args = {const bilingual_str&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, unsigned int}]':\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp:54:36: warning: '*((void*)& value +1)' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n         if(value) return value.get();\r\n                                    ^\r\n/bitcoin/depends/x86_64-pc-linux-gnu/share/../include/boost/signals2/last_value.hpp:43:21: note: '*((void*)& value +1)' was declared here\r\n         optional<T> value;\r\n                     ^~~~~\r\n```\r\n\r\nThe change in default happened in [Boost 1.39.0](https://www.boost.org/users/history/version_1_39_0.html) (along with the introduction of the Signals2 library. \r\n\r\nMore information is also available here https://www.boost.org/doc/libs/1_73_0/doc/html/signals2/rationale.html#id-1.3.36.9.4:\r\n> The default combiner for Boost.Signals2 has changed from the last_value combiner used by default in the original Boost.Signals library.\r\n> This is because last_value requires that at least 1 slot be connected to the signal when it is invoked (except for the last_value<void> specialization).\r\n>  In a multi-threaded environment where signal invocations and slot connections and disconnections may be happening concurrently, it is difficult to fulfill this requirement. When using optional_last_value, there is no requirement for slots to be connected when a signal is invoked, since in that case the combiner may simply return an empty boost::optional. ",
   "closed_at" : "2020-07-01T14:13:21Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
      "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/laanwj/followers",
      "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/laanwj",
      "id" : 126646,
      "login" : "laanwj",
      "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
      "organizations_url" : "https://api.github.com/users/laanwj/orgs",
      "received_events_url" : "https://api.github.com/users/laanwj/received_events",
      "repos_url" : "https://api.github.com/users/laanwj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/laanwj"
   },
   "comments" : 5,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19256/comments",
   "created_at" : "2020-06-12T05:31:41Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19256/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/19256",
   "id" : 637495672,
   "labels" : [
      {
         "color" : "02d7e1",
         "default" : false,
         "description" : null,
         "id" : 135946,
         "name" : "GUI",
         "node_id" : "MDU6TGFiZWwxMzU5NDY=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/GUI"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19256/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0NDMzNDczNTYx",
   "number" : 19256,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/19256.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19256",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/19256.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19256"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "gui: change combiner for signals to optional_last_value",
   "updated_at" : "2020-07-01T14:13:21Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19256",
   "user" : {
      "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   }
}
