[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Though, I'd prefer if we first cleaned up the interface for ScanForWalletTransactions. I believe that right now it is relying on too much undefined behaviour that this refactoring could be meaningfully reviewed.",
      "created_at" : "2018-11-12T22:09:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-438045762",
      "id" : 438045762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzODA0NTc2Mg==",
      "updated_at" : "2018-11-12T22:09:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/438045762",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> too much undefined behaviour that this refactoring could be meaningfully reviewed.\r\n\r\nAre you talking about a small part of this PR or the whole thing? Most of the changes here don't have anything to do with ScanForWalletTransactions. I could even drop the rescan changes and save them for a different PR if you are only worried about them.",
      "created_at" : "2018-11-12T22:34:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-438052117",
      "id" : 438052117,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzODA1MjExNw==",
      "updated_at" : "2018-11-12T22:34:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/438052117",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nNice readability and robustness improvement",
      "created_at" : "2018-11-13T10:16:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-438211801",
      "id" : 438211801,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzODIxMTgwMQ==",
      "updated_at" : "2018-11-13T10:16:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/438211801",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nWould be easier/safer to review if split up. Like Marco, IÃ¢ÂÂd like to see ScanFor improved first.",
      "created_at" : "2018-11-13T10:21:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-438213381",
      "id" : 438213381,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzODIxMzM4MQ==",
      "updated_at" : "2018-11-13T10:21:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/438213381",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15129](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15129.html) (rpc: Added ability to remove watch only addresses by benthecarman)\n* [#14942](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14942.html) (wallet: Return a ScanResult from CWallet::RescanFromTime by Empact)\n* [#14533](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14533.html) (wallet: ensure wallet files are not reused across chains by mrwhythat)\n* [#10973](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10973.html) (Refactor: separate wallet from node by ryanofsky)\n* [#10102](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10102.html) ([experimental] Multiprocess bitcoin by ryanofsky)\n* [#9381](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/9381.html) (Remove CWalletTx merging logic from AddToWallet by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-11-13T15:20:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-438303753",
      "id" : 438303753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzODMwMzc1Mw==",
      "updated_at" : "2019-01-23T23:36:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/438303753",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233393592"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233393592"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why not use `findPruned(rescan_height, *tip_height)`?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2018-11-14T10:37:11Z",
      "diff_hunk" : "@@ -4122,45 +4135,55 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n-    LockAnnotation lock(::cs_main); // Temporary, for FindForkInGlobalIndex below. Removed in upcoming commit.\n     auto locked_chain = chain.lock();\n     LOCK(walletInstance->cs_wallet);\n \n-    CBlockIndex *pindexRescan = chainActive.Genesis();\n+    int rescan_height = 0;\n     if (!gArgs.GetBoolArg(\"-rescan\", false))\n     {\n         WalletBatch batch(*walletInstance->database);\n         CBlockLocator locator;\n-        if (batch.ReadBestBlock(locator))\n-            pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+        if (batch.ReadBestBlock(locator)) {\n+            if (const Optional<int> fork_height = locked_chain->findLocatorFork(locator)) {\n+                rescan_height = *fork_height;\n+            }\n+        }\n     }\n \n-    walletInstance->m_last_block_processed = chainActive.Tip();\n+    const Optional<int> tip_height = locked_chain->getHeight();\n+    if (tip_height) {\n+        walletInstance->m_last_block_processed = locked_chain->getBlockHash(*tip_height);\n+    } else {\n+        walletInstance->m_last_block_processed.SetNull();\n+    }\n \n-    if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n+    if (tip_height && *tip_height != rescan_height)\n     {\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n         //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n         if (fPruneMode)\n         {\n-            CBlockIndex *block = chainActive.Tip();\n-            while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n-                block = block->pprev;\n+            int block_height = *tip_height;\n+            while (block_height > 0 && locked_chain->haveBlockOnDisk(block_height - 1) && rescan_height != block_height) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233393592",
      "id" : 233393592,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzM5MzU5Mg==",
      "original_commit_id" : "d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0",
      "original_position" : 413,
      "path" : "src/wallet/wallet.cpp",
      "position" : 450,
      "pull_request_review_id" : 174793977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233393592",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233398045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233398045"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this is where the earlier confusion arose, it is `stop_block` which is optional not `start_block`, so the comment is wrong, the names need to be switched",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2018-11-14T10:50:04Z",
      "diff_hunk" : "@@ -1605,114 +1600,133 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n-    }\n-\n-    if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update);\n-        if (failedBlock) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n+        if (start_height) start_block = locked_chain->getBlockHash(*start_height);\n+    }\n+\n+    if (!start_block.IsNull()) {\n+        uint256 failed_block = ScanForWalletTransactions(start_block, {} /* stop block */, reserver, update);\n+        if (!failed_block.IsNull()) {\n+            int64_t time_max;\n+            if (!chain().findBlock(failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n  * Returns null if scan was successful. Otherwise, if a complete rescan was not\n  * possible (due to pruning or corruption), returns pointer to the most recent\n  * block that could not be scanned.\n  *\n- * If pindexStop is not a nullptr, the scan will stop at the block-index\n- * defined by pindexStop\n+ * If stop_block is not null, the scan will stop at the block-index\n+ * defined by stop_block\n  *\n- * Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * Caller needs to make sure stop_block (and the optional start_block) are on",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233398045",
      "id" : 233398045,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzM5ODA0NQ==",
      "original_commit_id" : "d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0",
      "original_position" : 158,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 174793977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233398045",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233641224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233641224"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233393592\r\n\r\n> Why not use findPruned\r\n\r\nI used `haveBlockOnDisk` here because I was doing a very literal translation and `findPruned` doesn't have the `block->pprev->nTx > 0` condition. If can drop that condition or add it to `findPruned`, though, if it would be an improvement.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2018-11-14T22:13:46Z",
      "diff_hunk" : "@@ -4122,45 +4135,55 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n-    LockAnnotation lock(::cs_main); // Temporary, for FindForkInGlobalIndex below. Removed in upcoming commit.\n     auto locked_chain = chain.lock();\n     LOCK(walletInstance->cs_wallet);\n \n-    CBlockIndex *pindexRescan = chainActive.Genesis();\n+    int rescan_height = 0;\n     if (!gArgs.GetBoolArg(\"-rescan\", false))\n     {\n         WalletBatch batch(*walletInstance->database);\n         CBlockLocator locator;\n-        if (batch.ReadBestBlock(locator))\n-            pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+        if (batch.ReadBestBlock(locator)) {\n+            if (const Optional<int> fork_height = locked_chain->findLocatorFork(locator)) {\n+                rescan_height = *fork_height;\n+            }\n+        }\n     }\n \n-    walletInstance->m_last_block_processed = chainActive.Tip();\n+    const Optional<int> tip_height = locked_chain->getHeight();\n+    if (tip_height) {\n+        walletInstance->m_last_block_processed = locked_chain->getBlockHash(*tip_height);\n+    } else {\n+        walletInstance->m_last_block_processed.SetNull();\n+    }\n \n-    if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n+    if (tip_height && *tip_height != rescan_height)\n     {\n         //We can't rescan beyond non-pruned blocks, stop and throw an error\n         //this might happen if a user uses an old wallet within a pruned node\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n         if (fPruneMode)\n         {\n-            CBlockIndex *block = chainActive.Tip();\n-            while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n-                block = block->pprev;\n+            int block_height = *tip_height;\n+            while (block_height > 0 && locked_chain->haveBlockOnDisk(block_height - 1) && rescan_height != block_height) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233641224",
      "id" : 233641224,
      "in_reply_to_id" : 233393592,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY0MTIyNA==",
      "original_commit_id" : "d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0",
      "original_position" : 413,
      "path" : "src/wallet/wallet.cpp",
      "position" : 450,
      "pull_request_review_id" : 175104977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233641224",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233644571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233644571"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233398045\r\n\r\n> the names need to be switched\r\n\r\nGood catch. I'll probably just rewrite this comment if this isn't fixed by another of the rescan PRs first. This comment never made sense to me even when it was first added in https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156810727 / https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163063324.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2018-11-14T22:24:42Z",
      "diff_hunk" : "@@ -1605,114 +1600,133 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n-    }\n-\n-    if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update);\n-        if (failedBlock) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n+        if (start_height) start_block = locked_chain->getBlockHash(*start_height);\n+    }\n+\n+    if (!start_block.IsNull()) {\n+        uint256 failed_block = ScanForWalletTransactions(start_block, {} /* stop block */, reserver, update);\n+        if (!failed_block.IsNull()) {\n+            int64_t time_max;\n+            if (!chain().findBlock(failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n  * Returns null if scan was successful. Otherwise, if a complete rescan was not\n  * possible (due to pruning or corruption), returns pointer to the most recent\n  * block that could not be scanned.\n  *\n- * If pindexStop is not a nullptr, the scan will stop at the block-index\n- * defined by pindexStop\n+ * If stop_block is not null, the scan will stop at the block-index\n+ * defined by stop_block\n  *\n- * Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * Caller needs to make sure stop_block (and the optional start_block) are on",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233644571",
      "id" : 233644571,
      "in_reply_to_id" : 233398045,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY0NDU3MQ==",
      "original_commit_id" : "d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0",
      "original_position" : 158,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 175104977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233644571",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233662540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233662540"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This sounds wrong, as if it wants to discard genesis block (`height == 0`). Only got it after seeing the return type `Optional<int>`. IMO `.contains(hash)` would be preferable.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2018-11-14T23:34:20Z",
      "diff_hunk" : "@@ -366,8 +366,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) == merkleBlock.header.hashMerkleRoot) {\n \n         auto locked_chain = pwallet->chain().lock();\n-        const CBlockIndex* pindex = LookupBlockIndex(merkleBlock.header.GetHash());\n-        if (!pindex || !chainActive.Contains(pindex)) {\n+        if (!locked_chain->getBlockHeight(merkleBlock.header.GetHash())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233662540",
      "id" : 233662540,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY2MjU0MA==",
      "original_commit_id" : "d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0",
      "original_position" : 6,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 175131066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233662540",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233671425"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233671425"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Isn't this change conceptually different? Even though the chain is locked, this can be copied and used without the lock and therefore can \"point\" to other block if a reorg occurs. This wouldn't occur with `CBlockIndex`.\r\n\r\nLooks like you could either:\r\n - create `interfaces::BlockIndex`\r\n - replace `CBlockIndex*` with `uint256`.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2018-11-15T00:16:53Z",
      "diff_hunk" : "@@ -1526,24 +1529,18 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    const CBlockIndex* pindex = nullptr;    // Block index of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n-    const CBlockIndex* paltindex = nullptr; // Block index of the specified block, even if it's in a deactivated chain.\n+    Optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233671425",
      "id" : 233671425,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzY3MTQyNQ==",
      "original_commit_id" : "d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0",
      "original_position" : 18,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 18,
      "pull_request_review_id" : 175131066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233671425",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233941431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233941431"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Haven't though about this too much, but maybe you could split out the changes in the wallet header that change the interface from taking a block index pointer to taking a block hash to a separate commit? Unless I am mistaken those type changes have the side effect of fixing the \"issue\" I tried to fix in #14712.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2018-11-15T17:36:34Z",
      "diff_hunk" : "@@ -896,7 +893,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n+    uint256 ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver &reserver, bool fUpdate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233941431",
      "id" : 233941431,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzk0MTQzMQ==",
      "original_commit_id" : "d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0",
      "original_position" : 54,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 175472354,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233941431",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-11-30T16:30:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-443259310",
      "id" : 443259310,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MzI1OTMxMA==",
      "updated_at" : "2018-11-30T16:30:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/443259310",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r240875084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240875084"
         }
      },
      "author_association" : "MEMBER",
      "body" : "doc-nit: height is not given (at least not directly)",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2018-12-12T03:54:07Z",
      "diff_hunk" : "@@ -38,6 +105,21 @@ class Chain\n     //! method is temporary and is only used in a few places to avoid changing\n     //! behavior while code is transitioned to use the Chain::Lock interface.\n     virtual std::unique_ptr<Lock> assumeLocked() = 0;\n+\n+    //! Return whether node has the block and optionally return block metadata\n+    //! or contents.\n+    //!\n+    //! If a block pointer is provided to retrieve the block contents, and the\n+    //! block exists but doesn't have data (for example due to pruning), the\n+    //! block will be empty and all fields set to null.\n+    virtual bool findBlock(const uint256& hash,\n+        CBlock* block = nullptr,\n+        int64_t* time = nullptr,\n+        int64_t* max_time = nullptr) = 0;\n+\n+    //! Estimate fraction of total transactions verified if blocks up to\n+    //! given height are verified.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r240875084",
      "id" : 240875084,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDg3NTA4NA==",
      "original_commit_id" : "5cad675a8e8beb0a97f95860a3017fd581bcc1e5",
      "original_position" : 103,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 184004303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240875084",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-12-12T05:35:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-446468141",
      "id" : 446468141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NjQ2ODE0MQ==",
      "updated_at" : "2018-12-12T05:35:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/446468141",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Strong Concept ACK\r\nPlans to review...",
      "created_at" : "2018-12-12T06:02:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-446473002",
      "id" : 446473002,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NjQ3MzAwMg==",
      "updated_at" : "2018-12-12T06:02:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/446473002",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-12-18T02:47:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-448077180",
      "id" : 448077180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0ODA3NzE4MA==",
      "updated_at" : "2018-12-18T02:47:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/448077180",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky I went ahead and split this up into a few commits, found it easier to review. Built and ran tests on each commit. https://github.com/Empact/bitcoin/tree/pr/wchain2\r\n\r\n",
      "created_at" : "2019-01-08T08:34:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-452215750",
      "id" : 452215750,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MjIxNTc1MA==",
      "updated_at" : "2019-01-08T08:34:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452215750",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245911708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245911708"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I believe this belongs in `validation.h`, as `unordered_map` isn't used directly here.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-08T08:36:06Z",
      "diff_hunk" : "@@ -4,18 +4,133 @@\n \n #include <interfaces/chain.h>\n \n+#include <chain.h>\n+#include <chainparams.h>\n+#include <primitives/block.h>\n #include <sync.h>\n+#include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n \n #include <memory>\n+#include <unordered_map>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245911708",
      "id" : 245911708,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTkxMTcwOA==",
      "original_commit_id" : "939a400f3d632330e470c4b3e71ee822ae7be4c4",
      "original_position" : 13,
      "path" : "src/interfaces/chain.cpp",
      "position" : null,
      "pull_request_review_id" : 190134483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245911708",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245913597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245913597"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: none of the callers use more than one of the out args, so splitting this up would make the call sites simpler/clearer.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-08T08:43:36Z",
      "diff_hunk" : "@@ -35,6 +150,34 @@ class ChainImpl : public Chain\n         return std::move(result);\n     }\n     std::unique_ptr<Chain::Lock> assumeLocked() override { return MakeUnique<LockImpl>(); }\n+    bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245913597",
      "id" : 245913597,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTkxMzU5Nw==",
      "original_commit_id" : "939a400f3d632330e470c4b3e71ee822ae7be4c4",
      "original_position" : 138,
      "path" : "src/interfaces/chain.cpp",
      "position" : 135,
      "pull_request_review_id" : 190136835,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245913597",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245914117"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245914117"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`stop_block` and `stopBlock` are confusingly similar.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-08T08:45:46Z",
      "diff_hunk" : "@@ -3384,47 +3383,46 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    Optional<int> stop_height;\n+    Optional<int> tip_height;\n+    uint256 start_block, stop_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        tip_height = locked_chain->getHeight();\n+        stop_height = tip_height;\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n-            }\n-            block = block->pprev;\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            start_block = locked_chain->getBlockHash(start_height);\n+            stop_block = locked_chain->getBlockHash(stop_height.value_or(*tip_height));\n         }\n     }\n \n-    const CBlockIndex *failed_block, *stopBlock;\n+    uint256 failed_block, stopBlock;\n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, failed_block, stopBlock, true);\n+        pwallet->ScanForWalletTransactions(start_block, stop_block, reserver, failed_block, stopBlock, true /* prune */);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245914117",
      "id" : 245914117,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTkxNDExNw==",
      "original_commit_id" : "939a400f3d632330e470c4b3e71ee822ae7be4c4",
      "original_position" : 146,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 190137513,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245914117",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks @Empact! I reset the PR to your branch.\r\n\r\n---\r\n\r\nRebased d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0 -> 5cad675a8e8beb0a97f95860a3017fd581bcc1e5 ([pr/wchain2.1](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.1) -> [pr/wchain2.2](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.2)) due to conflict with #14380\r\nRebased 5cad675a8e8beb0a97f95860a3017fd581bcc1e5 -> 591c2c85e928441bf1f5b1f58c132e72ad4eb185 ([pr/wchain2.2](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.2) -> [pr/wchain2.3](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.3)) due to conflict with #13076\r\nRebased 591c2c85e928441bf1f5b1f58c132e72ad4eb185 -> 939a400f3d632330e470c4b3e71ee822ae7be4c4 ([pr/wchain2.3](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.3) -> [pr/wchain2.4](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.4)) due to conflict with #14957\r\nSplit 939a400f3d632330e470c4b3e71ee822ae7be4c4 -> 7a8727256c99dfbf739448fc72082ec568e14056 ([pr/wchain2.4](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.4) -> [pr/wchain2.5](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.5)) resetting to [Empact:pr/wchain2](https://github.com/bitcoin/bitcoin/compare/master...Empact:pr/wchain2) (no diffs)\r\nRebased 7a8727256c99dfbf739448fc72082ec568e14056 -> ca76bcc917dbc53a1b639acbdbb5d2faf28bbc52 ([pr/wchain2.5](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.5) -> [pr/wchain2.6](https://github.com/ryanofsky/bitcoin/commits/pr/wchain2.6)) due to conflict with #15039",
      "created_at" : "2019-01-08T15:48:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-452346988",
      "id" : 452346988,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MjM0Njk4OA==",
      "updated_at" : "2019-01-10T16:59:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452346988",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246350751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246350751"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be more clear with a comparison with `nullopt`",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-09T11:38:06Z",
      "diff_hunk" : "@@ -366,8 +366,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) == merkleBlock.header.hashMerkleRoot) {\n \n         auto locked_chain = pwallet->chain().lock();\n-        const CBlockIndex* pindex = LookupBlockIndex(merkleBlock.header.GetHash());\n-        if (!pindex || !chainActive.Contains(pindex)) {\n+        if (!locked_chain->getBlockHeight(merkleBlock.header.GetHash())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246350751",
      "id" : 246350751,
      "in_reply_to_id" : 233662540,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjM1MDc1MQ==",
      "original_commit_id" : "d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0",
      "original_position" : 6,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 190685645,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246350751",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-01-10T15:20:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-453132707",
      "id" : 453132707,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MzEzMjcwNw==",
      "updated_at" : "2019-01-10T15:20:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/453132707",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246857325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246857325"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r240875084\r\n\r\n> doc-nit: height is not given (at least not directly)\r\n\r\nThanks, fixed comment\r\n ",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-10T17:46:05Z",
      "diff_hunk" : "@@ -38,6 +105,21 @@ class Chain\n     //! method is temporary and is only used in a few places to avoid changing\n     //! behavior while code is transitioned to use the Chain::Lock interface.\n     virtual std::unique_ptr<Lock> assumeLocked() = 0;\n+\n+    //! Return whether node has the block and optionally return block metadata\n+    //! or contents.\n+    //!\n+    //! If a block pointer is provided to retrieve the block contents, and the\n+    //! block exists but doesn't have data (for example due to pruning), the\n+    //! block will be empty and all fields set to null.\n+    virtual bool findBlock(const uint256& hash,\n+        CBlock* block = nullptr,\n+        int64_t* time = nullptr,\n+        int64_t* max_time = nullptr) = 0;\n+\n+    //! Estimate fraction of total transactions verified if blocks up to\n+    //! given height are verified.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246857325",
      "id" : 246857325,
      "in_reply_to_id" : 240875084,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Njg1NzMyNQ==",
      "original_commit_id" : "5cad675a8e8beb0a97f95860a3017fd581bcc1e5",
      "original_position" : 103,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 191332905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246857325",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246857394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246857394"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233662540\r\n\r\n> Could be more clear with a comparison with nullopt\r\n\r\nTook suggestion",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-10T17:46:19Z",
      "diff_hunk" : "@@ -366,8 +366,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     if (merkleBlock.txn.ExtractMatches(vMatch, vIndex) == merkleBlock.header.hashMerkleRoot) {\n \n         auto locked_chain = pwallet->chain().lock();\n-        const CBlockIndex* pindex = LookupBlockIndex(merkleBlock.header.GetHash());\n-        if (!pindex || !chainActive.Contains(pindex)) {\n+        if (!locked_chain->getBlockHeight(merkleBlock.header.GetHash())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246857394",
      "id" : 246857394,
      "in_reply_to_id" : 233662540,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Njg1NzM5NA==",
      "original_commit_id" : "d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0",
      "original_position" : 6,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_review_id" : 191332905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246857394",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246857455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246857455"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r233671425\r\n\r\n> Isn't this change conceptually different? \r\n\r\nI think so, a height is conceptually different from a block pointer.\r\n\r\n> Looks like you could either:\r\n\r\nWhen the chain is locked, a height uniquely identifies a block, so many `locked_chain` methods take height arguments. I think it would good to eliminate these calls entirely (https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269) and not very useful to tweak data types and just hide the fact that the chain is locked.\r\n\r\nBut either way, I want the API to change in the future and become nicer, more minimal, and more useful over time. Right now the API just reflects how the wallet currently works, to keep changes to wallet code in this PR as minimal as possible.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-10T17:46:30Z",
      "diff_hunk" : "@@ -1526,24 +1529,18 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    const CBlockIndex* pindex = nullptr;    // Block index of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n-    const CBlockIndex* paltindex = nullptr; // Block index of the specified block, even if it's in a deactivated chain.\n+    Optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246857455",
      "id" : 246857455,
      "in_reply_to_id" : 233671425,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Njg1NzQ1NQ==",
      "original_commit_id" : "d568bdb15173dd8dd7bf95cb0bd9c9b55dbb97f0",
      "original_position" : 18,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 18,
      "pull_request_review_id" : 191332905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246857455",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246868198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246868198"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245914117\r\n\r\n> stop_block and stopBlock are confusingly similar.\r\n\r\nAdded more renames",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-10T18:19:12Z",
      "diff_hunk" : "@@ -3384,47 +3383,46 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    Optional<int> stop_height;\n+    Optional<int> tip_height;\n+    uint256 start_block, stop_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        tip_height = locked_chain->getHeight();\n+        stop_height = tip_height;\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n-            }\n-            block = block->pprev;\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            start_block = locked_chain->getBlockHash(start_height);\n+            stop_block = locked_chain->getBlockHash(stop_height.value_or(*tip_height));\n         }\n     }\n \n-    const CBlockIndex *failed_block, *stopBlock;\n+    uint256 failed_block, stopBlock;\n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, failed_block, stopBlock, true);\n+        pwallet->ScanForWalletTransactions(start_block, stop_block, reserver, failed_block, stopBlock, true /* prune */);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246868198",
      "id" : 246868198,
      "in_reply_to_id" : 245914117,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Njg2ODE5OA==",
      "original_commit_id" : "939a400f3d632330e470c4b3e71ee822ae7be4c4",
      "original_position" : 146,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 191332905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246868198",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246868236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246868236"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245911708\r\n\r\n> nit: I believe this belongs in validation.h, as unordered_map isn't used directly here.\r\n\r\nThis was added by IWYU because unordered map methods are called here. In theory this allows `validation.h` to switch to forward declarations and drop its `unordered_map` include without this file having to change. I don't think [IWYU rationale](https://github.com/include-what-you-use/include-what-you-use/blob/master/docs/WhyIWYU.md) is completely airtight (particularly in this case where `validation.h` might change `mapBlockIndex` into a different type of map with the same methods), but I like the IWYU tool, and don't think its worth spending a lot of time to analyze its decisions absent a compelling reason.\r\n",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-10T18:19:18Z",
      "diff_hunk" : "@@ -4,18 +4,133 @@\n \n #include <interfaces/chain.h>\n \n+#include <chain.h>\n+#include <chainparams.h>\n+#include <primitives/block.h>\n #include <sync.h>\n+#include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n \n #include <memory>\n+#include <unordered_map>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246868236",
      "id" : 246868236,
      "in_reply_to_id" : 245911708,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Njg2ODIzNg==",
      "original_commit_id" : "939a400f3d632330e470c4b3e71ee822ae7be4c4",
      "original_position" : 13,
      "path" : "src/interfaces/chain.cpp",
      "position" : null,
      "pull_request_review_id" : 191332905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246868236",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246868266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246868266"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r245913597\r\n\r\n> nit: none of the callers use more than one of the out args, so splitting this up would make the call sites simpler/clearer.\r\n\r\nThere are many ways to design this API, and I just opted for one here that I thought would keep [`chain.h`](https://github.com/ryanofsky/bitcoin/blob/108a56aa073921250a4742524d7493e9233e0f5a/src/interfaces/chain.h#L126-L135) a little shorter and more organized, at the expense of being more verbose at call sites. If you have a specific alternative in mind and want to convince me or another reviewer that it's better, I'd be happy to adopt it here, or review a followup PR.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-10T18:19:23Z",
      "diff_hunk" : "@@ -35,6 +150,34 @@ class ChainImpl : public Chain\n         return std::move(result);\n     }\n     std::unique_ptr<Chain::Lock> assumeLocked() override { return MakeUnique<LockImpl>(); }\n+    bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r246868266",
      "id" : 246868266,
      "in_reply_to_id" : 245913597,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Njg2ODI2Ng==",
      "original_commit_id" : "939a400f3d632330e470c4b3e71ee822ae7be4c4",
      "original_position" : 138,
      "path" : "src/interfaces/chain.cpp",
      "position" : 135,
      "pull_request_review_id" : 191332905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246868266",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-01-15T17:25:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-454477585",
      "id" : 454477585,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NDQ3NzU4NQ==",
      "updated_at" : "2019-01-15T17:25:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454477585",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248028705"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248028705"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 13bc578ca9 Add height, depth, and hash methods to the Chain interface\r\n\r\n\r\nIt seems confusing to check for nullptr if when the block hash was found in the map, since the value should never be a nullptr? Anyway, a neat way to avoid that is by avoiding `::mapBlockIndex` and calling `LookupBlockIndex`?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-15T19:19:48Z",
      "diff_hunk" : "@@ -4,18 +4,133 @@\n \n #include <interfaces/chain.h>\n \n+#include <chain.h>\n+#include <chainparams.h>\n+#include <primitives/block.h>\n #include <sync.h>\n+#include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n \n #include <memory>\n+#include <unordered_map>\n #include <utility>\n \n namespace interfaces {\n namespace {\n \n class LockImpl : public Chain::Lock\n {\n+    Optional<int> getHeight() override\n+    {\n+        int height = ::chainActive.Height();\n+        if (height >= 0) {\n+            return height;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> getBlockHeight(const uint256& hash) override\n+    {\n+        auto it = ::mapBlockIndex.find(hash);\n+        if (it != ::mapBlockIndex.end() && it->second && ::chainActive.Contains(it->second)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248028705",
      "id" : 248028705,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAyODcwNQ==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 32,
      "path" : "src/interfaces/chain.cpp",
      "position" : null,
      "pull_request_review_id" : 192819612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248028705",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248033837"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248033837"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in commit 13bc578ca9 Add height, depth, and hash methods to the Chain interface\r\n\r\n\r\n`height` is added and not used in this commit\r\n\r\n(Hunk should probably be moved to commit 22abf4a61a Add findFork and findBlock to the Chain interface)",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-15T19:34:26Z",
      "diff_hunk" : "@@ -1573,24 +1576,18 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    const CBlockIndex* pindex = nullptr;    // Block index of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n-    const CBlockIndex* paltindex = nullptr; // Block index of the specified block, even if it's in a deactivated chain.\n+    Optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248033837",
      "id" : 248033837,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAzMzgzNw==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 18,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 18,
      "pull_request_review_id" : 192819612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248033837",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248040457"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248040457"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 22abf4a61a Add findFork and findBlock to the Chain interface\r\n\r\nDoesn't check for nullptr here? Seems inconsistent with `getBlockHeight`. Anyway, a neat way to avoid that is by avoiding ::mapBlockIndex and calling LookupBlockIndex?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-15T19:54:31Z",
      "diff_hunk" : "@@ -4,18 +4,133 @@\n \n #include <interfaces/chain.h>\n \n+#include <chain.h>\n+#include <chainparams.h>\n+#include <primitives/block.h>\n #include <sync.h>\n+#include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n \n #include <memory>\n+#include <unordered_map>\n #include <utility>\n \n namespace interfaces {\n namespace {\n \n class LockImpl : public Chain::Lock\n {\n+    Optional<int> getHeight() override\n+    {\n+        int height = ::chainActive.Height();\n+        if (height >= 0) {\n+            return height;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> getBlockHeight(const uint256& hash) override\n+    {\n+        auto it = ::mapBlockIndex.find(hash);\n+        if (it != ::mapBlockIndex.end() && it->second && ::chainActive.Contains(it->second)) {\n+            return it->second->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    int getBlockDepth(const uint256& hash) override\n+    {\n+        const Optional<int> tip_height = getHeight();\n+        const Optional<int> height = getBlockHeight(hash);\n+        return tip_height && height ? *tip_height - *height + 1 : 0;\n+    }\n+    uint256 getBlockHash(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        assert(block != nullptr);\n+        return block->GetBlockHash();\n+    }\n+    int64_t getBlockTime(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        assert(block != nullptr);\n+        return block->GetBlockTime();\n+    }\n+    int64_t getBlockMedianTimePast(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        assert(block != nullptr);\n+        return block->GetMedianTimePast();\n+    }\n+    bool haveBlockOnDisk(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n+    }\n+    Optional<int> findFirstBlockWithTime(int64_t time) override\n+    {\n+        CBlockIndex* block = ::chainActive.FindEarliestAtLeast(time);\n+        if (block) {\n+            return block->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height) override\n+    {\n+        for (CBlockIndex* block = ::chainActive[height]; block; block = ::chainActive.Next(block)) {\n+            if (block->GetBlockTime() >= time) {\n+                return block->nHeight;\n+            }\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> findPruned(int start_height, Optional<int> stop_height) override\n+    {\n+        if (::fPruneMode) {\n+            CBlockIndex* block = stop_height ? ::chainActive[*stop_height] : ::chainActive.Tip();\n+            while (block && block->nHeight >= start_height) {\n+                if ((block->nStatus & BLOCK_HAVE_DATA) == 0) {\n+                    return block->nHeight;\n+                }\n+                block = block->pprev;\n+            }\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> findFork(const uint256& hash, Optional<int>* height) override\n+    {\n+        const CBlockIndex *block{nullptr}, *fork{nullptr};\n+        auto it = ::mapBlockIndex.find(hash);\n+        if (it != ::mapBlockIndex.end()) {\n+            block = it->second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248040457",
      "id" : 248040457,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODA0MDQ1Nw==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 101,
      "path" : "src/interfaces/chain.cpp",
      "position" : null,
      "pull_request_review_id" : 192819612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248040457",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248044123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248044123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 22abf4a61a Add findFork and findBlock to the Chain interface\r\n\r\n\r\nSame here (use `LookupBlockIndex`)",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-15T20:06:09Z",
      "diff_hunk" : "@@ -35,6 +150,34 @@ class ChainImpl : public Chain\n         return std::move(result);\n     }\n     std::unique_ptr<Chain::Lock> assumeLocked() override { return MakeUnique<LockImpl>(); }\n+    bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override\n+    {\n+        CBlockIndex* index;\n+        {\n+            LOCK(cs_main);\n+            auto it = ::mapBlockIndex.find(hash);\n+            if (it == ::mapBlockIndex.end()) {\n+                return false;\n+            }\n+            index = it->second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248044123",
      "id" : 248044123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODA0NDEyMw==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 147,
      "path" : "src/interfaces/chain.cpp",
      "position" : null,
      "pull_request_review_id" : 192819612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248044123",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248051502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248051502"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 22abf4a61a Add findFork and findBlock to the Chain interface\r\n\r\nAssuming that height can not be set makes no sense, since you moved the FindFork call to before the `!height` check. I'd prefer to write `*height` here.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-15T20:31:05Z",
      "diff_hunk" : "@@ -1622,9 +1620,9 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     // when a reorg'd block is requested, we also list any relevant transactions\n     // in the blocks of the chain that was detached\n     UniValue removed(UniValue::VARR);\n-    while (include_removed && paltindex && paltindex != pindex) {\n+    while (include_removed && altheight && *altheight > height.value_or(-1)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248051502",
      "id" : 248051502,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODA1MTUwMg==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 58,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 192819612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248051502",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248051624"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248051624"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 22abf4a Add findFork and findBlock to the Chain interface\r\n\r\nSame (I'd prefer to not check for height again, since that has already been done above as you moved the FindFork to before the height check.)",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-15T20:31:25Z",
      "diff_hunk" : "@@ -1607,7 +1604,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n     bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n \n-    int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n+    const Optional<int> tip_height = locked_chain->getHeight();\n+    int depth = tip_height && height ? (1 + *tip_height - *height) : -1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248051624",
      "id" : 248051624,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODA1MTYyNA==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 49,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 49,
      "pull_request_review_id" : 192819612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248051624",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248053404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248053404"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 65861dff7c Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\r\n\r\n\r\n`LookupBlockIndex` instead of access to the global mapBlockIndex?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-15T20:37:55Z",
      "diff_hunk" : "@@ -35,6 +150,34 @@ class ChainImpl : public Chain\n         return std::move(result);\n     }\n     std::unique_ptr<Chain::Lock> assumeLocked() override { return MakeUnique<LockImpl>(); }\n+    bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override\n+    {\n+        CBlockIndex* index;\n+        {\n+            LOCK(cs_main);\n+            auto it = ::mapBlockIndex.find(hash);\n+            if (it == ::mapBlockIndex.end()) {\n+                return false;\n+            }\n+            index = it->second;\n+            if (time) {\n+                *time = index->GetBlockTime();\n+            }\n+            if (time_max) {\n+                *time_max = index->GetBlockTimeMax();\n+            }\n+        }\n+        if (block && !ReadBlockFromDisk(*block, index, Params().GetConsensus())) {\n+            block->SetNull();\n+        }\n+        return true;\n+    }\n+    double guessVerificationProgress(const uint256& block_hash) override\n+    {\n+        LOCK(cs_main);\n+        auto it = ::mapBlockIndex.find(block_hash);\n+        return GuessVerificationProgress(Params().TxData(), it != ::mapBlockIndex.end() ? it->second : nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248053404",
      "id" : 248053404,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODA1MzQwNA==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 164,
      "path" : "src/interfaces/chain.cpp",
      "position" : null,
      "pull_request_review_id" : 192819612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248053404",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Some (I think) new compile warnings with this PR:\r\n```\r\n/.../bitcoin/src/wallet/rpcwallet.cpp: In function Ã¢ÂÂUniValue rescanblockchain(const JSONRPCRequest&)Ã¢ÂÂ:\r\n/.../bitcoin/src/wallet/rpcwallet.cpp:3408:49: warning: Ã¢ÂÂ*((void*)& tip_height +4)Ã¢ÂÂ may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n             if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\r\n                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nIn file included from /.../bitcoin/src/rpc/mining.h:10:0,\r\n                 from /.../bitcoin/src/wallet/rpcwallet.cpp:21:\r\n/.../bitcoin/src/univalue/include/univalue.h:59:42: warning: Ã¢ÂÂ*((void*)& stop_height +4)Ã¢ÂÂ may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n     bool setInt(int val_) { return setInt((int64_t)val_); }\r\n                                    ~~~~~~^~~~~~~~~~~~~~~\r\n/.../bitcoin/src/wallet/rpcwallet.cpp:3391:19: note: Ã¢ÂÂ*((void*)& stop_height +4)Ã¢ÂÂ was declared here\r\n     Optional<int> stop_height;\r\n                   ^~~~~~~~~~~\r\n/.../bitcoin/src/wallet/rpcwallet.cpp: In function Ã¢ÂÂUniValue listsinceblock(const JSONRPCRequest&)Ã¢ÂÂ:\r\n/.../bitcoin/src/wallet/rpcwallet.cpp:1579:19: warning: Ã¢ÂÂ*((void*)& height +4)Ã¢ÂÂ may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n     Optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\r\n                   ^~~~~~\r\n/.../bitcoin/src/wallet/wallet.cpp: In member function Ã¢ÂÂCWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256&, const uint256&, const WalletRescanReserver&, uint256&, uint256&, bool)Ã¢ÂÂ:\r\n/.../bitcoin/src/wallet/wallet.cpp:1709:58: warning: Ã¢ÂÂ*((void*)& block_height +4)Ã¢ÂÂ may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n                         block_height = prev_block_height + 1;\r\n                                        ~~~~~~~~~~~~~~~~~~^~~\r\n```",
      "created_at" : "2019-01-16T12:21:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-454760017",
      "id" : 454760017,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NDc2MDAxNw==",
      "updated_at" : "2019-01-16T12:21:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454760017",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 5bc30a508, this really improves `interfaces::Chain`. I'm also curious why `LookupBlockIndex` is avoided.",
      "created_at" : "2019-01-16T12:25:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-454761005",
      "id" : 454761005,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NDc2MTAwNQ==",
      "updated_at" : "2019-01-16T12:25:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454761005",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731481"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248028705\r\n\r\nSwitched to LookupBlockIndex",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-17T16:03:13Z",
      "diff_hunk" : "@@ -4,18 +4,133 @@\n \n #include <interfaces/chain.h>\n \n+#include <chain.h>\n+#include <chainparams.h>\n+#include <primitives/block.h>\n #include <sync.h>\n+#include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n \n #include <memory>\n+#include <unordered_map>\n #include <utility>\n \n namespace interfaces {\n namespace {\n \n class LockImpl : public Chain::Lock\n {\n+    Optional<int> getHeight() override\n+    {\n+        int height = ::chainActive.Height();\n+        if (height >= 0) {\n+            return height;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> getBlockHeight(const uint256& hash) override\n+    {\n+        auto it = ::mapBlockIndex.find(hash);\n+        if (it != ::mapBlockIndex.end() && it->second && ::chainActive.Contains(it->second)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731481",
      "id" : 248731481,
      "in_reply_to_id" : 248028705,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODczMTQ4MQ==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 32,
      "path" : "src/interfaces/chain.cpp",
      "position" : null,
      "pull_request_review_id" : 193702611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731481",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731550"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248040457\r\n\r\nSwitched to LookupBlockIndex",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-17T16:03:20Z",
      "diff_hunk" : "@@ -4,18 +4,133 @@\n \n #include <interfaces/chain.h>\n \n+#include <chain.h>\n+#include <chainparams.h>\n+#include <primitives/block.h>\n #include <sync.h>\n+#include <uint256.h>\n #include <util/system.h>\n #include <validation.h>\n \n #include <memory>\n+#include <unordered_map>\n #include <utility>\n \n namespace interfaces {\n namespace {\n \n class LockImpl : public Chain::Lock\n {\n+    Optional<int> getHeight() override\n+    {\n+        int height = ::chainActive.Height();\n+        if (height >= 0) {\n+            return height;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> getBlockHeight(const uint256& hash) override\n+    {\n+        auto it = ::mapBlockIndex.find(hash);\n+        if (it != ::mapBlockIndex.end() && it->second && ::chainActive.Contains(it->second)) {\n+            return it->second->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    int getBlockDepth(const uint256& hash) override\n+    {\n+        const Optional<int> tip_height = getHeight();\n+        const Optional<int> height = getBlockHeight(hash);\n+        return tip_height && height ? *tip_height - *height + 1 : 0;\n+    }\n+    uint256 getBlockHash(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        assert(block != nullptr);\n+        return block->GetBlockHash();\n+    }\n+    int64_t getBlockTime(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        assert(block != nullptr);\n+        return block->GetBlockTime();\n+    }\n+    int64_t getBlockMedianTimePast(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        assert(block != nullptr);\n+        return block->GetMedianTimePast();\n+    }\n+    bool haveBlockOnDisk(int height) override\n+    {\n+        CBlockIndex* block = ::chainActive[height];\n+        return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n+    }\n+    Optional<int> findFirstBlockWithTime(int64_t time) override\n+    {\n+        CBlockIndex* block = ::chainActive.FindEarliestAtLeast(time);\n+        if (block) {\n+            return block->nHeight;\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height) override\n+    {\n+        for (CBlockIndex* block = ::chainActive[height]; block; block = ::chainActive.Next(block)) {\n+            if (block->GetBlockTime() >= time) {\n+                return block->nHeight;\n+            }\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> findPruned(int start_height, Optional<int> stop_height) override\n+    {\n+        if (::fPruneMode) {\n+            CBlockIndex* block = stop_height ? ::chainActive[*stop_height] : ::chainActive.Tip();\n+            while (block && block->nHeight >= start_height) {\n+                if ((block->nStatus & BLOCK_HAVE_DATA) == 0) {\n+                    return block->nHeight;\n+                }\n+                block = block->pprev;\n+            }\n+        }\n+        return nullopt;\n+    }\n+    Optional<int> findFork(const uint256& hash, Optional<int>* height) override\n+    {\n+        const CBlockIndex *block{nullptr}, *fork{nullptr};\n+        auto it = ::mapBlockIndex.find(hash);\n+        if (it != ::mapBlockIndex.end()) {\n+            block = it->second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731550",
      "id" : 248731550,
      "in_reply_to_id" : 248040457,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODczMTU1MA==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 101,
      "path" : "src/interfaces/chain.cpp",
      "position" : null,
      "pull_request_review_id" : 193702611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731550",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731602"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248044123\r\n\r\nSwitched to LookupBlockIndex",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-17T16:03:26Z",
      "diff_hunk" : "@@ -35,6 +150,34 @@ class ChainImpl : public Chain\n         return std::move(result);\n     }\n     std::unique_ptr<Chain::Lock> assumeLocked() override { return MakeUnique<LockImpl>(); }\n+    bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override\n+    {\n+        CBlockIndex* index;\n+        {\n+            LOCK(cs_main);\n+            auto it = ::mapBlockIndex.find(hash);\n+            if (it == ::mapBlockIndex.end()) {\n+                return false;\n+            }\n+            index = it->second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731602",
      "id" : 248731602,
      "in_reply_to_id" : 248044123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODczMTYwMg==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 147,
      "path" : "src/interfaces/chain.cpp",
      "position" : null,
      "pull_request_review_id" : 193702611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731602",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731656"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248053404\r\n\r\nSwitched to LookupBlockIndex",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-17T16:03:32Z",
      "diff_hunk" : "@@ -35,6 +150,34 @@ class ChainImpl : public Chain\n         return std::move(result);\n     }\n     std::unique_ptr<Chain::Lock> assumeLocked() override { return MakeUnique<LockImpl>(); }\n+    bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override\n+    {\n+        CBlockIndex* index;\n+        {\n+            LOCK(cs_main);\n+            auto it = ::mapBlockIndex.find(hash);\n+            if (it == ::mapBlockIndex.end()) {\n+                return false;\n+            }\n+            index = it->second;\n+            if (time) {\n+                *time = index->GetBlockTime();\n+            }\n+            if (time_max) {\n+                *time_max = index->GetBlockTimeMax();\n+            }\n+        }\n+        if (block && !ReadBlockFromDisk(*block, index, Params().GetConsensus())) {\n+            block->SetNull();\n+        }\n+        return true;\n+    }\n+    double guessVerificationProgress(const uint256& block_hash) override\n+    {\n+        LOCK(cs_main);\n+        auto it = ::mapBlockIndex.find(block_hash);\n+        return GuessVerificationProgress(Params().TxData(), it != ::mapBlockIndex.end() ? it->second : nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731656",
      "id" : 248731656,
      "in_reply_to_id" : 248053404,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODczMTY1Ng==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 164,
      "path" : "src/interfaces/chain.cpp",
      "position" : null,
      "pull_request_review_id" : 193702611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731656",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731705"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731705"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248033837\r\n\r\n> height is added and not used in this commit\r\n\r\nSeems to have been a harmless artifact from splitting this PR up. Moved to the right place now.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-17T16:03:38Z",
      "diff_hunk" : "@@ -1573,24 +1576,18 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     auto locked_chain = pwallet->chain().lock();\n     LOCK(pwallet->cs_wallet);\n \n-    const CBlockIndex* pindex = nullptr;    // Block index of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n-    const CBlockIndex* paltindex = nullptr; // Block index of the specified block, even if it's in a deactivated chain.\n+    Optional<int> height;    // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731705",
      "id" : 248731705,
      "in_reply_to_id" : 248033837,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODczMTcwNQ==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 18,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 18,
      "pull_request_review_id" : 193702611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731705",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731761"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731761"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248051624\r\n\r\n> I'd prefer to not check for height again\r\n\r\nHeight can be unset here since the blockhash parameter is optional.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-17T16:03:46Z",
      "diff_hunk" : "@@ -1607,7 +1604,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n     bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n \n-    int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n+    const Optional<int> tip_height = locked_chain->getHeight();\n+    int depth = tip_height && height ? (1 + *tip_height - *height) : -1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731761",
      "id" : 248731761,
      "in_reply_to_id" : 248051624,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODczMTc2MQ==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 49,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 49,
      "pull_request_review_id" : 193702611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731761",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731814"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248051502\r\n\r\n> Assuming that height can not be set makes no sense\r\n\r\nGood catch, simplified this.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-17T16:03:52Z",
      "diff_hunk" : "@@ -1622,9 +1620,9 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     // when a reorg'd block is requested, we also list any relevant transactions\n     // in the blocks of the chain that was detached\n     UniValue removed(UniValue::VARR);\n-    while (include_removed && paltindex && paltindex != pindex) {\n+    while (include_removed && altheight && *altheight > height.value_or(-1)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r248731814",
      "id" : 248731814,
      "in_reply_to_id" : 248051502,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODczMTgxNA==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 58,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 193702611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248731814",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-utACK https://github.com/bitcoin/bitcoin/commit/1da8b4648e6b5f01a90acfe487bcda6f7a5a0424 per [the latest changes](https://github.com/bitcoin/bitcoin/compare/5bc30a5083507fbc10691c7c26683afe7e768c88..1da8b4648e6b5f01a90acfe487bcda6f7a5a0424)",
      "created_at" : "2019-01-18T20:02:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-455670483",
      "id" : 455670483,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NTY3MDQ4Mw==",
      "updated_at" : "2019-01-18T20:02:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/455670483",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r249200553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249200553"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you want `stop_block` here. `stop_height` will carry the height that we sought to scan to, `stop_block` will carry the block that it actually reached.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-18T22:09:25Z",
      "diff_hunk" : "@@ -3387,59 +3387,58 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    Optional<int> stop_height;\n+    Optional<int> tip_height;\n+    uint256 first_block, last_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        tip_height = locked_chain->getHeight();\n+        stop_height = tip_height;\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n-            }\n-            block = block->pprev;\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            first_block = locked_chain->getBlockHash(start_height);\n+            last_block = locked_chain->getBlockHash(stop_height.value_or(*tip_height));\n         }\n     }\n \n-    const CBlockIndex *failed_block, *stopBlock;\n+    uint256 failed_block, stop_block;\n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, failed_block, stopBlock, true);\n+        pwallet->ScanForWalletTransactions(first_block, last_block, reserver, failed_block, stop_block, true /* prune */);\n     switch (result) {\n     case CWallet::ScanResult::SUCCESS:\n-        break; // stopBlock set by ScanForWalletTransactions\n+        break;\n     case CWallet::ScanResult::FAILURE:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n     case CWallet::ScanResult::USER_ABORT:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n         // no default case, so the compiler can warn about missing cases\n     }\n     UniValue response(UniValue::VOBJ);\n-    response.pushKV(\"start_height\", pindexStart->nHeight);\n-    response.pushKV(\"stop_height\", stopBlock->nHeight);\n+    response.pushKV(\"start_height\", start_height);\n+    response.pushKV(\"stop_height\", stop_height ? *stop_height : UniValue());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r249200553",
      "id" : 249200553,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTIwMDU1Mw==",
      "original_commit_id" : "4fe793787adb2ea9ab45c46308c31e5e08a554b8",
      "original_position" : 80,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 194302301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249200553",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r249977332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249977332"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r249200553\r\n\r\nIt would be nice to include `stop_block` in the future, since it's a hash not a height, but this is not changing the behavior at all. `stop_height` will always contain the height scanned to because if the scan fails or aborts there will have been an exception earlier.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-22T22:00:04Z",
      "diff_hunk" : "@@ -3387,59 +3387,58 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    Optional<int> stop_height;\n+    Optional<int> tip_height;\n+    uint256 first_block, last_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        tip_height = locked_chain->getHeight();\n+        stop_height = tip_height;\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n-            }\n-            block = block->pprev;\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            first_block = locked_chain->getBlockHash(start_height);\n+            last_block = locked_chain->getBlockHash(stop_height.value_or(*tip_height));\n         }\n     }\n \n-    const CBlockIndex *failed_block, *stopBlock;\n+    uint256 failed_block, stop_block;\n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, failed_block, stopBlock, true);\n+        pwallet->ScanForWalletTransactions(first_block, last_block, reserver, failed_block, stop_block, true /* prune */);\n     switch (result) {\n     case CWallet::ScanResult::SUCCESS:\n-        break; // stopBlock set by ScanForWalletTransactions\n+        break;\n     case CWallet::ScanResult::FAILURE:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n     case CWallet::ScanResult::USER_ABORT:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n         // no default case, so the compiler can warn about missing cases\n     }\n     UniValue response(UniValue::VOBJ);\n-    response.pushKV(\"start_height\", pindexStart->nHeight);\n-    response.pushKV(\"stop_height\", stopBlock->nHeight);\n+    response.pushKV(\"start_height\", start_height);\n+    response.pushKV(\"stop_height\", stop_height ? *stop_height : UniValue());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r249977332",
      "id" : 249977332,
      "in_reply_to_id" : 249200553,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0OTk3NzMzMg==",
      "original_commit_id" : "4fe793787adb2ea9ab45c46308c31e5e08a554b8",
      "original_position" : 80,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 195252490,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/249977332",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r250238088"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250238088"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Below you call `findBlock` while the chain is locked. So should this be in the `Chain::Lock`? Or will there be a new mutex for `mapBlockIndex`?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-23T15:19:01Z",
      "diff_hunk" : "@@ -38,6 +105,21 @@ class Chain\n     //! method is temporary and is only used in a few places to avoid changing\n     //! behavior while code is transitioned to use the Chain::Lock interface.\n     virtual std::unique_ptr<Lock> assumeLocked() = 0;\n+\n+    //! Return whether node has the block and optionally return block metadata\n+    //! or contents.\n+    //!\n+    //! If a block pointer is provided to retrieve the block contents, and the\n+    //! block exists but doesn't have data (for example due to pruning), the\n+    //! block will be empty and all fields set to null.\n+    virtual bool findBlock(const uint256& hash,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r250238088",
      "id" : 250238088,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDIzODA4OA==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 97,
      "path" : "src/interfaces/chain.h",
      "position" : 104,
      "pull_request_review_id" : 195575652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250238088",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r250240824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250240824"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I see that the idea is to move away from locked chain so ignore my question above: https://github.com/bitcoin/bitcoin/blob/82cf6813a4ef1b4a5439eb6cddb1ab426f3c31a2/src/interfaces/chain.h#L23-L26",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-23T15:25:15Z",
      "diff_hunk" : "@@ -38,6 +105,21 @@ class Chain\n     //! method is temporary and is only used in a few places to avoid changing\n     //! behavior while code is transitioned to use the Chain::Lock interface.\n     virtual std::unique_ptr<Lock> assumeLocked() = 0;\n+\n+    //! Return whether node has the block and optionally return block metadata\n+    //! or contents.\n+    //!\n+    //! If a block pointer is provided to retrieve the block contents, and the\n+    //! block exists but doesn't have data (for example due to pruning), the\n+    //! block will be empty and all fields set to null.\n+    virtual bool findBlock(const uint256& hash,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r250240824",
      "id" : 250240824,
      "in_reply_to_id" : 250238088,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDI0MDgyNA==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 97,
      "path" : "src/interfaces/chain.h",
      "position" : 104,
      "pull_request_review_id" : 195579327,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250240824",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Looks like we're in good shape for merge.",
      "created_at" : "2019-01-24T18:29:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-457305303",
      "id" : 457305303,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NzMwNTMwMw==",
      "updated_at" : "2019-01-24T18:29:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/457305303",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251150282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251150282"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: returning the height of the specified block is a bit of an odd interface, but saves a second lookup in `ChainActive` that `getHeight()` would require. Perhaps add that reasoning to this comment?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T22:00:46Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the full block is available on disk (ie has not been\n+        //! pruned), and contains transactions.\n+        virtual bool haveBlockOnDisk(int height) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time, or nothing if there is no block with\n+        //! a high enough timestamp.\n+        virtual Optional<int> findFirstBlockWithTime(int64_t time) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time and height equal or greater than the\n+        //! given height, or nothing if there is no such block.\n+        //!\n+        //! Calling this with height 0 is equivalent to calling\n+        //! findFirstBlockWithTime, but less efficient because it requires a\n+        //! linear instead of a binary search.\n+        virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height) = 0;\n+\n+        //! Return height of last block in the specified range which is pruned, or\n+        //! nothing if no block in the range is pruned. Range is inclusive.\n+        virtual Optional<int> findPruned(int start_height = 0, Optional<int> stop_height = nullopt) = 0;\n+\n+        //! Return height of the highest block on the chain that is an ancestor\n+        //! of the specified block. Also return the height of the specified\n+        //! block as an optional output parameter.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251150282",
      "id" : 251150282,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE1MDI4Mg==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 70,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251150282",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251150497"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251150497"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: add comment that this function will assert if provided a height that isn't in the active chain (same for `getBlockTime()` and `getMedianTimePast()`).",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T22:01:41Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251150497",
      "id" : 251150497,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE1MDQ5Nw==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 37,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251150497",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251151026"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251151026"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: Perhaps add *or nullopt if no common ancestor is found* to \"Return height of the highest block on the chain that is an ancestor of the specified block\"",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T22:04:04Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the full block is available on disk (ie has not been\n+        //! pruned), and contains transactions.\n+        virtual bool haveBlockOnDisk(int height) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time, or nothing if there is no block with\n+        //! a high enough timestamp.\n+        virtual Optional<int> findFirstBlockWithTime(int64_t time) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time and height equal or greater than the\n+        //! given height, or nothing if there is no such block.\n+        //!\n+        //! Calling this with height 0 is equivalent to calling\n+        //! findFirstBlockWithTime, but less efficient because it requires a\n+        //! linear instead of a binary search.\n+        virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height) = 0;\n+\n+        //! Return height of last block in the specified range which is pruned, or\n+        //! nothing if no block in the range is pruned. Range is inclusive.\n+        virtual Optional<int> findPruned(int start_height = 0, Optional<int> stop_height = nullopt) = 0;\n+\n+        //! Return height of the highest block on the chain that is an ancestor\n+        //! of the specified block. Also return the height of the specified",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251151026",
      "id" : 251151026,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE1MTAyNg==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 69,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251151026",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251151231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251151231"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: Slight preference for s/nothing/nullopt/ for all of these comments to be more precise.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T22:04:54Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251151231",
      "id" : 251151231,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE1MTIzMQ==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 24,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251151231",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251156423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251156423"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: seems like `CChain::FindEarliestAtLeast()` could quite easily be updated to take a height parameter and use it in the `std::lower_bound()` call.\r\n\r\nPerhaps a future PR could combine `findFirstBlockWithTime()` and `findFirstBlockWithTimeAndHeight()` and remove some of the logic from the interface?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T22:28:16Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the full block is available on disk (ie has not been\n+        //! pruned), and contains transactions.\n+        virtual bool haveBlockOnDisk(int height) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time, or nothing if there is no block with\n+        //! a high enough timestamp.\n+        virtual Optional<int> findFirstBlockWithTime(int64_t time) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time and height equal or greater than the\n+        //! given height, or nothing if there is no such block.\n+        //!\n+        //! Calling this with height 0 is equivalent to calling",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251156423",
      "id" : 251156423,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE1NjQyMw==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 59,
      "path" : "src/interfaces/chain.h",
      "position" : 62,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251156423",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251160945"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251160945"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: comment here should be `/* last block */`",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T22:49:49Z",
      "diff_hunk" : "@@ -146,13 +147,12 @@ void TestGUI()\n         auto locked_chain = wallet->chain().lock();\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n-        const CBlockIndex* const null_block = nullptr;\n-        const CBlockIndex *stop_block, *failed_block;\n+        uint256 stop_block, failed_block;\n         QCOMPARE(\n-            wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, failed_block, stop_block, true /* fUpdate */),\n+            wallet->ScanForWalletTransactions(locked_chain->getBlockHash(0), {} /* stop block */, reserver, failed_block, stop_block, true /* fUpdate */),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251160945",
      "id" : 251160945,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE2MDk0NQ==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 17,
      "path" : "src/qt/test/wallettests.cpp",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251160945",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251161437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251161437"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: could you save a second `chainActive` lookup here by returning both the height and hash from `findFirstBlockWithTime()`?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T22:52:07Z",
      "diff_hunk" : "@@ -1591,29 +1586,35 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n+        if (start_height) start_block = locked_chain->getBlockHash(*start_height);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251161437",
      "id" : 251161437,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE2MTQzNw==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 120,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251161437",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251161918"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251161918"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: comment should be `/* last block */`",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T22:54:36Z",
      "diff_hunk" : "@@ -1591,29 +1586,35 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n+        if (start_height) start_block = locked_chain->getBlockHash(*start_height);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n+        uint256 failed_block, stop_block;\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        if (ScanResult::FAILURE == ScanForWalletTransactions(start_block, {} /* stop block */, reserver, failed_block, stop_block, update)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251161918",
      "id" : 251161918,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE2MTkxOA==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 130,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251161918",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251163086"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251163086"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Behaviour change: This changes the log message from logging the height to logging the block hash. Is that intentional?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T23:00:25Z",
      "diff_hunk" : "@@ -1624,99 +1625,110 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure first_block (and the optional last_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, uint256& failed_block, uint256& stop_block, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    const CBlockIndex* pindex = pindexStart;\n-    failed_block = nullptr;\n-    stop_block = nullptr;\n+    uint256 block_hash = first_block;\n+    failed_block.SetNull();\n+    stop_block.SetNull();\n+    ScanResult result = ScanResult::SUCCESS;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", first_block.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251163086",
      "id" : 251163086,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE2MzA4Ng==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 181,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251163086",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251166471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251166471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Behaviour change: I think in this case the function will return `ScanResult::SUCCESS` where previously it returned `ScanResult::FAILURE`",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T23:19:50Z",
      "diff_hunk" : "@@ -1624,99 +1625,110 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure first_block (and the optional last_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, uint256& failed_block, uint256& stop_block, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    const CBlockIndex* pindex = pindexStart;\n-    failed_block = nullptr;\n-    stop_block = nullptr;\n+    uint256 block_hash = first_block;\n+    failed_block.SetNull();\n+    stop_block.SetNull();\n+    ScanResult result = ScanResult::SUCCESS;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", first_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n             auto locked_chain = chain().lock();\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+            }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            if (last_block.IsNull()) {\n+                progress_end = chain().guessVerificationProgress(tip_hash);\n             } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+                progress_end = chain().guessVerificationProgress(last_block);\n             }\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested()) {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+        while (block_height && !fAbortRescan && !ShutdownRequested()) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n                 auto locked_chain = chain().lock();\n                 LOCK(cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    failed_block = pindex;\n+                    failed_block = block_hash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251166471",
      "id" : 251166471,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE2NjQ3MQ==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 232,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251166471",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251167898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251167898"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: comment should be `/* fUpdate */`",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T23:28:26Z",
      "diff_hunk" : "@@ -3388,59 +3387,58 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    Optional<int> stop_height;\n+    Optional<int> tip_height;\n+    uint256 first_block, last_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        tip_height = locked_chain->getHeight();\n+        stop_height = tip_height;\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n-            }\n-            block = block->pprev;\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            first_block = locked_chain->getBlockHash(start_height);\n+            last_block = locked_chain->getBlockHash(stop_height.value_or(*tip_height));\n         }\n     }\n \n-    const CBlockIndex *failed_block, *stopBlock;\n+    uint256 failed_block, stop_block;\n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, failed_block, stopBlock, true);\n+        pwallet->ScanForWalletTransactions(first_block, last_block, reserver, failed_block, stop_block, true /* prune */);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251167898",
      "id" : 251167898,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE2Nzg5OA==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 146,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251167898",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251169892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251169892"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Behaviour change: previously, calling `rescanblockchain()` without a `stop_height` would cause `ScanForWalletTransactions()` to be called without a `pIndexStop`. Since `ScanForWalletTransactions()` releases `cs_main` after every block scanned, if the tip advances during rescan, then `ScanForWalletTransactions()` will scan to the new tip.\r\n\r\nThis change sets the `last_block` to the tip at the time that the RPC is called. That means that the rescan will not go all the way to the tip if the tip advances during rescan.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T23:41:30Z",
      "diff_hunk" : "@@ -3388,59 +3387,58 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    Optional<int> stop_height;\n+    Optional<int> tip_height;\n+    uint256 first_block, last_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        tip_height = locked_chain->getHeight();\n+        stop_height = tip_height;\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n-            }\n-            block = block->pprev;\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            first_block = locked_chain->getBlockHash(start_height);\n+            last_block = locked_chain->getBlockHash(stop_height.value_or(*tip_height));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251169892",
      "id" : 251169892,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE2OTg5Mg==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 138,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251169892",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251170382"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251170382"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggestion: invert the logic and add an explicit `break` here. It's a bit convoluted that `block_height` is reset above, and then if these conditions hold, it's updated, and then in the `while` condition if it's still null, then we break. I think this is clearer:\r\n\r\n```c++\r\nif (!locked_chain->getBlockHeight(prev_block_hash) || !prev_block_height < *tip_height) {\r\n    // rescan has reached the tip\r\n    break;\r\n}\r\n```",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T23:44:45Z",
      "diff_hunk" : "@@ -1624,99 +1625,110 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure first_block (and the optional last_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, uint256& failed_block, uint256& stop_block, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    const CBlockIndex* pindex = pindexStart;\n-    failed_block = nullptr;\n-    stop_block = nullptr;\n+    uint256 block_hash = first_block;\n+    failed_block.SetNull();\n+    stop_block.SetNull();\n+    ScanResult result = ScanResult::SUCCESS;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", first_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n             auto locked_chain = chain().lock();\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+            }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            if (last_block.IsNull()) {\n+                progress_end = chain().guessVerificationProgress(tip_hash);\n             } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+                progress_end = chain().guessVerificationProgress(last_block);\n             }\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested()) {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+        while (block_height && !fAbortRescan && !ShutdownRequested()) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n                 auto locked_chain = chain().lock();\n                 LOCK(cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    failed_block = pindex;\n+                    failed_block = block_hash;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n                 }\n                 // scan succeeded, record block as most recent successfully scanned\n-                stop_block = pindex;\n+                stop_block = block_hash;\n             } else {\n                 // could not scan block, keep scanning but record this block as the most recent failure\n-                failed_block = pindex;\n+                failed_block = block_hash;\n+                result = ScanResult::FAILURE;\n             }\n-            if (pindex == pindexStop) {\n+            if (block_hash == last_block) {\n                 break;\n             }\n             {\n+                const int prev_block_height = *block_height;\n+                const uint256 prev_block_hash = block_hash;\n+                const uint256 prev_tip_hash = tip_hash;\n+                block_height.reset();\n+                block_hash.SetNull();\n+                tip_hash.SetNull();\n+\n                 auto locked_chain = chain().lock();\n-                pindex = chainActive.Next(pindex);\n-                progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                if (pindexStop == nullptr && tip != chainActive.Tip()) {\n-                    tip = chainActive.Tip();\n+                if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                    if (locked_chain->getBlockHeight(prev_block_hash) && prev_block_height < *tip_height) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251170382",
      "id" : 251170382,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE3MDM4Mg==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 266,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251170382",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251171037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251171037"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: remove the word 'full' here",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T23:48:54Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the full block is available on disk (ie has not been",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251171037",
      "id" : 251171037,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE3MTAzNw==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 46,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251171037",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251172260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251172260"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: This comment isn't quite right. The function returns \"the latest block common to locator and chain\", which is guaranteed to be an ancestor of the block on the active chain.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-25T23:57:08Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the full block is available on disk (ie has not been\n+        //! pruned), and contains transactions.\n+        virtual bool haveBlockOnDisk(int height) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time, or nothing if there is no block with\n+        //! a high enough timestamp.\n+        virtual Optional<int> findFirstBlockWithTime(int64_t time) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time and height equal or greater than the\n+        //! given height, or nothing if there is no such block.\n+        //!\n+        //! Calling this with height 0 is equivalent to calling\n+        //! findFirstBlockWithTime, but less efficient because it requires a\n+        //! linear instead of a binary search.\n+        virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height) = 0;\n+\n+        //! Return height of last block in the specified range which is pruned, or\n+        //! nothing if no block in the range is pruned. Range is inclusive.\n+        virtual Optional<int> findPruned(int start_height = 0, Optional<int> stop_height = nullopt) = 0;\n+\n+        //! Return height of the highest block on the chain that is an ancestor\n+        //! of the specified block. Also return the height of the specified\n+        //! block as an optional output parameter.\n+        virtual Optional<int> findFork(const uint256& hash, Optional<int>* height) = 0;\n+\n+        //! Return true if block hash points to the current chain tip, or to a\n+        //! possible descendant of the current chain tip that isn't currently\n+        //! connected.\n+        virtual bool isPotentialTip(const uint256& hash) = 0;\n+\n+        //! Get locator for the current chain tip.\n+        virtual CBlockLocator getLocator() = 0;\n+\n+        //! Return height of block on the chain using locator.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251172260",
      "id" : 251172260,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTE3MjI2MA==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 81,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 196729295,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251172260",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "* [x] re-utACK 2ffb07929e\r\n* [ ] <strike>utACK HEAD",
      "created_at" : "2019-01-28T21:00:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458299316",
      "id" : 458299316,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1ODI5OTMxNg==",
      "updated_at" : "2019-01-29T21:10:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458299316",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251592385"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251592385"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251166471\r\n\r\n> Behaviour change: I think in this case the function will return ScanResult::SUCCESS where previously it returned ScanResult::FAILURE\r\n\r\nGreat catch, this should be fixed now. I added a todo to change this to SUCCESS in the future though, since I think that is right thing to do (see https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458342518).",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:05:30Z",
      "diff_hunk" : "@@ -1624,99 +1625,110 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure first_block (and the optional last_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, uint256& failed_block, uint256& stop_block, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    const CBlockIndex* pindex = pindexStart;\n-    failed_block = nullptr;\n-    stop_block = nullptr;\n+    uint256 block_hash = first_block;\n+    failed_block.SetNull();\n+    stop_block.SetNull();\n+    ScanResult result = ScanResult::SUCCESS;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", first_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n             auto locked_chain = chain().lock();\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+            }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            if (last_block.IsNull()) {\n+                progress_end = chain().guessVerificationProgress(tip_hash);\n             } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+                progress_end = chain().guessVerificationProgress(last_block);\n             }\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested()) {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+        while (block_height && !fAbortRescan && !ShutdownRequested()) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n                 auto locked_chain = chain().lock();\n                 LOCK(cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    failed_block = pindex;\n+                    failed_block = block_hash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251592385",
      "id" : 251592385,
      "in_reply_to_id" : 251166471,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTU5MjM4NQ==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 232,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251592385",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251592440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251592440"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251169892\r\n\r\n> the rescan will not go all the way to the tip if the tip advances during rescan\r\n\r\nFixed, but after this change, it also wasn't right to return the original tip_height as stop_height, so I changed ScanForWalletTransactions to return a stop_height, and moved all its return values into a struct to avoid having too many output parameters.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:05:39Z",
      "diff_hunk" : "@@ -3388,59 +3387,58 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    Optional<int> stop_height;\n+    Optional<int> tip_height;\n+    uint256 first_block, last_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        tip_height = locked_chain->getHeight();\n+        stop_height = tip_height;\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n-            }\n-            block = block->pprev;\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            first_block = locked_chain->getBlockHash(start_height);\n+            last_block = locked_chain->getBlockHash(stop_height.value_or(*tip_height));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251592440",
      "id" : 251592440,
      "in_reply_to_id" : 251169892,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTU5MjQ0MA==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 138,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251592440",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251592599"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251592599"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Behaviour change: This changes the log message from logging the height to logging the block hash. Is that intentional?\r\n\r\nThis seemed like the easiest thing to print without acquiring `cs_main`. Added a note about the behavior change in the commit message, but could update the print instead if you think that's a better idea.\r\n",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:06:09Z",
      "diff_hunk" : "@@ -1624,99 +1625,110 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure first_block (and the optional last_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, uint256& failed_block, uint256& stop_block, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    const CBlockIndex* pindex = pindexStart;\n-    failed_block = nullptr;\n-    stop_block = nullptr;\n+    uint256 block_hash = first_block;\n+    failed_block.SetNull();\n+    stop_block.SetNull();\n+    ScanResult result = ScanResult::SUCCESS;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", first_block.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251592599",
      "id" : 251592599,
      "in_reply_to_id" : 251163086,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTU5MjU5OQ==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 181,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251592599",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251593500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251593500"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right, my bad.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:08:44Z",
      "diff_hunk" : "@@ -1607,7 +1604,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n     bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n \n-    int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n+    const Optional<int> tip_height = locked_chain->getHeight();\n+    int depth = tip_height && height ? (1 + *tip_height - *height) : -1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251593500",
      "id" : 251593500,
      "in_reply_to_id" : 248051624,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTU5MzUwMA==",
      "original_commit_id" : "5bc30a5083507fbc10691c7c26683afe7e768c88",
      "original_position" : 49,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 49,
      "pull_request_review_id" : 197259521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251593500",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607493"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251170382\r\n\r\n> Suggestion: invert the logic and add an explicit break here\r\n\r\nDone, good suggestion\r\n",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:46:12Z",
      "diff_hunk" : "@@ -1624,99 +1625,110 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure first_block (and the optional last_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, uint256& failed_block, uint256& stop_block, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    const CBlockIndex* pindex = pindexStart;\n-    failed_block = nullptr;\n-    stop_block = nullptr;\n+    uint256 block_hash = first_block;\n+    failed_block.SetNull();\n+    stop_block.SetNull();\n+    ScanResult result = ScanResult::SUCCESS;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", first_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n             auto locked_chain = chain().lock();\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+            }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            if (last_block.IsNull()) {\n+                progress_end = chain().guessVerificationProgress(tip_hash);\n             } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+                progress_end = chain().guessVerificationProgress(last_block);\n             }\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested()) {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+        while (block_height && !fAbortRescan && !ShutdownRequested()) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n                 auto locked_chain = chain().lock();\n                 LOCK(cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    failed_block = pindex;\n+                    failed_block = block_hash;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n                 }\n                 // scan succeeded, record block as most recent successfully scanned\n-                stop_block = pindex;\n+                stop_block = block_hash;\n             } else {\n                 // could not scan block, keep scanning but record this block as the most recent failure\n-                failed_block = pindex;\n+                failed_block = block_hash;\n+                result = ScanResult::FAILURE;\n             }\n-            if (pindex == pindexStop) {\n+            if (block_hash == last_block) {\n                 break;\n             }\n             {\n+                const int prev_block_height = *block_height;\n+                const uint256 prev_block_hash = block_hash;\n+                const uint256 prev_tip_hash = tip_hash;\n+                block_height.reset();\n+                block_hash.SetNull();\n+                tip_hash.SetNull();\n+\n                 auto locked_chain = chain().lock();\n-                pindex = chainActive.Next(pindex);\n-                progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                if (pindexStop == nullptr && tip != chainActive.Tip()) {\n-                    tip = chainActive.Tip();\n+                if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                    if (locked_chain->getBlockHeight(prev_block_hash) && prev_block_height < *tip_height) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607493",
      "id" : 251607493,
      "in_reply_to_id" : 251170382,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzQ5Mw==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 266,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607493",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607532"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251151231\r\n\r\n> Slight preference for s/nothing/nullopt/\r\n\r\nreplaced",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:46:18Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607532",
      "id" : 251607532,
      "in_reply_to_id" : 251151231,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzUzMg==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 24,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607532",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607576"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607576"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251150497\r\n\r\n> add comment that this function will assert\r\n\r\ndone",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:46:24Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607576",
      "id" : 251607576,
      "in_reply_to_id" : 251150497,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzU3Ng==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 37,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607576",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607615"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607615"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251171037\r\n\r\n> Nit: remove the word 'full' here\r\n\r\ndone",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:46:30Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the full block is available on disk (ie has not been",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607615",
      "id" : 251607615,
      "in_reply_to_id" : 251171037,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzYxNQ==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 46,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607615",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607647"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251156423\r\n\r\n> Perhaps a future PR could combine findFirstBlockWithTime() and findFirstBlockWithTimeAndHeight()\r\n\r\nThis is a good suggestion. I just added a TODO to avoid introducing CChain changes in this PR, but I'm also happy to make the change here if you prefer.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:46:35Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the full block is available on disk (ie has not been\n+        //! pruned), and contains transactions.\n+        virtual bool haveBlockOnDisk(int height) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time, or nothing if there is no block with\n+        //! a high enough timestamp.\n+        virtual Optional<int> findFirstBlockWithTime(int64_t time) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time and height equal or greater than the\n+        //! given height, or nothing if there is no such block.\n+        //!\n+        //! Calling this with height 0 is equivalent to calling",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607647",
      "id" : 251607647,
      "in_reply_to_id" : 251156423,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzY0Nw==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 59,
      "path" : "src/interfaces/chain.h",
      "position" : 62,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607647",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607688"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607688"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251151026\r\n\r\n> Perhaps add or nullopt if no common ancestor is found\r\n\r\nadded",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:46:40Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the full block is available on disk (ie has not been\n+        //! pruned), and contains transactions.\n+        virtual bool haveBlockOnDisk(int height) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time, or nothing if there is no block with\n+        //! a high enough timestamp.\n+        virtual Optional<int> findFirstBlockWithTime(int64_t time) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time and height equal or greater than the\n+        //! given height, or nothing if there is no such block.\n+        //!\n+        //! Calling this with height 0 is equivalent to calling\n+        //! findFirstBlockWithTime, but less efficient because it requires a\n+        //! linear instead of a binary search.\n+        virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height) = 0;\n+\n+        //! Return height of last block in the specified range which is pruned, or\n+        //! nothing if no block in the range is pruned. Range is inclusive.\n+        virtual Optional<int> findPruned(int start_height = 0, Optional<int> stop_height = nullopt) = 0;\n+\n+        //! Return height of the highest block on the chain that is an ancestor\n+        //! of the specified block. Also return the height of the specified",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607688",
      "id" : 251607688,
      "in_reply_to_id" : 251151026,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzY4OA==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 69,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607688",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607727"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251150282\r\n\r\n> Perhaps add that reasoning to this comment?\r\n\r\ndone",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:46:48Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the full block is available on disk (ie has not been\n+        //! pruned), and contains transactions.\n+        virtual bool haveBlockOnDisk(int height) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time, or nothing if there is no block with\n+        //! a high enough timestamp.\n+        virtual Optional<int> findFirstBlockWithTime(int64_t time) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time and height equal or greater than the\n+        //! given height, or nothing if there is no such block.\n+        //!\n+        //! Calling this with height 0 is equivalent to calling\n+        //! findFirstBlockWithTime, but less efficient because it requires a\n+        //! linear instead of a binary search.\n+        virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height) = 0;\n+\n+        //! Return height of last block in the specified range which is pruned, or\n+        //! nothing if no block in the range is pruned. Range is inclusive.\n+        virtual Optional<int> findPruned(int start_height = 0, Optional<int> stop_height = nullopt) = 0;\n+\n+        //! Return height of the highest block on the chain that is an ancestor\n+        //! of the specified block. Also return the height of the specified\n+        //! block as an optional output parameter.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607727",
      "id" : 251607727,
      "in_reply_to_id" : 251150282,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzcyNw==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 70,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607727",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607757"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251172260\r\n\r\n> This comment isn't quite right\r\n\r\nAdded your correction",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:46:54Z",
      "diff_hunk" : "@@ -28,6 +34,67 @@ class Chain\n     {\n     public:\n         virtual ~Lock() {}\n+\n+        //! Get current chain height, not including genesis block (returns 0 if\n+        //! chain only contains genesis block, nothing if chain does not contain\n+        //! any blocks).\n+        virtual Optional<int> getHeight() = 0;\n+\n+        //! Get block height above genesis block. Returns 0 for genesis block,\n+        //! 1 for following block, and so on. Returns nothing for a block not\n+        //! included in the current chain.\n+        virtual Optional<int> getBlockHeight(const uint256& hash) = 0;\n+\n+        //! Get block depth. Returns 1 for chain tip, 2 for preceding block, and\n+        //! so on. Returns 0 for a block not included in the current chain.\n+        virtual int getBlockDepth(const uint256& hash) = 0;\n+\n+        //! Get block hash.\n+        virtual uint256 getBlockHash(int height) = 0;\n+\n+        //! Get block time.\n+        virtual int64_t getBlockTime(int height) = 0;\n+\n+        //! Get block median time past.\n+        virtual int64_t getBlockMedianTimePast(int height) = 0;\n+\n+        //! Check that the full block is available on disk (ie has not been\n+        //! pruned), and contains transactions.\n+        virtual bool haveBlockOnDisk(int height) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time, or nothing if there is no block with\n+        //! a high enough timestamp.\n+        virtual Optional<int> findFirstBlockWithTime(int64_t time) = 0;\n+\n+        //! Return height of the first block in the chain with timestamp equal\n+        //! or greater than the given time and height equal or greater than the\n+        //! given height, or nothing if there is no such block.\n+        //!\n+        //! Calling this with height 0 is equivalent to calling\n+        //! findFirstBlockWithTime, but less efficient because it requires a\n+        //! linear instead of a binary search.\n+        virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height) = 0;\n+\n+        //! Return height of last block in the specified range which is pruned, or\n+        //! nothing if no block in the range is pruned. Range is inclusive.\n+        virtual Optional<int> findPruned(int start_height = 0, Optional<int> stop_height = nullopt) = 0;\n+\n+        //! Return height of the highest block on the chain that is an ancestor\n+        //! of the specified block. Also return the height of the specified\n+        //! block as an optional output parameter.\n+        virtual Optional<int> findFork(const uint256& hash, Optional<int>* height) = 0;\n+\n+        //! Return true if block hash points to the current chain tip, or to a\n+        //! possible descendant of the current chain tip that isn't currently\n+        //! connected.\n+        virtual bool isPotentialTip(const uint256& hash) = 0;\n+\n+        //! Get locator for the current chain tip.\n+        virtual CBlockLocator getLocator() = 0;\n+\n+        //! Return height of block on the chain using locator.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607757",
      "id" : 251607757,
      "in_reply_to_id" : 251172260,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzc1Nw==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 81,
      "path" : "src/interfaces/chain.h",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607757",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607821"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607821"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251160945\r\n\r\n> nit: comment here should be /* last block */\r\n\r\nfixed\r\n\r\n",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:47:04Z",
      "diff_hunk" : "@@ -146,13 +147,12 @@ void TestGUI()\n         auto locked_chain = wallet->chain().lock();\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n-        const CBlockIndex* const null_block = nullptr;\n-        const CBlockIndex *stop_block, *failed_block;\n+        uint256 stop_block, failed_block;\n         QCOMPARE(\n-            wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, failed_block, stop_block, true /* fUpdate */),\n+            wallet->ScanForWalletTransactions(locked_chain->getBlockHash(0), {} /* stop block */, reserver, failed_block, stop_block, true /* fUpdate */),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607821",
      "id" : 251607821,
      "in_reply_to_id" : 251160945,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzgyMQ==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 17,
      "path" : "src/qt/test/wallettests.cpp",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607821",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607912"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251167898\r\n\r\n> Nit: comment should be /* fUpdate */\r\n\r\nfixed\r\n",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:47:20Z",
      "diff_hunk" : "@@ -3388,59 +3387,58 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    Optional<int> stop_height;\n+    Optional<int> tip_height;\n+    uint256 first_block, last_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        tip_height = locked_chain->getHeight();\n+        stop_height = tip_height;\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n-            }\n-            block = block->pprev;\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            first_block = locked_chain->getBlockHash(start_height);\n+            last_block = locked_chain->getBlockHash(stop_height.value_or(*tip_height));\n         }\n     }\n \n-    const CBlockIndex *failed_block, *stopBlock;\n+    uint256 failed_block, stop_block;\n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, failed_block, stopBlock, true);\n+        pwallet->ScanForWalletTransactions(first_block, last_block, reserver, failed_block, stop_block, true /* prune */);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607912",
      "id" : 251607912,
      "in_reply_to_id" : 251167898,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzkxMg==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 146,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607912",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607980"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607980"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251161437\r\n\r\n> Nit: could you save a second chainActive lookup here by returning both the height and hash from findFirstBlockWithTime()?\r\n\r\ndone",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:47:32Z",
      "diff_hunk" : "@@ -1591,29 +1586,35 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n+        if (start_height) start_block = locked_chain->getBlockHash(*start_height);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251607980",
      "id" : 251607980,
      "in_reply_to_id" : 251161437,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwNzk4MA==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 120,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251607980",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251608017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251608017"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251161918\r\n\r\n> Nit: comment should be /* last block */\r\n\r\nfixed",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-28T21:47:37Z",
      "diff_hunk" : "@@ -1591,29 +1586,35 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n+        if (start_height) start_block = locked_chain->getBlockHash(*start_height);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n+        uint256 failed_block, stop_block;\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        if (ScanResult::FAILURE == ScanForWalletTransactions(start_block, {} /* stop block */, reserver, failed_block, stop_block, update)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251608017",
      "id" : 251608017,
      "in_reply_to_id" : 251161918,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MTYwODAxNw==",
      "original_commit_id" : "1da8b4648e6b5f01a90acfe487bcda6f7a5a0424",
      "original_position" : 130,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 197258178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T20:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/251608017",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Will review further after https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251169892 has been fixed. Also, I clarified the documentation of the rpc in that we follow the chain in case it \"runs ahead\" during the rpc (https://github.com/bitcoin/bitcoin/pull/15279)",
      "created_at" : "2019-01-28T22:40:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458331231",
      "id" : 458331231,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1ODMzMTIzMQ==",
      "updated_at" : "2019-01-28T22:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458331231",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "John's comment https://github.com/bitcoin/bitcoin/pull/14711#discussion_r251166471 made me realize there seems to be a minor race condition and inconsistent behavior in the current implementation of ScanForWalletTransactions. If there is a reorg while `cs_main` is unlocked, there are two different checks to handle the case that pindex is no longer on the new chain. One of these checks will return ScanResult::SUCCESS while the other will return ScanResult::FAILURE, and which check is hit will depend the on timing of ReadBlockFromDisk and SyncTransactions calls.\r\n\r\nThe check after the ReadBlockFromDisk call leads to ScanResult::FAILURE:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/d6e700e40f861ddd6743f4d13f0d6f6bc19093c2/src/wallet/wallet.cpp#L1677\r\n\r\nThe check after the SyncTransactions loop leads to ScanResult::SUCCESS:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/d6e700e40f861ddd6743f4d13f0d6f6bc19093c2/src/wallet/wallet.cpp#L1697\r\nhttps://github.com/bitcoin/bitcoin/blob/d6e700e40f861ddd6743f4d13f0d6f6bc19093c2/src/wallet/wallet.cpp#L1664\r\n\r\nIt seems like the better thing to do would be return SUCCESS in both cases, since any blocks attached in a reorg should already be scanned for wallet transactions. Returning SUCCESS in both cases is the behavior currently implemented in this PR, but I think I should add some comments about it to clarify and maybe open a separate PR to avoid changing the behavior here.",
      "created_at" : "2019-01-28T23:21:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458342518",
      "id" : 458342518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1ODM0MjUxOA==",
      "updated_at" : "2019-01-28T23:21:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458342518",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'd prefer to keep this refactoring-only and would suggest to open a pr for that either before or after this one is merged.",
      "created_at" : "2019-01-29T18:24:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458651355",
      "id" : 458651355,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1ODY1MTM1NQ==",
      "updated_at" : "2019-01-29T18:24:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458651355",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252026843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252026843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit db21f02648 Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\r\n\r\n\r\nnit: Not sure why you check for this. In current operation tip_height is never nullopt, and when that should change in the future, you might as well return with an early error instead of calling into `ScanForWalletTransactions`, whose documentation states that the start block is required to be set. (I know that it probably will pass through just fine even if it is not provided, but we shouldn't rely on that. I also know that there is a unit test to check that behaviour, but it was probably added because of a misunderstanding of the documentation of `ScanForWalletTransactions`).",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-29T21:34:24Z",
      "diff_hunk" : "@@ -3387,59 +3387,57 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    uint256 start_block, stop_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        Optional<int> tip_height = locked_chain->getHeight();\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n+        Optional<int> stop_height;\n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252026843",
      "id" : 252026843,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjAyNjg0Mw==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 51,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 132,
      "pull_request_review_id" : 197795703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T22:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252026843",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252031485"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252031485"
         }
      },
      "author_association" : "MEMBER",
      "body" : "db21f02648 Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\r\n\r\n\r\nnit: In line with my previous comment, I'd prefer if we either assumed that stop_height is always set or we return an  error. An alternative would be to adjust the documentation of the rpc result to mention that in (whatever obscure circumstances) `stop_height` might be null, but I'd prefer to throw an rpc error for such circumstances.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-29T21:48:03Z",
      "diff_hunk" : "@@ -3387,59 +3387,57 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    uint256 start_block, stop_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        Optional<int> tip_height = locked_chain->getHeight();\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n+        Optional<int> stop_height;\n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            start_block = locked_chain->getBlockHash(start_height);\n+            if (stop_height) {\n+                stop_block = locked_chain->getBlockHash(*stop_height);\n             }\n-            block = block->pprev;\n         }\n     }\n \n-    const CBlockIndex *failed_block, *stopBlock;\n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, failed_block, stopBlock, true);\n-    switch (result) {\n+        pwallet->ScanForWalletTransactions(start_block, stop_block, reserver, true /* fUpdate */);\n+    switch (result.status) {\n     case CWallet::ScanResult::SUCCESS:\n-        break; // stopBlock set by ScanForWalletTransactions\n+        break;\n     case CWallet::ScanResult::FAILURE:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n     case CWallet::ScanResult::USER_ABORT:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n         // no default case, so the compiler can warn about missing cases\n     }\n     UniValue response(UniValue::VOBJ);\n-    response.pushKV(\"start_height\", pindexStart->nHeight);\n-    response.pushKV(\"stop_height\", stopBlock->nHeight);\n+    response.pushKV(\"start_height\", start_height);\n+    response.pushKV(\"stop_height\", result.stop_height ? *result.stop_height : UniValue());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252031485",
      "id" : 252031485,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjAzMTQ4NQ==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 79,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 160,
      "pull_request_review_id" : 197795703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T22:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252031485",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252035452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252035452"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit db21f02648 Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\r\n\r\n\r\nunrelated request: I'd prefer if we had some guideline on when to use `assert` vs `std::logic_error`. This seems like a condition that can never be hit unless there is a coding error, in which case an `assert` appears more appropriate.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-29T21:59:24Z",
      "diff_hunk" : "@@ -1587,132 +1587,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252035452",
      "id" : 252035452,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjAzNTQ1Mg==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 68,
      "path" : "src/wallet/wallet.cpp",
      "position" : 132,
      "pull_request_review_id" : 197795703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T22:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252035452",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252036436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252036436"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit db21f02648 Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\r\n\r\n\r\nIs this correct? It seems that without a start_block, we'd just \"fall through\" and return instead of starting at the genesis block.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-29T22:02:18Z",
      "diff_hunk" : "@@ -1587,132 +1587,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, the most recent block\n- *     that could not be scanned, otherwise nullptr\n- * @param[out] stop_block the most recent block that could be scanned,\n- *     otherwise nullptr if no block could be scanned\n+ * @param[in] start_block if not null, the scan will start at this block instead\n+ *            of the genesis block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252036436",
      "id" : 252036436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjAzNjQzNg==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 88,
      "path" : "src/wallet/wallet.cpp",
      "position" : 152,
      "pull_request_review_id" : 197795703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T22:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252036436",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252038449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252038449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "With this rename of the second parameter (`last_block` -> `stop_block`) we now have a parameter named `stop_block` and a member in the return object called `stop_block` which refer to different things. I think this should change back to `last_block` to match the header file, and the several inline comments should be updated to say `last_block`.\r\n\r\nEDIT: I see the RPC params are called `start_block` and `stop_block`, so this parameter naming does make sense. Could you rename the members of the return object and update the parameter names in the header file?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-29T22:08:24Z",
      "diff_hunk" : "@@ -1591,132 +1586,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, the most recent block\n- *     that could not be scanned, otherwise nullptr\n- * @param[out] stop_block the most recent block that could be scanned,\n- *     otherwise nullptr if no block could be scanned\n+ * @param[in] start_block if not null, the scan will start at this block instead\n+ *            of the genesis block\n+ * @param[in] stop_block if not null, the scan will stop at this block instead\n+ *            of the chain tip\n  *\n  * @return ScanResult indicating success or failure of the scan. SUCCESS if\n  * scan was successful. FAILURE if a complete rescan was not possible (due to\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure start_block (and the optional stop_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252038449",
      "id" : 252038449,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjAzODQ0OQ==",
      "original_commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "original_position" : 167,
      "path" : "src/wallet/wallet.cpp",
      "position" : 167,
      "pull_request_review_id" : 197810238,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T22:37:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252038449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252038666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252038666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Needs updating now that `ScanResult` is an object.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-29T22:09:03Z",
      "diff_hunk" : "@@ -1591,132 +1586,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, the most recent block\n- *     that could not be scanned, otherwise nullptr\n- * @param[out] stop_block the most recent block that could be scanned,\n- *     otherwise nullptr if no block could be scanned\n+ * @param[in] start_block if not null, the scan will start at this block instead\n+ *            of the genesis block\n+ * @param[in] stop_block if not null, the scan will stop at this block instead\n+ *            of the chain tip\n  *\n  * @return ScanResult indicating success or failure of the scan. SUCCESS if",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252038666",
      "id" : 252038666,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjAzODY2Ng==",
      "original_commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "original_position" : 156,
      "path" : "src/wallet/wallet.cpp",
      "position" : 156,
      "pull_request_review_id" : 197810238,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T22:37:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252038666",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252041954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252041954"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit db21f02648 Convert CWallet::ScanForWalletTransactions and SyncTransaction to the new Chain apis\r\n\r\n\r\nnit: the condition checks for `block_height`, so the `value_or` is dead code and can be removed?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-29T22:19:22Z",
      "diff_hunk" : "@@ -1587,132 +1587,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, the most recent block\n- *     that could not be scanned, otherwise nullptr\n- * @param[out] stop_block the most recent block that could be scanned,\n- *     otherwise nullptr if no block could be scanned\n+ * @param[in] start_block if not null, the scan will start at this block instead\n+ *            of the genesis block\n+ * @param[in] stop_block if not null, the scan will stop at this block instead\n+ *            of the chain tip\n  *\n  * @return ScanResult indicating success or failure of the scan. SUCCESS if\n  * scan was successful. FAILURE if a complete rescan was not possible (due to\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure start_block (and the optional stop_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    const CBlockIndex* pindex = pindexStart;\n-    failed_block = nullptr;\n-    stop_block = nullptr;\n+    uint256 block_hash = start_block;\n+    ScanResult result;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n             auto locked_chain = chain().lock();\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n-            } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n             }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            progress_end = chain().guessVerificationProgress(stop_block.IsNull() ? tip_hash : stop_block);\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested()) {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+        while (block_height && !fAbortRescan && !ShutdownRequested()) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n                 auto locked_chain = chain().lock();\n                 LOCK(cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    failed_block = pindex;\n+                    // TODO: This should return success instead of failure, see\n+                    // https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458342518\n+                    result.failed_block = block_hash;\n+                    result.status = ScanResult::FAILURE;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n                 }\n                 // scan succeeded, record block as most recent successfully scanned\n-                stop_block = pindex;\n+                result.stop_block = block_hash;\n+                result.stop_height = *block_height;\n             } else {\n                 // could not scan block, keep scanning but record this block as the most recent failure\n-                failed_block = pindex;\n+                result.failed_block = block_hash;\n+                result.status = ScanResult::FAILURE;\n             }\n-            if (pindex == pindexStop) {\n+            if (block_hash == stop_block) {\n                 break;\n             }\n             {\n                 auto locked_chain = chain().lock();\n-                pindex = chainActive.Next(pindex);\n-                progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                if (pindexStop == nullptr && tip != chainActive.Tip()) {\n-                    tip = chainActive.Tip();\n+                Optional<int> tip_height = locked_chain->getHeight();\n+                if (!tip_height || *tip_height <= block_height || !locked_chain->getBlockHeight(block_hash)) {\n+                    // break successfully when rescan has reached the tip, or\n+                    // previous block is no longer on the chain due to a reorg\n+                    break;\n+                }\n+\n+                // increment block and verification progress\n+                block_hash = locked_chain->getBlockHash(++*block_height);\n+                progress_current = chain().guessVerificationProgress(block_hash);\n+\n+                // handle updated tip hash\n+                const uint256 prev_tip_hash = tip_hash;\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+                if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n                     // in case the tip has changed, update progress max\n-                    progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+                    progress_end = chain().guessVerificationProgress(tip_hash);\n                 }\n             }\n         }\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 100); // hide progress dialog in GUI\n-        if (pindex && fAbortRescan) {\n-            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-            return ScanResult::USER_ABORT;\n-        } else if (pindex && ShutdownRequested()) {\n-            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-            return ScanResult::USER_ABORT;\n+        if (block_height && fAbortRescan) {\n+            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", block_height.value_or(0), progress_current);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252041954",
      "id" : 252041954,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjA0MTk1NA==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 227,
      "path" : "src/wallet/wallet.cpp",
      "position" : 291,
      "pull_request_review_id" : 197795703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T22:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252041954",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252042021"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252042021"
         }
      },
      "author_association" : "MEMBER",
      "body" : "same",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-29T22:19:34Z",
      "diff_hunk" : "@@ -1587,132 +1587,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, the most recent block\n- *     that could not be scanned, otherwise nullptr\n- * @param[out] stop_block the most recent block that could be scanned,\n- *     otherwise nullptr if no block could be scanned\n+ * @param[in] start_block if not null, the scan will start at this block instead\n+ *            of the genesis block\n+ * @param[in] stop_block if not null, the scan will stop at this block instead\n+ *            of the chain tip\n  *\n  * @return ScanResult indicating success or failure of the scan. SUCCESS if\n  * scan was successful. FAILURE if a complete rescan was not possible (due to\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure start_block (and the optional stop_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    const CBlockIndex* pindex = pindexStart;\n-    failed_block = nullptr;\n-    stop_block = nullptr;\n+    uint256 block_hash = start_block;\n+    ScanResult result;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n             auto locked_chain = chain().lock();\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n-            } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n             }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            progress_end = chain().guessVerificationProgress(stop_block.IsNull() ? tip_hash : stop_block);\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested()) {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+        while (block_height && !fAbortRescan && !ShutdownRequested()) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n                 auto locked_chain = chain().lock();\n                 LOCK(cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    failed_block = pindex;\n+                    // TODO: This should return success instead of failure, see\n+                    // https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458342518\n+                    result.failed_block = block_hash;\n+                    result.status = ScanResult::FAILURE;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n                 }\n                 // scan succeeded, record block as most recent successfully scanned\n-                stop_block = pindex;\n+                result.stop_block = block_hash;\n+                result.stop_height = *block_height;\n             } else {\n                 // could not scan block, keep scanning but record this block as the most recent failure\n-                failed_block = pindex;\n+                result.failed_block = block_hash;\n+                result.status = ScanResult::FAILURE;\n             }\n-            if (pindex == pindexStop) {\n+            if (block_hash == stop_block) {\n                 break;\n             }\n             {\n                 auto locked_chain = chain().lock();\n-                pindex = chainActive.Next(pindex);\n-                progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                if (pindexStop == nullptr && tip != chainActive.Tip()) {\n-                    tip = chainActive.Tip();\n+                Optional<int> tip_height = locked_chain->getHeight();\n+                if (!tip_height || *tip_height <= block_height || !locked_chain->getBlockHeight(block_hash)) {\n+                    // break successfully when rescan has reached the tip, or\n+                    // previous block is no longer on the chain due to a reorg\n+                    break;\n+                }\n+\n+                // increment block and verification progress\n+                block_hash = locked_chain->getBlockHash(++*block_height);\n+                progress_current = chain().guessVerificationProgress(block_hash);\n+\n+                // handle updated tip hash\n+                const uint256 prev_tip_hash = tip_hash;\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+                if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n                     // in case the tip has changed, update progress max\n-                    progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+                    progress_end = chain().guessVerificationProgress(tip_hash);\n                 }\n             }\n         }\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 100); // hide progress dialog in GUI\n-        if (pindex && fAbortRescan) {\n-            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-            return ScanResult::USER_ABORT;\n-        } else if (pindex && ShutdownRequested()) {\n-            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-            return ScanResult::USER_ABORT;\n+        if (block_height && fAbortRescan) {\n+            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", block_height.value_or(0), progress_current);\n+            result.status = ScanResult::USER_ABORT;\n+        } else if (block_height && ShutdownRequested()) {\n+            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", block_height.value_or(0), progress_current);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252042021",
      "id" : 252042021,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjA0MjAyMQ==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 230,
      "path" : "src/wallet/wallet.cpp",
      "position" : 294,
      "pull_request_review_id" : 197795703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T22:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252042021",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252043990"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252043990"
         }
      },
      "author_association" : "MEMBER",
      "body" : "A comment here could prevent other people from falling into the same trap. Something like:\r\n\r\n```c++\r\n// If called with a stop_height, set the stop_height here to trigger a rescan to that height.\r\n// If called without a stop height, leave stop_height as null here so rescan continues to the tip (even if the tip advances during rescan).\r\n```",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-29T22:25:41Z",
      "diff_hunk" : "@@ -3388,59 +3387,57 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    uint256 start_block, stop_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        Optional<int> tip_height = locked_chain->getHeight();\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n+        Optional<int> stop_height;\n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            start_block = locked_chain->getBlockHash(start_height);\n+            if (stop_height) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252043990",
      "id" : 252043990,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjA0Mzk5MA==",
      "original_commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 134,
      "pull_request_review_id" : 197810238,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T22:37:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252043990",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252044389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252044389"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 44de1561aa\r\n\r\nCould say `getTipLocator()`?",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-29T22:26:58Z",
      "diff_hunk" : "@@ -112,6 +117,21 @@ class LockImpl : public Chain::Lock\n         }\n         return nullopt;\n     }\n+    bool isPotentialTip(const uint256& hash) override\n+    {\n+        if (::chainActive.Tip()->GetBlockHash() == hash) return true;\n+        CBlockIndex* block = LookupBlockIndex(hash);\n+        return block && block->GetAncestor(::chainActive.Height()) == ::chainActive.Tip();\n+    }\n+    CBlockLocator getLocator() override { return ::chainActive.GetLocator(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252044389",
      "id" : 252044389,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjA0NDM4OQ==",
      "original_commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "original_position" : 22,
      "path" : "src/interfaces/chain.cpp",
      "position" : 119,
      "pull_request_review_id" : 197795703,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-01-29T22:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252044389",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Agreed, any comments/nits can be addressed in followup",
      "created_at" : "2019-01-30T00:05:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458757969",
      "id" : 458757969,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1ODc1Nzk2OQ==",
      "updated_at" : "2019-01-30T00:05:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458757969",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for reviews, all! I will follow up with the remaining unaddressed comments.\r\n\r\nThe next PR in the series is #15288 (which is much simpler than this PR)",
      "created_at" : "2019-01-30T12:13:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458922670",
      "id" : 458922670,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1ODkyMjY3MA==",
      "updated_at" : "2019-01-30T12:13:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/458922670",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252428776"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252428776"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252044389\r\n\r\n>Could say getTipLocator()?\r\n\r\nfixed",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-30T20:39:03Z",
      "diff_hunk" : "@@ -112,6 +117,21 @@ class LockImpl : public Chain::Lock\n         }\n         return nullopt;\n     }\n+    bool isPotentialTip(const uint256& hash) override\n+    {\n+        if (::chainActive.Tip()->GetBlockHash() == hash) return true;\n+        CBlockIndex* block = LookupBlockIndex(hash);\n+        return block && block->GetAncestor(::chainActive.Height()) == ::chainActive.Tip();\n+    }\n+    CBlockLocator getLocator() override { return ::chainActive.GetLocator(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252428776",
      "id" : 252428776,
      "in_reply_to_id" : 252044389,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjQyODc3Ng==",
      "original_commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "original_position" : 22,
      "path" : "src/interfaces/chain.cpp",
      "position" : 119,
      "pull_request_review_id" : 198295170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T16:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252428776",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429001"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429001"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252043990\r\n\r\n> A comment here could prevent other people from falling into the same trap. Something like:\r\n\r\nadded",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-30T20:39:45Z",
      "diff_hunk" : "@@ -3388,59 +3387,57 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    uint256 start_block, stop_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        Optional<int> tip_height = locked_chain->getHeight();\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n+        Optional<int> stop_height;\n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            start_block = locked_chain->getBlockHash(start_height);\n+            if (stop_height) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429001",
      "id" : 252429001,
      "in_reply_to_id" : 252043990,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjQyOTAwMQ==",
      "original_commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "original_position" : 134,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 134,
      "pull_request_review_id" : 198295170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T16:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429001",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429047"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429047"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252031485\r\n\r\n> An alternative would be to adjust the documentation of the rpc result to mention that in (whatever obscure circumstances) stop_height might be null\r\n\r\nUpdated documentation, this could happen rarely during a reorg",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-30T20:39:51Z",
      "diff_hunk" : "@@ -3387,59 +3387,57 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    uint256 start_block, stop_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        Optional<int> tip_height = locked_chain->getHeight();\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n+        Optional<int> stop_height;\n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {\n+            start_block = locked_chain->getBlockHash(start_height);\n+            if (stop_height) {\n+                stop_block = locked_chain->getBlockHash(*stop_height);\n             }\n-            block = block->pprev;\n         }\n     }\n \n-    const CBlockIndex *failed_block, *stopBlock;\n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, failed_block, stopBlock, true);\n-    switch (result) {\n+        pwallet->ScanForWalletTransactions(start_block, stop_block, reserver, true /* fUpdate */);\n+    switch (result.status) {\n     case CWallet::ScanResult::SUCCESS:\n-        break; // stopBlock set by ScanForWalletTransactions\n+        break;\n     case CWallet::ScanResult::FAILURE:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n     case CWallet::ScanResult::USER_ABORT:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n         // no default case, so the compiler can warn about missing cases\n     }\n     UniValue response(UniValue::VOBJ);\n-    response.pushKV(\"start_height\", pindexStart->nHeight);\n-    response.pushKV(\"stop_height\", stopBlock->nHeight);\n+    response.pushKV(\"start_height\", start_height);\n+    response.pushKV(\"stop_height\", result.stop_height ? *result.stop_height : UniValue());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429047",
      "id" : 252429047,
      "in_reply_to_id" : 252031485,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjQyOTA0Nw==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 79,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 160,
      "pull_request_review_id" : 198295170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T16:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429047",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429302"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429302"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252035452\r\n\r\n> This seems like a condition that can never be hit unless there is a coding error, in which case an assert appears more appropriate.\r\n\r\nI don't think `logic_error` means anything different from `assert`. https://en.cppreference.com/w/cpp/error/logic_error at least says \"It reports errors that are a consequence of faulty logic within the program.\" I would use an assert over a logic error only in cases where it seemed safer to abort the entire process than to just abort the current request. Or maybe to match preexisting code.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-30T20:40:37Z",
      "diff_hunk" : "@@ -1587,132 +1587,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429302",
      "id" : 252429302,
      "in_reply_to_id" : 252035452,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjQyOTMwMg==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 68,
      "path" : "src/wallet/wallet.cpp",
      "position" : 132,
      "pull_request_review_id" : 198295170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T16:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429302",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429333"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252036436\r\n\r\n> Is this correct?\r\n\r\nGood catch, fixed comment",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-30T20:40:41Z",
      "diff_hunk" : "@@ -1587,132 +1587,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, the most recent block\n- *     that could not be scanned, otherwise nullptr\n- * @param[out] stop_block the most recent block that could be scanned,\n- *     otherwise nullptr if no block could be scanned\n+ * @param[in] start_block if not null, the scan will start at this block instead\n+ *            of the genesis block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429333",
      "id" : 252429333,
      "in_reply_to_id" : 252036436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjQyOTMzMw==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 88,
      "path" : "src/wallet/wallet.cpp",
      "position" : 152,
      "pull_request_review_id" : 198295170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T16:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429333",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429371"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252038666\r\n\r\n> Needs updating now that ScanResult is an object.\r\n\r\ndone\r\n\r\n\r\n\r\n",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-30T20:40:47Z",
      "diff_hunk" : "@@ -1591,132 +1586,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, the most recent block\n- *     that could not be scanned, otherwise nullptr\n- * @param[out] stop_block the most recent block that could be scanned,\n- *     otherwise nullptr if no block could be scanned\n+ * @param[in] start_block if not null, the scan will start at this block instead\n+ *            of the genesis block\n+ * @param[in] stop_block if not null, the scan will stop at this block instead\n+ *            of the chain tip\n  *\n  * @return ScanResult indicating success or failure of the scan. SUCCESS if",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429371",
      "id" : 252429371,
      "in_reply_to_id" : 252038666,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjQyOTM3MQ==",
      "original_commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "original_position" : 156,
      "path" : "src/wallet/wallet.cpp",
      "position" : 156,
      "pull_request_review_id" : 198295170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T16:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429371",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429393"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252038449\r\n\r\n> Could you rename the members of the return object and update the parameter names in the header file?\r\n\r\ndone",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-30T20:40:52Z",
      "diff_hunk" : "@@ -1591,132 +1586,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, the most recent block\n- *     that could not be scanned, otherwise nullptr\n- * @param[out] stop_block the most recent block that could be scanned,\n- *     otherwise nullptr if no block could be scanned\n+ * @param[in] start_block if not null, the scan will start at this block instead\n+ *            of the genesis block\n+ * @param[in] stop_block if not null, the scan will stop at this block instead\n+ *            of the chain tip\n  *\n  * @return ScanResult indicating success or failure of the scan. SUCCESS if\n  * scan was successful. FAILURE if a complete rescan was not possible (due to\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure start_block (and the optional stop_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429393",
      "id" : 252429393,
      "in_reply_to_id" : 252038449,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjQyOTM5Mw==",
      "original_commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "original_position" : 167,
      "path" : "src/wallet/wallet.cpp",
      "position" : 167,
      "pull_request_review_id" : 198295170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T16:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429393",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429413"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429413"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252041954\r\n\r\n> the value_or is dead code and can be removed?\r\n\r\nGood catch, removed",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-30T20:40:56Z",
      "diff_hunk" : "@@ -1587,132 +1587,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, the most recent block\n- *     that could not be scanned, otherwise nullptr\n- * @param[out] stop_block the most recent block that could be scanned,\n- *     otherwise nullptr if no block could be scanned\n+ * @param[in] start_block if not null, the scan will start at this block instead\n+ *            of the genesis block\n+ * @param[in] stop_block if not null, the scan will stop at this block instead\n+ *            of the chain tip\n  *\n  * @return ScanResult indicating success or failure of the scan. SUCCESS if\n  * scan was successful. FAILURE if a complete rescan was not possible (due to\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure start_block (and the optional stop_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    const CBlockIndex* pindex = pindexStart;\n-    failed_block = nullptr;\n-    stop_block = nullptr;\n+    uint256 block_hash = start_block;\n+    ScanResult result;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n             auto locked_chain = chain().lock();\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n-            } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n             }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            progress_end = chain().guessVerificationProgress(stop_block.IsNull() ? tip_hash : stop_block);\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested()) {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+        while (block_height && !fAbortRescan && !ShutdownRequested()) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n                 auto locked_chain = chain().lock();\n                 LOCK(cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    failed_block = pindex;\n+                    // TODO: This should return success instead of failure, see\n+                    // https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458342518\n+                    result.failed_block = block_hash;\n+                    result.status = ScanResult::FAILURE;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n                 }\n                 // scan succeeded, record block as most recent successfully scanned\n-                stop_block = pindex;\n+                result.stop_block = block_hash;\n+                result.stop_height = *block_height;\n             } else {\n                 // could not scan block, keep scanning but record this block as the most recent failure\n-                failed_block = pindex;\n+                result.failed_block = block_hash;\n+                result.status = ScanResult::FAILURE;\n             }\n-            if (pindex == pindexStop) {\n+            if (block_hash == stop_block) {\n                 break;\n             }\n             {\n                 auto locked_chain = chain().lock();\n-                pindex = chainActive.Next(pindex);\n-                progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                if (pindexStop == nullptr && tip != chainActive.Tip()) {\n-                    tip = chainActive.Tip();\n+                Optional<int> tip_height = locked_chain->getHeight();\n+                if (!tip_height || *tip_height <= block_height || !locked_chain->getBlockHeight(block_hash)) {\n+                    // break successfully when rescan has reached the tip, or\n+                    // previous block is no longer on the chain due to a reorg\n+                    break;\n+                }\n+\n+                // increment block and verification progress\n+                block_hash = locked_chain->getBlockHash(++*block_height);\n+                progress_current = chain().guessVerificationProgress(block_hash);\n+\n+                // handle updated tip hash\n+                const uint256 prev_tip_hash = tip_hash;\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+                if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n                     // in case the tip has changed, update progress max\n-                    progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+                    progress_end = chain().guessVerificationProgress(tip_hash);\n                 }\n             }\n         }\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 100); // hide progress dialog in GUI\n-        if (pindex && fAbortRescan) {\n-            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-            return ScanResult::USER_ABORT;\n-        } else if (pindex && ShutdownRequested()) {\n-            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-            return ScanResult::USER_ABORT;\n+        if (block_height && fAbortRescan) {\n+            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", block_height.value_or(0), progress_current);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429413",
      "id" : 252429413,
      "in_reply_to_id" : 252041954,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjQyOTQxMw==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 227,
      "path" : "src/wallet/wallet.cpp",
      "position" : 291,
      "pull_request_review_id" : 198295170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T16:49:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429413",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429440"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252042021\r\n\r\n> same\r\n\r\nnow removed",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-30T20:41:00Z",
      "diff_hunk" : "@@ -1587,132 +1587,143 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    uint256 start_block;\n     {\n         auto locked_chain = chain().lock();\n-        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+        const Optional<int> start_height = locked_chain->findFirstBlockWithTime(startTime - TIMESTAMP_WINDOW, &start_block);\n+        const Optional<int> tip_height = locked_chain->getHeight();\n+        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n     }\n \n-    if (startBlock) {\n-        const CBlockIndex *failedBlock, *stop_block;\n+    if (!start_block.IsNull()) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        if (ScanResult::FAILURE == ScanForWalletTransactions(startBlock, nullptr, reserver, failedBlock, stop_block, update)) {\n-            return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n+        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        if (result.status == ScanResult::FAILURE) {\n+            int64_t time_max;\n+            if (!chain().findBlock(result.failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n     return startTime;\n }\n \n /**\n- * Scan the block chain (starting in pindexStart) for transactions\n+ * Scan the block chain (starting in start_block) for transactions\n  * from or to us. If fUpdate is true, found transactions that already\n  * exist in the wallet will be updated.\n  *\n- * @param[in] pindexStop if not a nullptr, the scan will stop at this block-index\n- * @param[out] failed_block if FAILURE is returned, the most recent block\n- *     that could not be scanned, otherwise nullptr\n- * @param[out] stop_block the most recent block that could be scanned,\n- *     otherwise nullptr if no block could be scanned\n+ * @param[in] start_block if not null, the scan will start at this block instead\n+ *            of the genesis block\n+ * @param[in] stop_block if not null, the scan will stop at this block instead\n+ *            of the chain tip\n  *\n  * @return ScanResult indicating success or failure of the scan. SUCCESS if\n  * scan was successful. FAILURE if a complete rescan was not possible (due to\n  * pruning or corruption). USER_ABORT if the rescan was aborted before it\n  * could complete.\n  *\n- * @pre Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * @pre Caller needs to make sure start_block (and the optional stop_block) are on\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const CBlockIndex* const pindexStart, const CBlockIndex* const pindexStop, const WalletRescanReserver& reserver, const CBlockIndex*& failed_block, const CBlockIndex*& stop_block, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n-    const CChainParams& chainParams = Params();\n \n     assert(reserver.isReserved());\n-    if (pindexStop) {\n-        assert(pindexStop->nHeight >= pindexStart->nHeight);\n-    }\n \n-    const CBlockIndex* pindex = pindexStart;\n-    failed_block = nullptr;\n-    stop_block = nullptr;\n+    uint256 block_hash = start_block;\n+    ScanResult result;\n \n-    if (pindex) WalletLogPrintf(\"Rescan started from block %d...\\n\", pindex->nHeight);\n+    WalletLogPrintf(\"Rescan started from block %s...\\n\", start_block.ToString());\n \n     {\n         fAbortRescan = false;\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        uint256 tip_hash;\n+        Optional<int> block_height;\n         double progress_begin;\n         double progress_end;\n         {\n             auto locked_chain = chain().lock();\n-            progress_begin = GuessVerificationProgress(chainParams.TxData(), pindex);\n-            if (pindexStop == nullptr) {\n-                tip = chainActive.Tip();\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n-            } else {\n-                progress_end = GuessVerificationProgress(chainParams.TxData(), pindexStop);\n+            if (Optional<int> tip_height = locked_chain->getHeight()) {\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n             }\n+            block_height = locked_chain->getBlockHeight(block_hash);\n+            progress_begin = chain().guessVerificationProgress(block_hash);\n+            progress_end = chain().guessVerificationProgress(stop_block.IsNull() ? tip_hash : stop_block);\n         }\n         double progress_current = progress_begin;\n-        while (pindex && !fAbortRescan && !ShutdownRequested()) {\n-            if (pindex->nHeight % 100 == 0 && progress_end - progress_begin > 0.0) {\n+        while (block_height && !fAbortRescan && !ShutdownRequested()) {\n+            if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n                 ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), std::max(1, std::min(99, (int)((progress_current - progress_begin) / (progress_end - progress_begin) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n+                WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n             }\n \n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n                 auto locked_chain = chain().lock();\n                 LOCK(cs_wallet);\n-                if (pindex && !chainActive.Contains(pindex)) {\n+                if (!locked_chain->getBlockHeight(block_hash)) {\n                     // Abort scan if current block is no longer active, to prevent\n                     // marking transactions as coming from the wrong block.\n-                    failed_block = pindex;\n+                    // TODO: This should return success instead of failure, see\n+                    // https://github.com/bitcoin/bitcoin/pull/14711#issuecomment-458342518\n+                    result.failed_block = block_hash;\n+                    result.status = ScanResult::FAILURE;\n                     break;\n                 }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                    SyncTransaction(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n+                    SyncTransaction(block.vtx[posInBlock], block_hash, posInBlock, fUpdate);\n                 }\n                 // scan succeeded, record block as most recent successfully scanned\n-                stop_block = pindex;\n+                result.stop_block = block_hash;\n+                result.stop_height = *block_height;\n             } else {\n                 // could not scan block, keep scanning but record this block as the most recent failure\n-                failed_block = pindex;\n+                result.failed_block = block_hash;\n+                result.status = ScanResult::FAILURE;\n             }\n-            if (pindex == pindexStop) {\n+            if (block_hash == stop_block) {\n                 break;\n             }\n             {\n                 auto locked_chain = chain().lock();\n-                pindex = chainActive.Next(pindex);\n-                progress_current = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                if (pindexStop == nullptr && tip != chainActive.Tip()) {\n-                    tip = chainActive.Tip();\n+                Optional<int> tip_height = locked_chain->getHeight();\n+                if (!tip_height || *tip_height <= block_height || !locked_chain->getBlockHeight(block_hash)) {\n+                    // break successfully when rescan has reached the tip, or\n+                    // previous block is no longer on the chain due to a reorg\n+                    break;\n+                }\n+\n+                // increment block and verification progress\n+                block_hash = locked_chain->getBlockHash(++*block_height);\n+                progress_current = chain().guessVerificationProgress(block_hash);\n+\n+                // handle updated tip hash\n+                const uint256 prev_tip_hash = tip_hash;\n+                tip_hash = locked_chain->getBlockHash(*tip_height);\n+                if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n                     // in case the tip has changed, update progress max\n-                    progress_end = GuessVerificationProgress(chainParams.TxData(), tip);\n+                    progress_end = chain().guessVerificationProgress(tip_hash);\n                 }\n             }\n         }\n         ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\"), GetDisplayName()), 100); // hide progress dialog in GUI\n-        if (pindex && fAbortRescan) {\n-            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-            return ScanResult::USER_ABORT;\n-        } else if (pindex && ShutdownRequested()) {\n-            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", pindex->nHeight, progress_current);\n-            return ScanResult::USER_ABORT;\n+        if (block_height && fAbortRescan) {\n+            WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", block_height.value_or(0), progress_current);\n+            result.status = ScanResult::USER_ABORT;\n+        } else if (block_height && ShutdownRequested()) {\n+            WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", block_height.value_or(0), progress_current);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252429440",
      "id" : 252429440,
      "in_reply_to_id" : 252042021,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjQyOTQ0MA==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 230,
      "path" : "src/wallet/wallet.cpp",
      "position" : 294,
      "pull_request_review_id" : 198295170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T16:49:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252429440",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252439831"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252439831"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252026843\r\n\r\n> nit: Not sure why you check for this\r\n\r\nIn this case even though \"documentation states\" and \"In current operation\" the chain will never be empty, I think handling a rescan of an empty chain by just returning success is more natural than making assumptions about when the chain is initialized or what other code expects it to be initialized. If you think adding the assumption will simplify things, though, I'd be happy to take a specific suggestion or review a change.",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-01-30T21:13:35Z",
      "diff_hunk" : "@@ -3387,59 +3387,57 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    uint256 start_block, stop_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        Optional<int> tip_height = locked_chain->getHeight();\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n+        Optional<int> stop_height;\n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r252439831",
      "id" : 252439831,
      "in_reply_to_id" : 252026843,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MjQzOTgzMQ==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 51,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 132,
      "pull_request_review_id" : 198295170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T16:49:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/252439831",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r253609473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253609473"
         }
      },
      "author_association" : "MEMBER",
      "body" : ">I think handling a rescan of an empty chain by just returning success ...\r\n\r\nIt would also report that the rescan started at block 0, which does not exist, since the chain was not initialized.\r\n\r\nA user calling this function assumes that the chain was initialized and should be notified that it wasn't instead of returning `{start_height=0, stop_height=null}`, indicating success.\r\n\r\nAlso, we already throw an error if the chain wasn't initialized and the user supplies at least one of the optional parameters.\r\n\r\nI'd suggest the following code change:\r\n\r\n```diff\r\ndiff --git a/src/wallet/rpcwallet.cpp b/src/wallet/rpcwallet.cpp\r\nindex c96a9b0aff..ba8d3750b5 100644\r\n--- a/src/wallet/rpcwallet.cpp\r\n+++ b/src/wallet/rpcwallet.cpp\r\n@@ -3432,22 +3432,27 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\r\n     uint256 start_block, stop_block;\r\n     {\r\n         auto locked_chain = pwallet->chain().lock();\r\n-        Optional<int> tip_height = locked_chain->getHeight();\r\n+        int tip_height;\r\n+        if (Optional<int> tip_height_opt = locked_chain->getHeight()) {\r\n+            tip_height = *tip_height_opt;\r\n+        } else {\r\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Chain not initialized, nothing to rescan\");\r\n+        }\r\n \r\n         if (!request.params[0].isNull()) {\r\n             start_height = request.params[0].get_int();\r\n-            if (start_height < 0 || !tip_height || start_height > *tip_height) {\r\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\r\n-            }\r\n+        }\r\n+        if (start_height < 0 || start_height > tip_height) {\r\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\r\n         }\r\n \r\n         Optional<int> stop_height;\r\n         if (!request.params[1].isNull()) {\r\n             stop_height = request.params[1].get_int();\r\n-            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\r\n+            if (*stop_height < 0 || *stop_height > tip_height) {\r\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\r\n             }\r\n-            else if (*stop_height < start_height) {\r\n+            if (*stop_height < start_height) {\r\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\r\n             }\r\n         }\r\n@@ -3457,11 +3462,9 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\r\n             throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\r\n         }\r\n \r\n-        if (tip_height) {\r\n-            start_block = locked_chain->getBlockHash(start_height);\r\n-            if (stop_height) {\r\n-                stop_block = locked_chain->getBlockHash(*stop_height);\r\n-            }\r\n+        start_block = locked_chain->getBlockHash(start_height);\r\n+        if (stop_height) {\r\n+            stop_block = locked_chain->getBlockHash(*stop_height);\r\n         }\r\n     }\r\n \r\n",
      "commit_id" : "44de1561aaf7556bb8ae8b582c233742ff76767d",
      "created_at" : "2019-02-04T19:24:50Z",
      "diff_hunk" : "@@ -3387,59 +3387,57 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    int start_height = 0;\n+    uint256 start_block, stop_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        pindexStart = chainActive.Genesis();\n-        pChainTip = chainActive.Tip();\n+        Optional<int> tip_height = locked_chain->getHeight();\n \n         if (!request.params[0].isNull()) {\n-            pindexStart = chainActive[request.params[0].get_int()];\n-            if (!pindexStart) {\n+            start_height = request.params[0].get_int();\n+            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n+        Optional<int> stop_height;\n         if (!request.params[1].isNull()) {\n-            pindexStop = chainActive[request.params[1].get_int()];\n-            if (!pindexStop) {\n+            stop_height = request.params[1].get_int();\n+            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n-            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+            else if (*stop_height < start_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n             }\n         }\n-    }\n \n-    // We can't rescan beyond non-pruned blocks, stop and throw an error\n-    if (fPruneMode) {\n-        auto locked_chain = pwallet->chain().lock();\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n-        while (block && block->nHeight >= pindexStart->nHeight) {\n-            if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n-                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        // We can't rescan beyond non-pruned blocks, stop and throw an error\n+        if (locked_chain->findPruned(start_height, stop_height)) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+        }\n+\n+        if (tip_height) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14711#discussion_r253609473",
      "id" : 253609473,
      "in_reply_to_id" : 252026843,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MzYwOTQ3Mw==",
      "original_commit_id" : "db21f0264855406c9b6ec4c084a15988c5c71b32",
      "original_position" : 51,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 132,
      "pull_request_review_id" : 199762841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14711",
      "updated_at" : "2019-02-04T19:24:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/253609473",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
