[
   {
      "author_association" : "MEMBER",
      "body" : "~~Both old and~~ new code LGTM.",
      "created_at" : "2018-11-16T09:41:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439337521",
      "id" : 439337521,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTMzNzUyMQ==",
      "updated_at" : "2018-11-16T10:40:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439337521",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Extremely nice find and another excellent contribution from you! Thanks! You're right that the sanitizers don't catch this class of UB. I think `tis-interpreter` is the only good tool catching this class of UB. May I ask how you found this issue?\r\n\r\nFrom what I can see we unconditionally hit this UB as part of startup no matter what parameters we pass to `bitcoind` :-\\\r\n\r\nWhy this is UB: Assuming `char foo[N];` then calculating `foo + n` is UB if `n` is not in the range `0 <= n <= N`. Calculating one past the end (`n=N`) is OK (but we may not dereference).",
      "created_at" : "2018-11-16T10:31:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439351565",
      "id" : 439351565,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTM1MTU2NQ==",
      "updated_at" : "2018-11-16T10:35:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439351565",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@promag What is \"old code\" referring to? Don't you agree that the existing code in `master` invokes UB? :-)",
      "created_at" : "2018-11-16T10:36:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439352867",
      "id" : 439352867,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTM1Mjg2Nw==",
      "updated_at" : "2018-11-16T10:36:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439352867",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift TIL, it is UB unless one past the last element.\r\n\r\nutACK 0f459d8.",
      "created_at" : "2018-11-16T10:40:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439354048",
      "id" : 439354048,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTM1NDA0OA==",
      "updated_at" : "2018-11-16T10:40:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439354048",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@kazcw how about this:\r\n```diff\r\ndiff --git a/src/uint256.cpp b/src/uint256.cpp\r\nindex d9da66803..e5cadfae5 100644\r\n--- a/src/uint256.cpp\r\n+++ b/src/uint256.cpp\r\n@@ -40,13 +40,12 @@ void base_blob<BITS>::SetHex(const char* psz)\r\n     const char* pbegin = psz;\r\n     while (::HexDigit(*psz) != -1)\r\n         psz++;\r\n-    psz--;\r\n     unsigned char* p1 = (unsigned char*)data;\r\n     unsigned char* pend = p1 + WIDTH;\r\n-    while (psz >= pbegin && p1 < pend) {\r\n-        *p1 = ::HexDigit(*psz--);\r\n-        if (psz >= pbegin) {\r\n-            *p1 |= ((unsigned char)::HexDigit(*psz--) << 4);\r\n+    while (psz > pbegin && p1 < pend) {\r\n+        *p1 = ::HexDigit(*--psz);\r\n+        if (psz > pbegin) {\r\n+            *p1 |= ((unsigned char)::HexDigit(*--psz) << 4);\r\n             p1++;\r\n         }\r\n     }\r\n```",
      "created_at" : "2018-11-16T11:09:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439361248",
      "id" : 439361248,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTM2MTI0OA==",
      "updated_at" : "2018-11-16T11:09:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439361248",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift Just reading code!\r\n\r\n@promag That would be the minimal change to fix the problem, but Satoshi wrote C++ like an old-school C hacker :laughing:. IMO indexing is a little clearer in a codebase that these days uses more modern idioms.",
      "created_at" : "2018-11-16T15:41:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439433259",
      "id" : 439433259,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTQzMzI1OQ==",
      "updated_at" : "2018-11-16T15:41:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439433259",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1047859?v=4",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "node_id" : "MDQ6VXNlcjEwNDc4NTk=",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@kazcw Nice! Then keep on reading code please! :-)\r\n\r\nI've tried to launch a crusade against UB in Bitcoin Core. I even named the latest C-lightning release \"The Consensus Loving Nasal Daemon\" as a catchy slogan in this fight, so and I'm very happy to see your contributions! Keep 'em coming! :-)\r\n\r\nContext:\r\n* https://twitter.com/practicalswift/status/1051524615204470784\r\n* https://twitter.com/rusty_twit/status/1055965134428921856\r\n* https://github.com/ElementsProject/lightning/releases",
      "created_at" : "2018-11-16T17:01:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439458877",
      "id" : 439458877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTQ1ODg3Nw==",
      "updated_at" : "2018-11-16T17:01:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439458877",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke @laanwj What about adding a new label Ã¢ÂÂ say \"Undefined Behaviour\" Ã¢ÂÂ for UB pull requests and issues?\r\n\r\nFWIW I think the current use of the \"Refactoring\" label for UB PRs is problematic for a number of reasons:\r\n* UB PRs might be considered less important from a review attention perspective due to the refactoring label\r\n* The use of the refactoring label for UB might be interpreted as us downplaying the risks associated with UB\r\n* The \"Refactoring\" label is technically incorrect:\r\n  1. Code refactoring is defined as the process of restructuring existing computer code without changing its external behaviour. \r\n  2. Triggering undefined behaviour is defined as executing computer code whose behaviour is not prescribed by the language specification to which the code adheres, for the current state of the program.\r\n  3. Since undefined behaviour is a superset of external behaviour it follows that a PR fixing UB cannot technically be considered refactoring.\r\n\r\nSome open UB PR:s that need the suggested \"Undefined Behaviour\" label:\r\n* #14479: serialization: Don't invoke undefined behaviour when doing type punning\r\n* #14242: Avoid triggering undefined behaviour (`std::memset(nullptr, 0, 0)`) if an invalid string is passed to `DecodeSecret(...)`\r\n* #14239: Avoid dividing by zero (undefined behaviour) in `EstimateMedianVal` (policy)/`ConnectTip` (validation)/`CreateTransaction` (wallet)",
      "created_at" : "2018-11-16T17:44:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439471320",
      "id" : 439471320,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTQ3MTMyMA==",
      "updated_at" : "2018-11-16T17:49:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439471320",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift While I am in favor of (slowly) moving the code to strictly comply with the C++ standard, I also think we should also be aware that there are differences between:\r\n* Technically UB, but not for any real platform\r\n* Technically UB, but well defined for all systems we support\r\n* Would be UB, but not in any reachable codepath\r\n* Any of the above that follows from a misunderstanding by developers/reviewers, resulting in a fragile codebase.\r\n* An actual issue that can have impact on production systems.\r\n\r\nI would argue that the first one or two are not a priority at all (still a good-to-have, but there are also code churn concerns), while the last few are increasingly more so. I don't think classifying them all under \"UB\" is a good idea - it would be overly dramatic for some things, and a wild understatement for others.\r\n\r\nBy this I don't want to discourage anyone from working towards improving the situation, but perhaps a \"crusade\" isn't the right approach.\r\n",
      "created_at" : "2018-11-16T18:05:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439477521",
      "id" : 439477521,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTQ3NzUyMQ==",
      "updated_at" : "2018-11-16T18:14:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439477521",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Mostly agree with @sipa.\r\n\r\nAlso, there is a label \"Bug\", which (I guess) could be used when there is an observable issue with the code. I.e. actual malfunction and not just a code style issue or random compiler warning. Generally, if you are unable to write a functional or unit test case that will fail on current master, I'd say applying the \"Refactoring\" label is just fine.\r\n\r\nWe only support gcc and clang as compilers and in most cases of UB they just do the right thing without having to rewrite the code. And given that this piece of code is around for as long as the code base existed and no one ever run into issues, it seems unlikely that things will suddenly break.",
      "created_at" : "2018-11-16T18:42:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439487992",
      "id" : 439487992,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTQ4Nzk5Mg==",
      "updated_at" : "2018-11-16T18:42:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439487992",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This is a complex but important topic. I think it would be worth working out a clearly-defined policy. I propose for comment an approach that admits mostly-objective triage into practical categories, based on what kinds of testing can demonstrate the issue. I have a starting point here (suggested changes / fundamental disagreements welcome):\r\nhttps://gist.github.com/kazcw/6849c43796d51d3e56ad12bf691ac2e6#file-reliability-vs-ub-md\r\n\r\nIf there's agreement on this approach in principle, I could PR it as section in docs/developer-notes.md, and then we could use the PR process to work out the finer details.\r\n\r\n@sipa, I think this is generally consistent with the approach you have outlined. To keep the UB discussion simple I have not addressed unreachable codepaths, which I think would fit the same needs-refactor category as other footgun-API issues.\r\n\r\n@MarcoFalke I have included a \"Brittle\" category in between \"Refactoring\" and \"Broken\", that would fit for example a function call that does not currently cause misbehavior, but could become broken if the compiler decided to inline it. If you agree that this kind of thing is more severe than might be expected for issues under the \"Refactoring\" label, we should try to come to a consensus on how to define it.\r\n\r\n@practicalswift I think a crusade on \"potentially-dangerous UB\" would be apt, as long as we are careful about how we define \"potentially-dangerous\". What do you think of the approach of leniency for a whitelist of classes of UB in existing code, with those classes selected based on clang's sanitizers options (and in this particular issue, lack thereof)? (And maybe valgrind?)\r\n\r\nIt looks like the current sanitizers used in CI test runs are \"thread\" and \"integer,undefined\". That is definitely insufficient for the definition of the \"Brittle\" classification: for example, those sanitizers don't include uninitialized reads. IMO a whitelist approach is appropriate: every sanitizer category should be considered to represent potential danger unless specifically decided otherwise (which we might just do lazily, as issues come up?). Ideally all sanitizers deemed important would be checked in CI test runs, but given the slowdown factor of some sanitizers, I don't know if that would be practical.",
      "created_at" : "2018-11-16T22:43:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439551854",
      "id" : 439551854,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTU1MTg1NA==",
      "updated_at" : "2018-11-16T22:44:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439551854",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1047859?v=4",
         "events_url" : "https://api.github.com/users/kazcw/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kazcw/followers",
         "following_url" : "https://api.github.com/users/kazcw/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kazcw/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kazcw",
         "id" : 1047859,
         "login" : "kazcw",
         "node_id" : "MDQ6VXNlcjEwNDc4NTk=",
         "organizations_url" : "https://api.github.com/users/kazcw/orgs",
         "received_events_url" : "https://api.github.com/users/kazcw/received_events",
         "repos_url" : "https://api.github.com/users/kazcw/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kazcw/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kazcw"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n\r\n> We only support gcc and clang as compilers and in most cases of UB they just do the right thing without having to rewrite the code.\r\n\r\nAre you willing to bet your money on that they'll \"do the right thing\" also in the future?\r\n\r\nThe C++ standard is a contract between the compiler writer and the programmer.\r\n\r\nAs programmers we can choose to break the contract and hope that the other party is okay with it or won't notice.\r\n\r\nIn this past this strategy seemed to work: compiler writers seldom enforced the contract we signed. They never took us to court.\r\n\r\nHowever, in recent years compiler writers have started to aggressively take advantage of undefined behaviours to improve optimizations. They are taking us to court like never before:\r\n* https://kb.isc.org/docs/aa-01167 (2018: \"Changes in GCC Code Optimization Can Cause a Crash in BIND\")\r\n* https://lwn.net/Articles/511259/ (2012: \"Signed overflow optimization hazards in the kernel\")\r\n* https://www.kb.cert.org/vuls/id/162289/ (2008: \"C compilers may silently discard some wraparound checks\")\r\n\r\nYou've probably read them but these are great blog posts on the subject from the compiler writers' perspective:\r\n\r\nChris Lattner's \"What Every C Programmer Should Know About Undefined Behavior\":\r\n* http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html\r\n* http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html\r\n* http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_21.html\r\n\r\nJohn Regehr's \"A Guide to Undefined Behavior in C and C++\":\r\n* https://blog.regehr.org/archives/213\r\n* https://blog.regehr.org/archives/226\r\n* https://blog.regehr.org/archives/232\r\n\r\n\r\n",
      "created_at" : "2018-11-17T17:03:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439631524",
      "id" : 439631524,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTYzMTUyNA==",
      "updated_at" : "2018-11-17T17:03:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439631524",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It looks like the current sanitizers used in CI test runs are \"thread\" and \"integer,undefined\"\r\n\r\nUnfortunately we don't run the thread sanitizer (#14058), nor the memory sanitizer or valgrind (due to memory issues internal to bdb and qt, IIRC).",
      "created_at" : "2018-11-17T17:07:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439631791",
      "id" : 439631791,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzOTYzMTc5MQ==",
      "updated_at" : "2018-11-17T17:07:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/439631791",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK 0f459d868d85053f1cc066ea9099793f88cbd655\r\n\r\nThis pull request eliminates pointer arithmetic [1] and addresses UB if `psz` points to an array [2].\r\n\r\n[1] Ã¢ÂÂPointer arithmetic is fragile and easy to get wrong, the source of many, many bad bugs and security violations.Ã¢ÂÂ [ES.42: Keep use of pointers simple and straightforward](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es42-keep-use-of-pointers-simple-and-straightforward)\r\n\r\n[2] Excerpt From: Bjarne Stroustrup. Ã¢ÂÂThe C++ Programming Language, 4/eÃ¢ÂÂ:\r\n> Ã¢ÂÂThe result of taking the address of the element before the initial element or beyond one-past-the-last element is undefined and **should be avoided**.Ã¢ÂÂ\r\n\r\n> Ã¢ÂÂint v[] = { 1, 2, 3, 4 };\r\nint* p1 = v;ÃÂ ÃÂ ÃÂ ÃÂ // pointer to initial element (implicit conversion)\r\nint* p4 = vÃ¢ÂÂ1;ÃÂ ÃÂ // before the beginning, undefined: **don't do it**Ã¢ÂÂ\r\n\r\n",
      "created_at" : "2018-11-20T10:25:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440222105",
      "id" : 440222105,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDIyMjEwNQ==",
      "updated_at" : "2018-11-20T10:25:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440222105",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/13120787?v=4",
         "events_url" : "https://api.github.com/users/251Labs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/251Labs/followers",
         "following_url" : "https://api.github.com/users/251Labs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/251Labs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/251Labs",
         "id" : 13120787,
         "login" : "251Labs",
         "node_id" : "MDQ6VXNlcjEzMTIwNzg3",
         "organizations_url" : "https://api.github.com/users/251Labs/orgs",
         "received_events_url" : "https://api.github.com/users/251Labs/received_events",
         "repos_url" : "https://api.github.com/users/251Labs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/251Labs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/251Labs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/251Labs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift  It sounds like you are only looking at things from one side.   Consider a case where a behaviour is language spec UB but explicitly defined by our supported toolchain and ubiquitously used.  In that case the existing behaviour is at least currently harmless.  A fix risks introducing its own bugs (potentially not harmless) and also diverts review/testing attention away from other changes, potentially allowing bugs through or causing important improvements to be delayed. If the fix is done hastily (e.g. as part of a mass of changes in a 'crusade') even if it is not buggy itself could make the code more brittle or less clear and thus contribute to the introduction of bugs down the line. (You've seen me complain sometimes against fixing warnings by peppering in casts, and usually its because of brittleness/less clarity)\r\n\r\nThere are as many ways for code to be good as there are people and kinds of code, a decision to do something is never a one sided choice to make things better or not, it's always a prioritization of what kinds of better we're making things and what risks we're taking by making those changes.",
      "created_at" : "2018-11-20T20:49:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440424382",
      "id" : 440424382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDQyNDM4Mg==",
      "updated_at" : "2018-11-20T20:49:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440424382",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@gmaxwell I agree with the point you and @sipa make: all changes Ã¢ÂÂ including UB fixes Ã¢ÂÂ should be critically evaluated from a risk-reward perspective. And PR:s deemed too risky should be closed off after review.\r\n\r\nPerhaps what we don't agree on is how much work it would take to kill off the remaining instances of UB in our code base, and how complex the required changes would be. Could that be the case? \r\n\r\nIf we get specific: is there any particular type of UB you fear that we have in such quantity that it would be unrealistic to fix?\r\n\r\nAlso, are there any UB fixes that have been submitted so far that you don't think are worth fixing?\r\n\r\nPersonally I think we're better off having all UB cases identified and documented. That way we can reason about them like we do in this PR and take the appropriate action (if any). We agree on that, right? :-)",
      "created_at" : "2018-11-20T23:35:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440467580",
      "id" : 440467580,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDQ2NzU4MA==",
      "updated_at" : "2018-11-20T23:40:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440467580",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "To the best of my knowledge the runtime observable UBs were already documented through an UBSAN suppressions file (https://github.com/bitcoin/bitcoin/blob/5c292dafcd54adfcd9f80c0e1fccb45c8683808f/contrib/sanitizers-ubsan.suppressions)? To fix all of them a series of separate pull requests would be required, each of them a massive review burden. It would probably take months if not years to get all through the review process. Especially `unsigned-integer-overflow` are tricky, as pointed out by @arvidn in https://github.com/bitcoin/bitcoin/pull/11535#issuecomment-435890346. Because the right fix is not always obviously clear and might even introduce *more* UB temporarily. I suggest to come up with a guideline on UB and maybe a separate guideline on unsigned-integer-overflow before proceeding with patches that might go in the wrong direction and give a false impression of having fixed something.",
      "created_at" : "2018-11-21T00:10:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440476655",
      "id" : 440476655,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDQ3NjY1NQ==",
      "updated_at" : "2018-11-21T00:10:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440476655",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Some things that are important to note when talking about UB:\r\n* Wraparound behaviour using **unsigned** integers is well-defined, so what `-fsanitize=integer` calls `unsigned-integer-overflow` is not UB. (_Unintended_ unsigned integer wraparound can be a source of bugs, but it is not UB.)\r\n* UBSan does not catch all UBs. Since UBSan performs dynamic analysis it is restricted to finding the subset of all UBs that are detectable at run-time. And in that subset of UBs it still doesn't catch all types of UB. The UB discussed in this PR is an example of that: it is UB, it is detectable at run-time but it is not catched by UBsan. Another example is uninitialized reads which are not detected by UBSan (ASan does).\r\n\r\nIf we get more specific:\r\n* Are there any specific UB fixes that have been submitted so far that you don't think are worth fixing?\r\n* Is there any particular type of UB you fear that we have in such quantity that it would be unrealistic to fix?\r\n* Is there any specific scenario in which we'd be better off by not having all UB cases clearly identified and documented so that we can reason about their impact and take the appropriate action (if any)? ",
      "created_at" : "2018-11-21T07:07:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440560003",
      "id" : 440560003,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDU2MDAwMw==",
      "updated_at" : "2018-11-21T09:42:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440560003",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift I think the only disagreement is on how much of a priority this is.",
      "created_at" : "2018-11-21T07:26:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440563764",
      "id" : 440563764,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDU2Mzc2NA==",
      "updated_at" : "2018-11-21T07:26:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440563764",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@kazcw \r\n\r\n> It looks like the current sanitizers used in CI test runs are \"thread\" and \"integer,undefined\". That is definitely insufficient for the definition of the \"Brittle\" classification: for example, those sanitizers don't include uninitialized reads. IMO a whitelist approach is appropriate: every sanitizer category should be considered to represent potential danger unless specifically decided otherwise (which we might just do lazily, as issues come up?). Ideally all sanitizers deemed important would be checked in CI test runs, but given the slowdown factor of some sanitizers, I don't know if that would be practical.\r\n\r\nPR #14794 adds AddressSanitizer (ASan) to Travis. Please review :-)\r\n",
      "created_at" : "2018-11-27T18:43:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-442170962",
      "id" : 442170962,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MjE3MDk2Mg==",
      "updated_at" : "2018-11-27T18:43:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442170962",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2019-02-04T11:31:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-460216072",
      "id" : 460216072,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MDIxNjA3Mg==",
      "updated_at" : "2019-05-29T14:27:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/460216072",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This is sure generating a lot of discussion for a few-line change. Is there disagreement on merging this specific change?",
      "created_at" : "2019-02-12T13:30:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-462759362",
      "id" : 462759362,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2Mjc1OTM2Mg==",
      "updated_at" : "2019-02-12T13:30:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/462759362",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj There is no disagreement about the code change from what I can tell. I think we should merge this or alternatively document in `assumptions.h` that we assume this specific class of UB to be safe in practice.",
      "created_at" : "2019-02-28T22:21:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-468462413",
      "id" : 468462413,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2ODQ2MjQxMw==",
      "updated_at" : "2019-02-28T22:21:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/468462413",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Please do not just accept any actually known true UB as just an \"assumption\". Assumptions should be for platform limitations (e.g. we require int be 32 bits) and implementation defined behaviour (including places where clang and GCC explicitly strengthen the language specification and turn something that the language leaves UB into implementation defined). \r\n\r\nI think it would be really nice if every PR fixing an obvious bug didn't turn into some awful debate about undefined behaviour.",
      "created_at" : "2019-05-07T02:33:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-489883624",
      "id" : 489883624,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4OTg4MzYyNA==",
      "updated_at" : "2019-05-07T02:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/489883624",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Agreed: so let's move back the focus in this PR to reviewing the specific code change. Please move general UB discussion elsewhere:\r\n\r\nThis has currently 2 utACKs, no NACKs.",
      "created_at" : "2019-05-07T09:49:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-490013421",
      "id" : 490013421,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MDAxMzQyMQ==",
      "updated_at" : "2019-05-07T09:49:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/490013421",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This might be of help for people reviewing this PR who want to understand the old behaviour:\r\n\r\nConsider the case `SetHex(\"1000000000000000000000000000000000000000000000000000000000000000\")`:\r\n\r\nWhen the reverse processing reaches the leading `1` we have `psz == pbegin` and the following happens:\r\n\r\n```\r\n*p1 |= ((unsigned char)HexDigit(*psz--) << 4);\r\n```\r\n\r\nPlease note that `psz` has now been decremented to `pbegin - 1` which is outside of the object.\r\n\r\nAn example:\r\n\r\n```\r\n$ git diff\r\ndiff --git a/src/uint256.cpp b/src/uint256.cpp\r\nindex e3bc9712e..8cd1065fb 100644\r\n--- a/src/uint256.cpp\r\n+++ b/src/uint256.cpp\r\n@@ -49,6 +49,7 @@ void base_blob<BITS>::SetHex(const char* psz)\r\n             *p1 |= ((unsigned char)::HexDigit(*psz--) << 4);\r\n             p1++;\r\n         }\r\n+        assert(psz >= pbegin);\r\n     }\r\n }\r\n\r\n$ make\r\n$ src/test/test_bitcoin -t addrman_tests\r\ntest_bitcoin: uint256.cpp:52: void base_blob<256>::SetHex(const char *) [BITS = 256]: Assertion `psz >= pbegin' failed.\r\nAborted\r\n```",
      "created_at" : "2019-05-16T08:34:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-492973179",
      "id" : 492973179,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14734",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5Mjk3MzE3OQ==",
      "updated_at" : "2019-05-16T08:41:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/492973179",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
