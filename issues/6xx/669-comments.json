[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262727"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe add comments in keystore.h and db.h indicating why you might want to store scripts keyed by hash in your wallet, as this is not obvious at all given the readers basic mental model of how Bitcoin works.\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:06:36Z",
      "diff_hunk" : "@@ -420,6 +420,18 @@ public:\n         return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n     }\n \n+    bool ReadCScript(const uint160 &hash, std::vector<unsigned char>& data)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262727",
      "id" : 262727,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MjcyNw==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/db.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262727/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262727",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Same here, consider comments explaining what this is all about and why scripts are keyed by hash. Also, the methods say \"AddCScript\" but actually take an arbitrary byte buffer - which do you want, scripts or any data? Be consistent.\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:07:43Z",
      "diff_hunk" : "@@ -28,17 +28,23 @@ public:\n     // This may succeed even if GetKey fails (e.g., encrypted wallets)\n     virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n \n+    virtual bool AddCScript(const uint160 &hash, const std::vector<unsigned char>& data) =0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262730",
      "id" : 262730,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MjczMA==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/keystore.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262730/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262732"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "mapData is not a very descriptive name, don't all maps contain data?\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:07:59Z",
      "diff_hunk" : "@@ -28,17 +28,23 @@ public:\n     // This may succeed even if GetKey fails (e.g., encrypted wallets)\n     virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n \n+    virtual bool AddCScript(const uint160 &hash, const std::vector<unsigned char>& data) =0;\n+    virtual bool HaveCScript(const uint160 &hash) const =0;\n+    virtual bool GetCScript(const uint160 &hash, std::vector<unsigned char>& dataOut) const =0;\n+\n     // Generate a new key, and add it to the store\n     virtual std::vector<unsigned char> GenerateNewKey();\n };\n \n typedef std::map<CBitcoinAddress, CSecret> KeyMap;\n+typedef std::map<uint160, std::vector<unsigned char> > DataMap;\n \n // Basic key store, that keeps keys in an address->secret map\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n+    DataMap mapData;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262732",
      "id" : 262732,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MjczMg==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/keystore.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262732/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262734"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe state explicitly in these messages why they are considered non-standard (too large, opcodes present)\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:08:32Z",
      "diff_hunk" : "@@ -241,6 +241,65 @@ bool CTransaction::ReadFromDisk(COutPoint prevout)\n     return ReadFromDisk(txdb, prevout, txindex);\n }\n \n+bool CTransaction::IsStandard() const\n+{\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n+        // in an OP_EVAL, which is 3 ~80-byte signatures, 3\n+        // ~65-byte public keys, plus a few script ops.\n+        if (txin.scriptSig.size() > 500)\n+            return error(\"nonstandard txin, size %d\\n\", txin.scriptSig.size());\n+        if (!txin.scriptSig.IsPushOnly())\n+            return error(\"nonstandard txin: %s\", txin.scriptSig.ToString().c_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262734",
      "id" : 262734,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MjczNA==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262734/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262734",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262740"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "::AreInputsStandard?\n\nConsider commenting (or using a typedef) that the map key is a tx hash\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:09:31Z",
      "diff_hunk" : "@@ -241,6 +241,65 @@ bool CTransaction::ReadFromDisk(COutPoint prevout)\n     return ReadFromDisk(txdb, prevout, txindex);\n }\n \n+bool CTransaction::IsStandard() const\n+{\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n+        // in an OP_EVAL, which is 3 ~80-byte signatures, 3\n+        // ~65-byte public keys, plus a few script ops.\n+        if (txin.scriptSig.size() > 500)\n+            return error(\"nonstandard txin, size %d\\n\", txin.scriptSig.size());\n+        if (!txin.scriptSig.IsPushOnly())\n+            return error(\"nonstandard txin: %s\", txin.scriptSig.ToString().c_str());\n+    }\n+    BOOST_FOREACH(const CTxOut& txout, vout)\n+        if (!::IsStandard(txout.scriptPubKey))\n+            return error(\"nonstandard txout: %s\", txout.scriptPubKey.ToString().c_str());\n+    return true;\n+}\n+\n+//\n+// Check transaction inputs, and make sure any\n+// OP_EVAL transactions are evaluating IsStandard scripts\n+//\n+// Why bother? To avoid denial-of-service attacks; an attacker\n+// can submit a standard DUP HASH... OP_EVAL transaction,\n+// which will get accepted into blocks. The script being\n+// EVAL'ed can be anything; an attacker could use a very\n+// expensive-to-check-upon-redemption script like:\n+//   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+//\n+bool CTransaction::IsStandardInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262740",
      "id" : 262740,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjc0MA==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262740/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262740",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is a fairly complex expression, comment what txPrev.vout[vin[i].prevout.n] refers to here (I know it's obvious if you think about it but it's easier to read....)\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:11:04Z",
      "diff_hunk" : "@@ -241,6 +241,65 @@ bool CTransaction::ReadFromDisk(COutPoint prevout)\n     return ReadFromDisk(txdb, prevout, txindex);\n }\n \n+bool CTransaction::IsStandard() const\n+{\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n+        // in an OP_EVAL, which is 3 ~80-byte signatures, 3\n+        // ~65-byte public keys, plus a few script ops.\n+        if (txin.scriptSig.size() > 500)\n+            return error(\"nonstandard txin, size %d\\n\", txin.scriptSig.size());\n+        if (!txin.scriptSig.IsPushOnly())\n+            return error(\"nonstandard txin: %s\", txin.scriptSig.ToString().c_str());\n+    }\n+    BOOST_FOREACH(const CTxOut& txout, vout)\n+        if (!::IsStandard(txout.scriptPubKey))\n+            return error(\"nonstandard txout: %s\", txout.scriptPubKey.ToString().c_str());\n+    return true;\n+}\n+\n+//\n+// Check transaction inputs, and make sure any\n+// OP_EVAL transactions are evaluating IsStandard scripts\n+//\n+// Why bother? To avoid denial-of-service attacks; an attacker\n+// can submit a standard DUP HASH... OP_EVAL transaction,\n+// which will get accepted into blocks. The script being\n+// EVAL'ed can be anything; an attacker could use a very\n+// expensive-to-check-upon-redemption script like:\n+//   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+//\n+bool CTransaction::IsStandardInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const\n+{\n+    if (fTestNet)\n+        return true; // Allow non-standard on testnet\n+\n+    for (int i = 0; i < vin.size(); i++)\n+    {\n+        COutPoint prevout = vin[i].prevout;\n+        assert(mapInputs.count(prevout.hash) > 0);\n+        CTransaction& txPrev = mapInputs[prevout.hash].second;\n+\n+        vector<vector<unsigned char> > vSolutions;\n+        txntype whichType;\n+        if (!Solver(txPrev.vout[vin[i].prevout.n].scriptPubKey, whichType, vSolutions))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262746",
      "id" : 262746,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjc0Ng==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262748"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262748"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "return error(\"...\")? same for other locations in this function?\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:11:16Z",
      "diff_hunk" : "@@ -241,6 +241,65 @@ bool CTransaction::ReadFromDisk(COutPoint prevout)\n     return ReadFromDisk(txdb, prevout, txindex);\n }\n \n+bool CTransaction::IsStandard() const\n+{\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n+        // in an OP_EVAL, which is 3 ~80-byte signatures, 3\n+        // ~65-byte public keys, plus a few script ops.\n+        if (txin.scriptSig.size() > 500)\n+            return error(\"nonstandard txin, size %d\\n\", txin.scriptSig.size());\n+        if (!txin.scriptSig.IsPushOnly())\n+            return error(\"nonstandard txin: %s\", txin.scriptSig.ToString().c_str());\n+    }\n+    BOOST_FOREACH(const CTxOut& txout, vout)\n+        if (!::IsStandard(txout.scriptPubKey))\n+            return error(\"nonstandard txout: %s\", txout.scriptPubKey.ToString().c_str());\n+    return true;\n+}\n+\n+//\n+// Check transaction inputs, and make sure any\n+// OP_EVAL transactions are evaluating IsStandard scripts\n+//\n+// Why bother? To avoid denial-of-service attacks; an attacker\n+// can submit a standard DUP HASH... OP_EVAL transaction,\n+// which will get accepted into blocks. The script being\n+// EVAL'ed can be anything; an attacker could use a very\n+// expensive-to-check-upon-redemption script like:\n+//   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+//\n+bool CTransaction::IsStandardInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const\n+{\n+    if (fTestNet)\n+        return true; // Allow non-standard on testnet\n+\n+    for (int i = 0; i < vin.size(); i++)\n+    {\n+        COutPoint prevout = vin[i].prevout;\n+        assert(mapInputs.count(prevout.hash) > 0);\n+        CTransaction& txPrev = mapInputs[prevout.hash].second;\n+\n+        vector<vector<unsigned char> > vSolutions;\n+        txntype whichType;\n+        if (!Solver(txPrev.vout[vin[i].prevout.n].scriptPubKey, whichType, vSolutions))\n+            return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262748",
      "id" : 262748,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjc0OA==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262748/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262748",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262757"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What does the magic 1,1,1 mean, maybe this should be a global constant?\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:14:38Z",
      "diff_hunk" : "@@ -813,8 +882,61 @@ bool CTransaction::DisconnectInputs(CTxDB& txdb)\n }\n \n \n-bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n-                                 CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int64 nMinFee)\n+bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTestPool,\n+                               bool fBlock, bool fMiner, map<uint256, pair<CTxIndex, CTransaction> >& inputsRet)\n+{\n+    if (IsCoinBase())\n+        return true; // Coinbase transactions have no inputs to fetch.\n+    \n+    for (int i = 0; i < vin.size(); i++)\n+    {\n+        COutPoint prevout = vin[i].prevout;\n+        if (inputsRet.count(prevout.hash))\n+            continue; // Got it already\n+\n+        // Read txindex\n+        CTxIndex& txindex = inputsRet[prevout.hash].first;\n+        bool fFound = true;\n+        if ((fBlock || fMiner) && mapTestPool.count(prevout.hash))\n+        {\n+            // Get txindex from current proposed changes\n+            txindex = mapTestPool.find(prevout.hash)->second;\n+        }\n+        else\n+        {\n+            // Read txindex from txdb\n+            fFound = txdb.ReadTxIndex(prevout.hash, txindex);\n+        }\n+        if (!fFound && (fBlock || fMiner))\n+            return fMiner ? false : error(\"FetchInputs() : %s prev tx %s index entry not found\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+\n+        // Read txPrev\n+        CTransaction& txPrev = inputsRet[prevout.hash].second;\n+        if (!fFound || txindex.pos == CDiskTxPos(1,1,1))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262757",
      "id" : 262757,
      "line" : 930,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjc1Nw==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 157,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262757/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262763"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262763"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be worth allowing the default time to be adjusted using a message signed by you, embedded in a block coinbase?\n\nAlternatively, calculate it dynamically based on the frequency of the coinbase markers?\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:17:02Z",
      "diff_hunk" : "@@ -877,9 +965,27 @@ bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoo\n             // (before the last blockchain checkpoint). This is safe because block merkle hashes are\n             // still computed and checked, and any change will be caught at the next checkpoint.\n             if (!(fBlock && IsInitialBlockDownload()))\n+            {\n+                bool fStrictOpEval = true;\n+                // This code should be removed when OP_EVAL has\n+                // a majority of hashing power on the network.\n+                if (fBlock)\n+                {\n+                    // To avoid being on the short end of a block-chain split,\n+                    // interpret OP_EVAL as a NO_OP until blocks with timestamps\n+                    // after opevaltime:\n+                    int64 nEvalSwitchTime = GetArg(\"opevaltime\", 1328054400); // Feb 1, 2012",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262763",
      "id" : 262763,
      "line" : 992,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjc2Mw==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 243,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 245,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262763/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262763",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262770"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262770"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That's rather verbose. Why not just have some kind of code prefix like \"FM\" and then 16 feature bits, in case you want to do this again in future?\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:18:42Z",
      "diff_hunk" : "@@ -2862,6 +2992,12 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     ++nExtraNonce;\n     pblock->vtx[0].vin[0].scriptSig = CScript() << pblock->nTime << CBigNum(nExtraNonce);\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+\n+    // Put \"OP_EVAL\" in the coinbase so everybody can tell when",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262770",
      "id" : 262770,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjc3MA==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 346,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262770/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262770",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262777"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262777"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This sort of table is often done with a macro to avoid the possibility of typos.\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:20:42Z",
      "diff_hunk" : "@@ -70,20 +70,187 @@ static inline void popstack(vector<valtype>& stack)\n }\n \n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+const char* GetTxnTypeName(txntype t)\n+{\n+    switch (t)\n+    {\n+    case TX_NONSTANDARD: return \"nonstandard\";\n+    case TX_PUBKEY: return \"pubkey\";\n+    case TX_PUBKEYHASH: return \"pubkeyhash\";\n+    case TX_SCRIPTHASH: return \"scripthash\";\n+    case TX_MULTISIG: return \"multisig\";\n+    }\n+    return NULL;\n+}\n+\n+\n+const char* GetOpName(opcodetype opcode)\n+{\n+    switch (opcode)\n+    {\n+    // push value\n+    case OP_0                      : return \"0\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262777",
      "id" : 262777,
      "line" : 92,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjc3Nw==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/script.cpp",
      "position" : 24,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262777/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262777",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262780"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why forbid them?\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:21:30Z",
      "diff_hunk" : "@@ -844,6 +1013,30 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 }\n                 break;\n \n+                case OP_EVAL:\n+                {\n+                    if (!fStrictOpEval)\n+                        break; // Act as a NO_OP\n+\n+\n+                    // Evaluate the top item on the stack as a Script\n+                    // [serialized script ] -- [result(s) of executing script]\n+                    if (stack.size() < 1)\n+                        return false;\n+                    valtype& vchScript = stacktop(-1);\n+                    CScript subscript(vchScript.begin(), vchScript.end());\n+                    popstack(stack);\n+                    \n+                    // Codeseparators not allowed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262780",
      "id" : 262780,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjc4MA==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 250,
      "original_start_line" : null,
      "path" : "src/script.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262780/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262780",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262782"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "These are actually types of scriptPubKeys, not transactions\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:22:54Z",
      "diff_hunk" : "@@ -70,20 +70,187 @@ static inline void popstack(vector<valtype>& stack)\n }\n \n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+const char* GetTxnTypeName(txntype t)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262782",
      "id" : 262782,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjc4Mg==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262782/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262782",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262816"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262816"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this might be clearer using integer indexs\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:27:56Z",
      "diff_hunk" : "@@ -993,170 +1209,317 @@ bool Solver(const CScript& scriptPubKey, vector<pair<opcodetype, valtype> >& vSo\n             if (pc1 == script1.end() && pc2 == script2.end())\n             {\n                 // Found a match\n-                reverse(vSolutionRet.begin(), vSolutionRet.end());\n+                typeRet = tplate.first;\n+                if (typeRet == TX_MULTISIG)\n+                {\n+                    // Additional checks for TX_MULTISIG:\n+                    unsigned char m = vSolutionsRet.front()[0];\n+                    unsigned char n = vSolutionsRet.back()[0];\n+                    if (m < 1 || n < 1 || m > n || vSolutionsRet.size()-2 != n)\n+                        return false;\n+                }\n                 return true;\n             }\n             if (!script1.GetOp(pc1, opcode1, vch1))\n                 break;\n             if (!script2.GetOp(pc2, opcode2, vch2))\n                 break;\n+\n+            // Template matching opcodes:\n+            if (opcode2 == OP_PUBKEYS)\n+            {\n+                while (vch1.size() >= 33 && vch1.size() <= 120)\n+                {\n+                    vSolutionsRet.push_back(vch1);\n+                    if (!script1.GetOp(pc1, opcode1, vch1))\n+                        break;\n+                }\n+                if (!script2.GetOp(pc2, opcode2, vch2))\n+                    break;\n+                // Normal situation is to fall through\n+                // to other if/else statments\n+            }\n+\n             if (opcode2 == OP_PUBKEY)\n             {\n                 if (vch1.size() < 33 || vch1.size() > 120)\n                     break;\n-                vSolutionRet.push_back(make_pair(opcode2, vch1));\n+                vSolutionsRet.push_back(vch1);\n             }\n             else if (opcode2 == OP_PUBKEYHASH)\n             {\n                 if (vch1.size() != sizeof(uint160))\n                     break;\n-                vSolutionRet.push_back(make_pair(opcode2, vch1));\n+                vSolutionsRet.push_back(vch1);\n+            }\n+            else if (opcode2 == OP_SCRIPTHASH)\n+            {\n+                if (vch1.size() != sizeof(uint160))\n+                    break;\n+                vSolutionsRet.push_back(vch1);\n+            }\n+            else if (opcode2 == OP_SMALLINTEGER)\n+            {   // Single-byte small integer pushed onto vSolutions\n+                if (opcode1 == OP_0 ||\n+                    (opcode1 >= OP_1 && opcode1 <= OP_16))\n+                {\n+                    char n = (char)CScript::DecodeOP_N(opcode1);\n+                    vSolutionsRet.push_back(valtype(1, n));\n+                }\n+                else\n+                    break;\n             }\n             else if (opcode1 != opcode2 || vch1 != vch2)\n             {\n+                // Others must match exactly\n                 break;\n             }\n         }\n     }\n \n-    vSolutionRet.clear();\n+    vSolutionsRet.clear();\n+    typeRet = TX_NONSTANDARD;\n     return false;\n }\n \n \n-bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType, CScript& scriptSigRet)\n+bool Sign1(const CBitcoinAddress& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n {\n-    scriptSigRet.clear();\n+    CKey key;\n+    if (!keystore.GetKey(address, key))\n+        return false;\n \n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n+    vector<unsigned char> vchSig;\n+    if (!key.Sign(hash, vchSig))\n         return false;\n+    vchSig.push_back((unsigned char)nHashType);\n+    scriptSigRet << vchSig;\n+\n+    return true;\n+}\n \n-    // Compile solution\n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+{\n+    int nSigned = 0;\n+    int nRequired = multisigdata.front()[0];\n+    for (vector<valtype>::const_iterator it = multisigdata.begin()+1; it != multisigdata.begin()+multisigdata.size()-1; it++)\n     {\n-        if (item.first == OP_PUBKEY)\n-        {\n-            // Sign\n-            const valtype& vchPubKey = item.second;\n-            CKey key;\n-            if (!keystore.GetKey(Hash160(vchPubKey), key))\n-                return false;\n-            if (key.GetPubKey() != vchPubKey)\n-                return false;\n-            if (hash != 0)\n-            {\n-                vector<unsigned char> vchSig;\n-                if (!key.Sign(hash, vchSig))\n-                    return false;\n-                vchSig.push_back((unsigned char)nHashType);\n-                scriptSigRet << vchSig;\n-            }\n-        }\n-        else if (item.first == OP_PUBKEYHASH)\n+        const valtype& pubkey = *it;\n+        CBitcoinAddress address;\n+        address.SetPubKey(pubkey);\n+        if (Sign1(address, keystore, hash, nHashType, scriptSigRet))\n         {\n-            // Sign and give pubkey\n-            CKey key;\n-            if (!keystore.GetKey(uint160(item.second), key))\n-                return false;\n-            if (hash != 0)\n-            {\n-                vector<unsigned char> vchSig;\n-                if (!key.Sign(hash, vchSig))\n-                    return false;\n-                vchSig.push_back((unsigned char)nHashType);\n-                scriptSigRet << vchSig << key.GetPubKey();\n-            }\n+            ++nSigned;\n+            if (nSigned == nRequired) break;\n         }\n+    }\n+    return nSigned==nRequired;\n+}\n+\n+//\n+// Sign scriptPubKey with private keys stored in keystore, given transaction hash and hash type.\n+// Signatures are returned in scriptSigRet (or returns false if scriptPubKey can't be signed).\n+// Returns true if scriptPubKey could be completely satisified.\n+//\n+bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash, int nHashType, CScript& scriptSigRet)\n+{\n+    scriptSigRet.clear();\n+\n+    txntype whichType;\n+    vector<valtype> vSolutions;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    CBitcoinAddress address;\n+    valtype subscript;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+        return false;\n+    case TX_PUBKEY:\n+        address.SetPubKey(vSolutions[0]);\n+        return Sign1(address, keystore, hash, nHashType, scriptSigRet);\n+    case TX_PUBKEYHASH:\n+        address.SetHash160(uint160(vSolutions[0]));\n+        if (!Sign1(address, keystore, hash, nHashType, scriptSigRet))\n+            return false;\n         else\n         {\n-            return false;\n+            valtype vch;\n+            keystore.GetPubKey(address, vch);\n+            scriptSigRet << vch;\n         }\n+        break;\n+    case TX_SCRIPTHASH:\n+        if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n+            return false;\n+        if (!Solver(keystore, CScript(subscript.begin(), subscript.end()), hash, nHashType, scriptSigRet))\n+            return false;\n+        if (hash != 0)\n+            scriptSigRet << subscript; // signatures AND serialized script\n+        break;\n+    case TX_MULTISIG:\n+        scriptSigRet << OP_0; // workaround CHECKMULTISIG bug\n+        return (SignN(vSolutions, keystore, hash, nHashType, scriptSigRet));\n     }\n-\n     return true;\n }\n \n \n bool IsStandard(const CScript& scriptPubKey)\n {\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    return Solver(scriptPubKey, vSolution);\n+    vector<valtype> vSolutions;\n+    txntype whichType;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n+        return false;\n+\n+    if (whichType == TX_MULTISIG)\n+    {\n+        unsigned char m = vSolutions.front()[0];\n+        unsigned char n = vSolutions.back()[0];\n+        // Support up to x-of-3 multisig txns as standard\n+        if (n < 1 || n > 3)\n+            return false;\n+        if (m < 1 || m > n)\n+            return false;\n+    }\n+\n+    return whichType != TX_NONSTANDARD;\n }\n \n \n+int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n+{\n+    int nResult = 0;\n+    BOOST_FOREACH(const valtype& pubkey, pubkeys)\n+    {\n+        CBitcoinAddress address;\n+        address.SetPubKey(pubkey);\n+        if (keystore.HaveKey(address))\n+            ++nResult;\n+    }\n+    return nResult;\n+}\n+\n bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n+    vector<valtype> vSolutions;\n+    txntype whichType;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n-    // Compile solution\n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+    CBitcoinAddress address;\n+    switch (whichType)\n     {\n-        if (item.first == OP_PUBKEY)\n-        {\n-            const valtype& vchPubKey = item.second;\n-            vector<unsigned char> vchPubKeyFound;\n-            if (!keystore.GetPubKey(Hash160(vchPubKey), vchPubKeyFound))\n-                return false;\n-            if (vchPubKeyFound != vchPubKey)\n-                return false;\n-        }\n-        else if (item.first == OP_PUBKEYHASH)\n-        {\n-            if (!keystore.HaveKey(uint160(item.second)))\n-                return false;\n-        }\n-        else\n-        {\n+    case TX_NONSTANDARD:\n+        return false;\n+    case TX_PUBKEY:\n+        address.SetPubKey(vSolutions[0]);\n+        return keystore.HaveKey(address);\n+    case TX_PUBKEYHASH:\n+        address.SetHash160(uint160(vSolutions[0]));\n+        return keystore.HaveKey(address);\n+    case TX_SCRIPTHASH:\n+    {\n+        valtype subscript;\n+        if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n             return false;\n-        }\n+        return IsMine(keystore, CScript(subscript.begin(), subscript.end()));\n     }\n-\n-    return true;\n+    case TX_MULTISIG:\n+    {\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        return HaveKeys(vSolutions, keystore);\n+    }\n+    }\n+    return false;\n }\n \n-bool static ExtractAddressInner(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n+bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n {\n-    vector<pair<opcodetype, valtype> > vSolution;\n-    if (!Solver(scriptPubKey, vSolution))\n+    vector<valtype> vSolutions;\n+    txntype whichType;\n+    if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n-    BOOST_FOREACH(PAIRTYPE(opcodetype, valtype)& item, vSolution)\n+    if (whichType == TX_PUBKEY)\n     {\n-        if (item.first == OP_PUBKEY)\n-            addressRet.SetPubKey(item.second);\n-        else if (item.first == OP_PUBKEYHASH)\n-            addressRet.SetHash160((uint160)item.second);\n-        if (keystore == NULL || keystore->HaveKey(addressRet))\n-            return true;\n+        addressRet.SetPubKey(vSolutions[0]);\n+        return true;\n     }\n-\n+    else if (whichType == TX_PUBKEYHASH)\n+    {\n+        addressRet.SetHash160(uint160(vSolutions[0]));\n+        return true;\n+    }\n+    else if (whichType == TX_SCRIPTHASH)\n+    {\n+        addressRet.SetScriptHash160(uint160(vSolutions[0]));\n+        return true;\n+    }\n+    // Multisig txns have more than one address...\n     return false;\n }\n \n-\n-bool ExtractAddress(const CScript& scriptPubKey, const CKeyStore* keystore, CBitcoinAddress& addressRet)\n+bool ExtractAddresses(const CScript& scriptPubKey, const CKeyStore* keystore, txntype& typeRet, vector<CBitcoinAddress>& addressRet, int& nRequiredRet)\n {\n-    if (keystore)\n-        return ExtractAddressInner(scriptPubKey, keystore, addressRet);\n+    addressRet.clear();\n+    typeRet = TX_NONSTANDARD;\n+    vector<valtype> vSolutions;\n+    if (!Solver(scriptPubKey, typeRet, vSolutions))\n+        return false;\n+\n+    if (typeRet == TX_MULTISIG)\n+    {\n+        nRequiredRet = vSolutions.front()[0];\n+        int n = vSolutions.back()[0];\n+        for (vector<valtype>::const_iterator it = vSolutions.begin()+1; it != vSolutions.begin()+vSolutions.size()-1; it++)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262816",
      "id" : 262816,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MjgxNg==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 683,
      "original_start_line" : null,
      "path" : "src/script.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262816/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262816",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262841"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Do you need to reset the mock time afterwards? Don't recall how this works.\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:35:18Z",
      "diff_hunk" : "@@ -0,0 +1,250 @@\n+#include <boost/assert.hpp>\n+#include <boost/assign/list_of.hpp>\n+#include <boost/assign/list_inserter.hpp>\n+#include <boost/assign/std/vector.hpp>\n+#include <boost/test/unit_test.hpp>\n+#include <boost/foreach.hpp>\n+\n+#include \"../main.h\"\n+#include \"../script.h\"\n+#include \"../wallet.h\"\n+\n+using namespace std;\n+\n+// Test routines internal to script.cpp:\n+extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps,\n+                         int nHashType, bool fStrictOpEval);\n+\n+static const int64 nEvalSwitchover = 1328054400;\n+\n+struct CEvalFixture {\n+    CEvalFixture()\n+    {\n+        // Set mock time to AFTER OP_EVAL deployed\n+        SetMockTime(nEvalSwitchover+1);\n+    }\n+    ~CEvalFixture()\n+    {\n+        // Reset back to use-real-time\n+        SetMockTime(0);\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(script_op_eval_tests, CEvalFixture)\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval1)\n+{\n+    // OP_EVAL looks like this:\n+    // scriptSig:    <sig> <sig...> <serialized_script>\n+    // scriptPubKey: DUP HASH160 <hash> EQUALVERIFY EVAL\n+\n+    // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n+    CBasicKeyStore keystore;\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+    }\n+\n+    // 8 Scripts: checking all combinations of\n+    // different keys, straight/EVAL, pubkey/pubkeyhash\n+    CScript standardScripts[4];\n+    standardScripts[0] << key[0].GetPubKey() << OP_CHECKSIG;\n+    standardScripts[1].SetBitcoinAddress(key[1].GetPubKey());\n+    standardScripts[2] << key[1].GetPubKey() << OP_CHECKSIG;\n+    standardScripts[3].SetBitcoinAddress(key[2].GetPubKey());\n+    CScript evalScripts[4];\n+    uint160 sigScriptHashes[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        sigScriptHashes[i] = Hash160(standardScripts[i]);\n+        keystore.AddCScript(sigScriptHashes[i], standardScripts[i]);\n+        evalScripts[i] << OP_DUP << OP_HASH160 << sigScriptHashes[i] << OP_EQUALVERIFY << OP_EVAL;\n+    }\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(8);\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txFrom.vout[i].scriptPubKey = evalScripts[i];\n+        txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n+    }\n+    BOOST_CHECK(txFrom.IsStandard());\n+\n+    CTransaction txTo[8]; // Spending transactions\n+    for (int i = 0; i < 8; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+    }\n+    for (int i = 0; i < 8; i++)\n+    {\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+    }\n+    // All of the above should be OK, and the txTos have valid signatures\n+    // Check to make sure signature verification fails if we use the wrong ScriptSig:\n+    for (int i = 0; i < 8; i++)\n+        for (int j = 0; j < 8; j++)\n+        {\n+            CScript sigSave = txTo[i].vin[0].scriptSig;\n+            txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n+            int nUnused = 0;\n+            bool sigOK = VerifySignature(txFrom, txTo[i], 0, nUnused);\n+            if (i == j)\n+                BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n+            else\n+                BOOST_CHECK_MESSAGE(!sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n+            txTo[i].vin[0].scriptSig = sigSave;\n+        }\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval2)\n+{\n+    // Test OP_EVAL edge cases\n+\n+    CScript recurse;\n+    recurse << OP_DUP << OP_EVAL;\n+\n+    uint160 recurseHash = Hash160(recurse);\n+\n+    CScript fund;\n+    fund << OP_DUP << OP_HASH160 << recurseHash << OP_EQUALVERIFY << OP_EVAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    BOOST_CHECK(txFrom.IsStandard()); // Looks like a standard transaction until you try to spend it\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(recurse);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, true));\n+    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused, true));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval3)\n+{\n+    // Test the CScript::Set* methods\n+    CBasicKeyStore keystore;\n+    CKey key[4];\n+    std::vector<CKey> keys;\n+    for (int i = 0; i < 4; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+        keys.push_back(key[i]);\n+    }\n+\n+    CScript inner[4];\n+    inner[0].SetBitcoinAddress(key[0].GetPubKey());\n+    inner[1].SetMultisig(2, std::vector<CKey>(keys.begin(), keys.begin()+2));\n+    inner[2].SetMultisig(1, std::vector<CKey>(keys.begin(), keys.begin()+2));\n+    inner[3].SetMultisig(2, std::vector<CKey>(keys.begin(), keys.begin()+3));\n+\n+    CScript outer[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        outer[i].SetEval(inner[i]);\n+        keystore.AddCScript(Hash160(inner[i]), inner[i]);\n+    }\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(4);\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txFrom.vout[i].scriptPubKey = outer[i];\n+    }\n+    BOOST_CHECK(txFrom.IsStandard());\n+\n+    CTransaction txTo[4]; // Spending transactions\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+        txTo[i].vout[0].scriptPubKey = inner[i];\n+        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+    }\n+    for (int i = 0; i < 4; i++)\n+    {\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(txTo[i].IsStandard(), strprintf(\"txTo[%d].IsStandard\", i));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval_backcompat1)\n+{\n+    // Check backwards-incompatibility-testing code\n+    CScript returnsEleven;\n+    returnsEleven << OP_11;\n+\n+    // This should validate on new clients, but will\n+    // be invalid on old clients (that interpret OP_EVAL as a no-op)\n+    //  ... except there's a special rule that makes new clients reject\n+    // it.\n+    CScript fund;\n+    fund << OP_EVAL << OP_11 << OP_EQUAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(returnsEleven);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, true));\n+    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused, true));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval_switchover)\n+{\n+    // Test OP_EVAL switchover code\n+    CScript notValid;\n+    notValid << OP_11 << OP_12 << OP_EQUALVERIFY;\n+\n+    // This will be valid under old rules, invalid under new:\n+    CScript fund;\n+    fund << OP_EVAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(notValid);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, false));\n+\n+    // After eval switchover, it should be considered invalid:\n+    SetMockTime(nEvalSwitchover);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262841",
      "id" : 262841,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjg0MQ==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 246,
      "original_start_line" : null,
      "path" : "src/test/script_op_eval_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262841/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262841",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262850"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That's a bit confusing. Isn't there a simpler way to phrase this check?\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-11-30T23:37:13Z",
      "diff_hunk" : "@@ -365,6 +374,16 @@ int64 CWallet::GetDebit(const CTxIn &txin) const\n     return 0;\n }\n \n+bool CWallet::IsChange(const CTxOut& txout) const\n+{\n+    CBitcoinAddress address;\n+    if (ExtractAddress(txout.scriptPubKey, this, address) && !address.IsScript())\n+        CRITICAL_BLOCK(cs_wallet)\n+            if (!mapAddressBook.count(address))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r262850",
      "id" : 262850,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2Mjg1MA==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262850/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/262850",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263278"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I hate naming things... must be my Australian roots.  I'll call it Bruce.\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T03:31:17Z",
      "diff_hunk" : "@@ -28,17 +28,23 @@ public:\n     // This may succeed even if GetKey fails (e.g., encrypted wallets)\n     virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n \n+    virtual bool AddCScript(const uint160 &hash, const std::vector<unsigned char>& data) =0;\n+    virtual bool HaveCScript(const uint160 &hash) const =0;\n+    virtual bool GetCScript(const uint160 &hash, std::vector<unsigned char>& dataOut) const =0;\n+\n     // Generate a new key, and add it to the store\n     virtual std::vector<unsigned char> GenerateNewKey();\n };\n \n typedef std::map<CBitcoinAddress, CSecret> KeyMap;\n+typedef std::map<uint160, std::vector<unsigned char> > DataMap;\n \n // Basic key store, that keeps keys in an address->secret map\n class CBasicKeyStore : public CKeyStore\n {\n protected:\n     KeyMap mapKeys;\n+    DataMap mapData;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263278",
      "id" : 263278,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MzI3OA==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/keystore.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263278/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263278",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263279"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That (and several of your other line comments here) is SatoshiCode, just moved around.  But you're right, this is a good opportunity to make it easier to read....\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T03:33:47Z",
      "diff_hunk" : "@@ -241,6 +241,65 @@ bool CTransaction::ReadFromDisk(COutPoint prevout)\n     return ReadFromDisk(txdb, prevout, txindex);\n }\n \n+bool CTransaction::IsStandard() const\n+{\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n+        // in an OP_EVAL, which is 3 ~80-byte signatures, 3\n+        // ~65-byte public keys, plus a few script ops.\n+        if (txin.scriptSig.size() > 500)\n+            return error(\"nonstandard txin, size %d\\n\", txin.scriptSig.size());\n+        if (!txin.scriptSig.IsPushOnly())\n+            return error(\"nonstandard txin: %s\", txin.scriptSig.ToString().c_str());\n+    }\n+    BOOST_FOREACH(const CTxOut& txout, vout)\n+        if (!::IsStandard(txout.scriptPubKey))\n+            return error(\"nonstandard txout: %s\", txout.scriptPubKey.ToString().c_str());\n+    return true;\n+}\n+\n+//\n+// Check transaction inputs, and make sure any\n+// OP_EVAL transactions are evaluating IsStandard scripts\n+//\n+// Why bother? To avoid denial-of-service attacks; an attacker\n+// can submit a standard DUP HASH... OP_EVAL transaction,\n+// which will get accepted into blocks. The script being\n+// EVAL'ed can be anything; an attacker could use a very\n+// expensive-to-check-upon-redemption script like:\n+//   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+//\n+bool CTransaction::IsStandardInputs(std::map<uint256, std::pair<CTxIndex, CTransaction> > mapInputs) const\n+{\n+    if (fTestNet)\n+        return true; // Allow non-standard on testnet\n+\n+    for (int i = 0; i < vin.size(); i++)\n+    {\n+        COutPoint prevout = vin[i].prevout;\n+        assert(mapInputs.count(prevout.hash) > 0);\n+        CTransaction& txPrev = mapInputs[prevout.hash].second;\n+\n+        vector<vector<unsigned char> > vSolutions;\n+        txntype whichType;\n+        if (!Solver(txPrev.vout[vin[i].prevout.n].scriptPubKey, whichType, vSolutions))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263279",
      "id" : 263279,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MzI3OQ==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263279/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263279",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263281"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Darn good question.  More SatoshiCode (in this case, I think just the indentation level changed).\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T03:34:58Z",
      "diff_hunk" : "@@ -813,8 +882,61 @@ bool CTransaction::DisconnectInputs(CTxDB& txdb)\n }\n \n \n-bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n-                                 CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int64 nMinFee)\n+bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTestPool,\n+                               bool fBlock, bool fMiner, map<uint256, pair<CTxIndex, CTransaction> >& inputsRet)\n+{\n+    if (IsCoinBase())\n+        return true; // Coinbase transactions have no inputs to fetch.\n+    \n+    for (int i = 0; i < vin.size(); i++)\n+    {\n+        COutPoint prevout = vin[i].prevout;\n+        if (inputsRet.count(prevout.hash))\n+            continue; // Got it already\n+\n+        // Read txindex\n+        CTxIndex& txindex = inputsRet[prevout.hash].first;\n+        bool fFound = true;\n+        if ((fBlock || fMiner) && mapTestPool.count(prevout.hash))\n+        {\n+            // Get txindex from current proposed changes\n+            txindex = mapTestPool.find(prevout.hash)->second;\n+        }\n+        else\n+        {\n+            // Read txindex from txdb\n+            fFound = txdb.ReadTxIndex(prevout.hash, txindex);\n+        }\n+        if (!fFound && (fBlock || fMiner))\n+            return fMiner ? false : error(\"FetchInputs() : %s prev tx %s index entry not found\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+\n+        // Read txPrev\n+        CTransaction& txPrev = inputsRet[prevout.hash].second;\n+        if (!fFound || txindex.pos == CDiskTxPos(1,1,1))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263281",
      "id" : 263281,
      "line" : 930,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MzI4MQ==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 157,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263281/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263281",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263283"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Luke-Jr was big on doing something like that. I don't think the extra code complication is worth it; this is the Simplest Possible Thing That Will Work.  Keeping track of frequency, or a signed message, means storing the message somewhere, or storing the frequency somewhere (or recomputing it in LoadBlockChain and recomputing it whenever there's a new block or a block chain reorg, etc etc etc).\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T03:37:41Z",
      "diff_hunk" : "@@ -877,9 +965,27 @@ bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPoo\n             // (before the last blockchain checkpoint). This is safe because block merkle hashes are\n             // still computed and checked, and any change will be caught at the next checkpoint.\n             if (!(fBlock && IsInitialBlockDownload()))\n+            {\n+                bool fStrictOpEval = true;\n+                // This code should be removed when OP_EVAL has\n+                // a majority of hashing power on the network.\n+                if (fBlock)\n+                {\n+                    // To avoid being on the short end of a block-chain split,\n+                    // interpret OP_EVAL as a NO_OP until blocks with timestamps\n+                    // after opevaltime:\n+                    int64 nEvalSwitchTime = GetArg(\"opevaltime\", 1328054400); // Feb 1, 2012",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263283",
      "id" : 263283,
      "line" : 992,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MzI4Mw==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 243,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 245,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263283/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263283",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263289"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263289"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Again, Simplest Possible Thing that will work.\n\nThe release after OP_EVAL has majority mining support this code will be removed-- I assume the big mining pools aren't going to remove support for it once they add support for it.  The next time with have an OP_EVAL-like change, we'll lobby miners to put some other string in their coinbases....\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T03:40:41Z",
      "diff_hunk" : "@@ -2862,6 +2992,12 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     ++nExtraNonce;\n     pblock->vtx[0].vin[0].scriptSig = CScript() << pblock->nTime << CBigNum(nExtraNonce);\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+\n+    // Put \"OP_EVAL\" in the coinbase so everybody can tell when",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263289",
      "id" : 263289,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MzI4OQ==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 346,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263289/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263289",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263311"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Because they don't make sense inside OP_EVAL'ed code.\n\nExample:\nscriptPubKey: DUP HASH160 ...hash of serialized script... EQUALVERIFY EVAL\n\nRedeemed in a transaction that has:\nscriptSig:  <sig> <pubkey> serialized(stuff... CODESEPARATOR CHECKSIG)\n\nSo: CHECKSIG takes the part of the scriptPubKey from the last CODESEPARATOR to the end of the scriptPubKey and replaces the scriptSig with that.\n\nBut there is no CODESEPARATOR in the scriptPubKey.  It is buried inside the scriptSig.  The scriptSig that is signed will be DUP HASH160 <hash_of_serialized_script> EQUALVERIFY EVAL\n\nI suppose OP_EVAL could interact with OP_CHECKSIG so the scriptPubKey is rewritten to \"expand out\" all the OP_EVALs somehow before evaluation so CODESEPARATORS inside the EVAL would make sense...  but since I don't see a use for CODESEPARATOR and since that would add quite a lot of extra code and complication just disallowing CODESEPARATOR inside EVAL'd scripts seems like the correct thing to do.\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T04:03:59Z",
      "diff_hunk" : "@@ -844,6 +1013,30 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 }\n                 break;\n \n+                case OP_EVAL:\n+                {\n+                    if (!fStrictOpEval)\n+                        break; // Act as a NO_OP\n+\n+\n+                    // Evaluate the top item on the stack as a Script\n+                    // [serialized script ] -- [result(s) of executing script]\n+                    if (stack.size() < 1)\n+                        return false;\n+                    valtype& vchScript = stacktop(-1);\n+                    CScript subscript(vchScript.begin(), vchScript.end());\n+                    popstack(stack);\n+                    \n+                    // Codeseparators not allowed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263311",
      "id" : 263311,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MzMxMQ==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 250,
      "original_start_line" : null,
      "path" : "src/script.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263311/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263311",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263314"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Naming again....  GetScriptPubKeyTypeName ?    Is there a better term for \"part of a transaction that specifies the conditions necessary to redeem\" ?\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T04:06:07Z",
      "diff_hunk" : "@@ -70,20 +70,187 @@ static inline void popstack(vector<valtype>& stack)\n }\n \n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+const char* GetTxnTypeName(txntype t)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263314",
      "id" : 263314,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MzMxNA==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263314/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263314",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263697"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "GetOutputType?\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T11:17:54Z",
      "diff_hunk" : "@@ -70,20 +70,187 @@ static inline void popstack(vector<valtype>& stack)\n }\n \n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+const char* GetTxnTypeName(txntype t)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263697",
      "id" : 263697,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MzY5Nw==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263697/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263699"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263699"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Makes sense. Best to put the explanation in a comment rather than a code review thread though.\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T11:18:12Z",
      "diff_hunk" : "@@ -844,6 +1013,30 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 }\n                 break;\n \n+                case OP_EVAL:\n+                {\n+                    if (!fStrictOpEval)\n+                        break; // Act as a NO_OP\n+\n+\n+                    // Evaluate the top item on the stack as a Script\n+                    // [serialized script ] -- [result(s) of executing script]\n+                    if (stack.size() < 1)\n+                        return false;\n+                    valtype& vchScript = stacktop(-1);\n+                    CScript subscript(vchScript.begin(), vchScript.end());\n+                    popstack(stack);\n+                    \n+                    // Codeseparators not allowed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263699",
      "id" : 263699,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MzY5OQ==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 250,
      "original_start_line" : null,
      "path" : "src/script.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263699/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263699",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263701"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263701"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yup, sorry, I realize it's not yours. Just might as well fix up minor things like this whilst there is attention on a particular part of the code.\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T11:19:23Z",
      "diff_hunk" : "@@ -813,8 +882,61 @@ bool CTransaction::DisconnectInputs(CTxDB& txdb)\n }\n \n \n-bool CTransaction::ConnectInputs(CTxDB& txdb, map<uint256, CTxIndex>& mapTestPool, CDiskTxPos posThisTx,\n-                                 CBlockIndex* pindexBlock, int64& nFees, bool fBlock, bool fMiner, int64 nMinFee)\n+bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTestPool,\n+                               bool fBlock, bool fMiner, map<uint256, pair<CTxIndex, CTransaction> >& inputsRet)\n+{\n+    if (IsCoinBase())\n+        return true; // Coinbase transactions have no inputs to fetch.\n+    \n+    for (int i = 0; i < vin.size(); i++)\n+    {\n+        COutPoint prevout = vin[i].prevout;\n+        if (inputsRet.count(prevout.hash))\n+            continue; // Got it already\n+\n+        // Read txindex\n+        CTxIndex& txindex = inputsRet[prevout.hash].first;\n+        bool fFound = true;\n+        if ((fBlock || fMiner) && mapTestPool.count(prevout.hash))\n+        {\n+            // Get txindex from current proposed changes\n+            txindex = mapTestPool.find(prevout.hash)->second;\n+        }\n+        else\n+        {\n+            // Read txindex from txdb\n+            fFound = txdb.ReadTxIndex(prevout.hash, txindex);\n+        }\n+        if (!fFound && (fBlock || fMiner))\n+            return fMiner ? false : error(\"FetchInputs() : %s prev tx %s index entry not found\", GetHash().ToString().substr(0,10).c_str(),  prevout.hash.ToString().substr(0,10).c_str());\n+\n+        // Read txPrev\n+        CTransaction& txPrev = inputsRet[prevout.hash].second;\n+        if (!fFound || txindex.pos == CDiskTxPos(1,1,1))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r263701",
      "id" : 263701,
      "line" : 930,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2MzcwMQ==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : 157,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263701/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/263701",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r264336"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264336"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The test fixture resets mock time between tests.  Although the mock time doesn't matter any more-- a previous refactoring added Yet Another argument to VerifyScript that controls whether it interprets OP_EVAL as a no-op or not.  I'll fix the test case.\n",
      "commit_id" : "77f21f1583deb89bf3fffe80fe9b181fedb1dd60",
      "created_at" : "2011-12-01T16:57:25Z",
      "diff_hunk" : "@@ -0,0 +1,250 @@\n+#include <boost/assert.hpp>\n+#include <boost/assign/list_of.hpp>\n+#include <boost/assign/list_inserter.hpp>\n+#include <boost/assign/std/vector.hpp>\n+#include <boost/test/unit_test.hpp>\n+#include <boost/foreach.hpp>\n+\n+#include \"../main.h\"\n+#include \"../script.h\"\n+#include \"../wallet.h\"\n+\n+using namespace std;\n+\n+// Test routines internal to script.cpp:\n+extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n+extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, int& nSigOps,\n+                         int nHashType, bool fStrictOpEval);\n+\n+static const int64 nEvalSwitchover = 1328054400;\n+\n+struct CEvalFixture {\n+    CEvalFixture()\n+    {\n+        // Set mock time to AFTER OP_EVAL deployed\n+        SetMockTime(nEvalSwitchover+1);\n+    }\n+    ~CEvalFixture()\n+    {\n+        // Reset back to use-real-time\n+        SetMockTime(0);\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(script_op_eval_tests, CEvalFixture)\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval1)\n+{\n+    // OP_EVAL looks like this:\n+    // scriptSig:    <sig> <sig...> <serialized_script>\n+    // scriptPubKey: DUP HASH160 <hash> EQUALVERIFY EVAL\n+\n+    // Test SignSignature() (and therefore the version of Solver() that signs transactions)\n+    CBasicKeyStore keystore;\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+    }\n+\n+    // 8 Scripts: checking all combinations of\n+    // different keys, straight/EVAL, pubkey/pubkeyhash\n+    CScript standardScripts[4];\n+    standardScripts[0] << key[0].GetPubKey() << OP_CHECKSIG;\n+    standardScripts[1].SetBitcoinAddress(key[1].GetPubKey());\n+    standardScripts[2] << key[1].GetPubKey() << OP_CHECKSIG;\n+    standardScripts[3].SetBitcoinAddress(key[2].GetPubKey());\n+    CScript evalScripts[4];\n+    uint160 sigScriptHashes[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        sigScriptHashes[i] = Hash160(standardScripts[i]);\n+        keystore.AddCScript(sigScriptHashes[i], standardScripts[i]);\n+        evalScripts[i] << OP_DUP << OP_HASH160 << sigScriptHashes[i] << OP_EQUALVERIFY << OP_EVAL;\n+    }\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(8);\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txFrom.vout[i].scriptPubKey = evalScripts[i];\n+        txFrom.vout[i+4].scriptPubKey = standardScripts[i];\n+    }\n+    BOOST_CHECK(txFrom.IsStandard());\n+\n+    CTransaction txTo[8]; // Spending transactions\n+    for (int i = 0; i < 8; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+    }\n+    for (int i = 0; i < 8; i++)\n+    {\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+    }\n+    // All of the above should be OK, and the txTos have valid signatures\n+    // Check to make sure signature verification fails if we use the wrong ScriptSig:\n+    for (int i = 0; i < 8; i++)\n+        for (int j = 0; j < 8; j++)\n+        {\n+            CScript sigSave = txTo[i].vin[0].scriptSig;\n+            txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n+            int nUnused = 0;\n+            bool sigOK = VerifySignature(txFrom, txTo[i], 0, nUnused);\n+            if (i == j)\n+                BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n+            else\n+                BOOST_CHECK_MESSAGE(!sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n+            txTo[i].vin[0].scriptSig = sigSave;\n+        }\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval2)\n+{\n+    // Test OP_EVAL edge cases\n+\n+    CScript recurse;\n+    recurse << OP_DUP << OP_EVAL;\n+\n+    uint160 recurseHash = Hash160(recurse);\n+\n+    CScript fund;\n+    fund << OP_DUP << OP_HASH160 << recurseHash << OP_EQUALVERIFY << OP_EVAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    BOOST_CHECK(txFrom.IsStandard()); // Looks like a standard transaction until you try to spend it\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(recurse);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, true));\n+    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused, true));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval3)\n+{\n+    // Test the CScript::Set* methods\n+    CBasicKeyStore keystore;\n+    CKey key[4];\n+    std::vector<CKey> keys;\n+    for (int i = 0; i < 4; i++)\n+    {\n+        key[i].MakeNewKey();\n+        keystore.AddKey(key[i]);\n+        keys.push_back(key[i]);\n+    }\n+\n+    CScript inner[4];\n+    inner[0].SetBitcoinAddress(key[0].GetPubKey());\n+    inner[1].SetMultisig(2, std::vector<CKey>(keys.begin(), keys.begin()+2));\n+    inner[2].SetMultisig(1, std::vector<CKey>(keys.begin(), keys.begin()+2));\n+    inner[3].SetMultisig(2, std::vector<CKey>(keys.begin(), keys.begin()+3));\n+\n+    CScript outer[4];\n+    for (int i = 0; i < 4; i++)\n+    {\n+        outer[i].SetEval(inner[i]);\n+        keystore.AddCScript(Hash160(inner[i]), inner[i]);\n+    }\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(4);\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txFrom.vout[i].scriptPubKey = outer[i];\n+    }\n+    BOOST_CHECK(txFrom.IsStandard());\n+\n+    CTransaction txTo[4]; // Spending transactions\n+    for (int i = 0; i < 4; i++)\n+    {\n+        txTo[i].vin.resize(1);\n+        txTo[i].vout.resize(1);\n+        txTo[i].vin[0].prevout.n = i;\n+        txTo[i].vin[0].prevout.hash = txFrom.GetHash();\n+        txTo[i].vout[0].nValue = 1;\n+        txTo[i].vout[0].scriptPubKey = inner[i];\n+        BOOST_CHECK_MESSAGE(IsMine(keystore, txFrom.vout[i].scriptPubKey), strprintf(\"IsMine %d\", i));\n+    }\n+    for (int i = 0; i < 4; i++)\n+    {\n+        BOOST_CHECK_MESSAGE(SignSignature(keystore, txFrom, txTo[i], 0), strprintf(\"SignSignature %d\", i));\n+        BOOST_CHECK_MESSAGE(txTo[i].IsStandard(), strprintf(\"txTo[%d].IsStandard\", i));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval_backcompat1)\n+{\n+    // Check backwards-incompatibility-testing code\n+    CScript returnsEleven;\n+    returnsEleven << OP_11;\n+\n+    // This should validate on new clients, but will\n+    // be invalid on old clients (that interpret OP_EVAL as a no-op)\n+    //  ... except there's a special rule that makes new clients reject\n+    // it.\n+    CScript fund;\n+    fund << OP_EVAL << OP_11 << OP_EQUAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(returnsEleven);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(!VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, true));\n+    BOOST_CHECK(!VerifySignature(txFrom, txTo, 0, nUnused, true));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_op_eval_switchover)\n+{\n+    // Test OP_EVAL switchover code\n+    CScript notValid;\n+    notValid << OP_11 << OP_12 << OP_EQUALVERIFY;\n+\n+    // This will be valid under old rules, invalid under new:\n+    CScript fund;\n+    fund << OP_EVAL;\n+\n+    CTransaction txFrom;  // Funding transaction:\n+    txFrom.vout.resize(1);\n+    txFrom.vout[0].scriptPubKey = fund;\n+\n+    CTransaction txTo;\n+    txTo.vin.resize(1);\n+    txTo.vout.resize(1);\n+    txTo.vin[0].prevout.n = 0;\n+    txTo.vin[0].prevout.hash = txFrom.GetHash();\n+    txTo.vin[0].scriptSig = CScript() << static_cast<std::vector<unsigned char> >(notValid);\n+    txTo.vout[0].nValue = 1;\n+\n+    int nUnused = 0;\n+    BOOST_CHECK(VerifyScript(txTo.vin[0].scriptSig, txFrom.vout[0].scriptPubKey, txTo, 0, nUnused, 0, false));\n+\n+    // After eval switchover, it should be considered invalid:\n+    SetMockTime(nEvalSwitchover);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#discussion_r264336",
      "id" : 264336,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDMzNg==",
      "original_commit_id" : "d433be28411ca4f8f9c8a2d3ad956238c418b02d",
      "original_line" : null,
      "original_position" : 246,
      "original_start_line" : null,
      "path" : "src/test/script_op_eval_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/669",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264336/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2011-12-20T17:22:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/264336",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "NACK\n\n9db95d3 introduces a regression: when you send-to-self, and have to pay a fee, instead of the usual send/receive pair in listtransactions, we now get a second 'send' instead of the 'receive'. This 'send' has an amount that appears to be your _change_ from the transaction, shown in negative.\n",
      "created_at" : "2011-12-03T01:57:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#issuecomment-2998414",
      "id" : 2998414,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/669",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI5OTg0MTQ=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2998414/reactions"
      },
      "updated_at" : "2011-12-03T01:57:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2998414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Nice catch on the listtransactions regression.\n",
      "created_at" : "2011-12-03T02:21:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/669#issuecomment-2998553",
      "id" : 2998553,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/669",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDI5OTg1NTM=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2998553/reactions"
      },
      "updated_at" : "2011-12-03T02:21:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2998553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   }
]
