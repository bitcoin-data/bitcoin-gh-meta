[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639712155"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639712155"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe you can omit `--descriptors` when this check is present, @achow101?",
      "commit_id" : "69b071e5dbd165eaa63092914a79e592f3a48d4b",
      "created_at" : "2021-05-26T13:13:00Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639712155",
      "id" : 639712155,
      "line" : 28,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTcxMjE1NQ==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : 28,
      "pull_request_review_id" : 669000786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T13:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639712155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639712512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639712512"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: 2021",
      "commit_id" : "69b071e5dbd165eaa63092914a79e592f3a48d4b",
      "created_at" : "2021-05-26T13:13:22Z",
      "diff_hunk" : "@@ -0,0 +1,145 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019-2020 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639712512",
      "id" : 639712512,
      "line" : 2,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTcxMjUxMg==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 2,
      "original_position" : 2,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : 2,
      "pull_request_review_id" : 669000786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T13:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639712512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639720462"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639720462"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"is to create a new descriptor wallet. Avoid reusing this wallet for any other purpose.\"\r\n\r\nCould add a hint here on how to extract the xpub. Using `listdescriptors` and maybe pick the one from `pkh`, since you're least likely to accidentally reuse that (legacy addresses).",
      "commit_id" : "69b071e5dbd165eaa63092914a79e592f3a48d4b",
      "created_at" : "2021-05-26T13:22:32Z",
      "diff_hunk" : "@@ -131,6 +131,27 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new wallet",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639720462",
      "id" : 639720462,
      "line" : 140,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTcyMDQ2Mg==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 140,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : 10,
      "pull_request_review_id" : 669000786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T13:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639720462",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639721497"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639721497"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So they have to make a fresh watch-only wallet first.",
      "commit_id" : "69b071e5dbd165eaa63092914a79e592f3a48d4b",
      "created_at" : "2021-05-26T13:23:43Z",
      "diff_hunk" : "@@ -131,6 +131,27 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new wallet\n+  2. The multisig is created by importing the following descriptors: `wsh(sortedmulti(<M>,xpubA/<0,1>/*,xpubB/<0,1>/*,â¦,xpubN/<0,1>/*))`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639721497",
      "id" : 639721497,
      "line" : 141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTcyMTQ5Nw==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 141,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : 11,
      "pull_request_review_id" : 669000786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T13:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639721497",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639721973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639721973"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`every participant checks that it gets the same addresses)` maybe move to step 3",
      "commit_id" : "69b071e5dbd165eaa63092914a79e592f3a48d4b",
      "created_at" : "2021-05-26T13:24:18Z",
      "diff_hunk" : "@@ -131,6 +131,27 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new wallet\n+  2. The multisig is created by importing the following descriptors: `wsh(sortedmulti(<M>,xpubA/<0,1>/*,xpubB/<0,1>/*,â¦,xpubN/<0,1>/*))`\n+    (one descriptor w/ `0` for receiving addresses and another w/ `1` for change). The resulting\n+    wallet is watch-only and every participant does this\n+  3. A receiving address is generated for the multisig\n+  4. Funds are sent to the resulting address (every participant checks that it gets the same addresses)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639721973",
      "id" : 639721973,
      "line" : 145,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTcyMTk3Mw==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 145,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : 15,
      "pull_request_review_id" : 669000786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T13:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639721973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639722630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639722630"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(much easier in the GUI)",
      "commit_id" : "69b071e5dbd165eaa63092914a79e592f3a48d4b",
      "created_at" : "2021-05-26T13:25:01Z",
      "diff_hunk" : "@@ -131,6 +131,27 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new wallet\n+  2. The multisig is created by importing the following descriptors: `wsh(sortedmulti(<M>,xpubA/<0,1>/*,xpubB/<0,1>/*,â¦,xpubN/<0,1>/*))`\n+    (one descriptor w/ `0` for receiving addresses and another w/ `1` for change). The resulting\n+    wallet is watch-only and every participant does this\n+  3. A receiving address is generated for the multisig\n+  4. Funds are sent to the resulting address (every participant checks that it gets the same addresses)\n+  5. A sending transaction is created using `walletcreatefundedpsbt` (anyone can initiate this)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639722630",
      "id" : 639722630,
      "line" : 146,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTcyMjYzMA==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 146,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : 16,
      "pull_request_review_id" : 669000786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T13:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639722630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639723123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639723123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(or load psbt in the GUI, which takes care of 7 too)",
      "commit_id" : "69b071e5dbd165eaa63092914a79e592f3a48d4b",
      "created_at" : "2021-05-26T13:25:32Z",
      "diff_hunk" : "@@ -131,6 +131,27 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new wallet\n+  2. The multisig is created by importing the following descriptors: `wsh(sortedmulti(<M>,xpubA/<0,1>/*,xpubB/<0,1>/*,â¦,xpubN/<0,1>/*))`\n+    (one descriptor w/ `0` for receiving addresses and another w/ `1` for change). The resulting\n+    wallet is watch-only and every participant does this\n+  3. A receiving address is generated for the multisig\n+  4. Funds are sent to the resulting address (every participant checks that it gets the same addresses)\n+  5. A sending transaction is created using `walletcreatefundedpsbt` (anyone can initiate this)\n+  6. At least `M` users check the PSBT with `decodepsbt` and (if OK) signs it with `walletprocesspsbt`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639723123",
      "id" : 639723123,
      "line" : 147,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTcyMzEyMw==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 147,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : 17,
      "pull_request_review_id" : 669000786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T13:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639723123",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the thorough review and suggestions @Sjors ! I've addressed all your feedback in my latest push.\r\n\r\n> This documentation and example also help illustrate where things could be made easier, e.g.:\r\n> \r\n> * having a wallet with just a seed, but no descriptors, and a way to ask it for an xpub\r\n\r\nI see the benefit of this - I found it tricky to extract a wallet's xpubs in bitcoin core (didn't find a way to do this w/ the GUI, the only way I know is w/ the rpc command `listdescritptors` as documented/tested here, but that means users will need to use the console for this). While most other wallets seem to make this easily accessible\r\n\r\n> * and RPC call (or wallet-tool command) to create a multisig descriptor given a bunch xpubs\r\n\r\nInteresting idea - I guess this would take care of step 2 in one easy command? Is the reason you suggest this to push forward \"standardization\" of multisigs similar to the approach outlined here?\r\n",
      "created_at" : "2021-05-26T14:45:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-848831321",
      "id" : 848831321,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0ODgzMTMyMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T14:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/848831321",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639800354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639800354"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just for my understanding, what are the practical drawbacks/risks of someone re-using this wallet for other purposes? To me it's not obvious why I shouldn't have a \"signer\" wallet that signs for a few multisigs and also has some of its own funds",
      "commit_id" : "932de9b3cb7baf128a506dda3c3ec5a88e07b6ca",
      "created_at" : "2021-05-26T14:47:23Z",
      "diff_hunk" : "@@ -131,6 +131,27 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new wallet",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639800354",
      "id" : 639800354,
      "in_reply_to_id" : 639720462,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTgwMDM1NA==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 140,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 669120730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T14:47:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639800354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639821031"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639821031"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's bad for your privacy if (and only if) you share that xpub with co-signers. They'll be able to guess the single-signature wallet derivation and see your transactions. If the M-of-N is just you then it doesn't matter.",
      "commit_id" : "932de9b3cb7baf128a506dda3c3ec5a88e07b6ca",
      "created_at" : "2021-05-26T15:08:51Z",
      "diff_hunk" : "@@ -131,6 +131,27 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new wallet",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639821031",
      "id" : 639821031,
      "in_reply_to_id" : 639720462,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTgyMTAzMQ==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 140,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 669148783,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T15:09:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639821031",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639823159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639823159"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah OK got it - thanks!",
      "commit_id" : "932de9b3cb7baf128a506dda3c3ec5a88e07b6ca",
      "created_at" : "2021-05-26T15:11:12Z",
      "diff_hunk" : "@@ -131,6 +131,27 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new wallet",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639823159",
      "id" : 639823159,
      "in_reply_to_id" : 639720462,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTgyMzE1OQ==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 140,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 669151689,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T15:11:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639823159",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Eventually it would be nice if step (1) and (2) are trivial to do with RPC or standalone tools. And then hopefully also easy to add GUI support for them. E.g. a screen where you can share your xpub, copy-paste xpubs from your co-signers, set the threshold, etc. Standardisation is another issue.",
      "created_at" : "2021-05-26T15:11:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-848853056",
      "id" : 848853056,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0ODg1MzA1Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T15:11:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/848853056",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639827069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639827069"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If you have a wallet with just signers, this may not matter, but generally, if you have one wallet with multiple unrelated funds/descriptors imported, its balances will be the sum of all, with no way to separate them out. That may not be what you want.",
      "commit_id" : "932de9b3cb7baf128a506dda3c3ec5a88e07b6ca",
      "created_at" : "2021-05-26T15:15:21Z",
      "diff_hunk" : "@@ -131,6 +131,27 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new wallet",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r639827069",
      "id" : 639827069,
      "in_reply_to_id" : 639720462,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTgyNzA2OQ==",
      "original_commit_id" : "4069660cac1c50f2b6f066223e95cc5e6d68a3dc",
      "original_line" : 140,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 669156919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T15:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639827069",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Any thoughts about me adding some caution/disclaimer text in the docs about the interoperability of this mulitsig with (external) common hardware wallets? Based on my testing so far it isn't as straightforward as just getting an xpub from your HW device and using that as a signer in the multisig. For example, ColdCard has some restrictions/checks (and a proprietary configuration text file for multisig), and I haven't been able to get a ColdCard to sign one of these PSBTs (even after trying to setup everything how they want it ð). It's strange, and I plan on following up with popular HW wallet providers because I would expect it to work seamlessly, but as of now it doesn't seem to (and could lead to locked funds if someone tries this before HW wallets get updated).\r\n\r\nHow I would expect a wallet like ColdCard to handle this is when the user goes to sign the PSBT w/ their HW wallet:\r\n  1. The wallet runs `> decodepsbt \"psbt\" (the PSBT base64 string)` and sees something like:\r\n\r\n```javascript\r\n{\r\n  tx: {\r\n    txid: '...',\r\n    hash: '...',\r\n    version: 2,\r\n    size: 94,\r\n    vsize: 94,\r\n    weight: 376,\r\n    ...\r\n    vin: [ [Object] ],\r\n    vout: [ [Object] ]\r\n  },\r\n  ...\r\n  inputs: [\r\n    {\r\n      witness_utxo: [Object],\r\n      non_witness_utxo: [Object],\r\n      witness_script: [Object],\r\n      bip32_derivs: [Array]\r\n    }\r\n  ],\r\n  outputs: [ {} ],\r\n}\r\n```\r\n\r\n  2. Now (before signing the PSBT) the HW wallet can just check the `inputs`: `witness_script.asm` to verify this is a standard N-of-M multisig transfer, and `bip32_derivs` to verify that this device's `master_fingerprint` is present and to determine the `path`/`pubkey` it needs to sign for:\r\n\r\n```javascript\r\n...\r\nwitness_script: {\r\n  asm: '2 <pubkeyA> <pubkeyB> <pubkeyC> 3 OP_CHECKMULTISIG',\r\n  hex: '...',\r\n  type: 'multisig'\r\n},\r\nbip32_derivs: [\r\n  {\r\n    pubkey: <pubkeyA>,\r\n    master_fingerprint: <deviceAFingerprint>,\r\n    path: 'm/0/0'\r\n  },\r\n  {\r\n    pubkey: <pubkeyB>,\r\n    master_fingerprint: <deviceBFingerprint>,\r\n    path: 'm/0/0'\r\n  },\r\n  {\r\n    pubkey: <pubkeyC>,\r\n    master_fingerprint: <deviceCFingerprint>,\r\n    path: 'm/0/0'\r\n  }\r\n]\r\n```\r\n\r\nAnd after these very simple checks it should be able to sign the PSBT without any additional setup/configuration from the end user. Am I over simplifying this or missing anything? Just want to get some feedback before I chase issues down with HW wallets",
      "created_at" : "2021-05-26T16:37:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-848929887",
      "id" : 848929887,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0ODkyOTg4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T16:41:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/848929887",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think the ColdCard file format for communicating wallet info is essentially the Electrum format.\r\n\r\nAfaik with Trezor and Ledger it is a simple matter of getting an xpub (e.g. using HWI).\r\n\r\nIt's probably still most practical to use something Specter Desktop to configure multisig wallets. Once setup, spending can be done with just Bitcoin Core afaik.\r\n\r\nNote that for signing each device should not just check that it's own keys are present, but also that cosigners weren't changed. So these need to be registered. ColdCard does that, which is why it's a bit more complicated to setup. Trezor and Ledger don't, so they're easier to setup, but also easier to fool.\r\n\r\nThere are folks working on standardization of the setup process, e.g. [BIP 86](https://github.com/bitcoin/bips/blob/master/bip-0087.mediawiki) and [BIP 129](https://github.com/bitcoin/bips/blob/master/bip-0129.mediawiki).\r\n\r\nAlso take a look at a PSBT extension that would includes xpubs: #17034: that could theoretically let you switch to trust-on-first-use when spending. But you really should verify an address before receiving coins on it, not when you spend from it. ",
      "created_at" : "2021-05-26T17:44:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-848987712",
      "id" : 848987712,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0ODk4NzcxMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T17:44:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/848987712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the explanation and links, very helpful. I'll look into all of this more.\r\n\r\n> But you really should verify an address before receiving coins on it, not when you spend from it.\r\n\r\nI guess this last sentence is where I get caught up. By the time I try to sign a PSBT (as a multisig co-signer):\r\n\r\n  1. The watch-only multisig has funds I am trying to spend\r\n  2. I really care about where I am sending these funds, the amount, and the fee. And that's what I'm verifying on my device, as usual\r\n\r\nSo is there a practical attack vector where somehow I am given a PSBT that has changed/different cosigners? I guess I'm missing the point of the extra complexity and setup on the HW side (and now I have to trust software outside of bitcoin core like Specter). Especially when I would think a lot of multisigs are either self-contained (ie my own M-of-N multis) or between \"friends\" (it's not like I'm signing random PSBTs I get from who knows where). Or I'm still missing something?\r\n\r\nI guess the worst case scenarios is the multisig \"coordinator\" gets me to sign a PSBT that's still a standard M-of-N multisig as documented here, and that I'm a cosigner for, but the other cosigners have been changed? Maybe they can get me to do this a few times (to extract some info?) but what's the harm since they shouldn't be able to trick me into sending funds anywhere?\r\n\r\nSending to the multisig seems like an entirely separate concern, and seems to be handled pretty well in this process (as outlined in these docs) because participants create/import their watch-only multisig once, and then would obviously generate new receive addresses there (and all participants are checking that the receive addresses match)",
      "created_at" : "2021-05-26T18:10:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-849007655",
      "id" : 849007655,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTAwNzY1NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T18:10:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849007655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@mjdietzx one thing to worry about is an attacker modifying the change address to a 2-of-3, with two of his keys, and hold you ransom.",
      "created_at" : "2021-05-26T18:14:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-849009869",
      "id" : 849009869,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTAwOTg2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T18:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849009869",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> one thing to worry about is an attacker modifying the change address to a 2-of-3, with two of his keys, and hold you ransom.\r\n\r\nIsn't that checked against here, where every participant checks the PSBT w/ `decodepsbt` with their watch-only multisig before signing (step 6 in the docs this PR adds)? https://github.com/bitcoin/bitcoin/pull/22067/files#diff-94f52fa5de899f58d07aca5026545378bc3da616d4927d71435fa0224eda589bR41",
      "created_at" : "2021-05-26T18:18:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-849012877",
      "id" : 849012877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTAxMjg3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T18:18:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849012877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Yes, but the reason you can do this check is because you imported the xpubs from other devices. That's what makes the setup tedious.",
      "created_at" : "2021-05-26T18:29:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-849020305",
      "id" : 849020305,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTAyMDMwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-26T18:29:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849020305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r642006601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642006601"
         }
      },
      "author_association" : "NONE",
      "body" : "This line can be removed, can't it ?",
      "commit_id" : "932de9b3cb7baf128a506dda3c3ec5a88e07b6ca",
      "created_at" : "2021-05-30T02:10:12Z",
      "diff_hunk" : "@@ -0,0 +1,156 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def _get_xpub(self, wallet):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh\"), wallet.listdescriptors()[\"descriptors\"]))\n+        return descriptor[\"desc\"].split(\"]\")[-1].split(\"/\")[0]\n+\n+    def _check_psbt(self, psbt, to, value, multisig):\n+        \"\"\"Helper method for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def generate_and_exchange_xpubs(self, participants):\n+        \"\"\"Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet. Avoid reusing this wallet for any other purpose..\"\"\"\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"participant_{i}\", descriptors=True)\n+            yield self._get_xpub(node.get_wallet_rpc(f\"participant_{i}\"))\n+\n+    def participants_import_descriptors(self, participants, xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        # some simple validation, this will throw if the base58 checksum of any xpub is invalid\n+        assert_equal(len(xpubs), self.N)\n+        [base58_to_byte(xpub) for xpub in xpubs]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r642006601",
      "id" : 642006601,
      "line" : 56,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjAwNjYwMQ==",
      "original_commit_id" : "932de9b3cb7baf128a506dda3c3ec5a88e07b6ca",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : 56,
      "pull_request_review_id" : 671784856,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-30T02:12:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642006601",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/84432093?v=4",
         "events_url" : "https://api.github.com/users/lsilva01/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lsilva01/followers",
         "following_url" : "https://api.github.com/users/lsilva01/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lsilva01/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lsilva01",
         "id" : 84432093,
         "login" : "lsilva01",
         "node_id" : "MDQ6VXNlcjg0NDMyMDkz",
         "organizations_url" : "https://api.github.com/users/lsilva01/orgs",
         "received_events_url" : "https://api.github.com/users/lsilva01/received_events",
         "repos_url" : "https://api.github.com/users/lsilva01/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lsilva01/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lsilva01"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r643178119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643178119"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This line is not strictly necessary. `base58_to_byte` will throw an exception if one of the provided `xpubs` checksum is invalid.\r\n\r\nBut at second glance this is confusing how I did it. I may get rid of it, or make it more obvious this is input validation",
      "commit_id" : "932de9b3cb7baf128a506dda3c3ec5a88e07b6ca",
      "created_at" : "2021-06-01T14:51:52Z",
      "diff_hunk" : "@@ -0,0 +1,156 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def _get_xpub(self, wallet):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh\"), wallet.listdescriptors()[\"descriptors\"]))\n+        return descriptor[\"desc\"].split(\"]\")[-1].split(\"/\")[0]\n+\n+    def _check_psbt(self, psbt, to, value, multisig):\n+        \"\"\"Helper method for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def generate_and_exchange_xpubs(self, participants):\n+        \"\"\"Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet. Avoid reusing this wallet for any other purpose..\"\"\"\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"participant_{i}\", descriptors=True)\n+            yield self._get_xpub(node.get_wallet_rpc(f\"participant_{i}\"))\n+\n+    def participants_import_descriptors(self, participants, xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        # some simple validation, this will throw if the base58 checksum of any xpub is invalid\n+        assert_equal(len(xpubs), self.N)\n+        [base58_to_byte(xpub) for xpub in xpubs]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r643178119",
      "id" : 643178119,
      "in_reply_to_id" : 642006601,
      "line" : 56,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MzE3ODExOQ==",
      "original_commit_id" : "932de9b3cb7baf128a506dda3c3ec5a88e07b6ca",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : 56,
      "pull_request_review_id" : 673178226,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-01T14:51:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/643178119",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-06-09T13:44:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-857706769",
      "id" : 857706769,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1NzcwNjc2OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-09T13:44:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857706769",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Thank you for working on this!\r\n\r\nI think this is a great first step, but ultimately we will need [BIP 129](https://github.com/bitcoin/bips/blob/master/bip-0129.mediawiki), [BIP 87](https://github.com/bitcoin/bips/blob/master/bip-0087.mediawiki), (possibly) [BIP 88](https://github.com/bitcoin/bips/blob/master/bip-0088.mediawiki), and [PSBT v2](https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki) support.\r\n\r\nAs @Sjors pointed out, I think this is useful because it also provides us a list of To Do's (besides the above):\r\n\r\n- having a wallet with just a seed, but no descriptors, and a way to ask it for an xpub\r\n- RPC call (or wallet-tool command) to create a multisig descriptor given a bunch xpubs\r\n- GUI support\r\n\r\n> It's probably still most practical to use something Specter Desktop to configure multisig wallets. Once setup, spending can be done with just Bitcoin Core afaik.\r\n\r\nI agree this is the case for now, but hopefully in the future Bitcoin Core can be a full fledged coordinator.\r\n\r\n>  2. Create a watch-only descriptor wallet (blank, private keys disabled). Now the multisig is created by importing the\r\n     following descriptors: `wsh(sortedmulti(<M>,xpubA/<0,1>/*,xpubB/<0,1>/*,â¦,xpubN/<0,1>/*))`\r\n\r\nThis isn't the proper way to write two descriptors (see [here](https://github.com/bitcoin/bitcoin/issues/21199#issuecomment-780772418)).  I think using a [descriptor template](https://github.com/bitcoin/bips/blob/master/bip-0129.mediawiki#Descriptor_Template) would be better.",
      "created_at" : "2021-06-28T20:21:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-870010329",
      "id" : 870010329,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3MDAxMDMyOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-28T20:21:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/870010329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r669934862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/669934862"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I made this more clear in the code/comment: https://github.com/bitcoin/bitcoin/pull/22067/files#diff-94f52fa5de899f58d07aca5026545378bc3da616d4927d71435fa0224eda589bR56-R58",
      "commit_id" : "13edc4dbee46591c5a5ae66ea9d83c179528c2a0",
      "created_at" : "2021-07-14T20:35:04Z",
      "diff_hunk" : "@@ -0,0 +1,156 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def _get_xpub(self, wallet):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh\"), wallet.listdescriptors()[\"descriptors\"]))\n+        return descriptor[\"desc\"].split(\"]\")[-1].split(\"/\")[0]\n+\n+    def _check_psbt(self, psbt, to, value, multisig):\n+        \"\"\"Helper method for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def generate_and_exchange_xpubs(self, participants):\n+        \"\"\"Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet. Avoid reusing this wallet for any other purpose..\"\"\"\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"participant_{i}\", descriptors=True)\n+            yield self._get_xpub(node.get_wallet_rpc(f\"participant_{i}\"))\n+\n+    def participants_import_descriptors(self, participants, xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        # some simple validation, this will throw if the base58 checksum of any xpub is invalid\n+        assert_equal(len(xpubs), self.N)\n+        [base58_to_byte(xpub) for xpub in xpubs]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r669934862",
      "id" : 669934862,
      "in_reply_to_id" : 642006601,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTkzNDg2Mg==",
      "original_commit_id" : "932de9b3cb7baf128a506dda3c3ec5a88e07b6ca",
      "original_line" : 56,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : null,
      "pull_request_review_id" : 706696247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-14T20:35:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/669934862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Rspigler Thanks for the review, re point 2:\r\n> This isn't the proper way to write two descriptors (see here). I think using a descriptor template would be better.\r\n\r\nIs this better? https://github.com/bitcoin/bitcoin/pull/22067/files#diff-00ec9f97461f6bb94a37daf8069e5acf832ea4d5a31a8d7d4968c285d2fcac9bR144",
      "created_at" : "2021-07-14T20:39:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-880193552",
      "id" : 880193552,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg4MDE5MzU1Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-14T20:39:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880193552",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@laanwj If you have a chance can you give this a quick review?",
      "created_at" : "2021-07-14T20:42:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-880194710",
      "id" : 880194710,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg4MDE5NDcxMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-14T20:42:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880194710",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> `wsh(sortedmulti(<M>,XPUB1/**,XPUB2/**,â¦,XPUBN/**))` `/0/*,/1/*`\r\n\r\nYes, that is the proper template!\r\n\r\nHowever, now that I think about it again, since this is documenting the setup for Bitcoin Core which doesn't have support for templates yet, the directions should probably write out explicitly the importing of both descriptors separately - which is what users will have to do.  So something like this:\r\n\r\n> Now the multisig is created by importing the two descriptors; For example:\r\n>     `wsh(sortedmulti(<M>,XPUB1/0/*,XPUB2/0/*,...XPUBN/0/*))`\r\n>     `wsh(sortedmulti(<M>,XPUB1/1/*,XPUB2/1/*,...XPUBN/1/*))`\r\n> \r\n> (one descriptor w/ `0` in the derivation path for receiving addresses and another w/ `1` for change).  Every participant does this\r\n\r\nAnd maybe templates not be mentioned at all.  Sorry for flip flopping on you",
      "created_at" : "2021-07-15T01:09:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-880312028",
      "id" : 880312028,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg4MDMxMjAyOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-15T01:09:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880312028",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point @Rspigler I removed the descriptor templates, but fixed as you suggest: https://github.com/bitcoin/bitcoin/pull/22067/commits/911ed484515f324c82e3121c84ce91751fdd4949#diff-00ec9f97461f6bb94a37daf8069e5acf832ea4d5a31a8d7d4968c285d2fcac9bR144",
      "created_at" : "2021-07-15T14:21:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-880735977",
      "id" : 880735977,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg4MDczNTk3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-15T14:21:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880735977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "ACK d1ce7bb4fb1f8cd929e23eae7aa9dd0862e938f2 (doc changes; not yet fully comfortable with my understanding of the tests in Core).",
      "created_at" : "2021-07-15T14:39:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-880749922",
      "id" : 880749922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg4MDc0OTkyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-15T14:39:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880749922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "ACK d1ce7bb (tests pass)",
      "created_at" : "2021-08-06T13:18:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-894254721",
      "id" : 894254721,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5841TT6B",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-06T13:18:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894254721",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/84942996?v=4",
         "events_url" : "https://api.github.com/users/OliverOffing/events{/privacy}",
         "followers_url" : "https://api.github.com/users/OliverOffing/followers",
         "following_url" : "https://api.github.com/users/OliverOffing/following{/other_user}",
         "gists_url" : "https://api.github.com/users/OliverOffing/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/OliverOffing",
         "id" : 84942996,
         "login" : "OliverOffing",
         "node_id" : "MDQ6VXNlcjg0OTQyOTk2",
         "organizations_url" : "https://api.github.com/users/OliverOffing/orgs",
         "received_events_url" : "https://api.github.com/users/OliverOffing/received_events",
         "repos_url" : "https://api.github.com/users/OliverOffing/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/OliverOffing/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/OliverOffing/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/OliverOffing"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r687385260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687385260"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: By using `getdescriptorinfo`, it eliminates the need for `descsum_create`, so the test will only use node functions without an additional script for the checksum.\r\n\r\n`from test_framework.descriptors import descsum_create` can also be removed.\r\n\r\n```suggestion\r\n            multisig = node.get_wallet_rpc(f\"{self.name}_{i}\")\r\n            \r\n            external_desc = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/{0}/*,'.join(xpubs)}/{0}/*))\")\r\n            internal_desc = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/{1}/*,'.join(xpubs)}/{1}/*))\")\r\n            \r\n            result = multisig.importdescriptors([\r\n                {  # receiving addresses (internal: False)\r\n                    \"desc\": external_desc[\"descriptor\"],\r\n                    \"active\": True,\r\n                    \"internal\": False,\r\n                    \"timestamp\": \"now\",\r\n                },\r\n                {  # change addresses (internal: True)\r\n                    \"desc\": internal_desc[\"descriptor\"],\r\n```",
      "commit_id" : "e05cd0546a155afcd45c43ce730c4abecd40dfed",
      "created_at" : "2021-08-12T04:49:42Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def _get_xpub(self, wallet):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh\"), wallet.listdescriptors()[\"descriptors\"]))\n+        return descriptor[\"desc\"].split(\"]\")[-1].split(\"/\")[0]\n+\n+    def _check_psbt(self, psbt, to, value, multisig):\n+        \"\"\"Helper method for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def generate_and_exchange_xpubs(self, participants):\n+        \"\"\"Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet. Avoid reusing this wallet for any other purpose..\"\"\"\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"participant_{i}\", descriptors=True)\n+            yield self._get_xpub(node.get_wallet_rpc(f\"participant_{i}\"))\n+\n+    def participants_import_descriptors(self, participants, xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        # some simple validation\n+        assert_equal(len(xpubs), self.N)\n+        # a sanity-check/assertion, this will throw if the base58 checksum of any of the provided xpubs are invalid\n+        for xpub in xpubs:\n+            base58_to_byte(xpub)\n+\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"{self.name}_{i}\", blank=True, descriptors=True, disable_private_keys=True)\n+            multisig = node.get_wallet_rpc(f\"{self.name}_{i}\")\n+            result = multisig.importdescriptors([\n+                {  # receiving addresses (internal: False)\n+                    \"desc\": descsum_create(f\"wsh(sortedmulti({self.M},{f'/{0}/*,'.join(xpubs)}/{0}/*))\"),\n+                    \"active\": True,\n+                    \"internal\": False,\n+                    \"timestamp\": \"now\",\n+                },\n+                {  # change addresses (internal: True)\n+                    \"desc\": descsum_create(f\"wsh(sortedmulti({self.M},{f'/{1}/*,'.join(xpubs)}/{1}/*))\"),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r687385260",
      "id" : 687385260,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NzM4NTI2MA==",
      "original_commit_id" : "d1ce7bb4fb1f8cd929e23eae7aa9dd0862e938f2",
      "original_line" : 71,
      "original_position" : 71,
      "original_start_line" : 62,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : null,
      "pull_request_review_id" : 728176263,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-16T15:42:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/687385260",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/84432093?v=4",
         "events_url" : "https://api.github.com/users/lsilva01/events{/privacy}",
         "followers_url" : "https://api.github.com/users/lsilva01/followers",
         "following_url" : "https://api.github.com/users/lsilva01/following{/other_user}",
         "gists_url" : "https://api.github.com/users/lsilva01/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/lsilva01",
         "id" : 84432093,
         "login" : "lsilva01",
         "node_id" : "MDQ6VXNlcjg0NDMyMDkz",
         "organizations_url" : "https://api.github.com/users/lsilva01/orgs",
         "received_events_url" : "https://api.github.com/users/lsilva01/received_events",
         "repos_url" : "https://api.github.com/users/lsilva01/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/lsilva01/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/lsilva01"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the review @lsilva01\r\n\r\n> By using importdescriptors, it eliminates the need for descsum_create, so the test will only use node functions without an additional script for the checksum.\r\n\r\nGood idea, I just pushed this improvement ð",
      "created_at" : "2021-08-16T05:45:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-899239342",
      "id" : 899239342,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5841mU2u",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-16T05:45:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899239342",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK e05cd0546a155afcd45c43ce730c4abecd40dfed",
      "created_at" : "2021-08-16T17:57:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-899705236",
      "id" : 899705236,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5841oGmU",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-16T17:57:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/899705236",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r696342578"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696342578"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: I think it'd be clearer if you just inline this function",
      "commit_id" : "e05cd0546a155afcd45c43ce730c4abecd40dfed",
      "created_at" : "2021-08-26T06:53:52Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def _get_xpub(self, wallet):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh\"), wallet.listdescriptors()[\"descriptors\"]))\n+        return descriptor[\"desc\"].split(\"]\")[-1].split(\"/\")[0]\n+\n+    def _check_psbt(self, psbt, to, value, multisig):\n+        \"\"\"Helper method for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def generate_and_exchange_xpubs(self, participants):\n+        \"\"\"Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet. Avoid reusing this wallet for any other purpose..\"\"\"\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"participant_{i}\", descriptors=True)\n+            yield self._get_xpub(node.get_wallet_rpc(f\"participant_{i}\"))\n+\n+    def participants_import_descriptors(self, participants, xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        # some simple validation\n+        assert_equal(len(xpubs), self.N)\n+        # a sanity-check/assertion, this will throw if the base58 checksum of any of the provided xpubs are invalid\n+        for xpub in xpubs:\n+            base58_to_byte(xpub)\n+\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"{self.name}_{i}\", blank=True, descriptors=True, disable_private_keys=True)\n+            multisig = node.get_wallet_rpc(f\"{self.name}_{i}\")\n+            external = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/{0}/*,'.join(xpubs)}/{0}/*))\")\n+            internal = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/{1}/*,'.join(xpubs)}/{1}/*))\")\n+            result = multisig.importdescriptors([\n+                {  # receiving addresses (internal: False)\n+                    \"desc\": external[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": False,\n+                    \"timestamp\": \"now\",\n+                },\n+                {  # change addresses (internal: True)\n+                    \"desc\": internal[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": True,\n+                    \"timestamp\": \"now\",\n+                },\n+            ])\n+            assert all(r[\"success\"] for r in result)\n+\n+    def get_multisig_receiving_address(self):\n+        \"\"\"We will send funds to the resulting address (every participant should get the same addresses).\"\"\"\n+        multisig = self.nodes[0].get_wallet_rpc(f\"{self.name}_{0}\")\n+        receiving_address = multisig.getnewaddress()\n+        for i in range(1, self.N):\n+            assert_equal(receiving_address, self.nodes[i].get_wallet_rpc(f\"{self.name}_{i}\").getnewaddress())\n+        return receiving_address\n+\n+    def make_sending_transaction(self, to, value):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r696342578",
      "id" : 696342578,
      "line" : 88,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjM0MjU3OA==",
      "original_commit_id" : "1f20501efce041d34e63ab9a11359bedf4a82cd5",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : 88,
      "pull_request_review_id" : 739096266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-02T07:27:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696342578",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r696353307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696353307"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: here and it other places you're repeating the convention like `self.nodes[i].get_wallet_rpc(f\"participant_{i}\")` and `self.nodes[i].get_wallet_rpc({self.name}_{i})` to access i-th participant signer and multisig wallet. Not a huge fan of this approach\r\n\r\nI suggest creating all wallets in the begging of the test. This will also make it clearer that each party needs two separate wallets and their purposes. Then you can either:\r\nA) store two lists of wallet RPC handlers in a variable for further reuse\r\nand/or\r\nB) add helper function to access i-th signer and multisig\r\n\r\nP.S. it also becomes cleaner if you have just one wallet",
      "commit_id" : "e05cd0546a155afcd45c43ce730c4abecd40dfed",
      "created_at" : "2021-08-26T07:11:32Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def _get_xpub(self, wallet):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh\"), wallet.listdescriptors()[\"descriptors\"]))\n+        return descriptor[\"desc\"].split(\"]\")[-1].split(\"/\")[0]\n+\n+    def _check_psbt(self, psbt, to, value, multisig):\n+        \"\"\"Helper method for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def generate_and_exchange_xpubs(self, participants):\n+        \"\"\"Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet. Avoid reusing this wallet for any other purpose..\"\"\"\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"participant_{i}\", descriptors=True)\n+            yield self._get_xpub(node.get_wallet_rpc(f\"participant_{i}\"))\n+\n+    def participants_import_descriptors(self, participants, xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        # some simple validation\n+        assert_equal(len(xpubs), self.N)\n+        # a sanity-check/assertion, this will throw if the base58 checksum of any of the provided xpubs are invalid\n+        for xpub in xpubs:\n+            base58_to_byte(xpub)\n+\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"{self.name}_{i}\", blank=True, descriptors=True, disable_private_keys=True)\n+            multisig = node.get_wallet_rpc(f\"{self.name}_{i}\")\n+            external = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/{0}/*,'.join(xpubs)}/{0}/*))\")\n+            internal = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/{1}/*,'.join(xpubs)}/{1}/*))\")\n+            result = multisig.importdescriptors([\n+                {  # receiving addresses (internal: False)\n+                    \"desc\": external[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": False,\n+                    \"timestamp\": \"now\",\n+                },\n+                {  # change addresses (internal: True)\n+                    \"desc\": internal[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": True,\n+                    \"timestamp\": \"now\",\n+                },\n+            ])\n+            assert all(r[\"success\"] for r in result)\n+\n+    def get_multisig_receiving_address(self):\n+        \"\"\"We will send funds to the resulting address (every participant should get the same addresses).\"\"\"\n+        multisig = self.nodes[0].get_wallet_rpc(f\"{self.name}_{0}\")\n+        receiving_address = multisig.getnewaddress()\n+        for i in range(1, self.N):\n+            assert_equal(receiving_address, self.nodes[i].get_wallet_rpc(f\"{self.name}_{i}\").getnewaddress())\n+        return receiving_address\n+\n+    def make_sending_transaction(self, to, value):\n+        \"\"\"Make a sending transaction, created using walletcreatefundedpsbt (anyone can initiate this).\"\"\"\n+        return self.nodes[0].get_wallet_rpc(f\"{self.name}_{0}\").walletcreatefundedpsbt(inputs=[], outputs={to: value}, options={\"feeRate\": 0.00010})\n+\n+    def run_test(self):\n+        self.M = 2\n+        self.N = self.num_nodes\n+        self.name = f\"{self.M}_of_{self.N}_multisig\"\n+        self.log.info(f\"Testing {self.name}...\")\n+\n+        self.log.info(\"Generate and exchange xpubs...\")\n+        xpubs = list(self.generate_and_exchange_xpubs(self.nodes))\n+\n+        self.log.info(\"Every participant imports the following descriptors to create the watch-only multisig...\")\n+        self.participants_import_descriptors(self.nodes, xpubs)\n+\n+        self.log.info(\"Get a mature utxo to send to the multisig...\")\n+        coordinator_wallet = self.nodes[0].get_wallet_rpc(f\"participant_{0}\")\n+        coordinator_wallet.generatetoaddress(101, coordinator_wallet.getnewaddress())\n+\n+        deposit_amount = 6.15\n+        multisig_receiving_address = self.get_multisig_receiving_address()\n+        self.log.info(\"Send funds to the resulting multisig receiving address...\")\n+        coordinator_wallet.sendtoaddress(multisig_receiving_address, deposit_amount)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        for n in range(self.N):\n+            assert_approx(self.nodes[n].get_wallet_rpc(f\"{self.name}_{n}\").getbalance(), deposit_amount, vspan=0.001)\n+\n+        self.log.info(\"Send a transaction from the multisig!\")\n+        to = self.nodes[self.N - 1].get_wallet_rpc(f\"participant_{self.N - 1}\").getnewaddress()\n+        value = 1\n+        psbt = self.make_sending_transaction(to, value)\n+\n+        psbts = []\n+        self.log.info(\"At least M users check the psbt with decodepsbt and (if OK) signs it with walletprocesspsbt...\")\n+        for m in range(self.M):\n+            signers_multisig = self.nodes[m].get_wallet_rpc(f\"{self.name}_{m}\")\n+            self._check_psbt(psbt[\"psbt\"], to, value, signers_multisig)\n+            signing_wallet = self.nodes[m].get_wallet_rpc(f\"participant_{m}\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r696353307",
      "id" : 696353307,
      "line" : 127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjM1MzMwNw==",
      "original_commit_id" : "1f20501efce041d34e63ab9a11359bedf4a82cd5",
      "original_line" : 127,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : 127,
      "pull_request_review_id" : 739096266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-02T07:27:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696353307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r696371347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696371347"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "To avoid address reuse you can also deactivate the descriptor. It won't generate any new addresses, but you will be still able to sign psbt with it.\r\n\r\nTo deactivate descriptor you need to re-import with setting `active: false`",
      "commit_id" : "e05cd0546a155afcd45c43ce730c4abecd40dfed",
      "created_at" : "2021-08-26T07:37:24Z",
      "diff_hunk" : "@@ -139,6 +139,32 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet.\n+     Avoid reusing this wallet for any other purpose. Hint: extract the wallet's xpubs using `listdescriptors`\n+     and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r696371347",
      "id" : 696371347,
      "line" : 150,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjM3MTM0Nw==",
      "original_commit_id" : "17dd6573008c8aca9fc0da9419225c85a4f94330",
      "original_line" : 150,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : 12,
      "pull_request_review_id" : 739096266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-02T07:27:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696371347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r696375004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696375004"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Especially here, but in general in steps 5-7, it's not clear which one of two wallets you need to use for which command.\r\n\r\nMaybe split step 6 into two and mention in the begging which wallet you need to use.\r\n\r\nP.S. not relevant if you have just one wallet",
      "commit_id" : "e05cd0546a155afcd45c43ce730c4abecd40dfed",
      "created_at" : "2021-08-26T07:42:21Z",
      "diff_hunk" : "@@ -139,6 +139,32 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet.\n+     Avoid reusing this wallet for any other purpose. Hint: extract the wallet's xpubs using `listdescriptors`\n+     and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses)\n+  2. Create a watch-only descriptor wallet (blank, private keys disabled). Now the multisig is created by importing the two descriptors:\n+     `wsh(sortedmulti(<M>,XPUB1/0/*,XPUB2/0/*,â¦,XPUBN/0/*))` and `wsh(sortedmulti(<M>,XPUB1/1/*,XPUB2/1/*,â¦,XPUBN/1/*))`\n+     (one descriptor w/ `0` for receiving addresses and another w/ `1` for change). Every participant does this\n+  3. A receiving address is generated for the multisig. As a check to ensure step 2 was done correctly, every participant\n+     should verify they get the same addresses\n+  4. Funds are sent to the resulting address\n+  5. A sending transaction is created using `walletcreatefundedpsbt` (anyone can initiate this). It is simple to do this in\n+     the GUI by going to the `Send` tab in the multisig wallet and creating an unsigned transaction (PSBT)\n+  6. At least `M` users check the PSBT with `decodepsbt` and (if OK) signs it with `walletprocesspsbt`. It is simple to do",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r696375004",
      "id" : 696375004,
      "line" : 159,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjM3NTAwNA==",
      "original_commit_id" : "17dd6573008c8aca9fc0da9419225c85a4f94330",
      "original_line" : 159,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : 21,
      "pull_request_review_id" : 739096266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-02T07:27:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696375004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r696378428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696378428"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: should add `_check_psbt` call as well?",
      "commit_id" : "e05cd0546a155afcd45c43ce730c4abecd40dfed",
      "created_at" : "2021-08-26T07:47:02Z",
      "diff_hunk" : "@@ -139,5 +139,21 @@ def run_test(self):\n         assert_approx(self.nodes[0].get_wallet_rpc(f\"{self.name}_{0}\").getbalance(), deposit_amount - value, vspan=0.001)\n         assert_equal(self.nodes[self.N - 1].get_wallet_rpc(f\"participant_{self.N - 1}\").getbalance(), value)\n \n+        self.log.info(\"Send another transaction from the multisig, this time with a daisy chained signing flow (one after another in series)!\")\n+        psbt = self.make_sending_transaction(to, value)\n+        for m in range(self.M):\n+            signing_wallet = self.nodes[m].get_wallet_rpc(f\"participant_{m}\")\n+            psbt = signing_wallet.walletprocesspsbt(psbt[\"psbt\"])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r696378428",
      "id" : 696378428,
      "line" : 146,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjM3ODQyOA==",
      "original_commit_id" : "e05cd0546a155afcd45c43ce730c4abecd40dfed",
      "original_line" : 146,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : 146,
      "pull_request_review_id" : 739096266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-02T07:27:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696378428",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Started review",
      "created_at" : "2021-08-26T07:59:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-906182636",
      "id" : 906182636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5842Az_s",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-26T07:59:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/906182636",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nReading through the documentation, it sounds good. Also rebased and ran the new test. Setting aside time later today to try and follow your documentation step by step and will post some feedback (if any)",
      "created_at" : "2021-09-01T06:51:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-909970312",
      "id" : 909970312,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5842PQuI",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-01T06:51:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909970312",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, very nice.",
      "created_at" : "2021-09-02T13:45:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-911701287",
      "id" : 911701287,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5842V3Un",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-02T13:45:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/911701287",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Functional test is nice addition.",
      "created_at" : "2021-09-02T15:48:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-911825975",
      "id" : 911825975,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5842WVw3",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-02T15:48:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/911825975",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r701926637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701926637"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I took this suggestion and added the improvement in https://github.com/bitcoin/bitcoin/pull/22067/commits/1f20501efce041d34e63ab9a11359bedf4a82cd5. Marking this resolved",
      "commit_id" : "e05cd0546a155afcd45c43ce730c4abecd40dfed",
      "created_at" : "2021-09-03T14:16:07Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.descriptors import descsum_create\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def _get_xpub(self, wallet):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh\"), wallet.listdescriptors()[\"descriptors\"]))\n+        return descriptor[\"desc\"].split(\"]\")[-1].split(\"/\")[0]\n+\n+    def _check_psbt(self, psbt, to, value, multisig):\n+        \"\"\"Helper method for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def generate_and_exchange_xpubs(self, participants):\n+        \"\"\"Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet. Avoid reusing this wallet for any other purpose..\"\"\"\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"participant_{i}\", descriptors=True)\n+            yield self._get_xpub(node.get_wallet_rpc(f\"participant_{i}\"))\n+\n+    def participants_import_descriptors(self, participants, xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        # some simple validation\n+        assert_equal(len(xpubs), self.N)\n+        # a sanity-check/assertion, this will throw if the base58 checksum of any of the provided xpubs are invalid\n+        for xpub in xpubs:\n+            base58_to_byte(xpub)\n+\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"{self.name}_{i}\", blank=True, descriptors=True, disable_private_keys=True)\n+            multisig = node.get_wallet_rpc(f\"{self.name}_{i}\")\n+            result = multisig.importdescriptors([\n+                {  # receiving addresses (internal: False)\n+                    \"desc\": descsum_create(f\"wsh(sortedmulti({self.M},{f'/{0}/*,'.join(xpubs)}/{0}/*))\"),\n+                    \"active\": True,\n+                    \"internal\": False,\n+                    \"timestamp\": \"now\",\n+                },\n+                {  # change addresses (internal: True)\n+                    \"desc\": descsum_create(f\"wsh(sortedmulti({self.M},{f'/{1}/*,'.join(xpubs)}/{1}/*))\"),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r701926637",
      "id" : 701926637,
      "in_reply_to_id" : 687385260,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTkyNjYzNw==",
      "original_commit_id" : "d1ce7bb4fb1f8cd929e23eae7aa9dd0862e938f2",
      "original_line" : 71,
      "original_position" : 71,
      "original_start_line" : 62,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : null,
      "pull_request_review_id" : 746156410,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-09-03T14:16:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701926637",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r702102887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702102887"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in f9479e4626f6b5126ff8cdab3a7e718c609429ef",
      "commit_id" : "9de0d94508828f5fdfaf688ccda5a91d38b32c58",
      "created_at" : "2021-09-03T18:50:36Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def _get_xpub(self, wallet):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh\"), wallet.listdescriptors()[\"descriptors\"]))\n+        return descriptor[\"desc\"].split(\"]\")[-1].split(\"/\")[0]\n+\n+    def _check_psbt(self, psbt, to, value, multisig):\n+        \"\"\"Helper method for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def generate_and_exchange_xpubs(self, participants):\n+        \"\"\"Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet. Avoid reusing this wallet for any other purpose..\"\"\"\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"participant_{i}\", descriptors=True)\n+            yield self._get_xpub(node.get_wallet_rpc(f\"participant_{i}\"))\n+\n+    def participants_import_descriptors(self, participants, xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        # some simple validation\n+        assert_equal(len(xpubs), self.N)\n+        # a sanity-check/assertion, this will throw if the base58 checksum of any of the provided xpubs are invalid\n+        for xpub in xpubs:\n+            base58_to_byte(xpub)\n+\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"{self.name}_{i}\", blank=True, descriptors=True, disable_private_keys=True)\n+            multisig = node.get_wallet_rpc(f\"{self.name}_{i}\")\n+            external = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/{0}/*,'.join(xpubs)}/{0}/*))\")\n+            internal = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/{1}/*,'.join(xpubs)}/{1}/*))\")\n+            result = multisig.importdescriptors([\n+                {  # receiving addresses (internal: False)\n+                    \"desc\": external[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": False,\n+                    \"timestamp\": \"now\",\n+                },\n+                {  # change addresses (internal: True)\n+                    \"desc\": internal[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": True,\n+                    \"timestamp\": \"now\",\n+                },\n+            ])\n+            assert all(r[\"success\"] for r in result)\n+\n+    def get_multisig_receiving_address(self):\n+        \"\"\"We will send funds to the resulting address (every participant should get the same addresses).\"\"\"\n+        multisig = self.nodes[0].get_wallet_rpc(f\"{self.name}_{0}\")\n+        receiving_address = multisig.getnewaddress()\n+        for i in range(1, self.N):\n+            assert_equal(receiving_address, self.nodes[i].get_wallet_rpc(f\"{self.name}_{i}\").getnewaddress())\n+        return receiving_address\n+\n+    def make_sending_transaction(self, to, value):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r702102887",
      "id" : 702102887,
      "in_reply_to_id" : 696342578,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjEwMjg4Nw==",
      "original_commit_id" : "1f20501efce041d34e63ab9a11359bedf4a82cd5",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : null,
      "pull_request_review_id" : 746392443,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-03T18:50:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702102887",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r702102933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702102933"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in f9479e4626f6b5126ff8cdab3a7e718c609429ef",
      "commit_id" : "9de0d94508828f5fdfaf688ccda5a91d38b32c58",
      "created_at" : "2021-09-03T18:50:43Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def _get_xpub(self, wallet):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh\"), wallet.listdescriptors()[\"descriptors\"]))\n+        return descriptor[\"desc\"].split(\"]\")[-1].split(\"/\")[0]\n+\n+    def _check_psbt(self, psbt, to, value, multisig):\n+        \"\"\"Helper method for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def generate_and_exchange_xpubs(self, participants):\n+        \"\"\"Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet. Avoid reusing this wallet for any other purpose..\"\"\"\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"participant_{i}\", descriptors=True)\n+            yield self._get_xpub(node.get_wallet_rpc(f\"participant_{i}\"))\n+\n+    def participants_import_descriptors(self, participants, xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        # some simple validation\n+        assert_equal(len(xpubs), self.N)\n+        # a sanity-check/assertion, this will throw if the base58 checksum of any of the provided xpubs are invalid\n+        for xpub in xpubs:\n+            base58_to_byte(xpub)\n+\n+        for i, node in enumerate(participants):\n+            node.createwallet(wallet_name=f\"{self.name}_{i}\", blank=True, descriptors=True, disable_private_keys=True)\n+            multisig = node.get_wallet_rpc(f\"{self.name}_{i}\")\n+            external = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/{0}/*,'.join(xpubs)}/{0}/*))\")\n+            internal = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/{1}/*,'.join(xpubs)}/{1}/*))\")\n+            result = multisig.importdescriptors([\n+                {  # receiving addresses (internal: False)\n+                    \"desc\": external[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": False,\n+                    \"timestamp\": \"now\",\n+                },\n+                {  # change addresses (internal: True)\n+                    \"desc\": internal[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": True,\n+                    \"timestamp\": \"now\",\n+                },\n+            ])\n+            assert all(r[\"success\"] for r in result)\n+\n+    def get_multisig_receiving_address(self):\n+        \"\"\"We will send funds to the resulting address (every participant should get the same addresses).\"\"\"\n+        multisig = self.nodes[0].get_wallet_rpc(f\"{self.name}_{0}\")\n+        receiving_address = multisig.getnewaddress()\n+        for i in range(1, self.N):\n+            assert_equal(receiving_address, self.nodes[i].get_wallet_rpc(f\"{self.name}_{i}\").getnewaddress())\n+        return receiving_address\n+\n+    def make_sending_transaction(self, to, value):\n+        \"\"\"Make a sending transaction, created using walletcreatefundedpsbt (anyone can initiate this).\"\"\"\n+        return self.nodes[0].get_wallet_rpc(f\"{self.name}_{0}\").walletcreatefundedpsbt(inputs=[], outputs={to: value}, options={\"feeRate\": 0.00010})\n+\n+    def run_test(self):\n+        self.M = 2\n+        self.N = self.num_nodes\n+        self.name = f\"{self.M}_of_{self.N}_multisig\"\n+        self.log.info(f\"Testing {self.name}...\")\n+\n+        self.log.info(\"Generate and exchange xpubs...\")\n+        xpubs = list(self.generate_and_exchange_xpubs(self.nodes))\n+\n+        self.log.info(\"Every participant imports the following descriptors to create the watch-only multisig...\")\n+        self.participants_import_descriptors(self.nodes, xpubs)\n+\n+        self.log.info(\"Get a mature utxo to send to the multisig...\")\n+        coordinator_wallet = self.nodes[0].get_wallet_rpc(f\"participant_{0}\")\n+        coordinator_wallet.generatetoaddress(101, coordinator_wallet.getnewaddress())\n+\n+        deposit_amount = 6.15\n+        multisig_receiving_address = self.get_multisig_receiving_address()\n+        self.log.info(\"Send funds to the resulting multisig receiving address...\")\n+        coordinator_wallet.sendtoaddress(multisig_receiving_address, deposit_amount)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        for n in range(self.N):\n+            assert_approx(self.nodes[n].get_wallet_rpc(f\"{self.name}_{n}\").getbalance(), deposit_amount, vspan=0.001)\n+\n+        self.log.info(\"Send a transaction from the multisig!\")\n+        to = self.nodes[self.N - 1].get_wallet_rpc(f\"participant_{self.N - 1}\").getnewaddress()\n+        value = 1\n+        psbt = self.make_sending_transaction(to, value)\n+\n+        psbts = []\n+        self.log.info(\"At least M users check the psbt with decodepsbt and (if OK) signs it with walletprocesspsbt...\")\n+        for m in range(self.M):\n+            signers_multisig = self.nodes[m].get_wallet_rpc(f\"{self.name}_{m}\")\n+            self._check_psbt(psbt[\"psbt\"], to, value, signers_multisig)\n+            signing_wallet = self.nodes[m].get_wallet_rpc(f\"participant_{m}\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r702102933",
      "id" : 702102933,
      "in_reply_to_id" : 696353307,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjEwMjkzMw==",
      "original_commit_id" : "1f20501efce041d34e63ab9a11359bedf4a82cd5",
      "original_line" : 127,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : null,
      "pull_request_review_id" : 746392516,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-03T18:50:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702102933",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r702103004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702103004"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in f9479e4626f6b5126ff8cdab3a7e718c609429ef",
      "commit_id" : "9de0d94508828f5fdfaf688ccda5a91d38b32c58",
      "created_at" : "2021-09-03T18:50:53Z",
      "diff_hunk" : "@@ -139,6 +139,32 @@ Key order does not matter for `sortedmulti()`. `sortedmulti()` behaves in the sa\n as `multi()` does but the keys are reordered in the resulting script such that they\n are lexicographically ordered as described in BIP67.\n \n+#### Basic multisig example\n+\n+For a good example of a basic M-of-N multisig between multiple participants using descriptor\n+wallets and PSBTs, as well as a signing flow, see [this functional test](/test/functional/wallet_multisig_descriptor_psbt.py).\n+The basic steps are:\n+\n+  1. Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet.\n+     Avoid reusing this wallet for any other purpose. Hint: extract the wallet's xpubs using `listdescriptors`\n+     and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses)\n+  2. Create a watch-only descriptor wallet (blank, private keys disabled). Now the multisig is created by importing the two descriptors:\n+     `wsh(sortedmulti(<M>,XPUB1/0/*,XPUB2/0/*,â¦,XPUBN/0/*))` and `wsh(sortedmulti(<M>,XPUB1/1/*,XPUB2/1/*,â¦,XPUBN/1/*))`\n+     (one descriptor w/ `0` for receiving addresses and another w/ `1` for change). Every participant does this\n+  3. A receiving address is generated for the multisig. As a check to ensure step 2 was done correctly, every participant\n+     should verify they get the same addresses\n+  4. Funds are sent to the resulting address\n+  5. A sending transaction is created using `walletcreatefundedpsbt` (anyone can initiate this). It is simple to do this in\n+     the GUI by going to the `Send` tab in the multisig wallet and creating an unsigned transaction (PSBT)\n+  6. At least `M` users check the PSBT with `decodepsbt` and (if OK) signs it with `walletprocesspsbt`. It is simple to do",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r702103004",
      "id" : 702103004,
      "in_reply_to_id" : 696375004,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjEwMzAwNA==",
      "original_commit_id" : "17dd6573008c8aca9fc0da9419225c85a4f94330",
      "original_line" : 159,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "doc/descriptors.md",
      "position" : null,
      "pull_request_review_id" : 746392620,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-03T18:50:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702103004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r702103040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702103040"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in f9479e4626f6b5126ff8cdab3a7e718c609429ef",
      "commit_id" : "9de0d94508828f5fdfaf688ccda5a91d38b32c58",
      "created_at" : "2021-09-03T18:50:59Z",
      "diff_hunk" : "@@ -139,5 +139,21 @@ def run_test(self):\n         assert_approx(self.nodes[0].get_wallet_rpc(f\"{self.name}_{0}\").getbalance(), deposit_amount - value, vspan=0.001)\n         assert_equal(self.nodes[self.N - 1].get_wallet_rpc(f\"participant_{self.N - 1}\").getbalance(), value)\n \n+        self.log.info(\"Send another transaction from the multisig, this time with a daisy chained signing flow (one after another in series)!\")\n+        psbt = self.make_sending_transaction(to, value)\n+        for m in range(self.M):\n+            signing_wallet = self.nodes[m].get_wallet_rpc(f\"participant_{m}\")\n+            psbt = signing_wallet.walletprocesspsbt(psbt[\"psbt\"])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r702103040",
      "id" : 702103040,
      "in_reply_to_id" : 696378428,
      "line" : 150,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjEwMzA0MA==",
      "original_commit_id" : "e05cd0546a155afcd45c43ce730c4abecd40dfed",
      "original_line" : 146,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : 150,
      "pull_request_review_id" : 746392662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-03T18:50:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702103040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@S3RK thank you for the review and great suggestions.\r\n\r\nBecause I feel this PR is already pretty far along and has a lot of reviews, I addressed your minor/refactor comments in an additional commit: f9479e4626f6b5126ff8cdab3a7e718c609429ef. I thought this made most sense, but I can squash it into 1f20501efce041d34e63ab9a11359bedf4a82cd5 (and the doc changes into 17dd6573008c8aca9fc0da9419225c85a4f94330) if I get some comments suggesting that'd be better.\r\n\r\nAs for your main concern:\r\n> Why not have just one wallet? Having two wallets is less intuitive, complicates backups and could lead to user confusion and even loss of funds. Especially taking into account that you need to backup both wallets to restore your funds. This doesn't come through the documentation.\r\n\r\nI think it's a great point. And your ideas on how to do this are really good. I have plans to add test coverage and capabilities to multsigs like this. And it's something I will try out and hopefully have a followup PR for. But for this PR I want to keep things as basic and simple as possible. Therefore I am shelving this (unless someone else gets to it first), but will def follow up (whether as an author or reviewer). For now though, I thought it was best (and good in general) to add a disclaimer in the docs: 9de0d94508828f5fdfaf688ccda5a91d38b32c58 highlighting some shortcomings of this basic example",
      "created_at" : "2021-09-03T18:56:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-912744722",
      "id" : 912744722,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5842Z2ES",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-03T18:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/912744722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@mjdietzx thanks for addressing my nits. \r\n\r\nThe rest is just my opinion and I don't know what other contributors think about it.\r\n\r\nI understand that you want to keep things simple, but we shouldn't sacrifice safety for it. The key problem is separation of multisig metadata (i.e. descriptor with other xpubs and derivation paths) and the keys. These things are pointless on their own and I'm not comfortable ACKing an approach where we separate them into two wallets. You can ignore the rest of my suggestions to disable descriptors or use temporary wallet to generate xprv. Agree, this is all icing on a cake.\r\n\r\nFrom user perspective one wallet is simpler than two. So I don't think workflow with one wallet will be overall more complicated than with two.\r\n\r\nHappy to help with implementation or advice.",
      "created_at" : "2021-09-16T16:20:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-921046020",
      "id" : 921046020,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII58425gwE",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-16T16:38:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/921046020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I think how it is done currently with 2 wallets is better for same reasons as described [here](https://github.com/bitcoin/bitcoin/pull/22822#issuecomment-923618566)",
      "created_at" : "2021-09-21T04:48:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-923621140",
      "id" : 923621140,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5843DVcU",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-21T04:48:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923621140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Rspigler that's a good argument. I need to think about it more and will come back with a reply",
      "created_at" : "2021-09-27T06:48:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-927580268",
      "id" : 927580268,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5843ScBs",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-27T06:48:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/927580268",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code review ACK 9de0d94. Rspigler's argument convinced me that we should leave the workflow with two wallets. I assume using multisig with external signers is a popular use-case and it's important to keep compatibility.\r\n\r\nEdit@laanwj: removed @ from ACK message for merge",
      "created_at" : "2021-10-07T07:20:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-937523555",
      "id" : 937523555,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII58434Xlj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937523555/reactions"
      },
      "updated_at" : "2021-10-18T14:16:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937523555",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1466284?v=4",
         "events_url" : "https://api.github.com/users/S3RK/events{/privacy}",
         "followers_url" : "https://api.github.com/users/S3RK/followers",
         "following_url" : "https://api.github.com/users/S3RK/following{/other_user}",
         "gists_url" : "https://api.github.com/users/S3RK/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/S3RK",
         "id" : 1466284,
         "login" : "S3RK",
         "node_id" : "MDQ6VXNlcjE0NjYyODQ=",
         "organizations_url" : "https://api.github.com/users/S3RK/orgs",
         "received_events_url" : "https://api.github.com/users/S3RK/received_events",
         "repos_url" : "https://api.github.com/users/S3RK/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/S3RK/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/S3RK/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/S3RK"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for adding this example, and the test. I was initially confused by the need to use two wallets but I understand it.\r\n\r\nCode and documentation review ACK 9de0d94508828f5fdfaf688ccda5a91d38b32c58\r\n",
      "created_at" : "2021-10-13T13:27:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-942307489",
      "id" : 942307489,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5844Knih",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/942307489/reactions"
      },
      "updated_at" : "2021-10-13T13:27:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/942307489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It looks some CI task fail: https://cirrus-ci.com/build/6343453790437376\r\n\r\nConflict with #23207?",
      "created_at" : "2021-10-18T19:50:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-946111161",
      "id" : 946111161,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5844ZIK5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946111161/reactions"
      },
      "updated_at" : "2021-10-18T19:53:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946111161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It looks some CI task fail: https://cirrus-ci.com/build/6343453790437376\r\n> \r\n> Conflict with #23207?\r\n\r\nShould be fixed in #23303.",
      "created_at" : "2021-10-18T21:07:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#issuecomment-946166939",
      "id" : 946166939,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22067",
      "node_id" : "IC_kwDOABII5844ZVyb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946166939/reactions"
      },
      "updated_at" : "2021-10-18T21:07:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946166939",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r744258501"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/744258501"
         }
      },
      "author_association" : "MEMBER",
      "body" : "typo: justs ==> just",
      "commit_id" : "9de0d94508828f5fdfaf688ccda5a91d38b32c58",
      "created_at" : "2021-11-07T13:27:39Z",
      "diff_hunk" : "@@ -0,0 +1,163 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test a basic M-of-N multisig setup between multiple people using descriptor wallets and PSBTs, as well as a signing flow.\n+\n+This is meant to be documentation as much as functional tests, so it is kept as simple and readable as possible.\n+\"\"\"\n+\n+from test_framework.address import base58_to_byte\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_equal,\n+)\n+\n+\n+class WalletMultisigDescriptorPSBTTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+        self.setup_clean_chain = True\n+        self.wallet_names = []\n+        self.extra_args = [[\"-keypool=100\"]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    @staticmethod\n+    def _get_xpub(wallet):\n+        \"\"\"Extract the wallet's xpubs using `listdescriptors` and pick the one from the `pkh` descriptor since it's least likely to be accidentally reused (legacy addresses).\"\"\"\n+        descriptor = next(filter(lambda d: d[\"desc\"].startswith(\"pkh\"), wallet.listdescriptors()[\"descriptors\"]))\n+        return descriptor[\"desc\"].split(\"]\")[-1].split(\"/\")[0]\n+\n+    @staticmethod\n+    def _check_psbt(psbt, to, value, multisig):\n+        \"\"\"Helper function for any of the N participants to check the psbt with decodepsbt and verify it is OK before signing.\"\"\"\n+        tx = multisig.decodepsbt(psbt)[\"tx\"]\n+        amount = 0\n+        for vout in tx[\"vout\"]:\n+            address = vout[\"scriptPubKey\"][\"address\"]\n+            assert_equal(multisig.getaddressinfo(address)[\"ischange\"], address != to)\n+            if address == to:\n+                amount += vout[\"value\"]\n+        assert_approx(amount, float(value), vspan=0.001)\n+\n+    def participants_create_multisigs(self, xpubs):\n+        \"\"\"The multisig is created by importing the following descriptors. The resulting wallet is watch-only and every participant can do this.\"\"\"\n+        # some simple validation\n+        assert_equal(len(xpubs), self.N)\n+        # a sanity-check/assertion, this will throw if the base58 checksum of any of the provided xpubs are invalid\n+        for xpub in xpubs:\n+            base58_to_byte(xpub)\n+\n+        for i, node in enumerate(self.nodes):\n+            node.createwallet(wallet_name=f\"{self.name}_{i}\", blank=True, descriptors=True, disable_private_keys=True)\n+            multisig = node.get_wallet_rpc(f\"{self.name}_{i}\")\n+            external = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/0/*,'.join(xpubs)}/0/*))\")\n+            internal = multisig.getdescriptorinfo(f\"wsh(sortedmulti({self.M},{f'/1/*,'.join(xpubs)}/1/*))\")\n+            result = multisig.importdescriptors([\n+                {  # receiving addresses (internal: False)\n+                    \"desc\": external[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": False,\n+                    \"timestamp\": \"now\",\n+                },\n+                {  # change addresses (internal: True)\n+                    \"desc\": internal[\"descriptor\"],\n+                    \"active\": True,\n+                    \"internal\": True,\n+                    \"timestamp\": \"now\",\n+                },\n+            ])\n+            assert all(r[\"success\"] for r in result)\n+            yield multisig\n+\n+    def run_test(self):\n+        self.M = 2\n+        self.N = self.num_nodes\n+        self.name = f\"{self.M}_of_{self.N}_multisig\"\n+        self.log.info(f\"Testing {self.name}...\")\n+\n+        participants = {\n+            # Every participant generates an xpub. The most straightforward way is to create a new descriptor wallet.\n+            # This wallet will be the participant's `signer` for the resulting multisig. Avoid reusing this wallet for any other purpose (for privacy reasons).\n+            \"signers\": [node.get_wallet_rpc(node.createwallet(wallet_name=f\"participant_{self.nodes.index(node)}\", descriptors=True)[\"name\"]) for node in self.nodes],\n+            # After participants generate and exchange their xpubs they will each create their own watch-only multisig.\n+            # Note: these multisigs are all the same, this justs highlights that each participant can independently verify everything on their own node.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22067#discussion_r744258501",
      "id" : 744258501,
      "line" : 88,
      "node_id" : "PRRC_kwDOABII584sXHvF",
      "original_commit_id" : "9de0d94508828f5fdfaf688ccda5a91d38b32c58",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "test/functional/wallet_multisig_descriptor_psbt.py",
      "position" : 88,
      "pull_request_review_id" : 799539777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22067",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/744258501/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-07T13:27:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/744258501",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   }
]
