[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636317357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636317357"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\nShowing recent P2P messages between our node and their node for a selected peer.\r\n```",
      "commit_id" : "92dc3a6fcdede09ea21d089ab7f89114d1e105aa",
      "created_at" : "2021-05-20T17:34:58Z",
      "diff_hunk" : "@@ -0,0 +1,206 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt\n+```\n+\n+Output\n+```\n+outbound 'ping' msg to peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'pong' msg from peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'inv' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+outbound 'getdata' msg to peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+inbound 'tx' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 222 bytes\n+outbound 'inv' msg to peer 9 (outbound-full-relay, faketorv3addressa2ufa6odvoi3s77j4uegey0xb10csyfyve2t33curbyd.onion:8333) with 37 bytes\n+outbound 'inv' msg to peer 7 (outbound-full-relay, XX.XX.XXX.242:8333) with 37 bytes\n+â¦\n+```\n+\n+### p2p_monitor.py\n+\n+A Python script using the wrapper around BCC and curses for an interactive P2P\n+message monitor. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+Inbound and outbound traffic is listed for each peer together with information\n+about the connection. Peers can be selected individually to view recent P2P\n+messages.\n+\n+```\n+$ python3 contrib/tracing/p2p_monitor.py ./src/bitcoind\n+```\n+\n+Lists selectable peers and traffic and connection information.\n+```\n+ P2P Message Monitor\n+ navigatate with UP/DOWN or J/K and select a peer with ENTER or SPACE to see individual P2P messages\n+\n+ PEER  OUTBOUND              INBOUND               TYPE                   ADDR\n+    0  46          398 byte  61      1407590 byte  block-relay-only       XX.XX.XXX.196:8333\n+   11  1156     253570 byte  3431    2394924 byte  outbound-full-relay    XXX.X.XX.179:8333\n+   13  3425    1809620 byte  1236     305458 byte  inbound                XXX.X.X.X:60380\n+   16  1046     241633 byte  1589    1199220 byte  outbound-full-relay    4faketorv2pbfu7x.onion:8333\n+   19  577      181679 byte  390      148951 byte  outbound-full-relay    kfake4vctorjv2o2.onion:8333\n+   20  11         1248 byte  13         1283 byte  block-relay-only       [2600:fake:64d9:b10c:4436:aaaa:fe:bb]:8333\n+   21  11         1248 byte  13         1299 byte  block-relay-only       XX.XXX.X.155:8333\n+   22  5           103 byte  1           102 byte  feeler                 XX.XX.XXX.173:8333\n+   23  11         1248 byte  12         1255 byte  block-relay-only       XX.XXX.XXX.220:8333\n+   24  3           103 byte  1           102 byte  feeler                 XXX.XXX.XXX.64:8333\n+â¦\n+```\n+\n+Showing recent P2P messages between our onde and their node for a selected peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636317357",
      "id" : 636317357,
      "line" : 108,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjMxNzM1Nw==",
      "original_commit_id" : "92dc3a6fcdede09ea21d089ab7f89114d1e105aa",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 108,
      "pull_request_review_id" : 664681203,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-20T17:34:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636317357",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nExcellent work! :)",
      "created_at" : "2021-05-20T19:36:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-845420275",
      "id" : 845420275,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTQyMDI3NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-20T19:36:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845420275",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Nice work!",
      "created_at" : "2021-05-20T21:03:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-845475291",
      "id" : 845475291,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTQ3NTI5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-20T21:03:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845475291",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Saw a live demo of this and it seems to be very cool.",
      "created_at" : "2021-05-21T09:21:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-845814113",
      "id" : 845814113,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NTgxNDExMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-21T09:30:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845814113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636773835"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636773835"
         }
      },
      "author_association" : "MEMBER",
      "body" : "perhaps omit \"their node for \"",
      "commit_id" : "92dc3a6fcdede09ea21d089ab7f89114d1e105aa",
      "created_at" : "2021-05-21T09:26:49Z",
      "diff_hunk" : "@@ -0,0 +1,206 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt\n+```\n+\n+Output\n+```\n+outbound 'ping' msg to peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'pong' msg from peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'inv' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+outbound 'getdata' msg to peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+inbound 'tx' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 222 bytes\n+outbound 'inv' msg to peer 9 (outbound-full-relay, faketorv3addressa2ufa6odvoi3s77j4uegey0xb10csyfyve2t33curbyd.onion:8333) with 37 bytes\n+outbound 'inv' msg to peer 7 (outbound-full-relay, XX.XX.XXX.242:8333) with 37 bytes\n+â¦\n+```\n+\n+### p2p_monitor.py\n+\n+A Python script using the wrapper around BCC and curses for an interactive P2P\n+message monitor. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+Inbound and outbound traffic is listed for each peer together with information\n+about the connection. Peers can be selected individually to view recent P2P\n+messages.\n+\n+```\n+$ python3 contrib/tracing/p2p_monitor.py ./src/bitcoind\n+```\n+\n+Lists selectable peers and traffic and connection information.\n+```\n+ P2P Message Monitor\n+ navigatate with UP/DOWN or J/K and select a peer with ENTER or SPACE to see individual P2P messages\n+\n+ PEER  OUTBOUND              INBOUND               TYPE                   ADDR\n+    0  46          398 byte  61      1407590 byte  block-relay-only       XX.XX.XXX.196:8333\n+   11  1156     253570 byte  3431    2394924 byte  outbound-full-relay    XXX.X.XX.179:8333\n+   13  3425    1809620 byte  1236     305458 byte  inbound                XXX.X.X.X:60380\n+   16  1046     241633 byte  1589    1199220 byte  outbound-full-relay    4faketorv2pbfu7x.onion:8333\n+   19  577      181679 byte  390      148951 byte  outbound-full-relay    kfake4vctorjv2o2.onion:8333\n+   20  11         1248 byte  13         1283 byte  block-relay-only       [2600:fake:64d9:b10c:4436:aaaa:fe:bb]:8333\n+   21  11         1248 byte  13         1299 byte  block-relay-only       XX.XXX.X.155:8333\n+   22  5           103 byte  1           102 byte  feeler                 XX.XX.XXX.173:8333\n+   23  11         1248 byte  12         1255 byte  block-relay-only       XX.XXX.XXX.220:8333\n+   24  3           103 byte  1           102 byte  feeler                 XXX.XXX.XXX.64:8333\n+â¦\n+```\n+\n+Showing recent P2P messages between our onde and their node for a selected peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636773835",
      "id" : 636773835,
      "in_reply_to_id" : 636317357,
      "line" : 108,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjc3MzgzNQ==",
      "original_commit_id" : "92dc3a6fcdede09ea21d089ab7f89114d1e105aa",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 108,
      "pull_request_review_id" : 665268373,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-21T09:27:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636773835",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636774448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636774448"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/THEIR NODE/PEER/",
      "commit_id" : "92dc3a6fcdede09ea21d089ab7f89114d1e105aa",
      "created_at" : "2021-05-21T09:27:46Z",
      "diff_hunk" : "@@ -43,3 +43,88 @@ example, to point to release builds if needed. See the\n kernel VM. This means the bpftrace and BCC examples must be executed with root\n privileges. Make sure to carefully review any scripts that you run with root\n privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt\n+```\n+\n+Output\n+```\n+outbound 'ping' msg to peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'pong' msg from peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'inv' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+outbound 'getdata' msg to peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+inbound 'tx' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 222 bytes\n+outbound 'inv' msg to peer 9 (outbound-full-relay, faketorv3addressa2ufa6odvoi3s77j4uegey0xb10csyfyve2t33curbyd.onion:8333) with 37 bytes\n+outbound 'inv' msg to peer 7 (outbound-full-relay, XX.XX.XXX.242:8333) with 37 bytes\n+â¦\n+```\n+\n+### p2p_monitor.py\n+\n+A Python script using the wrapper around BCC and curses for an interactive P2P\n+message monitor. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+Inbound and outbound traffic is listed for each peer together with information\n+about the connection. Peers can be selected individually to view recent P2P\n+messages.\n+\n+```\n+$ python3 contrib/tracing/p2p_monitor.py ./src/bitcoind\n+```\n+\n+Lists selectable peers and traffic and connection information.\n+```\n+ P2P Message Monitor\n+ navigatate with UP/DOWN or J/K and select a peer with ENTER or SPACE to see individual P2P messages\n+\n+ PEER  OUTBOUND              INBOUND               TYPE                   ADDR\n+    0  46          398 byte  61      1407590 byte  block-relay-only       XX.XX.XXX.196:8333\n+   11  1156     253570 byte  3431    2394924 byte  outbound-full-relay    XXX.X.XX.179:8333\n+   13  3425    1809620 byte  1236     305458 byte  inbound                XXX.X.X.X:60380\n+   16  1046     241633 byte  1589    1199220 byte  outbound-full-relay    4faketorv2pbfu7x.onion:8333\n+   19  577      181679 byte  390      148951 byte  outbound-full-relay    kfake4vctorjv2o2.onion:8333\n+   20  11         1248 byte  13         1283 byte  block-relay-only       [2600:fake:64d9:b10c:4436:aaaa:fe:bb]:8333\n+   21  11         1248 byte  13         1299 byte  block-relay-only       XX.XXX.X.155:8333\n+   22  5           103 byte  1           102 byte  feeler                 XX.XX.XXX.173:8333\n+   23  11         1248 byte  12         1255 byte  block-relay-only       XX.XXX.XXX.220:8333\n+   24  3           103 byte  1           102 byte  feeler                 XXX.XXX.XXX.64:8333\n+â¦\n+```\n+\n+Showing recent P2P messages between our onde and their node for a selected peer.\n+\n+```\n+    ----------------------------------------------------------------------\n+    |                PEER 16 (4faketorv2pbfu7x.onion:8333)               |\n+    | OUR NODE              outbound-full-relay               THEIR NODE |",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636774448",
      "id" : 636774448,
      "line" : 113,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjc3NDQ0OA==",
      "original_commit_id" : "3ca502d16c53717d6901d210d51e5e2e769c9f74",
      "original_line" : 113,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 113,
      "pull_request_review_id" : 665269195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-21T09:27:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636774448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636775863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636775863"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Wishlist: this for disconnection and eviction events, with the message, connection direction and type, peer id and address, network the peer connected through. ",
      "commit_id" : "cdb400564084c57130bed4edb80b8d6b7e786f0c",
      "created_at" : "2021-05-21T09:29:44Z",
      "diff_hunk" : "@@ -43,3 +43,88 @@ example, to point to release builds if needed. See the\n kernel VM. This means the bpftrace and BCC examples must be executed with root\n privileges. Make sure to carefully review any scripts that you run with root\n privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636775863",
      "id" : 636775863,
      "line" : 50,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjc3NTg2Mw==",
      "original_commit_id" : "3ca502d16c53717d6901d210d51e5e2e769c9f74",
      "original_line" : 50,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 50,
      "pull_request_review_id" : 665271067,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-21T10:20:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636775863",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636791861"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636791861"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree! We discussed something similar in https://github.com/bitcoin/bitcoin/issues/20981#issuecomment-766096054 too. Thanks for the input on the arguments! I'll resolve this in favor of https://github.com/bitcoin/bitcoin/issues/20981#issuecomment-845833323 :)\r\n\r\n ",
      "commit_id" : "92dc3a6fcdede09ea21d089ab7f89114d1e105aa",
      "created_at" : "2021-05-21T09:54:30Z",
      "diff_hunk" : "@@ -43,3 +43,88 @@ example, to point to release builds if needed. See the\n kernel VM. This means the bpftrace and BCC examples must be executed with root\n privileges. Make sure to carefully review any scripts that you run with root\n privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636791861",
      "id" : 636791861,
      "in_reply_to_id" : 636775863,
      "line" : 50,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjc5MTg2MQ==",
      "original_commit_id" : "3ca502d16c53717d6901d210d51e5e2e769c9f74",
      "original_line" : 50,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 50,
      "pull_request_review_id" : 665292493,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-21T09:54:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636791861",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636805329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636805329"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do we need to sanitize this? the message types for all outgoing messages are hardcoded in our binary so should all be safe.",
      "commit_id" : "cdb400564084c57130bed4edb80b8d6b7e786f0c",
      "created_at" : "2021-05-21T10:16:38Z",
      "diff_hunk" : "@@ -2959,11 +2960,21 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n-    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId());\n+    auto sanitizedType = SanitizeString(msg.m_type);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636805329",
      "id" : 636805329,
      "line" : 2963,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjgwNTMyOQ==",
      "original_commit_id" : "92dc3a6fcdede09ea21d089ab7f89114d1e105aa",
      "original_line" : 2963,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 13,
      "pull_request_review_id" : 665310332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-21T10:17:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636805329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636814198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636814198"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done, thanks!",
      "commit_id" : "cdb400564084c57130bed4edb80b8d6b7e786f0c",
      "created_at" : "2021-05-21T10:32:12Z",
      "diff_hunk" : "@@ -43,3 +43,88 @@ example, to point to release builds if needed. See the\n kernel VM. This means the bpftrace and BCC examples must be executed with root\n privileges. Make sure to carefully review any scripts that you run with root\n privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt\n+```\n+\n+Output\n+```\n+outbound 'ping' msg to peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'pong' msg from peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'inv' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+outbound 'getdata' msg to peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+inbound 'tx' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 222 bytes\n+outbound 'inv' msg to peer 9 (outbound-full-relay, faketorv3addressa2ufa6odvoi3s77j4uegey0xb10csyfyve2t33curbyd.onion:8333) with 37 bytes\n+outbound 'inv' msg to peer 7 (outbound-full-relay, XX.XX.XXX.242:8333) with 37 bytes\n+â¦\n+```\n+\n+### p2p_monitor.py\n+\n+A Python script using the wrapper around BCC and curses for an interactive P2P\n+message monitor. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+Inbound and outbound traffic is listed for each peer together with information\n+about the connection. Peers can be selected individually to view recent P2P\n+messages.\n+\n+```\n+$ python3 contrib/tracing/p2p_monitor.py ./src/bitcoind\n+```\n+\n+Lists selectable peers and traffic and connection information.\n+```\n+ P2P Message Monitor\n+ navigatate with UP/DOWN or J/K and select a peer with ENTER or SPACE to see individual P2P messages\n+\n+ PEER  OUTBOUND              INBOUND               TYPE                   ADDR\n+    0  46          398 byte  61      1407590 byte  block-relay-only       XX.XX.XXX.196:8333\n+   11  1156     253570 byte  3431    2394924 byte  outbound-full-relay    XXX.X.XX.179:8333\n+   13  3425    1809620 byte  1236     305458 byte  inbound                XXX.X.X.X:60380\n+   16  1046     241633 byte  1589    1199220 byte  outbound-full-relay    4faketorv2pbfu7x.onion:8333\n+   19  577      181679 byte  390      148951 byte  outbound-full-relay    kfake4vctorjv2o2.onion:8333\n+   20  11         1248 byte  13         1283 byte  block-relay-only       [2600:fake:64d9:b10c:4436:aaaa:fe:bb]:8333\n+   21  11         1248 byte  13         1299 byte  block-relay-only       XX.XXX.X.155:8333\n+   22  5           103 byte  1           102 byte  feeler                 XX.XX.XXX.173:8333\n+   23  11         1248 byte  12         1255 byte  block-relay-only       XX.XXX.XXX.220:8333\n+   24  3           103 byte  1           102 byte  feeler                 XXX.XXX.XXX.64:8333\n+â¦\n+```\n+\n+Showing recent P2P messages between our onde and their node for a selected peer.\n+\n+```\n+    ----------------------------------------------------------------------\n+    |                PEER 16 (4faketorv2pbfu7x.onion:8333)               |\n+    | OUR NODE              outbound-full-relay               THEIR NODE |",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636814198",
      "id" : 636814198,
      "in_reply_to_id" : 636774448,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjgxNDE5OA==",
      "original_commit_id" : "3ca502d16c53717d6901d210d51e5e2e769c9f74",
      "original_line" : 113,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : null,
      "pull_request_review_id" : 665322214,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-21T10:32:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636814198",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636814363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636814363"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done both, thanks!",
      "commit_id" : "cdb400564084c57130bed4edb80b8d6b7e786f0c",
      "created_at" : "2021-05-21T10:32:33Z",
      "diff_hunk" : "@@ -0,0 +1,206 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt\n+```\n+\n+Output\n+```\n+outbound 'ping' msg to peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'pong' msg from peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'inv' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+outbound 'getdata' msg to peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+inbound 'tx' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 222 bytes\n+outbound 'inv' msg to peer 9 (outbound-full-relay, faketorv3addressa2ufa6odvoi3s77j4uegey0xb10csyfyve2t33curbyd.onion:8333) with 37 bytes\n+outbound 'inv' msg to peer 7 (outbound-full-relay, XX.XX.XXX.242:8333) with 37 bytes\n+â¦\n+```\n+\n+### p2p_monitor.py\n+\n+A Python script using the wrapper around BCC and curses for an interactive P2P\n+message monitor. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+Inbound and outbound traffic is listed for each peer together with information\n+about the connection. Peers can be selected individually to view recent P2P\n+messages.\n+\n+```\n+$ python3 contrib/tracing/p2p_monitor.py ./src/bitcoind\n+```\n+\n+Lists selectable peers and traffic and connection information.\n+```\n+ P2P Message Monitor\n+ navigatate with UP/DOWN or J/K and select a peer with ENTER or SPACE to see individual P2P messages\n+\n+ PEER  OUTBOUND              INBOUND               TYPE                   ADDR\n+    0  46          398 byte  61      1407590 byte  block-relay-only       XX.XX.XXX.196:8333\n+   11  1156     253570 byte  3431    2394924 byte  outbound-full-relay    XXX.X.XX.179:8333\n+   13  3425    1809620 byte  1236     305458 byte  inbound                XXX.X.X.X:60380\n+   16  1046     241633 byte  1589    1199220 byte  outbound-full-relay    4faketorv2pbfu7x.onion:8333\n+   19  577      181679 byte  390      148951 byte  outbound-full-relay    kfake4vctorjv2o2.onion:8333\n+   20  11         1248 byte  13         1283 byte  block-relay-only       [2600:fake:64d9:b10c:4436:aaaa:fe:bb]:8333\n+   21  11         1248 byte  13         1299 byte  block-relay-only       XX.XXX.X.155:8333\n+   22  5           103 byte  1           102 byte  feeler                 XX.XX.XXX.173:8333\n+   23  11         1248 byte  12         1255 byte  block-relay-only       XX.XXX.XXX.220:8333\n+   24  3           103 byte  1           102 byte  feeler                 XXX.XXX.XXX.64:8333\n+â¦\n+```\n+\n+Showing recent P2P messages between our onde and their node for a selected peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636814363",
      "id" : 636814363,
      "in_reply_to_id" : 636317357,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjgxNDM2Mw==",
      "original_commit_id" : "92dc3a6fcdede09ea21d089ab7f89114d1e105aa",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : null,
      "pull_request_review_id" : 665322468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-21T10:32:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/636814363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r637377827"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637377827"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n1. The tracing script compiles the eBPF code and loads the eBFP program into a kernel VM\r\n```",
      "commit_id" : "cdb400564084c57130bed4edb80b8d6b7e786f0c",
      "created_at" : "2021-05-22T09:06:06Z",
      "diff_hunk" : "@@ -0,0 +1,263 @@\n+# User-space, Statically Defined Tracing (USDT) for Bitcoin Core\n+\n+Bitcoin Core includes statically defined tracepoints to allow for more\n+observability during development, debugging, code review, and production usage.\n+These tracepoints make it possible to keep track of custom statistics and\n+enable detailed monitoring of otherwise hidden internals. They have\n+little to no performance impact when unused.\n+\n+```\n+eBFP and USDT Overview\n+======================\n+\n+                ââââââââââââââââââââ            ââââââââââââââââ\n+                â tracing script   â            â bitcoind     â\n+                â==================â      2.    â==============â\n+                â  eBPF  â tracing â      hooks â              â\n+                â  code  â logic   â      intoâââ¤âºtracepoint 1ââ¼ââââ 3.\n+                ââââââ¬ââââ´âââ²âââââââ          âââ¤âºtracepoint 2 â   â pass args\n+            1.       â      â 4.              â â ...          â   â to eBPF\n+    User    compiles â      â pass data to    â ââââââââââââââââ   â program\n+    Space    & loads â      â tracing script  â                    â\n+    ââââââââââââââââââ¼âââââââ¼ââââââââââââââââââ¼âââââââââââââââââââââ¼âââ\n+    Kernel           â      â                 â                    â\n+    Space       ââââ¬ââ¼âââââââ´ââââââââââââââââââ´âââââââââââââ       â\n+                â  â  eBPF program                         âââââââââ\n+                â  âââââââââââââââââââââââââââââââââââââââââ¤\n+                â eBPF kernel Virtual Machine (sandboxed)  â\n+                ââââââââââââââââââââââââââââââââââââââââââââ\n+\n+1. The tracing script complies the eBPF code and loads the eBFP program into a kernel VM",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r637377827",
      "id" : 637377827,
      "line" : 30,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzM3NzgyNw==",
      "original_commit_id" : "cdb400564084c57130bed4edb80b8d6b7e786f0c",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "doc/tracing.md",
      "position" : 30,
      "pull_request_review_id" : 666166119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-22T09:06:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637377827",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "We'll cover this PR in the PR Review Club this Wednesday (May, 26th).\r\n\r\nhttps://bitcoincore.reviews/22006",
      "created_at" : "2021-05-24T07:13:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-846820444",
      "id" : 846820444,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NjgyMDQ0NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-24T07:13:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/846820444",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r637818198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637818198"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree, will remove it from the tracepoint and logging.",
      "commit_id" : "84eed31cb84d0b44a943783917be1e7b9545a3a7",
      "created_at" : "2021-05-24T09:37:02Z",
      "diff_hunk" : "@@ -2959,11 +2960,21 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n-    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId());\n+    auto sanitizedType = SanitizeString(msg.m_type);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r637818198",
      "id" : 637818198,
      "in_reply_to_id" : 636805329,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzgxODE5OA==",
      "original_commit_id" : "92dc3a6fcdede09ea21d089ab7f89114d1e105aa",
      "original_line" : 2963,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 666566662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-24T09:37:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/637818198",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I added an example (`log_raw_p2p_msgs.py`) showcasing and documenting some USDT and eBPF limitations. Tracing P2P messages was one of the motivations for USDT in https://github.com/bitcoin/bitcoin/pull/19866 as an potential alternative to https://github.com/bitcoin/bitcoin/pull/19509. Some P2P messages like `tx` and `block` can be larger than the maximum allocation size of 32kb in eBPF. This means, we can't submit the complete P2P message to tracing scripts from the eBPF VM. Smaller messages aren't a problem. Larger messages are cut off after about 32kb in the `log_raw_p2p_msgs.py` example and a warning is printed.\r\n\r\nSomething to be aware of when adding tracepoints and developing tracing scripts.\r\n\r\n ",
      "created_at" : "2021-05-24T14:28:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-847080691",
      "id" : 847080691,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NzA4MDY5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-24T14:28:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847080691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Impressive work! Thanks for getting back to this.\r\n\r\n>  How to use these tracepoints under macOS?\r\n\r\nFWIW I think it's ok to keep this out of the scope of this PR. Can extend this later. Let's focus on Linux first.\r\n\r\n> Release builds with USDT support?\r\n\r\nSame for this. I think it's a no-brainier to have these probes in the release builds eventually, but no need to do so here. Mind that currently we have a duplicate build system (guix and gitian) and the focus for 0.22 (which is not that far away!) is ironing out issues for the guix build, as well as trying to do a guix build for the release. This is a temporary situation that complicates adding anything.\r\n\r\n> Should and can the tracepoints be automatically tested?\r\n\r\nI'd say \"yes\". These are meant to be a documented and semi-stable APIs, and APIs not covered by tests tend to code rot over time.",
      "created_at" : "2021-05-25T08:26:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-847665065",
      "id" : 847665065,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NzY2NTA2NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-25T08:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847665065",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r638762267"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638762267"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "although this is convenient, it does use up a valuable argument slot. we could achieve the same thing with a uprobe:\r\n\r\n```bpftrace\r\nuprobe:bitcoind:\"CChainState::ConnectBlock(CBlock const&, BlockValidationState&, CBlockIndex*, CCoinsViewCache&, CChainParams const&, bool)\" \r\n{ \r\n    @connect_start = nsecs;\r\n}\r\n\r\nusdt:bitcoind:validation:block_connected\r\n{\r\n    @t = nsecs - @connect_start;\r\n}\r\n```\r\n\r\n(untested)\r\n\r\nalternatively if we want a more stable interface we could just stick a usdt at the start as well.",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-25T12:57:46Z",
      "diff_hunk" : "@@ -1975,6 +1976,16 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n     LogPrint(BCLog::BENCH, \"    - Callbacks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime6 - nTime5), nTimeCallbacks * MICRO, nTimeCallbacks * MILLI / nBlocksTotal);\n \n+    TRACE7(validation, block_connected,\n+        block.GetHash().ToString().c_str(),\n+        pindex->nHeight,\n+        block.vtx.size(),\n+        nInputs,\n+        nSigOpsCost,\n+        GetTimeMicros() - nTimeStart, // in microseconds (Âµs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r638762267",
      "id" : 638762267,
      "line" : 1985,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODc2MjI2Nw==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 1985,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 18,
      "pull_request_review_id" : 667791497,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T12:59:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638762267",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r638775357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638775357"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's probably fine in this case, but we should avoid passing formatted data to USDTs when we can format it on the bpf side for performance reasons, especially in tight loops. It looks like we're already passing `GetHash().data()`, can we format this on the ebpf side? I remember having trouble doing this in bpftrace, but perhaps that's a temporary issue until bpftrace gets better buffer formatting.",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-25T13:14:16Z",
      "diff_hunk" : "@@ -1975,6 +1976,16 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n     LogPrint(BCLog::BENCH, \"    - Callbacks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime6 - nTime5), nTimeCallbacks * MICRO, nTimeCallbacks * MILLI / nBlocksTotal);\n \n+    TRACE7(validation, block_connected,\n+        block.GetHash().ToString().c_str(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r638775357",
      "id" : 638775357,
      "line" : 1980,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODc3NTM1Nw==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 1980,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 13,
      "pull_request_review_id" : 667809769,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T13:14:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638775357",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639432479"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639432479"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `user space` at the end. ",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T06:23:11Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+\"\"\" Demonstration of eBPF limitations and the effect on USDT with the\n+    net:inbound_message and net:outbound_message tracepoints. \"\"\"\n+\n+# This script shows a limitation of eBPF when data larger than 32kb is passed to\n+# user-space. It uses BCC (https://github.com/iovisor/bcc) to load a sandboxed\n+# eBPF program into the Linux kernel (root privileges are required). The eBPF\n+# program attaches to two statically defined tracepoints. The tracepoint\n+# 'net:inbound_message' is called when a new P2P message is received, and\n+# 'net:outbound_message' is called on outbound P2P messages. The eBPF program\n+# submits the P2P messages to this script via a BPF ring buffer. The submitted\n+# messages are printed.\n+\n+# eBPF Limitations:\n+#\n+# Bitcoin P2P messages can be larger than 32kb (e.g tx, block, ...). The eBFP\n+# VM's stack is limited to 512 bytes, and we can't allocate more than about 32kb\n+# for a P2P message in the eBPF VM. The message data is cut off when the message\n+# is larger than MAX_MSG_DATA_LENGTH (see definition below). This can be detected\n+# in user-space by comparing the data length to the message length variable. The\n+# message is cut off when the data length is smaller than the message length.\n+# A warning is included with the printed message data.\n+#\n+# Data is submitted to user-space (i.e. to this script) via a ring buffer. The\n+# throughput of the ring buffer is limited. Each p2p_message is about 32kb in\n+# size. In- or outbound messages submitted to the ring buffer in rapid\n+# succession fill the ring buffer faster than it can be read. Some messages are\n+# lost.\n+#\n+# BCC prints: \"Possibly lost 2 samples\" on lost messages.\n+\n+import sys\n+from bcc import BPF, USDT\n+\n+# BCC: The C program to be compiled to an eBPF program (by BCC) and loaded into\n+# a sandboxed Linux kernel VM.\n+program = \"\"\"\n+#include <uapi/linux/ptrace.h>\n+\n+#define MIN(a,b) ({ __typeof__ (a) _a = (a); __typeof__ (b) _b = (b); _a < _b ? _a : _b; })\n+\n+// Maximum possible allocation size\n+// from include/linux/percpu.h in the Linux kernel\n+#define PCPU_MIN_UNIT_SIZE (32 << 10)\n+\n+// Tor v3 addresses are 62 chars + 6 chars for the port (':12345').\n+#define MAX_PEER_ADDR_LENGTH 62 + 6\n+#define MAX_PEER_CONN_TYPE_LENGTH 20\n+#define MAX_MSG_TYPE_LENGTH 20\n+#define MAX_MSG_DATA_LENGTH PCPU_MIN_UNIT_SIZE - 200\n+\n+struct p2p_message\n+{\n+    u64     peer_id;\n+    char    peer_addr[MAX_PEER_ADDR_LENGTH];\n+    char    peer_conn_type[MAX_PEER_CONN_TYPE_LENGTH];\n+    char    msg_type[MAX_MSG_TYPE_LENGTH];\n+    u64     msg_size;\n+    u8      msg[MAX_MSG_DATA_LENGTH];\n+};\n+\n+// We can't store the p2p_message struct on the eBPF stack as it is limited to\n+// 512 bytes and P2P message can be bigger than 512 bytes. However, we can use\n+// an BPF-array with a length of 1 to allocate up to 32768 bytes (this is\n+// defined by PCPU_MIN_UNIT_SIZE in include/linux/percpu.h in the Linux kernel).\n+// Also see https://github.com/iovisor/bcc/issues/2306\n+BPF_ARRAY(msg_arr, struct p2p_message, 1);\n+\n+// Two BPF perf buffers for pushing data (here P2P messages) to user -pace.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639432479",
      "id" : 639432479,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTQzMjQ3OQ==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 70,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "contrib/tracing/log_raw_p2p_msgs.py",
      "position" : 70,
      "pull_request_review_id" : 668633889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T18:03:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639432479",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639434474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639434474"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this should be `../../doc/tracing.md`. ",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T06:27:31Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639434474",
      "id" : 639434474,
      "line" : 8,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTQzNDQ3NA==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 8,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 8,
      "pull_request_review_id" : 668633889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T18:03:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639434474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639477281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639477281"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Little confused here, are we returning on `NULL` or `not NULL`? ",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T07:41:45Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+\"\"\" Demonstration of eBPF limitations and the effect on USDT with the\n+    net:inbound_message and net:outbound_message tracepoints. \"\"\"\n+\n+# This script shows a limitation of eBPF when data larger than 32kb is passed to\n+# user-space. It uses BCC (https://github.com/iovisor/bcc) to load a sandboxed\n+# eBPF program into the Linux kernel (root privileges are required). The eBPF\n+# program attaches to two statically defined tracepoints. The tracepoint\n+# 'net:inbound_message' is called when a new P2P message is received, and\n+# 'net:outbound_message' is called on outbound P2P messages. The eBPF program\n+# submits the P2P messages to this script via a BPF ring buffer. The submitted\n+# messages are printed.\n+\n+# eBPF Limitations:\n+#\n+# Bitcoin P2P messages can be larger than 32kb (e.g tx, block, ...). The eBFP\n+# VM's stack is limited to 512 bytes, and we can't allocate more than about 32kb\n+# for a P2P message in the eBPF VM. The message data is cut off when the message\n+# is larger than MAX_MSG_DATA_LENGTH (see definition below). This can be detected\n+# in user-space by comparing the data length to the message length variable. The\n+# message is cut off when the data length is smaller than the message length.\n+# A warning is included with the printed message data.\n+#\n+# Data is submitted to user-space (i.e. to this script) via a ring buffer. The\n+# throughput of the ring buffer is limited. Each p2p_message is about 32kb in\n+# size. In- or outbound messages submitted to the ring buffer in rapid\n+# succession fill the ring buffer faster than it can be read. Some messages are\n+# lost.\n+#\n+# BCC prints: \"Possibly lost 2 samples\" on lost messages.\n+\n+import sys\n+from bcc import BPF, USDT\n+\n+# BCC: The C program to be compiled to an eBPF program (by BCC) and loaded into\n+# a sandboxed Linux kernel VM.\n+program = \"\"\"\n+#include <uapi/linux/ptrace.h>\n+\n+#define MIN(a,b) ({ __typeof__ (a) _a = (a); __typeof__ (b) _b = (b); _a < _b ? _a : _b; })\n+\n+// Maximum possible allocation size\n+// from include/linux/percpu.h in the Linux kernel\n+#define PCPU_MIN_UNIT_SIZE (32 << 10)\n+\n+// Tor v3 addresses are 62 chars + 6 chars for the port (':12345').\n+#define MAX_PEER_ADDR_LENGTH 62 + 6\n+#define MAX_PEER_CONN_TYPE_LENGTH 20\n+#define MAX_MSG_TYPE_LENGTH 20\n+#define MAX_MSG_DATA_LENGTH PCPU_MIN_UNIT_SIZE - 200\n+\n+struct p2p_message\n+{\n+    u64     peer_id;\n+    char    peer_addr[MAX_PEER_ADDR_LENGTH];\n+    char    peer_conn_type[MAX_PEER_CONN_TYPE_LENGTH];\n+    char    msg_type[MAX_MSG_TYPE_LENGTH];\n+    u64     msg_size;\n+    u8      msg[MAX_MSG_DATA_LENGTH];\n+};\n+\n+// We can't store the p2p_message struct on the eBPF stack as it is limited to\n+// 512 bytes and P2P message can be bigger than 512 bytes. However, we can use\n+// an BPF-array with a length of 1 to allocate up to 32768 bytes (this is\n+// defined by PCPU_MIN_UNIT_SIZE in include/linux/percpu.h in the Linux kernel).\n+// Also see https://github.com/iovisor/bcc/issues/2306\n+BPF_ARRAY(msg_arr, struct p2p_message, 1);\n+\n+// Two BPF perf buffers for pushing data (here P2P messages) to user -pace.\n+BPF_PERF_OUTPUT(inbound_messages);\n+BPF_PERF_OUTPUT(outbound_messages);\n+\n+int trace_inbound_message(struct pt_regs *ctx) {\n+    int idx = 0;\n+    struct p2p_message *msg = msg_arr.lookup(&idx);\n+\n+    bpf_trace_printk(\"inbound!\\\\n\");\n+\n+    // lookup() might not set the pointer `msg` to NULL. Thus, the BPF-verifier\n+    // requires that we check that `msg` is a NULL pointer.\n+    if (msg == NULL) {\n+        bpf_trace_printk(\"not NULL\\\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639477281",
      "id" : 639477281,
      "line" : 83,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTQ3NzI4MQ==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 83,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "contrib/tracing/log_raw_p2p_msgs.py",
      "position" : 83,
      "pull_request_review_id" : 668633889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T18:03:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639477281",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639620734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639620734"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree, ideally we'd only pass the `GetHash().data()` as first argument.\r\n\r\n>  It looks like we're already passing GetHash().data(), can we format this on the ebpf side? I remember having trouble doing this in bpftrace, but perhaps that's a temporary issue until bpftrace gets better buffer formatting.\r\n\r\nRight, the current `%r` printf formatting for buffers in bpftrace isn't suitable for printing header hashes and txids. Adding a new formatting function to bfptrace similar to [this](https://github.com/iovisor/bpftrace/pull/1107/commits/043975141c341d2f64beaef4a99b5f2c0fbfed16#diff-e5786da510ae17c4e629faa5583e79a5f37636702844b066763fba287aa44317R829-R845)  as added in https://github.com/iovisor/bpftrace/pull/1107 doesn't look to hard. However, the block hashes and txids would still be in little-endian.",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T11:03:33Z",
      "diff_hunk" : "@@ -1975,6 +1976,16 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n     LogPrint(BCLog::BENCH, \"    - Callbacks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime6 - nTime5), nTimeCallbacks * MICRO, nTimeCallbacks * MILLI / nBlocksTotal);\n \n+    TRACE7(validation, block_connected,\n+        block.GetHash().ToString().c_str(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639620734",
      "id" : 639620734,
      "in_reply_to_id" : 638775357,
      "line" : 1980,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTYyMDczNA==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 1980,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 13,
      "pull_request_review_id" : 668880771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T11:03:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639620734",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639627491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639627491"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not sure if we want to add two tracepoints (one fn start, one fn end) for measuring function timing. This would also require us to pass and handle some kind of identifier for functions running in parallel (not the case for `ConnectBlock`). ",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T11:14:41Z",
      "diff_hunk" : "@@ -1975,6 +1976,16 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     int64_t nTime6 = GetTimeMicros(); nTimeCallbacks += nTime6 - nTime5;\n     LogPrint(BCLog::BENCH, \"    - Callbacks: %.2fms [%.2fs (%.2fms/blk)]\\n\", MILLI * (nTime6 - nTime5), nTimeCallbacks * MICRO, nTimeCallbacks * MILLI / nBlocksTotal);\n \n+    TRACE7(validation, block_connected,\n+        block.GetHash().ToString().c_str(),\n+        pindex->nHeight,\n+        block.vtx.size(),\n+        nInputs,\n+        nSigOpsCost,\n+        GetTimeMicros() - nTimeStart, // in microseconds (Âµs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639627491",
      "id" : 639627491,
      "in_reply_to_id" : 638762267,
      "line" : 1985,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTYyNzQ5MQ==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 1985,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 18,
      "pull_request_review_id" : 668889734,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T11:14:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639627491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639696163"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639696163"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems to me the tplist tool binary name is `tplist-bpfcc`. Thats worked for me and its also mentioned like this in the [bcc doc](https://github.com/iovisor/bcc/blob/master/INSTALL.md#ubuntu---binary)",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T12:53:31Z",
      "diff_hunk" : "@@ -0,0 +1,263 @@\n+# User-space, Statically Defined Tracing (USDT) for Bitcoin Core\n+\n+Bitcoin Core includes statically defined tracepoints to allow for more\n+observability during development, debugging, code review, and production usage.\n+These tracepoints make it possible to keep track of custom statistics and\n+enable detailed monitoring of otherwise hidden internals. They have\n+little to no performance impact when unused.\n+\n+```\n+eBFP and USDT Overview\n+======================\n+\n+                ââââââââââââââââââââ            ââââââââââââââââ\n+                â tracing script   â            â bitcoind     â\n+                â==================â      2.    â==============â\n+                â  eBPF  â tracing â      hooks â              â\n+                â  code  â logic   â      intoâââ¤âºtracepoint 1ââ¼ââââ 3.\n+                ââââââ¬ââââ´âââ²âââââââ          âââ¤âºtracepoint 2 â   â pass args\n+            1.       â      â 4.              â â ...          â   â to eBPF\n+    User    compiles â      â pass data to    â ââââââââââââââââ   â program\n+    Space    & loads â      â tracing script  â                    â\n+    ââââââââââââââââââ¼âââââââ¼ââââââââââââââââââ¼âââââââââââââââââââââ¼âââ\n+    Kernel           â      â                 â                    â\n+    Space       ââââ¬ââ¼âââââââ´ââââââââââââââââââ´âââââââââââââ       â\n+                â  â  eBPF program                         âââââââââ\n+                â  âââââââââââââââââââââââââââââââââââââââââ¤\n+                â eBPF kernel Virtual Machine (sandboxed)  â\n+                ââââââââââââââââââââââââââââââââââââââââââââ\n+\n+1. The tracing script compiles the eBPF code and loads the eBFP program into a kernel VM\n+2. The eBPF program hooks into one or more tracepoints\n+3. When the tracepoint is called, the arguments are passed to the eBPF program\n+4. The eBPF program processes the arguments and returns data to the tracing script\n+```\n+\n+The Linux kernel can hook into the tracepoints during runtime and pass data to\n+sandboxed [eBPF] programs running in the kernel. These eBPF programs can, for\n+example, collect statistics or pass data back to user-space scripts for further\n+processing.\n+\n+[eBPF]: https://ebpf.io/\n+\n+The two main eBPF front-ends with support for USDT are [bpftrace] and\n+[BPF Compiler Collection (BCC)]. BCC is used for complex tools and daemons and\n+`bpftrace` is preferred for one-liners and shorter scripts. Examples for both can\n+be found in [contrib/tracing].\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+[contrib/tracing]: ../contrib/tracing/\n+\n+## Tracepoint documentation\n+\n+The currently available tracepoints are listed here.\n+\n+### Context `net`\n+\n+#### Tracepoint `net:inbound_message`\n+\n+Is called when a message is received from a peer over the P2P network. Passes\n+information about our peer, the connection and the message as arguments.\n+\n+Arguments passed:\n+1. Peer ID as `int64`\n+2. Peer Address and Port (IPv4, IPv6, Tor v3, I2P, ...) as `pointer to C-style String` (max. length 68 characters)\n+3. Connection Type (inbound, feeler, outbound-full-relay, ...) as `pointer to C-style String` (max. length 20 characters)\n+4. Message Type (inv, ping, getdata, addrv2, ...) as `pointer to C-style String` (max. length 20 characters)\n+5. Message Size in bytes as `uint64`\n+6. Message Bytes as `pointer to unsigned chars` (i.e. bytes)\n+\n+Note: The message is passed to the tracepoint in full, however, due to space\n+limitations in the eBPF kernel VM it might not be possible to pass the message\n+to user-space in full. Messages longer than a 32kb might be cut off. This can\n+be detected in tracing scripts by comparing the message size to the length of\n+the passed message.\n+\n+#### Tracepoint `net:outbound_message`\n+\n+Is called when a message is send to a peer over the P2P network. Passes\n+information about our peer, the connection and the message as arguments.\n+\n+Arguments passed:\n+1. Peer ID as `int64`\n+2. Peer Address and Port (IPv4, IPv6, Tor v3, I2P, ...) as `pointer to C-style String` (max. length 68 characters)\n+3. Connection Type (inbound, feeler, outbound-full-relay, ...) as `pointer to C-style String` (max. length 20 characters)\n+4. Message Type (inv, ping, getdata, addrv2, ...) as `pointer to C-style String` (max. length 20 characters)\n+5. Message Size in bytes as `uint64`\n+6. Message Bytes as `pointer to unsigned chars` (i.e. bytes)\n+\n+Note: The message is passed to the tracepoint in full, however, due to space\n+limitations in the eBPF kernel VM it might not be possible to pass the message\n+to user-space in full. Messages longer than a 32kb might be cut off. This can\n+be detected in tracing scripts by comparing the message size to the length of\n+the passed message.\n+\n+### Context `validation`\n+\n+#### Tracepoint `validation:block_connected`\n+\n+Is called *after* a block is connected to the chain. Can, for example, be used\n+to benchmark block connections together with `-reindex`.\n+\n+Arguments passed:\n+1. Block Header Hash as `pointer to C-style String` (64 characters)\n+2. Block Height as `int32`\n+3. Transactions in the Block as `uint64`\n+4. Inputs spend in the Block as `int32`\n+5. SigOps in the Block (excluding coinbase SigOps) `uint64`\n+6. Time it took to connect the Block in microseconds (Âµs) as `uint64`\n+7. Block Header Hash as `pointer to unsigned chars` (i.e. 32 bytes in little-endian)\n+\n+Note: The 7th argument can't be accessed by bpftrace and is purposefully chosen\n+to be the block header hash as bytes. See [bpftrace argument limit] for more\n+details.\n+\n+[bpftrace argument limit]: #bpftrace-argument-limit\n+\n+## Adding tracepoints to Bitcoin Core\n+\n+To add a new tracepoint, `#include <util/trace.h>` in the compilation unit where\n+the tracepoint is inserted. Use one of the `TRACEx` macros listed below\n+depending on the number of arguments passed to the tracepoint. Up to 12\n+arguments can be provided. The `context` and `event` specify the names by which\n+the tracepoint is referred to. Please use `snake_case` and try to make sure that\n+the tracepoint names make sense even without detailed knowledge of the\n+implementation details. Do not forget to update the tracepoint list in this\n+document.\n+\n+```c\n+#define TRACE(context, event)\n+#define TRACE1(context, event, a)\n+#define TRACE2(context, event, a, b)\n+#define TRACE3(context, event, a, b, c)\n+#define TRACE4(context, event, a, b, c, d)\n+#define TRACE5(context, event, a, b, c, d, e)\n+#define TRACE6(context, event, a, b, c, d, e, f)\n+#define TRACE7(context, event, a, b, c, d, e, f, g)\n+#define TRACE8(context, event, a, b, c, d, e, f, g, h)\n+#define TRACE9(context, event, a, b, c, d, e, f, g, h, i)\n+#define TRACE10(context, event, a, b, c, d, e, f, g, h, i, j)\n+#define TRACE11(context, event, a, b, c, d, e, f, g, h, i, j, k)\n+#define TRACE12(context, event, a, b, c, d, e, f, g, h, i, j, k, l)\n+```\n+\n+For example:\n+\n+```C++\n+TRACE6(net, inbound_message,\n+    pnode->GetId(),\n+    pnode->GetAddrName().c_str(),\n+    pnode->ConnectionTypeAsString().c_str(),\n+    sanitizedType.c_str(),\n+    msg.data.size(),\n+    msg.data.data()\n+);\n+```\n+\n+### Guidelines and best practices\n+\n+#### Clear motivation and use-case\n+Tracepoints need a clear motivation and use-case. The motivation should\n+outweigh the impact on, for example, code readability. There is no point in\n+adding tracepoints that don't end up being used.\n+\n+#### Provide an example\n+When adding a new tracepoint, provide an example. Examples can show the use case\n+and help reviewers testing that the tracepoint works as intended. The examples\n+can be kept simple but should give others a starting point when working with\n+the tracepoint. See existing examples in [contrib/tracing/].\n+\n+[contrib/tracing/]: ../contrib/tracing/\n+\n+#### No expensive computations for tracepoints\n+Data passed to the tracepoint should be inexpensive to compute. Although the\n+tracepoint itself only has overhead when enabled, the code to compute arguments\n+is always run - even if the tracepoint is not used. For example, avoid\n+serialization and parsing.\n+\n+#### Semi-stable API\n+Tracepoints should have a semi-stable API. Users should be able to rely on the\n+tracepoints for scripting. This means tracepoints need to be documented, and the\n+argument order ideally should not change. If there is an important reason to\n+change argument order, make sure to document the change and update the examples\n+using the tracepoint.\n+\n+#### eBPF Virtual Machine limits\n+Keep the eBPF Virtual Machine limits in mind. eBPF programs receiving data from\n+the tracepoints run in a sandboxed Linux kernel VM. This VM has a limited stack\n+size of 512 bytes. Check if it makes sense to pass larger amounts of data, for\n+example, with a tracing script that can handle the passed data.\n+\n+#### `bpftrace` argument limit\n+While tracepoints can have up to 12 arguments, bpftrace scripts currently only\n+support reading from the first six arguments (`arg0` till `arg5`) on `x86_64`.\n+bpftrace currently lacks real support for handling and printing binary data,\n+like block header hashes and txids. When a tracepoint passes more than six\n+arguments, then string and integer arguments should preferably be placed in the\n+first six argument fields. Binary data can be placed in later arguments. The BCC\n+supports reading from all 12 arguments.\n+\n+#### Strings as C-style String\n+Generally, strings should be passed into the `TRACEx` macros as pointers to\n+C-style strings (a null-terminated sequence of characters). For C++\n+`std::strings`, [`c_str()`]  can be used. It's recommended to document the\n+maximum expected string size if known.\n+\n+\n+[`c_str()`]: https://www.cplusplus.com/reference/string/string/c_str/\n+\n+\n+## Listing available tracepoints\n+\n+Multiple tools can list the available tracepoints in a `bitcoind` binary with\n+USDT support.\n+\n+### GDB - GNU Project Debugger\n+\n+To list probes in Bitcoin Core, use `info probes` in `gdb`:\n+\n+```\n+$ gdb ./src/bitcoind\n+â¦\n+(gdb) info probes\n+Type Provider   Name             Where              Semaphore Object\n+stap net        inbound_message  0x000000000014419e /src/bitcoind\n+stap net        outbound_message 0x0000000000107c05 /src/bitcoind\n+stap validation block_connected  0x00000000002fb10c /src/bitcoind\n+â¦\n+```\n+\n+### With `readelf`\n+\n+The `readelf` tool can be used to display the USDT tracepoints in Bitcoin Core.\n+Look for the notes with the description `NT_STAPSDT`.\n+\n+```\n+$ readelf -n ./src/bitcoind | grep NT_STAPSDT -A 4 -B 2\n+Displaying notes found in: .note.stapsdt\n+  Owner                 Data size\tDescription\n+  stapsdt              0x0000005d\tNT_STAPSDT (SystemTap probe descriptors)\n+    Provider: net\n+    Name: outbound_message\n+    Location: 0x0000000000107c05, Base: 0x0000000000579c90, Semaphore: 0x0000000000000000\n+    Arguments: -8@%r12 8@%rbx 8@%rdi 8@192(%rsp) 8@%rax 8@%rdx\n+â¦\n+```\n+\n+### With `tplist`\n+\n+The `tplist` tool can be found in BCC (see [Installing BCC]). It displays kernel\n+tracepoints or USDT probes and their formats (for more information, see the\n+[`tplist` usage demonstration]).\n+\n+[Installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[`tplist` usage demonstration]: https://github.com/iovisor/bcc/blob/master/tools/tplist_example.txt\n+\n+```\n+$ tplist -l ./src/bitcoind -v",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639696163",
      "id" : 639696163,
      "line" : 258,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTY5NjE2Mw==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 258,
      "original_position" : 258,
      "original_start_line" : null,
      "path" : "doc/tracing.md",
      "position" : 258,
      "pull_request_review_id" : 668633889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T18:03:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639696163",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639773479"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639773479"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n# Bitcoin P2P messages can be larger than 32kb (e.g tx, block, ...). The eBPF\r\n```",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T14:19:39Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+\"\"\" Demonstration of eBPF limitations and the effect on USDT with the\n+    net:inbound_message and net:outbound_message tracepoints. \"\"\"\n+\n+# This script shows a limitation of eBPF when data larger than 32kb is passed to\n+# user-space. It uses BCC (https://github.com/iovisor/bcc) to load a sandboxed\n+# eBPF program into the Linux kernel (root privileges are required). The eBPF\n+# program attaches to two statically defined tracepoints. The tracepoint\n+# 'net:inbound_message' is called when a new P2P message is received, and\n+# 'net:outbound_message' is called on outbound P2P messages. The eBPF program\n+# submits the P2P messages to this script via a BPF ring buffer. The submitted\n+# messages are printed.\n+\n+# eBPF Limitations:\n+#\n+# Bitcoin P2P messages can be larger than 32kb (e.g tx, block, ...). The eBFP",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639773479",
      "id" : 639773479,
      "line" : 17,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTc3MzQ3OQ==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 17,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "contrib/tracing/log_raw_p2p_msgs.py",
      "position" : 17,
      "pull_request_review_id" : 669084664,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T14:19:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639773479",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639793201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639793201"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(there are 3 other s/eBFP/eBPF/ elsewhere in this doc to fix up too)\r\n\r\ns/e.g/e.g./",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T14:40:02Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+\"\"\" Demonstration of eBPF limitations and the effect on USDT with the\n+    net:inbound_message and net:outbound_message tracepoints. \"\"\"\n+\n+# This script shows a limitation of eBPF when data larger than 32kb is passed to\n+# user-space. It uses BCC (https://github.com/iovisor/bcc) to load a sandboxed\n+# eBPF program into the Linux kernel (root privileges are required). The eBPF\n+# program attaches to two statically defined tracepoints. The tracepoint\n+# 'net:inbound_message' is called when a new P2P message is received, and\n+# 'net:outbound_message' is called on outbound P2P messages. The eBPF program\n+# submits the P2P messages to this script via a BPF ring buffer. The submitted\n+# messages are printed.\n+\n+# eBPF Limitations:\n+#\n+# Bitcoin P2P messages can be larger than 32kb (e.g tx, block, ...). The eBFP",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639793201",
      "id" : 639793201,
      "in_reply_to_id" : 639773479,
      "line" : 17,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTc5MzIwMQ==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 17,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "contrib/tracing/log_raw_p2p_msgs.py",
      "position" : 17,
      "pull_request_review_id" : 669111165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T14:43:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639793201",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639794118"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639794118"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I am getting the following error here\r\n\r\n```\r\n$ sudo bpftrace ./contrib/tracing/log_p2p_traffic.bt\r\nterminate called after throwing an instance of 'std::logic_error'\r\n  what():  basic_string::_M_construct null not valid\r\nAborted\r\n```\r\n\r\ntrace points seem to be defined. Node is running and talking to peers in `testnet`\r\n\r\nNot sure what's throwing this error here. ",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T14:40:58Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639794118",
      "id" : 639794118,
      "line" : 60,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTc5NDExOA==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 60,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 60,
      "pull_request_review_id" : 668633889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T18:03:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639794118",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639870062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639870062"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is so cool. This is a communication sequence for a Peer asking for BIP157 filters.\r\n\r\n![image](https://user-images.githubusercontent.com/36541669/119705791-cf673d00-be76-11eb-9d53-649cae0e4def.png)\r\n\r\nIt would be even super awesome if I could also select each message and can get the content. ",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T15:56:32Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt\n+```\n+\n+Output\n+```\n+outbound 'ping' msg to peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'pong' msg from peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'inv' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+outbound 'getdata' msg to peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+inbound 'tx' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 222 bytes\n+outbound 'inv' msg to peer 9 (outbound-full-relay, faketorv3addressa2ufa6odvoi3s77j4uegey0xb10csyfyve2t33curbyd.onion:8333) with 37 bytes\n+outbound 'inv' msg to peer 7 (outbound-full-relay, XX.XX.XXX.242:8333) with 37 bytes\n+â¦\n+```\n+\n+### p2p_monitor.py\n+\n+A BCC Python script using curses for an interactive P2P message monitor. Based\n+on the `net:inbound_message` and `net:outbound_message` tracepoints.\n+\n+Inbound and outbound traffic is listed for each peer together with information\n+about the connection. Peers can be selected individually to view recent P2P\n+messages.\n+\n+```\n+$ python3 contrib/tracing/p2p_monitor.py ./src/bitcoind",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639870062",
      "id" : 639870062,
      "line" : 85,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTg3MDA2Mg==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 85,
      "pull_request_review_id" : 668633889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T18:03:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639870062",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639898074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639898074"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I get the error:\r\n``` contrib/tracing/connectblock_benchmark.bt:138:3-71: ERROR: print() expects a map to be provided```\r\nchanging it from ```print``` to ```printf``` fixes it for me.",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T16:28:36Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+#!/usr/bin/env bpftrace\n+\n+/*\n+\n+  USAGE:\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt <start height> <end height> <logging threshold in ms>\n+\n+  - The environment variable BPFTRACE_STRLEN needs to be set to 65 chars as\n+    strings are limited to 64 chars by default. Hex strings with Bitcoin block\n+    hashes are 64 hex chars + 1 null-termination char.\n+  - <start height> sets the height at which the benchmark should start. Setting\n+    the start height to 0 starts the benchmark immediately, even before the\n+    first block is connected.\n+  - <end height> sets the height after which the benchmark should end. Setting\n+    the end height to 0 disables the benchmark. The script only logs blocks\n+    over <logging threshold in ms>.\n+  - Threshold <logging threshold in ms>\n+\n+  This script requires a 'bitcoind' binary compiled with eBPF support and the\n+  'validation:block_connected' USDT. By default, it's assumed that 'bitcoind' is\n+  located in './src/bitcoind'. This can be modified in the script below.\n+\n+  EXAMPLES:\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 300000 680000 1000\n+\n+  When run together 'bitcoind -reindex', this benchmarks the time it takes to\n+  connect the blocks between height 300.000 and 680.000 (inclusive) and prints\n+  details about all blocks that take longer than 1000ms to connect. Prints a\n+  histogram with block connection times when the benchmark is finished.\n+\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 0 0 500\n+\n+  When running together 'bitcoind', all newly connected blocks that\n+  take longer than 500ms to connect are logged. A histogram with block\n+  connection times is shown when the script is terminated.\n+\n+*/\n+\n+BEGIN\n+{\n+  $start_height = $1;\n+  $end_height = $2;\n+  $logging_threshold_ms = $3;\n+\n+  if ($end_height < $start_height) {\n+    printf(\"Error: start height (%d) larger than end height (%d)!\\n\", $start_height, $end_height);\n+    exit();\n+  }\n+\n+  if ($end_height > 0) {\n+    printf(\"ConnectBlock benchmark between height %d and %d inclusive\\n\", $start_height, $end_height);\n+  } else {\n+    printf(\"ConnectBlock logging starting at height %d\\n\", $start_height);\n+  }\n+\n+  if ($logging_threshold_ms > 0) {\n+    printf(\"Logging blocks taking longer than %d ms to connect.\\n\", $3);\n+  }\n+\n+  if ($start_height == 0) {\n+    @start = nsecs;\n+  }\n+}\n+\n+/*\n+  Attaches to the 'validation:block_connected' USDT and collects stats when the\n+  connected block is between the start and end height (or the end height is\n+  unset).\n+*/\n+usdt:./src/bitcoind:validation:block_connected /arg1 >= $1 && (arg1 <= $2 || $2 == 0 )/\n+{\n+  $height = arg1;\n+  $transactions = arg2;\n+  $inputs = arg3;\n+  $sigops =  arg4;\n+  $duration = (uint64) arg5;\n+\n+  @height = $height;\n+\n+  @blocks = @blocks + 1;\n+  @transactions = @transactions + $transactions;\n+  @inputs = @inputs + $inputs;\n+  @sigops = @sigops + $sigops;\n+\n+  @durations = hist($duration / 1000);\n+\n+  if ($height == $1 && $height != 0) {\n+    @start = nsecs;\n+    printf(\"Starting Connect Block Benchmark between height %d and %d.\\n\", $1, $2);\n+  }\n+\n+  if ($2 > 0 && $height >= $2) {\n+    @end = nsecs;\n+    $duration = @end - @start;\n+    printf(\"\\nTook %d ms to connect the blocks between height %d and %d.\\n\", $duration / 1000000, $1, $2);\n+    exit();\n+  }\n+}\n+\n+/*\n+  Attaches to the 'validation:block_connected' USDT and logs information about\n+  blocks where the time it took to connect the block is above the\n+  <logging threshold in ms>.\n+*/\n+usdt:./src/bitcoind:validation:block_connected / (uint64) arg5 / 1000> $3 /\n+{\n+  $hash_str = str(arg0);\n+  $height = (int32) arg1;\n+  $transactions = (uint64) arg2;\n+  $inputs = (int32) arg3;\n+  $sigops = (int64) arg4;\n+  $duration = (int64) arg5;\n+\n+  printf(\"Block %d (%s)  %4d tx  %5d ins  %5d sigops  took %4d ms\\n\", $height, $hash_str, $transactions, $inputs, $sigops, (uint64) $duration / 1000);\n+}\n+\n+\n+/*\n+  Prints stats about the blocks, transactions, inputs, and sigops processed in\n+  the last second (if any).\n+*/\n+interval:s:1 {\n+  if (@blocks > 0) {\n+    printf(\"BENCH %4d blk/s %6d tx/s %7d inputs/s %8d sigops/s (height %d)\\n\", @blocks, @transactions, @inputs, @sigops, @height);\n+\n+    zero(@blocks);\n+    zero(@transactions);\n+    zero(@inputs);\n+    zero(@sigops);\n+  }\n+}\n+\n+END\n+{\n+  print(\"\\nHistogram of block connection times in milliseconds (ms).\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639898074",
      "id" : 639898074,
      "line" : 138,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTg5ODA3NA==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 138,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "contrib/tracing/connectblock_benchmark.bt",
      "position" : 138,
      "pull_request_review_id" : 669255168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T16:28:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639898074",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1223908?v=4",
         "events_url" : "https://api.github.com/users/Emzy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Emzy/followers",
         "following_url" : "https://api.github.com/users/Emzy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Emzy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Emzy",
         "id" : 1223908,
         "login" : "Emzy",
         "node_id" : "MDQ6VXNlcjEyMjM5MDg=",
         "organizations_url" : "https://api.github.com/users/Emzy/orgs",
         "received_events_url" : "https://api.github.com/users/Emzy/received_events",
         "repos_url" : "https://api.github.com/users/Emzy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Emzy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Emzy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Emzy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639919027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639919027"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The ```curces.A_DIM``` vs ```A_NORMAL``` is not showing up in my terminal.\r\nI think this looks much better:\r\n```\r\ncurses.A_REVERSE if i + scroll == cur_list_pos else curses.A_NORMAL)\r\n```\r\n",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T16:47:28Z",
      "diff_hunk" : "@@ -0,0 +1,250 @@\n+#!/usr/bin/env python3\n+\n+\"\"\" Interactive bitcoind P2P network traffic monitor utilizing USDT and the\n+    net:inbound_message and net:outbound_message tracepoints. \"\"\"\n+\n+# This script demonstrates what USDT for Bitcoin Core can enable. It uses BCC\n+# (https://github.com/iovisor/bcc) to load a sandboxed eBPF program into the\n+# Linux kernel (root privileges are required). The eBPF program attaches to two\n+# statically defined tracepoints. The tracepoint 'net:inbound_message' is called\n+# when a new P2P message is received, and 'net:outbound_message' is called on\n+# outbound P2P messages. The eBPF program submits the P2P messages to\n+# this script via a BPF ring buffer.\n+\n+import sys\n+import curses\n+from curses import wrapper, panel\n+from bcc import BPF, USDT\n+\n+# BCC: The C program to be compiled to an eBPF program (by BCC) and loaded into\n+# a sandboxed Linux kernel VM.\n+program = \"\"\"\n+#include <uapi/linux/ptrace.h>\n+\n+// Tor v3 addresses are 62 chars + 6 chars for the port (':12345').\n+// I2P addresses are 60 chars + 6 chars for the port (':12345').\n+#define MAX_PEER_ADDR_LENGTH 62 + 6\n+#define MAX_PEER_CONN_TYPE_LENGTH 20\n+#define MAX_MSG_TYPE_LENGTH 20\n+\n+struct p2p_message\n+{\n+    u64     peer_id;\n+    char    peer_addr[MAX_PEER_ADDR_LENGTH];\n+    char    peer_conn_type[MAX_PEER_CONN_TYPE_LENGTH];\n+    char    msg_type[MAX_MSG_TYPE_LENGTH];\n+    u64     msg_size;\n+};\n+\n+\n+// Two BPF perf buffers for pushing data (here P2P messages) to user space.\n+BPF_PERF_OUTPUT(inbound_messages);\n+BPF_PERF_OUTPUT(outbound_messages);\n+\n+int trace_inbound_message(struct pt_regs *ctx) {\n+    struct p2p_message msg = {};\n+\n+    bpf_usdt_readarg(1, ctx, &msg.peer_id);\n+    bpf_usdt_readarg_p(2, ctx, &msg.peer_addr, MAX_PEER_ADDR_LENGTH);\n+    bpf_usdt_readarg_p(3, ctx, &msg.peer_conn_type, MAX_PEER_CONN_TYPE_LENGTH);\n+    bpf_usdt_readarg_p(4, ctx, &msg.msg_type, MAX_MSG_TYPE_LENGTH);\n+    bpf_usdt_readarg(5, ctx, &msg.msg_size);\n+\n+    inbound_messages.perf_submit(ctx, &msg, sizeof(msg));\n+    return 0;\n+};\n+\n+int trace_outbound_message(struct pt_regs *ctx) {\n+    struct p2p_message msg = {};\n+\n+    bpf_usdt_readarg(1, ctx, &msg.peer_id);\n+    bpf_usdt_readarg_p(2, ctx, &msg.peer_addr, MAX_PEER_ADDR_LENGTH);\n+    bpf_usdt_readarg_p(3, ctx, &msg.peer_conn_type, MAX_PEER_CONN_TYPE_LENGTH);\n+    bpf_usdt_readarg_p(4, ctx, &msg.msg_type, MAX_MSG_TYPE_LENGTH);\n+    bpf_usdt_readarg(5, ctx, &msg.msg_size);\n+\n+    outbound_messages.perf_submit(ctx, &msg, sizeof(msg));\n+    return 0;\n+};\n+\"\"\"\n+\n+\n+class Message:\n+    \"\"\" A P2P network message. \"\"\"\n+    msg_type = \"\"\n+    size = 0\n+    data = bytes()\n+    inbound = False\n+\n+    def __init__(self, msg_type, size, inbound):\n+        self.msg_type = msg_type\n+        self.size = size\n+        self.inbound = inbound\n+\n+\n+class Peer:\n+    \"\"\" A P2P network peer. \"\"\"\n+    id = 0\n+    address = \"\"\n+    connection_type = \"\"\n+    last_messages = list()\n+\n+    total_inbound_msgs = 0\n+    total_inbound_bytes = 0\n+    total_outbound_msgs = 0\n+    total_outbound_bytes = 0\n+\n+    def __init__(self, id, address, connection_type):\n+        self.id = id\n+        self.address = address\n+        self.connection_type = connection_type\n+        self.last_messages = list()\n+\n+    def add_message(self, message):\n+        self.last_messages.append(message)\n+        if len(self.last_messages) > 25:\n+            self.last_messages.pop(0)\n+        if message.inbound:\n+            self.total_inbound_bytes += message.size\n+            self.total_inbound_msgs += 1\n+        else:\n+            self.total_outbound_bytes += message.size\n+            self.total_outbound_msgs += 1\n+\n+\n+def main(bitcoind_path):\n+    peers = dict()\n+\n+    bitcoind_with_usdts = USDT(path=str(bitcoind_path))\n+\n+    # attaching the trace functions defined in the BPF program to the tracepoints\n+    bitcoind_with_usdts.enable_probe(\n+        probe=\"inbound_message\", fn_name=\"trace_inbound_message\")\n+    bitcoind_with_usdts.enable_probe(\n+        probe=\"outbound_message\", fn_name=\"trace_outbound_message\")\n+    bpf = BPF(text=program, usdt_contexts=[bitcoind_with_usdts])\n+\n+    # BCC: perf buffer handle function for inbound_messages\n+    def handle_inbound(_, data, size):\n+        \"\"\" Inbound message handler.\n+\n+        Called each time a message is submitted to the inbound_messages BPF table.\"\"\"\n+        event = bpf[\"inbound_messages\"].event(data)\n+        if event.peer_id not in peers:\n+            peer = Peer(event.peer_id, event.peer_addr.decode(\n+                \"utf-8\"), event.peer_conn_type.decode(\"utf-8\"))\n+            peers[peer.id] = peer\n+        peers[event.peer_id].add_message(\n+            Message(event.msg_type.decode(\"utf-8\"), event.msg_size, True))\n+\n+    # BCC: perf buffer handle function for outbound_messages\n+    def handle_outbound(_, data, size):\n+        \"\"\" Outbound message handler.\n+\n+        Called each time a message is submitted to the outbound_messages BPF table.\"\"\"\n+        event = bpf[\"outbound_messages\"].event(data)\n+        if event.peer_id not in peers:\n+            peer = Peer(event.peer_id, event.peer_addr.decode(\n+                \"utf-8\"), event.peer_conn_type.decode(\"utf-8\"))\n+            peers[peer.id] = peer\n+        peers[event.peer_id].add_message(\n+            Message(event.msg_type.decode(\"utf-8\"), event.msg_size, False))\n+\n+    # BCC: add handlers to the inbound and outbound perf buffers\n+    bpf[\"inbound_messages\"].open_perf_buffer(handle_inbound)\n+    bpf[\"outbound_messages\"].open_perf_buffer(handle_outbound)\n+\n+    wrapper(loop, bpf, peers)\n+\n+\n+def loop(screen, bpf, peers):\n+    screen.nodelay(1)\n+    cur_list_pos = 0\n+    win = curses.newwin(30, 70, 2, 7)\n+    win.erase()\n+    win.border(ord(\"|\"), ord(\"|\"), ord(\"-\"), ord(\"-\"),\n+               ord(\"-\"), ord(\"-\"), ord(\"-\"), ord(\"-\"))\n+    info_panel = panel.new_panel(win)\n+    info_panel.hide()\n+\n+    ROWS_AVALIABLE_FOR_LIST = curses.LINES - 5\n+    scroll = 0\n+\n+    while True:\n+        try:\n+            # BCC: poll the perf buffers for new events or timeout after 50ms\n+            bpf.perf_buffer_poll(timeout=50)\n+\n+            ch = screen.getch()\n+            if (ch == curses.KEY_DOWN or ch == ord(\"j\")) and cur_list_pos < len(\n+                    peers.keys()) -1 and info_panel.hidden():\n+                cur_list_pos += 1\n+                if cur_list_pos >= ROWS_AVALIABLE_FOR_LIST:\n+                    scroll += 1\n+            if (ch == curses.KEY_UP or ch == ord(\"k\")) and cur_list_pos > 0 and info_panel.hidden():\n+                cur_list_pos -= 1\n+                if scroll > 0:\n+                    scroll -= 1\n+            if ch == ord('\\n') or ch == ord(' '):\n+                if info_panel.hidden():\n+                    info_panel.show()\n+                else:\n+                    info_panel.hide()\n+            screen.erase()\n+            render(screen, peers, cur_list_pos, scroll, ROWS_AVALIABLE_FOR_LIST, info_panel)\n+            curses.panel.update_panels()\n+            screen.refresh()\n+        except KeyboardInterrupt:\n+            exit()\n+\n+\n+def render(screen, peers, cur_list_pos, scroll, ROWS_AVALIABLE_FOR_LIST, info_panel):\n+    \"\"\" renders the list of peers and details panel\n+\n+    This code is unrelated to USDT, BCC and BPF.\n+    \"\"\"\n+    header_format = \"%6s  %-20s  %-20s  %-22s  %-67s\"\n+    row_format = \"%6s  %-5d %9d byte  %-5d %9d byte  %-22s  %-67s\"\n+\n+    screen.addstr(0, 1, (\" P2P Message Monitor \"), curses.A_REVERSE)\n+    screen.addstr(\n+        1, 0, (\" Navigate with UP/DOWN or J/K and select a peer with ENTER or SPACE to see individual P2P messages\"), curses.A_NORMAL)\n+    screen.addstr(3, 0,\n+                  header_format % (\"PEER\", \"OUTBOUND\", \"INBOUND\", \"TYPE\", \"ADDR\"), curses.A_BOLD | curses.A_UNDERLINE)\n+    peer_list = sorted(peers.keys())[scroll:ROWS_AVALIABLE_FOR_LIST+scroll]\n+    for i, peer_id in enumerate(peer_list):\n+        peer = peers[peer_id]\n+        screen.addstr(i + 4, 0,\n+                      row_format % (peer.id, peer.total_outbound_msgs, peer.total_outbound_bytes,\n+                                    peer.total_inbound_msgs, peer.total_inbound_bytes,\n+                                    peer.connection_type, peer.address),\n+                      curses.A_NORMAL if i + scroll == cur_list_pos else curses.A_DIM)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639919027",
      "id" : 639919027,
      "line" : 221,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTkxOTAyNw==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 221,
      "original_position" : 221,
      "original_start_line" : null,
      "path" : "contrib/tracing/p2p_monitor.py",
      "position" : 221,
      "pull_request_review_id" : 669280904,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T16:47:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639919027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1223908?v=4",
         "events_url" : "https://api.github.com/users/Emzy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Emzy/followers",
         "following_url" : "https://api.github.com/users/Emzy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Emzy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Emzy",
         "id" : 1223908,
         "login" : "Emzy",
         "node_id" : "MDQ6VXNlcjEyMjM5MDg=",
         "organizations_url" : "https://api.github.com/users/Emzy/orgs",
         "received_events_url" : "https://api.github.com/users/Emzy/received_events",
         "repos_url" : "https://api.github.com/users/Emzy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Emzy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Emzy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Emzy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639921642"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639921642"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Interesting.. Which version of bpftrace do you have installed? (`bpftrace --v`)",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T16:51:02Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+#!/usr/bin/env bpftrace\n+\n+/*\n+\n+  USAGE:\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt <start height> <end height> <logging threshold in ms>\n+\n+  - The environment variable BPFTRACE_STRLEN needs to be set to 65 chars as\n+    strings are limited to 64 chars by default. Hex strings with Bitcoin block\n+    hashes are 64 hex chars + 1 null-termination char.\n+  - <start height> sets the height at which the benchmark should start. Setting\n+    the start height to 0 starts the benchmark immediately, even before the\n+    first block is connected.\n+  - <end height> sets the height after which the benchmark should end. Setting\n+    the end height to 0 disables the benchmark. The script only logs blocks\n+    over <logging threshold in ms>.\n+  - Threshold <logging threshold in ms>\n+\n+  This script requires a 'bitcoind' binary compiled with eBPF support and the\n+  'validation:block_connected' USDT. By default, it's assumed that 'bitcoind' is\n+  located in './src/bitcoind'. This can be modified in the script below.\n+\n+  EXAMPLES:\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 300000 680000 1000\n+\n+  When run together 'bitcoind -reindex', this benchmarks the time it takes to\n+  connect the blocks between height 300.000 and 680.000 (inclusive) and prints\n+  details about all blocks that take longer than 1000ms to connect. Prints a\n+  histogram with block connection times when the benchmark is finished.\n+\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 0 0 500\n+\n+  When running together 'bitcoind', all newly connected blocks that\n+  take longer than 500ms to connect are logged. A histogram with block\n+  connection times is shown when the script is terminated.\n+\n+*/\n+\n+BEGIN\n+{\n+  $start_height = $1;\n+  $end_height = $2;\n+  $logging_threshold_ms = $3;\n+\n+  if ($end_height < $start_height) {\n+    printf(\"Error: start height (%d) larger than end height (%d)!\\n\", $start_height, $end_height);\n+    exit();\n+  }\n+\n+  if ($end_height > 0) {\n+    printf(\"ConnectBlock benchmark between height %d and %d inclusive\\n\", $start_height, $end_height);\n+  } else {\n+    printf(\"ConnectBlock logging starting at height %d\\n\", $start_height);\n+  }\n+\n+  if ($logging_threshold_ms > 0) {\n+    printf(\"Logging blocks taking longer than %d ms to connect.\\n\", $3);\n+  }\n+\n+  if ($start_height == 0) {\n+    @start = nsecs;\n+  }\n+}\n+\n+/*\n+  Attaches to the 'validation:block_connected' USDT and collects stats when the\n+  connected block is between the start and end height (or the end height is\n+  unset).\n+*/\n+usdt:./src/bitcoind:validation:block_connected /arg1 >= $1 && (arg1 <= $2 || $2 == 0 )/\n+{\n+  $height = arg1;\n+  $transactions = arg2;\n+  $inputs = arg3;\n+  $sigops =  arg4;\n+  $duration = (uint64) arg5;\n+\n+  @height = $height;\n+\n+  @blocks = @blocks + 1;\n+  @transactions = @transactions + $transactions;\n+  @inputs = @inputs + $inputs;\n+  @sigops = @sigops + $sigops;\n+\n+  @durations = hist($duration / 1000);\n+\n+  if ($height == $1 && $height != 0) {\n+    @start = nsecs;\n+    printf(\"Starting Connect Block Benchmark between height %d and %d.\\n\", $1, $2);\n+  }\n+\n+  if ($2 > 0 && $height >= $2) {\n+    @end = nsecs;\n+    $duration = @end - @start;\n+    printf(\"\\nTook %d ms to connect the blocks between height %d and %d.\\n\", $duration / 1000000, $1, $2);\n+    exit();\n+  }\n+}\n+\n+/*\n+  Attaches to the 'validation:block_connected' USDT and logs information about\n+  blocks where the time it took to connect the block is above the\n+  <logging threshold in ms>.\n+*/\n+usdt:./src/bitcoind:validation:block_connected / (uint64) arg5 / 1000> $3 /\n+{\n+  $hash_str = str(arg0);\n+  $height = (int32) arg1;\n+  $transactions = (uint64) arg2;\n+  $inputs = (int32) arg3;\n+  $sigops = (int64) arg4;\n+  $duration = (int64) arg5;\n+\n+  printf(\"Block %d (%s)  %4d tx  %5d ins  %5d sigops  took %4d ms\\n\", $height, $hash_str, $transactions, $inputs, $sigops, (uint64) $duration / 1000);\n+}\n+\n+\n+/*\n+  Prints stats about the blocks, transactions, inputs, and sigops processed in\n+  the last second (if any).\n+*/\n+interval:s:1 {\n+  if (@blocks > 0) {\n+    printf(\"BENCH %4d blk/s %6d tx/s %7d inputs/s %8d sigops/s (height %d)\\n\", @blocks, @transactions, @inputs, @sigops, @height);\n+\n+    zero(@blocks);\n+    zero(@transactions);\n+    zero(@inputs);\n+    zero(@sigops);\n+  }\n+}\n+\n+END\n+{\n+  print(\"\\nHistogram of block connection times in milliseconds (ms).\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639921642",
      "id" : 639921642,
      "in_reply_to_id" : 639898074,
      "line" : 138,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTkyMTY0Mg==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 138,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "contrib/tracing/connectblock_benchmark.bt",
      "position" : 138,
      "pull_request_review_id" : 669291380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T16:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639921642",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639925868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639925868"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "bpftrace v0.9.4 from Ubuntu 20.04.2 LTS",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-05-26T16:56:33Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+#!/usr/bin/env bpftrace\n+\n+/*\n+\n+  USAGE:\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt <start height> <end height> <logging threshold in ms>\n+\n+  - The environment variable BPFTRACE_STRLEN needs to be set to 65 chars as\n+    strings are limited to 64 chars by default. Hex strings with Bitcoin block\n+    hashes are 64 hex chars + 1 null-termination char.\n+  - <start height> sets the height at which the benchmark should start. Setting\n+    the start height to 0 starts the benchmark immediately, even before the\n+    first block is connected.\n+  - <end height> sets the height after which the benchmark should end. Setting\n+    the end height to 0 disables the benchmark. The script only logs blocks\n+    over <logging threshold in ms>.\n+  - Threshold <logging threshold in ms>\n+\n+  This script requires a 'bitcoind' binary compiled with eBPF support and the\n+  'validation:block_connected' USDT. By default, it's assumed that 'bitcoind' is\n+  located in './src/bitcoind'. This can be modified in the script below.\n+\n+  EXAMPLES:\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 300000 680000 1000\n+\n+  When run together 'bitcoind -reindex', this benchmarks the time it takes to\n+  connect the blocks between height 300.000 and 680.000 (inclusive) and prints\n+  details about all blocks that take longer than 1000ms to connect. Prints a\n+  histogram with block connection times when the benchmark is finished.\n+\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 0 0 500\n+\n+  When running together 'bitcoind', all newly connected blocks that\n+  take longer than 500ms to connect are logged. A histogram with block\n+  connection times is shown when the script is terminated.\n+\n+*/\n+\n+BEGIN\n+{\n+  $start_height = $1;\n+  $end_height = $2;\n+  $logging_threshold_ms = $3;\n+\n+  if ($end_height < $start_height) {\n+    printf(\"Error: start height (%d) larger than end height (%d)!\\n\", $start_height, $end_height);\n+    exit();\n+  }\n+\n+  if ($end_height > 0) {\n+    printf(\"ConnectBlock benchmark between height %d and %d inclusive\\n\", $start_height, $end_height);\n+  } else {\n+    printf(\"ConnectBlock logging starting at height %d\\n\", $start_height);\n+  }\n+\n+  if ($logging_threshold_ms > 0) {\n+    printf(\"Logging blocks taking longer than %d ms to connect.\\n\", $3);\n+  }\n+\n+  if ($start_height == 0) {\n+    @start = nsecs;\n+  }\n+}\n+\n+/*\n+  Attaches to the 'validation:block_connected' USDT and collects stats when the\n+  connected block is between the start and end height (or the end height is\n+  unset).\n+*/\n+usdt:./src/bitcoind:validation:block_connected /arg1 >= $1 && (arg1 <= $2 || $2 == 0 )/\n+{\n+  $height = arg1;\n+  $transactions = arg2;\n+  $inputs = arg3;\n+  $sigops =  arg4;\n+  $duration = (uint64) arg5;\n+\n+  @height = $height;\n+\n+  @blocks = @blocks + 1;\n+  @transactions = @transactions + $transactions;\n+  @inputs = @inputs + $inputs;\n+  @sigops = @sigops + $sigops;\n+\n+  @durations = hist($duration / 1000);\n+\n+  if ($height == $1 && $height != 0) {\n+    @start = nsecs;\n+    printf(\"Starting Connect Block Benchmark between height %d and %d.\\n\", $1, $2);\n+  }\n+\n+  if ($2 > 0 && $height >= $2) {\n+    @end = nsecs;\n+    $duration = @end - @start;\n+    printf(\"\\nTook %d ms to connect the blocks between height %d and %d.\\n\", $duration / 1000000, $1, $2);\n+    exit();\n+  }\n+}\n+\n+/*\n+  Attaches to the 'validation:block_connected' USDT and logs information about\n+  blocks where the time it took to connect the block is above the\n+  <logging threshold in ms>.\n+*/\n+usdt:./src/bitcoind:validation:block_connected / (uint64) arg5 / 1000> $3 /\n+{\n+  $hash_str = str(arg0);\n+  $height = (int32) arg1;\n+  $transactions = (uint64) arg2;\n+  $inputs = (int32) arg3;\n+  $sigops = (int64) arg4;\n+  $duration = (int64) arg5;\n+\n+  printf(\"Block %d (%s)  %4d tx  %5d ins  %5d sigops  took %4d ms\\n\", $height, $hash_str, $transactions, $inputs, $sigops, (uint64) $duration / 1000);\n+}\n+\n+\n+/*\n+  Prints stats about the blocks, transactions, inputs, and sigops processed in\n+  the last second (if any).\n+*/\n+interval:s:1 {\n+  if (@blocks > 0) {\n+    printf(\"BENCH %4d blk/s %6d tx/s %7d inputs/s %8d sigops/s (height %d)\\n\", @blocks, @transactions, @inputs, @sigops, @height);\n+\n+    zero(@blocks);\n+    zero(@transactions);\n+    zero(@inputs);\n+    zero(@sigops);\n+  }\n+}\n+\n+END\n+{\n+  print(\"\\nHistogram of block connection times in milliseconds (ms).\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r639925868",
      "id" : 639925868,
      "in_reply_to_id" : 639898074,
      "line" : 138,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzOTkyNTg2OA==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 138,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "contrib/tracing/connectblock_benchmark.bt",
      "position" : 138,
      "pull_request_review_id" : 669307973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T16:56:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/639925868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1223908?v=4",
         "events_url" : "https://api.github.com/users/Emzy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Emzy/followers",
         "following_url" : "https://api.github.com/users/Emzy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Emzy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Emzy",
         "id" : 1223908,
         "login" : "Emzy",
         "node_id" : "MDQ6VXNlcjEyMjM5MDg=",
         "organizations_url" : "https://api.github.com/users/Emzy/orgs",
         "received_events_url" : "https://api.github.com/users/Emzy/received_events",
         "repos_url" : "https://api.github.com/users/Emzy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Emzy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Emzy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Emzy"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK - very cool. Will review soon.",
      "created_at" : "2021-05-29T03:43:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-850762746",
      "id" : 850762746,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1MDc2Mjc0Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-29T03:43:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/850762746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646429202"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646429202"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems like histogram support for `print()` was added in a later version of bpftrace (I've been using `v0.11.4`). I've changed it to `printf()` which should work with `v0.9` and `v0.11`. ",
      "commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "created_at" : "2021-06-07T09:39:42Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+#!/usr/bin/env bpftrace\n+\n+/*\n+\n+  USAGE:\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt <start height> <end height> <logging threshold in ms>\n+\n+  - The environment variable BPFTRACE_STRLEN needs to be set to 65 chars as\n+    strings are limited to 64 chars by default. Hex strings with Bitcoin block\n+    hashes are 64 hex chars + 1 null-termination char.\n+  - <start height> sets the height at which the benchmark should start. Setting\n+    the start height to 0 starts the benchmark immediately, even before the\n+    first block is connected.\n+  - <end height> sets the height after which the benchmark should end. Setting\n+    the end height to 0 disables the benchmark. The script only logs blocks\n+    over <logging threshold in ms>.\n+  - Threshold <logging threshold in ms>\n+\n+  This script requires a 'bitcoind' binary compiled with eBPF support and the\n+  'validation:block_connected' USDT. By default, it's assumed that 'bitcoind' is\n+  located in './src/bitcoind'. This can be modified in the script below.\n+\n+  EXAMPLES:\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 300000 680000 1000\n+\n+  When run together 'bitcoind -reindex', this benchmarks the time it takes to\n+  connect the blocks between height 300.000 and 680.000 (inclusive) and prints\n+  details about all blocks that take longer than 1000ms to connect. Prints a\n+  histogram with block connection times when the benchmark is finished.\n+\n+\n+  BPFTRACE_STRLEN=65 bpftrace contrib/tracing/connectblock_benchmark.bt 0 0 500\n+\n+  When running together 'bitcoind', all newly connected blocks that\n+  take longer than 500ms to connect are logged. A histogram with block\n+  connection times is shown when the script is terminated.\n+\n+*/\n+\n+BEGIN\n+{\n+  $start_height = $1;\n+  $end_height = $2;\n+  $logging_threshold_ms = $3;\n+\n+  if ($end_height < $start_height) {\n+    printf(\"Error: start height (%d) larger than end height (%d)!\\n\", $start_height, $end_height);\n+    exit();\n+  }\n+\n+  if ($end_height > 0) {\n+    printf(\"ConnectBlock benchmark between height %d and %d inclusive\\n\", $start_height, $end_height);\n+  } else {\n+    printf(\"ConnectBlock logging starting at height %d\\n\", $start_height);\n+  }\n+\n+  if ($logging_threshold_ms > 0) {\n+    printf(\"Logging blocks taking longer than %d ms to connect.\\n\", $3);\n+  }\n+\n+  if ($start_height == 0) {\n+    @start = nsecs;\n+  }\n+}\n+\n+/*\n+  Attaches to the 'validation:block_connected' USDT and collects stats when the\n+  connected block is between the start and end height (or the end height is\n+  unset).\n+*/\n+usdt:./src/bitcoind:validation:block_connected /arg1 >= $1 && (arg1 <= $2 || $2 == 0 )/\n+{\n+  $height = arg1;\n+  $transactions = arg2;\n+  $inputs = arg3;\n+  $sigops =  arg4;\n+  $duration = (uint64) arg5;\n+\n+  @height = $height;\n+\n+  @blocks = @blocks + 1;\n+  @transactions = @transactions + $transactions;\n+  @inputs = @inputs + $inputs;\n+  @sigops = @sigops + $sigops;\n+\n+  @durations = hist($duration / 1000);\n+\n+  if ($height == $1 && $height != 0) {\n+    @start = nsecs;\n+    printf(\"Starting Connect Block Benchmark between height %d and %d.\\n\", $1, $2);\n+  }\n+\n+  if ($2 > 0 && $height >= $2) {\n+    @end = nsecs;\n+    $duration = @end - @start;\n+    printf(\"\\nTook %d ms to connect the blocks between height %d and %d.\\n\", $duration / 1000000, $1, $2);\n+    exit();\n+  }\n+}\n+\n+/*\n+  Attaches to the 'validation:block_connected' USDT and logs information about\n+  blocks where the time it took to connect the block is above the\n+  <logging threshold in ms>.\n+*/\n+usdt:./src/bitcoind:validation:block_connected / (uint64) arg5 / 1000> $3 /\n+{\n+  $hash_str = str(arg0);\n+  $height = (int32) arg1;\n+  $transactions = (uint64) arg2;\n+  $inputs = (int32) arg3;\n+  $sigops = (int64) arg4;\n+  $duration = (int64) arg5;\n+\n+  printf(\"Block %d (%s)  %4d tx  %5d ins  %5d sigops  took %4d ms\\n\", $height, $hash_str, $transactions, $inputs, $sigops, (uint64) $duration / 1000);\n+}\n+\n+\n+/*\n+  Prints stats about the blocks, transactions, inputs, and sigops processed in\n+  the last second (if any).\n+*/\n+interval:s:1 {\n+  if (@blocks > 0) {\n+    printf(\"BENCH %4d blk/s %6d tx/s %7d inputs/s %8d sigops/s (height %d)\\n\", @blocks, @transactions, @inputs, @sigops, @height);\n+\n+    zero(@blocks);\n+    zero(@transactions);\n+    zero(@inputs);\n+    zero(@sigops);\n+  }\n+}\n+\n+END\n+{\n+  print(\"\\nHistogram of block connection times in milliseconds (ms).\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646429202",
      "id" : 646429202,
      "in_reply_to_id" : 639898074,
      "line" : 138,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjQyOTIwMg==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 138,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "contrib/tracing/connectblock_benchmark.bt",
      "position" : 138,
      "pull_request_review_id" : 677197291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-07T09:39:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646429202",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646471166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646471166"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks! That comment was incorrect and super confusing. I've changed it to\r\n\r\n``` c\r\n// lookup() does not return a NULL pointer. However, the BPF verifier\r\n// requires an explicit check that that the `msg` pointer isn't a NULL\r\n// pointer. See https://github.com/iovisor/bcc/issues/2595\r\nif (msg == NULL) return 1;\r\n```\r\n\r\nSee also https://github.com/iovisor/bcc/issues/2595\r\n",
      "commit_id" : "462a980ebc970da1da6f76af6db5d173cd9cf951",
      "created_at" : "2021-06-07T10:39:56Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+\"\"\" Demonstration of eBPF limitations and the effect on USDT with the\n+    net:inbound_message and net:outbound_message tracepoints. \"\"\"\n+\n+# This script shows a limitation of eBPF when data larger than 32kb is passed to\n+# user-space. It uses BCC (https://github.com/iovisor/bcc) to load a sandboxed\n+# eBPF program into the Linux kernel (root privileges are required). The eBPF\n+# program attaches to two statically defined tracepoints. The tracepoint\n+# 'net:inbound_message' is called when a new P2P message is received, and\n+# 'net:outbound_message' is called on outbound P2P messages. The eBPF program\n+# submits the P2P messages to this script via a BPF ring buffer. The submitted\n+# messages are printed.\n+\n+# eBPF Limitations:\n+#\n+# Bitcoin P2P messages can be larger than 32kb (e.g tx, block, ...). The eBFP\n+# VM's stack is limited to 512 bytes, and we can't allocate more than about 32kb\n+# for a P2P message in the eBPF VM. The message data is cut off when the message\n+# is larger than MAX_MSG_DATA_LENGTH (see definition below). This can be detected\n+# in user-space by comparing the data length to the message length variable. The\n+# message is cut off when the data length is smaller than the message length.\n+# A warning is included with the printed message data.\n+#\n+# Data is submitted to user-space (i.e. to this script) via a ring buffer. The\n+# throughput of the ring buffer is limited. Each p2p_message is about 32kb in\n+# size. In- or outbound messages submitted to the ring buffer in rapid\n+# succession fill the ring buffer faster than it can be read. Some messages are\n+# lost.\n+#\n+# BCC prints: \"Possibly lost 2 samples\" on lost messages.\n+\n+import sys\n+from bcc import BPF, USDT\n+\n+# BCC: The C program to be compiled to an eBPF program (by BCC) and loaded into\n+# a sandboxed Linux kernel VM.\n+program = \"\"\"\n+#include <uapi/linux/ptrace.h>\n+\n+#define MIN(a,b) ({ __typeof__ (a) _a = (a); __typeof__ (b) _b = (b); _a < _b ? _a : _b; })\n+\n+// Maximum possible allocation size\n+// from include/linux/percpu.h in the Linux kernel\n+#define PCPU_MIN_UNIT_SIZE (32 << 10)\n+\n+// Tor v3 addresses are 62 chars + 6 chars for the port (':12345').\n+#define MAX_PEER_ADDR_LENGTH 62 + 6\n+#define MAX_PEER_CONN_TYPE_LENGTH 20\n+#define MAX_MSG_TYPE_LENGTH 20\n+#define MAX_MSG_DATA_LENGTH PCPU_MIN_UNIT_SIZE - 200\n+\n+struct p2p_message\n+{\n+    u64     peer_id;\n+    char    peer_addr[MAX_PEER_ADDR_LENGTH];\n+    char    peer_conn_type[MAX_PEER_CONN_TYPE_LENGTH];\n+    char    msg_type[MAX_MSG_TYPE_LENGTH];\n+    u64     msg_size;\n+    u8      msg[MAX_MSG_DATA_LENGTH];\n+};\n+\n+// We can't store the p2p_message struct on the eBPF stack as it is limited to\n+// 512 bytes and P2P message can be bigger than 512 bytes. However, we can use\n+// an BPF-array with a length of 1 to allocate up to 32768 bytes (this is\n+// defined by PCPU_MIN_UNIT_SIZE in include/linux/percpu.h in the Linux kernel).\n+// Also see https://github.com/iovisor/bcc/issues/2306\n+BPF_ARRAY(msg_arr, struct p2p_message, 1);\n+\n+// Two BPF perf buffers for pushing data (here P2P messages) to user -pace.\n+BPF_PERF_OUTPUT(inbound_messages);\n+BPF_PERF_OUTPUT(outbound_messages);\n+\n+int trace_inbound_message(struct pt_regs *ctx) {\n+    int idx = 0;\n+    struct p2p_message *msg = msg_arr.lookup(&idx);\n+\n+    bpf_trace_printk(\"inbound!\\\\n\");\n+\n+    // lookup() might not set the pointer `msg` to NULL. Thus, the BPF-verifier\n+    // requires that we check that `msg` is a NULL pointer.\n+    if (msg == NULL) {\n+        bpf_trace_printk(\"not NULL\\\\n\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646471166",
      "id" : 646471166,
      "in_reply_to_id" : 639477281,
      "line" : 83,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjQ3MTE2Ng==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 83,
      "original_position" : 83,
      "original_start_line" : null,
      "path" : "contrib/tracing/log_raw_p2p_msgs.py",
      "position" : 83,
      "pull_request_review_id" : 677253200,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-07T10:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646471166",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646484967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646484967"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hm, I agree that this is the case for Ubuntu. There seem to be naming differences between distros. \r\n\r\nI've documented that there might be binary naming differences depending on distro used and added `tplist-bpfcc` as an example for Ubuntu (Ubuntu is the most commonly used Linux distro, but I'm not sure how that relates to Bitcoin Core developers). ",
      "commit_id" : "462a980ebc970da1da6f76af6db5d173cd9cf951",
      "created_at" : "2021-06-07T11:01:02Z",
      "diff_hunk" : "@@ -0,0 +1,263 @@\n+# User-space, Statically Defined Tracing (USDT) for Bitcoin Core\n+\n+Bitcoin Core includes statically defined tracepoints to allow for more\n+observability during development, debugging, code review, and production usage.\n+These tracepoints make it possible to keep track of custom statistics and\n+enable detailed monitoring of otherwise hidden internals. They have\n+little to no performance impact when unused.\n+\n+```\n+eBFP and USDT Overview\n+======================\n+\n+                ââââââââââââââââââââ            ââââââââââââââââ\n+                â tracing script   â            â bitcoind     â\n+                â==================â      2.    â==============â\n+                â  eBPF  â tracing â      hooks â              â\n+                â  code  â logic   â      intoâââ¤âºtracepoint 1ââ¼ââââ 3.\n+                ââââââ¬ââââ´âââ²âââââââ          âââ¤âºtracepoint 2 â   â pass args\n+            1.       â      â 4.              â â ...          â   â to eBPF\n+    User    compiles â      â pass data to    â ââââââââââââââââ   â program\n+    Space    & loads â      â tracing script  â                    â\n+    ââââââââââââââââââ¼âââââââ¼ââââââââââââââââââ¼âââââââââââââââââââââ¼âââ\n+    Kernel           â      â                 â                    â\n+    Space       ââââ¬ââ¼âââââââ´ââââââââââââââââââ´âââââââââââââ       â\n+                â  â  eBPF program                         âââââââââ\n+                â  âââââââââââââââââââââââââââââââââââââââââ¤\n+                â eBPF kernel Virtual Machine (sandboxed)  â\n+                ââââââââââââââââââââââââââââââââââââââââââââ\n+\n+1. The tracing script compiles the eBPF code and loads the eBFP program into a kernel VM\n+2. The eBPF program hooks into one or more tracepoints\n+3. When the tracepoint is called, the arguments are passed to the eBPF program\n+4. The eBPF program processes the arguments and returns data to the tracing script\n+```\n+\n+The Linux kernel can hook into the tracepoints during runtime and pass data to\n+sandboxed [eBPF] programs running in the kernel. These eBPF programs can, for\n+example, collect statistics or pass data back to user-space scripts for further\n+processing.\n+\n+[eBPF]: https://ebpf.io/\n+\n+The two main eBPF front-ends with support for USDT are [bpftrace] and\n+[BPF Compiler Collection (BCC)]. BCC is used for complex tools and daemons and\n+`bpftrace` is preferred for one-liners and shorter scripts. Examples for both can\n+be found in [contrib/tracing].\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+[contrib/tracing]: ../contrib/tracing/\n+\n+## Tracepoint documentation\n+\n+The currently available tracepoints are listed here.\n+\n+### Context `net`\n+\n+#### Tracepoint `net:inbound_message`\n+\n+Is called when a message is received from a peer over the P2P network. Passes\n+information about our peer, the connection and the message as arguments.\n+\n+Arguments passed:\n+1. Peer ID as `int64`\n+2. Peer Address and Port (IPv4, IPv6, Tor v3, I2P, ...) as `pointer to C-style String` (max. length 68 characters)\n+3. Connection Type (inbound, feeler, outbound-full-relay, ...) as `pointer to C-style String` (max. length 20 characters)\n+4. Message Type (inv, ping, getdata, addrv2, ...) as `pointer to C-style String` (max. length 20 characters)\n+5. Message Size in bytes as `uint64`\n+6. Message Bytes as `pointer to unsigned chars` (i.e. bytes)\n+\n+Note: The message is passed to the tracepoint in full, however, due to space\n+limitations in the eBPF kernel VM it might not be possible to pass the message\n+to user-space in full. Messages longer than a 32kb might be cut off. This can\n+be detected in tracing scripts by comparing the message size to the length of\n+the passed message.\n+\n+#### Tracepoint `net:outbound_message`\n+\n+Is called when a message is send to a peer over the P2P network. Passes\n+information about our peer, the connection and the message as arguments.\n+\n+Arguments passed:\n+1. Peer ID as `int64`\n+2. Peer Address and Port (IPv4, IPv6, Tor v3, I2P, ...) as `pointer to C-style String` (max. length 68 characters)\n+3. Connection Type (inbound, feeler, outbound-full-relay, ...) as `pointer to C-style String` (max. length 20 characters)\n+4. Message Type (inv, ping, getdata, addrv2, ...) as `pointer to C-style String` (max. length 20 characters)\n+5. Message Size in bytes as `uint64`\n+6. Message Bytes as `pointer to unsigned chars` (i.e. bytes)\n+\n+Note: The message is passed to the tracepoint in full, however, due to space\n+limitations in the eBPF kernel VM it might not be possible to pass the message\n+to user-space in full. Messages longer than a 32kb might be cut off. This can\n+be detected in tracing scripts by comparing the message size to the length of\n+the passed message.\n+\n+### Context `validation`\n+\n+#### Tracepoint `validation:block_connected`\n+\n+Is called *after* a block is connected to the chain. Can, for example, be used\n+to benchmark block connections together with `-reindex`.\n+\n+Arguments passed:\n+1. Block Header Hash as `pointer to C-style String` (64 characters)\n+2. Block Height as `int32`\n+3. Transactions in the Block as `uint64`\n+4. Inputs spend in the Block as `int32`\n+5. SigOps in the Block (excluding coinbase SigOps) `uint64`\n+6. Time it took to connect the Block in microseconds (Âµs) as `uint64`\n+7. Block Header Hash as `pointer to unsigned chars` (i.e. 32 bytes in little-endian)\n+\n+Note: The 7th argument can't be accessed by bpftrace and is purposefully chosen\n+to be the block header hash as bytes. See [bpftrace argument limit] for more\n+details.\n+\n+[bpftrace argument limit]: #bpftrace-argument-limit\n+\n+## Adding tracepoints to Bitcoin Core\n+\n+To add a new tracepoint, `#include <util/trace.h>` in the compilation unit where\n+the tracepoint is inserted. Use one of the `TRACEx` macros listed below\n+depending on the number of arguments passed to the tracepoint. Up to 12\n+arguments can be provided. The `context` and `event` specify the names by which\n+the tracepoint is referred to. Please use `snake_case` and try to make sure that\n+the tracepoint names make sense even without detailed knowledge of the\n+implementation details. Do not forget to update the tracepoint list in this\n+document.\n+\n+```c\n+#define TRACE(context, event)\n+#define TRACE1(context, event, a)\n+#define TRACE2(context, event, a, b)\n+#define TRACE3(context, event, a, b, c)\n+#define TRACE4(context, event, a, b, c, d)\n+#define TRACE5(context, event, a, b, c, d, e)\n+#define TRACE6(context, event, a, b, c, d, e, f)\n+#define TRACE7(context, event, a, b, c, d, e, f, g)\n+#define TRACE8(context, event, a, b, c, d, e, f, g, h)\n+#define TRACE9(context, event, a, b, c, d, e, f, g, h, i)\n+#define TRACE10(context, event, a, b, c, d, e, f, g, h, i, j)\n+#define TRACE11(context, event, a, b, c, d, e, f, g, h, i, j, k)\n+#define TRACE12(context, event, a, b, c, d, e, f, g, h, i, j, k, l)\n+```\n+\n+For example:\n+\n+```C++\n+TRACE6(net, inbound_message,\n+    pnode->GetId(),\n+    pnode->GetAddrName().c_str(),\n+    pnode->ConnectionTypeAsString().c_str(),\n+    sanitizedType.c_str(),\n+    msg.data.size(),\n+    msg.data.data()\n+);\n+```\n+\n+### Guidelines and best practices\n+\n+#### Clear motivation and use-case\n+Tracepoints need a clear motivation and use-case. The motivation should\n+outweigh the impact on, for example, code readability. There is no point in\n+adding tracepoints that don't end up being used.\n+\n+#### Provide an example\n+When adding a new tracepoint, provide an example. Examples can show the use case\n+and help reviewers testing that the tracepoint works as intended. The examples\n+can be kept simple but should give others a starting point when working with\n+the tracepoint. See existing examples in [contrib/tracing/].\n+\n+[contrib/tracing/]: ../contrib/tracing/\n+\n+#### No expensive computations for tracepoints\n+Data passed to the tracepoint should be inexpensive to compute. Although the\n+tracepoint itself only has overhead when enabled, the code to compute arguments\n+is always run - even if the tracepoint is not used. For example, avoid\n+serialization and parsing.\n+\n+#### Semi-stable API\n+Tracepoints should have a semi-stable API. Users should be able to rely on the\n+tracepoints for scripting. This means tracepoints need to be documented, and the\n+argument order ideally should not change. If there is an important reason to\n+change argument order, make sure to document the change and update the examples\n+using the tracepoint.\n+\n+#### eBPF Virtual Machine limits\n+Keep the eBPF Virtual Machine limits in mind. eBPF programs receiving data from\n+the tracepoints run in a sandboxed Linux kernel VM. This VM has a limited stack\n+size of 512 bytes. Check if it makes sense to pass larger amounts of data, for\n+example, with a tracing script that can handle the passed data.\n+\n+#### `bpftrace` argument limit\n+While tracepoints can have up to 12 arguments, bpftrace scripts currently only\n+support reading from the first six arguments (`arg0` till `arg5`) on `x86_64`.\n+bpftrace currently lacks real support for handling and printing binary data,\n+like block header hashes and txids. When a tracepoint passes more than six\n+arguments, then string and integer arguments should preferably be placed in the\n+first six argument fields. Binary data can be placed in later arguments. The BCC\n+supports reading from all 12 arguments.\n+\n+#### Strings as C-style String\n+Generally, strings should be passed into the `TRACEx` macros as pointers to\n+C-style strings (a null-terminated sequence of characters). For C++\n+`std::strings`, [`c_str()`]  can be used. It's recommended to document the\n+maximum expected string size if known.\n+\n+\n+[`c_str()`]: https://www.cplusplus.com/reference/string/string/c_str/\n+\n+\n+## Listing available tracepoints\n+\n+Multiple tools can list the available tracepoints in a `bitcoind` binary with\n+USDT support.\n+\n+### GDB - GNU Project Debugger\n+\n+To list probes in Bitcoin Core, use `info probes` in `gdb`:\n+\n+```\n+$ gdb ./src/bitcoind\n+â¦\n+(gdb) info probes\n+Type Provider   Name             Where              Semaphore Object\n+stap net        inbound_message  0x000000000014419e /src/bitcoind\n+stap net        outbound_message 0x0000000000107c05 /src/bitcoind\n+stap validation block_connected  0x00000000002fb10c /src/bitcoind\n+â¦\n+```\n+\n+### With `readelf`\n+\n+The `readelf` tool can be used to display the USDT tracepoints in Bitcoin Core.\n+Look for the notes with the description `NT_STAPSDT`.\n+\n+```\n+$ readelf -n ./src/bitcoind | grep NT_STAPSDT -A 4 -B 2\n+Displaying notes found in: .note.stapsdt\n+  Owner                 Data size\tDescription\n+  stapsdt              0x0000005d\tNT_STAPSDT (SystemTap probe descriptors)\n+    Provider: net\n+    Name: outbound_message\n+    Location: 0x0000000000107c05, Base: 0x0000000000579c90, Semaphore: 0x0000000000000000\n+    Arguments: -8@%r12 8@%rbx 8@%rdi 8@192(%rsp) 8@%rax 8@%rdx\n+â¦\n+```\n+\n+### With `tplist`\n+\n+The `tplist` tool can be found in BCC (see [Installing BCC]). It displays kernel\n+tracepoints or USDT probes and their formats (for more information, see the\n+[`tplist` usage demonstration]).\n+\n+[Installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[`tplist` usage demonstration]: https://github.com/iovisor/bcc/blob/master/tools/tplist_example.txt\n+\n+```\n+$ tplist -l ./src/bitcoind -v",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646484967",
      "id" : 646484967,
      "in_reply_to_id" : 639696163,
      "line" : 261,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjQ4NDk2Nw==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 261,
      "original_position" : 258,
      "original_start_line" : null,
      "path" : "doc/tracing.md",
      "position" : 261,
      "pull_request_review_id" : 677271511,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-07T11:01:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646484967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646485894"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646485894"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for reporting, I'll have a look. Whats your bpftrace version (`bpftrace --v`)?",
      "commit_id" : "462a980ebc970da1da6f76af6db5d173cd9cf951",
      "created_at" : "2021-06-07T11:02:37Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646485894",
      "id" : 646485894,
      "in_reply_to_id" : 639794118,
      "line" : 60,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjQ4NTg5NA==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 60,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 60,
      "pull_request_review_id" : 677272721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-07T11:02:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646485894",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646489040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646489040"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> It would be even super awesome if I could also select each message and can get the content.\r\n\r\nI agree, however I like to keep this example slim. The idea is to provide a showcase and a code example for USDT. Advanced USDT scripts can be collected somewhere else.",
      "commit_id" : "462a980ebc970da1da6f76af6db5d173cd9cf951",
      "created_at" : "2021-06-07T11:07:49Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt\n+```\n+\n+Output\n+```\n+outbound 'ping' msg to peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'pong' msg from peer 11 (outbound-full-relay, [2a02:b10c:f747:1:ef:fake:ipv6:addr]:8333) with 8 bytes\n+inbound 'inv' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+outbound 'getdata' msg to peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 37 bytes\n+inbound 'tx' msg from peer 16 (outbound-full-relay, XX.XX.XXX.121:8333) with 222 bytes\n+outbound 'inv' msg to peer 9 (outbound-full-relay, faketorv3addressa2ufa6odvoi3s77j4uegey0xb10csyfyve2t33curbyd.onion:8333) with 37 bytes\n+outbound 'inv' msg to peer 7 (outbound-full-relay, XX.XX.XXX.242:8333) with 37 bytes\n+â¦\n+```\n+\n+### p2p_monitor.py\n+\n+A BCC Python script using curses for an interactive P2P message monitor. Based\n+on the `net:inbound_message` and `net:outbound_message` tracepoints.\n+\n+Inbound and outbound traffic is listed for each peer together with information\n+about the connection. Peers can be selected individually to view recent P2P\n+messages.\n+\n+```\n+$ python3 contrib/tracing/p2p_monitor.py ./src/bitcoind",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646489040",
      "id" : 646489040,
      "in_reply_to_id" : 639870062,
      "line" : 85,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NjQ4OTA0MA==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 85,
      "pull_request_review_id" : 677277324,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-07T11:07:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/646489040",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm marking this as ready for review. Added a commit documenting the `systemtap` dependency for USDT and installation instructions for Debian-like and Fedora (however, didn't have a chance to test building and hooking into the tracepoints on these distros yet).\r\n\r\nThe macOS CI seems to [complain](https://github.com/bitcoin/bitcoin/pull/22006/checks?check_run_id=2781317934) about the macros in `trace.h`. Haven't figured out what the issue is here. Would appreciate it if someone running macOS could try and build `bitcoind` with this patch.",
      "created_at" : "2021-06-11T12:50:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-859559004",
      "id" : 859559004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1OTU1OTAwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-11T12:50:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/859559004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The macOS CI seems to complain about the macros in trace.h. Haven't figured out what the issue is here. Would appreciate it if someone running macOS could try and build bitcoind with this patch.\r\n\r\nThis should be solved by #22238.",
      "created_at" : "2021-06-14T05:50:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-860385374",
      "id" : 860385374,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDM4NTM3NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-14T05:50:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860385374",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@0xB10C if you rebase this now, the CI should be fixed.",
      "created_at" : "2021-06-18T07:18:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-863817528",
      "id" : 863817528,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MzgxNzUyOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-18T07:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863817528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@fanquake thank you! rebased.",
      "created_at" : "2021-06-18T08:48:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-863873293",
      "id" : 863873293,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2Mzg3MzI5Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-18T08:48:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863873293",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Very nice work, looking forward to reviewing and testing this in detail.",
      "created_at" : "2021-06-18T14:22:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-864075993",
      "id" : 864075993,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2NDA3NTk5Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-18T14:22:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864075993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tested ACK 462a980ebc970da1da6f76af6db5d173cd9cf951, amazing work and great docs ",
      "created_at" : "2021-06-24T20:09:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-867919370",
      "id" : 867919370,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2NzkxOTM3MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-24T20:09:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867919370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22412 by luke-jr\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-07-08T07:07:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-876188382",
      "id" : 876188382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3NjE4ODM4Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-08T07:07:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/876188382",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r667095099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667095099"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is the error supposed to appear during the `./configure` run? In my case, explicitely passing `--enable-ebpf` didn't throw an error when `systemtap-sdt-dev` was still missing, only `ebpf tracing    = no` was displayed on the summary at the end. Tested on Debian bullseye/sid.",
      "commit_id" : "462a980ebc970da1da6f76af6db5d173cd9cf951",
      "created_at" : "2021-07-09T17:07:07Z",
      "diff_hunk" : "@@ -39,6 +40,7 @@ Some dependencies are not needed in all configurations. The following are some f\n * SQLite is not needed with `--disable-wallet` or `--without-sqlite`.\n * Qt is not needed with `--without-gui`.\n * If the qrencode dependency is absent, QR support won't be added. To force an error when that happens, pass `--with-qrencode`.\n+* If the systemtap dependency is absent, USDT support won't compiled in. To force an error when that happens, pass `--enable-ebpf`.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r667095099",
      "id" : 667095099,
      "line" : 43,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzA5NTA5OQ==",
      "original_commit_id" : "70f027341b6ebdd446c885b6db2feadf0962fc79",
      "original_line" : 43,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "doc/dependencies.md",
      "position" : 12,
      "pull_request_review_id" : 703244190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-09T17:07:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667095099",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677439389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/677439389"
         }
      },
      "author_association" : "MEMBER",
      "body" : "How is this supposed to find the process to attach to? Or would it log metrics for any `bitcoind` instance running on the system? (it seems so!) Unless you specify `-p`, I guess.",
      "commit_id" : "462a980ebc970da1da6f76af6db5d173cd9cf951",
      "created_at" : "2021-07-27T13:16:50Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677439389",
      "id" : 677439389,
      "in_reply_to_id" : 639794118,
      "line" : 60,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzQzOTM4OQ==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 60,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 60,
      "pull_request_review_id" : 715900171,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-27T13:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/677439389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "~~Tested ACK 462a980ebc970da1da6f76af6db5d173cd9cf951~~\r\nre-ACK 8f37f5c2a562c38c83fc40234ade9c301fc4e685\r\n\r\nEdit: FWIW, I needed to `sudo apt install python3-bpfcc` to get the Python samples to work on Ubuntu 20.04.",
      "created_at" : "2021-07-27T13:18:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-887504912",
      "id" : 887504912,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "IC_kwDOABII58405kAQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887504912/reactions"
      },
      "updated_at" : "2021-07-27T15:35:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887504912",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677547161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/677547161"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The bpftrace scripts include a relative path to the bitcoind binary in `./src/bitcoind` e.g. `usdt:./src/bitcoind:validation:block_connected`. \r\n\r\nThis is mentioned on the [examples page](https://github.com/bitcoin/bitcoin/pull/22006/files#diff-a0161c271f6b7bf15c36d70d1c3943b2eb9032e6f9c754c00914103dcf7de29dR33-R36).\r\n\r\n",
      "commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2021-07-27T15:10:45Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677547161",
      "id" : 677547161,
      "in_reply_to_id" : 639794118,
      "line" : 60,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzU0NzE2MQ==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 60,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 60,
      "pull_request_review_id" : 716046943,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-27T15:10:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/677547161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677551374"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/677551374"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks. I've tested this and the docs doesn't seem to be correct. I think assumed this to be the case similar to the `--with-qrencode` behavior in the line above.",
      "commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2021-07-27T15:15:07Z",
      "diff_hunk" : "@@ -39,6 +40,7 @@ Some dependencies are not needed in all configurations. The following are some f\n * SQLite is not needed with `--disable-wallet` or `--without-sqlite`.\n * Qt is not needed with `--without-gui`.\n * If the qrencode dependency is absent, QR support won't be added. To force an error when that happens, pass `--with-qrencode`.\n+* If the systemtap dependency is absent, USDT support won't compiled in. To force an error when that happens, pass `--enable-ebpf`.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677551374",
      "id" : 677551374,
      "in_reply_to_id" : 667095099,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzU1MTM3NA==",
      "original_commit_id" : "70f027341b6ebdd446c885b6db2feadf0962fc79",
      "original_line" : 43,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "doc/dependencies.md",
      "position" : null,
      "pull_request_review_id" : 716052422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-27T15:15:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/677551374",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sorry for invalidating the two ACKs. Addressed https://github.com/bitcoin/bitcoin/pull/22006#discussion_r667095099 and fixed another occurrence of https://github.com/bitcoin/bitcoin/pull/22006#discussion_r646471166 I previously forgot (and rebased on top of latest master).\r\n\r\n`git range-diff 462a980eb...8f37f5c2a`",
      "created_at" : "2021-07-27T15:20:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-887603580",
      "id" : 887603580,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "IC_kwDOABII584058F8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887603580/reactions"
      },
      "updated_at" : "2021-07-27T15:20:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887603580",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "range-diff LGTM!\r\n\r\nACK 8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2021-07-27T15:25:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-887607917",
      "id" : 887607917,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "IC_kwDOABII584059Jt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887607917/reactions"
      },
      "updated_at" : "2021-07-27T15:25:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887607917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677638706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/677638706"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think something more general would be `usdt:*bitcoind:net:inbound_message` and then\r\n\r\n`bpftrace -p $(pgrep bitcoind) log_p2p_traffic.bt`\r\n\r\neg this uprobe:\r\n\r\n```\r\nsudo bpftrace -p $(pgrep bitcoind) -e '\r\n  uprobe:*bitcoind:\"PeerManager::ProcessMessages(CNode*, std::atomic<bool>&)\" { printf(\"node %p %d\\n\", arg1, *arg2) }\r\n'\r\n```\r\n\r\nseems to work for me...",
      "commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2021-07-27T17:01:55Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677638706",
      "id" : 677638706,
      "in_reply_to_id" : 639794118,
      "line" : 60,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzYzODcwNg==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 60,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 60,
      "pull_request_review_id" : 716167246,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-27T17:03:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/677638706",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677663209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/677663209"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "oh hmm I don't think you need `*bitcoind`, this also worked for me?\r\n\r\n```\r\nsudo bpftrace -p $(pgrep bitcoind) -e '\r\n  uprobe:\"PeerManager::ProcessMessages(CNode*, std::atomic<bool>&)\" { printf(\"node %p %d\\n\", arg1, *arg2) }\r\n'\r\n```",
      "commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2021-07-27T17:37:05Z",
      "diff_hunk" : "@@ -0,0 +1,241 @@\n+Example scripts for User-space, Statically Defined Tracing (USDT)\n+=================================================================\n+\n+This directory contains scripts showcasing User-space, Statically Defined\n+Tracing (USDT) support for Bitcoin Core on Linux using. For more information on\n+USDT support in Bitcoin Core see the [USDT documentation].\n+\n+[USDT documentation]: ../doc/tracing.md\n+\n+\n+Examples for the two main eBPF front-ends, [bpftrace] and\n+[BPF Compiler Collection (BCC)], with support for USDT, are listed. BCC is used\n+for complex tools and daemons and `bpftrace` is preferred for one-liners and\n+shorter scripts.\n+\n+[bpftrace]: https://github.com/iovisor/bpftrace\n+[BPF Compiler Collection (BCC)]: https://github.com/iovisor/bcc\n+\n+\n+To develop and run bpftrace and BCC scripts you need to install the\n+corresponding packages. See [installing bpftrace] and [installing BCC] for more\n+information. For development there exist a [bpftrace Reference Guide], a\n+[BCC Reference Guide], and a [bcc Python Developer Tutorial].\n+\n+[installing bpftrace]: https://github.com/iovisor/bpftrace/blob/master/INSTALL.md\n+[installing BCC]: https://github.com/iovisor/bcc/blob/master/INSTALL.md\n+[bpftrace Reference Guide]: https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md\n+[BCC Reference Guide]: https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n+[bcc Python Developer Tutorial]: https://github.com/iovisor/bcc/blob/master/docs/tutorial_bcc_python_developer.md\n+\n+## Examples\n+\n+The bpftrace examples contain a relative path to the `bitcoind` binary. By\n+default, the scripts should be run from the repository-root and assume a\n+self-compiled `bitcoind` binary. The paths in the examples can be changed, for\n+example, to point to release builds if needed. See the\n+[Bitcoin Core USDT documentation] on how to list available tracepoints in your\n+`bitcoind` binary.\n+\n+[Bitcoin Core USDT documentation]: ../../doc/tracing.md#listing-available-tracepoints\n+\n+**WARNING: eBPF programs require root privileges to be loaded into a Linux\n+kernel VM. This means the bpftrace and BCC examples must be executed with root\n+privileges. Make sure to carefully review any scripts that you run with root\n+privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`\n+tracepoints.\n+\n+By default, `bpftrace` limits strings to 64 bytes due to the limited stack size\n+in the eBPF VM. For example, Tor v3 addresses exceed the string size limit which\n+results in the port being cut off during logging. The string size limit can be\n+increased with the `BPFTRACE_STRLEN` environment variable (`BPFTRACE_STRLEN=70`\n+works fine).\n+\n+```\n+$ bpftrace contrib/tracing/log_p2p_traffic.bt",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r677663209",
      "id" : 677663209,
      "in_reply_to_id" : 639794118,
      "line" : 60,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzY2MzIwOQ==",
      "original_commit_id" : "a076eb6dc2e8c7e4373b8b5fa2596137a3b1b731",
      "original_line" : 60,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 60,
      "pull_request_review_id" : 716198750,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-27T17:37:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/677663209",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678240396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678240396"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why is this refactor(?) mixed in a non-refactor commit without any explanation?",
      "commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2021-07-28T12:10:24Z",
      "diff_hunk" : "@@ -3017,11 +3018,20 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n-    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId());\n+    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\", msg.m_type, nMessageSize, pnode->GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678240396",
      "id" : 678240396,
      "line" : 3021,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI0MDM5Ng==",
      "original_commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "original_line" : 3021,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 13,
      "pull_request_review_id" : 716919633,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T12:10:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678240396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678250290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678250290"
         }
      },
      "author_association" : "MEMBER",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/22006#discussion_r636805329",
      "commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2021-07-28T12:24:38Z",
      "diff_hunk" : "@@ -3017,11 +3018,20 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n-    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId());\n+    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\", msg.m_type, nMessageSize, pnode->GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678250290",
      "id" : 678250290,
      "in_reply_to_id" : 678240396,
      "line" : 3021,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI1MDI5MA==",
      "original_commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "original_line" : 3021,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 13,
      "pull_request_review_id" : 716932577,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T12:24:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678250290",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678253509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678253509"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would have been good to split the refactor from the feature commit or at least mention it in the commit body. Otherwise reviewing locally is impossible and one needs to rely on GitHub, which showed in the past to be corrupting both code and metadata or be unreachable.",
      "commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2021-07-28T12:29:14Z",
      "diff_hunk" : "@@ -3017,11 +3018,20 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n-    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId());\n+    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\", msg.m_type, nMessageSize, pnode->GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678253509",
      "id" : 678253509,
      "in_reply_to_id" : 678240396,
      "line" : 3021,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI1MzUwOQ==",
      "original_commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "original_line" : 3021,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 13,
      "pull_request_review_id" : 716936895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T12:29:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678253509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678253784"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678253784"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Didn't consider that this needs a explanation in the commit message.",
      "commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2021-07-28T12:29:42Z",
      "diff_hunk" : "@@ -3017,11 +3018,20 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n-    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId());\n+    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\", msg.m_type, nMessageSize, pnode->GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678253784",
      "id" : 678253784,
      "in_reply_to_id" : 678240396,
      "line" : 3021,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI1Mzc4NA==",
      "original_commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "original_line" : 3021,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 13,
      "pull_request_review_id" : 716937298,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T12:30:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678253784",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678255217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678255217"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> It would have been good to split the refactor from the feature commit or at least mention it in the commit body. Otherwise reviewing locally is impossible and one needs to rely on GitHub, which showed in the past to be corrupting both code and metadata or be unreachable.\n\nYes, makes sense. ",
      "commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2021-07-28T12:31:32Z",
      "diff_hunk" : "@@ -3017,11 +3018,20 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n-    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.m_type), nMessageSize, pnode->GetId());\n+    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\", msg.m_type, nMessageSize, pnode->GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r678255217",
      "id" : 678255217,
      "in_reply_to_id" : 678240396,
      "line" : 3021,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI1NTIxNw==",
      "original_commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "original_line" : 3021,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 13,
      "pull_request_review_id" : 716939092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T12:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678255217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "As BPF CO-RE arguably is the future direction for BPF, it's perhaps interesting to explore using libbpf/CO-RE instead of BCC. See https://nakryiko.com/posts/bpf-portability-and-co-re/#bpf-co-re-as-of-2021 and https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/#bpf-code-conversion.",
      "created_at" : "2022-03-18T14:26:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-1072463323",
      "id" : 1072463323,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "IC_kwDOABII584_7H3b",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1072463323/reactions"
      },
      "updated_at" : "2022-03-18T14:26:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1072463323",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15910576?v=4",
         "events_url" : "https://api.github.com/users/rob-scheepens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rob-scheepens/followers",
         "following_url" : "https://api.github.com/users/rob-scheepens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rob-scheepens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rob-scheepens",
         "id" : 15910576,
         "login" : "rob-scheepens",
         "node_id" : "MDQ6VXNlcjE1OTEwNTc2",
         "organizations_url" : "https://api.github.com/users/rob-scheepens/orgs",
         "received_events_url" : "https://api.github.com/users/rob-scheepens/received_events",
         "repos_url" : "https://api.github.com/users/rob-scheepens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rob-scheepens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rob-scheepens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rob-scheepens"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "On Fri, Mar 18, 2022 at 07:27:11AM -0700, rob-scheepens wrote:\n>As BPF CO-RE arguably is the future direction for BPF, it's perhaps interesting to explore using libbpf/CO-RE instead of BCC. See https://nakryiko.com/posts/bpf-portability-and-co-re/#bpf-co-re-as-of-2021 and https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/#bpf-code-conversion.\n\nThis looks great! It might be a fun exercise to convert some of our bcc tools to this for anyone wanting to get more into bitcoin tracing.\n",
      "created_at" : "2022-03-18T15:22:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-1072515747",
      "id" : 1072515747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "IC_kwDOABII584_7Uqj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1072515747/reactions"
      },
      "updated_at" : "2022-03-18T15:22:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1072515747",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@rob-scheepens agree that BPF CO-RE and libbpf is the way to go for future tracing programs. I've looked into this a while ago, but it seems libbpf doesn't support USDT tracepoints yet (see https://github.com/iovisor/bcc/issues/3007). However, there was a mention of a soon to be open sourced libusdt library developed and used in production at Meta by @anakryiko [here](https://lore.kernel.org/bpf/CAEf4BzYRLxzVHw00DUphqqdv2m_AU7Mu=S0JF0PZYN40hBvHgA@mail.gmail.com/). Looking forward to testing this once available! \r\n",
      "created_at" : "2022-03-18T15:48:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-1072538909",
      "id" : 1072538909,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "IC_kwDOABII584_7aUd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1072538909/reactions"
      },
      "updated_at" : "2022-03-18T15:48:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1072538909",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I'm actually cleaning up the code a bit and preparing patches for submission to include proper USDT support in libbpf itself. So be on the lookout for upstream patches this week (or at worst next week, if I get distracted with other stuff this week).",
      "created_at" : "2022-03-21T20:52:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-1074406730",
      "id" : 1074406730,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "IC_kwDOABII585ACiVK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1074406730/reactions"
      },
      "updated_at" : "2022-03-21T20:52:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1074406730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/508075?v=4",
         "events_url" : "https://api.github.com/users/anakryiko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/anakryiko/followers",
         "following_url" : "https://api.github.com/users/anakryiko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/anakryiko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/anakryiko",
         "id" : 508075,
         "login" : "anakryiko",
         "node_id" : "MDQ6VXNlcjUwODA3NQ==",
         "organizations_url" : "https://api.github.com/users/anakryiko/orgs",
         "received_events_url" : "https://api.github.com/users/anakryiko/received_events",
         "repos_url" : "https://api.github.com/users/anakryiko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/anakryiko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/anakryiko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/anakryiko"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r944664239"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944664239"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonatack  there's https://github.com/bitcoin/bitcoin/pull/25832 now!",
      "commit_id" : "8f37f5c2a562c38c83fc40234ade9c301fc4e685",
      "created_at" : "2022-08-12T17:19:29Z",
      "diff_hunk" : "@@ -43,3 +43,88 @@ example, to point to release builds if needed. See the\n kernel VM. This means the bpftrace and BCC examples must be executed with root\n privileges. Make sure to carefully review any scripts that you run with root\n privileges first!**\n+\n+### log_p2p_traffic.bt\n+\n+A bpftrace script logging information about inbound and outbound P2P network\n+messages. Based on the `net:inbound_message` and `net:outbound_message`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#discussion_r944664239",
      "id" : 944664239,
      "in_reply_to_id" : 636775863,
      "line" : 50,
      "node_id" : "PRRC_kwDOABII5844Tm6v",
      "original_commit_id" : "3ca502d16c53717d6901d210d51e5e2e769c9f74",
      "original_line" : 50,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "contrib/tracing/README.md",
      "position" : 50,
      "pull_request_review_id" : 1071387264,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22006",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944664239/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-12T17:19:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944664239",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> I'm actually cleaning up the code a bit and preparing patches for submission to include proper USDT support in libbpf itself. So be on the lookout for upstream patches this week (or at worst next week, if I get distracted with other stuff this week).\r\n\r\nBTW, USDT support was added into libbpf a while ago. See bpf_program__attach_usdt() API and SEC(\"usdt\") examples in kernel selftests/bpf. libbpf-bootstrap also has USDT example (https://github.com/libbpf/libbpf-bootstrap/blob/master/examples/c/usdt.c and https://github.com/libbpf/libbpf-bootstrap/blob/master/examples/c/usdt.bpf.c).",
      "created_at" : "2022-08-15T18:47:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-1215604569",
      "id" : 1215604569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "IC_kwDOABII585IdKdZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215604569/reactions"
      },
      "updated_at" : "2022-08-15T18:47:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215604569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/508075?v=4",
         "events_url" : "https://api.github.com/users/anakryiko/events{/privacy}",
         "followers_url" : "https://api.github.com/users/anakryiko/followers",
         "following_url" : "https://api.github.com/users/anakryiko/following{/other_user}",
         "gists_url" : "https://api.github.com/users/anakryiko/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/anakryiko",
         "id" : 508075,
         "login" : "anakryiko",
         "node_id" : "MDQ6VXNlcjUwODA3NQ==",
         "organizations_url" : "https://api.github.com/users/anakryiko/orgs",
         "received_events_url" : "https://api.github.com/users/anakryiko/received_events",
         "repos_url" : "https://api.github.com/users/anakryiko/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/anakryiko/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/anakryiko/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/anakryiko"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This change was part of 23.0, and had a release note, so removing \"Needs release note\".",
      "created_at" : "2022-09-15T15:15:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22006#issuecomment-1248245254",
      "id" : 1248245254,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22006",
      "node_id" : "IC_kwDOABII585KZrYG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1248245254/reactions"
      },
      "updated_at" : "2022-09-15T15:15:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1248245254",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
