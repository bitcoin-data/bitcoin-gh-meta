{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "**Is your feature request related to a problem? Please describe.**\r\n\r\nBoth MemorySanitizer and Valgrind will only detect uninitialized memory if it is used for branching or IO.\r\n\r\nE.g. the following program performs a computation using an uninitialized variable (`a`) but this won't trigger MSAN/Valgrind:\r\n\r\n```c\r\nint main(void)\r\n{\r\n    int a; int b = a + 10;\r\n    return 0;\r\n}\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nCall \r\n\r\n```c\r\nextern \"C\" void __msan_check_mem_is_initialized(const volatile void *x, size_t size);\r\n```\r\n\r\non the data to make MSAN evaluate it.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAlternative solution that also works with Valgrind: write the data to `/dev/null`:\r\n\r\n```c\r\n#include <stdio.h>\r\n\r\nint main(void)\r\n{\r\n    int a; int b = a + 10;\r\n    FILE* fp = fopen(\"/dev/null\", \"wb\");\r\n    fwrite(&b, sizeof(b), 1, fp);\r\n    fclose(fp);\r\n    return 0;\r\n}\r\n```\r\n\r\n**Additional context**\r\n\r\nProposal: Create a wrapper for `__msan_check_mem_is_initialized` (as a C++ method), e.g.:\r\n\r\n```cpp\r\nvoid TestMsan(const void* data, const size_t size) {\r\n   __msan_check_mem_is_initialized(x, size);\r\n}\r\n```\r\n\r\nAnd use overloaded methods for special types, e.g.\r\n\r\n```cpp\r\nvoid TestMsan(const std::string& s) {\r\n   TestMsan(s.data(), s.size());\r\n}\r\n```\r\n\r\nThen edit all fuzzer harnesses and call `TestMsan` with the output of each non-void method.\r\n\r\nE.g. the [parse_script harness](https://github.com/bitcoin/bitcoin/blob/860093401840d7aad7b439aeba0d1598933bc9c6/src/test/fuzz/parse_script.cpp) would become:\r\n\r\n```cpp\r\n// Copyright (c) 2009-2020 The Bitcoin Core developers\r\n// Distributed under the MIT software license, see the accompanying\r\n// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n\r\n#include <core_io.h>\r\n#include <script/script.h>\r\n#include <test/fuzz/fuzz.h>\r\n\r\nFUZZ_TARGET(parse_script)\r\n{\r\n    const std::string script_string(buffer.begin(), buffer.end());\r\n    try {\r\n        TestMsan(ParseScript(script_string));\r\n    } catch (const std::runtime_error&) {\r\n    }\r\n}\r\n```\r\n\r\nThe same concept can be applied to the unit tests.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22064/comments",
   "created_at" : "2021-05-25T21:15:47Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22064/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/22064",
   "id" : 901377236,
   "labels" : [
      {
         "color" : "7cf575",
         "default" : false,
         "description" : null,
         "id" : 64583,
         "name" : "Feature",
         "node_id" : "MDU6TGFiZWw2NDU4Mw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22064/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU5MDEzNzcyMzY=",
   "number" : 22064,
   "performed_via_github_app" : null,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Fuzzer enhancement: Explicitly check output for uninitialized memory",
   "updated_at" : "2021-05-25T21:15:47Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22064",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/6846644?v=4",
      "events_url" : "https://api.github.com/users/guidovranken/events{/privacy}",
      "followers_url" : "https://api.github.com/users/guidovranken/followers",
      "following_url" : "https://api.github.com/users/guidovranken/following{/other_user}",
      "gists_url" : "https://api.github.com/users/guidovranken/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/guidovranken",
      "id" : 6846644,
      "login" : "guidovranken",
      "node_id" : "MDQ6VXNlcjY4NDY2NDQ=",
      "organizations_url" : "https://api.github.com/users/guidovranken/orgs",
      "received_events_url" : "https://api.github.com/users/guidovranken/received_events",
      "repos_url" : "https://api.github.com/users/guidovranken/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/guidovranken/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/guidovranken/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/guidovranken"
   }
}
