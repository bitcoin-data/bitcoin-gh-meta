[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Thanks for moving ChainTestingSetup into validation_chainstatemanager_tests.cpp!",
      "created_at" : "2020-11-05T19:38:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-722598817",
      "id" : 722598817,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMjU5ODgxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-05T19:38:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722598817",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2020-11-05T20:05:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-722614162",
      "id" : 722614162,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMjYxNDE2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-05T20:05:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722614162",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20228 (addrman: Make addrman a top-level component by jnewbery)\n* #20217 (net: Remove g_relay_txes by jnewbery)\n* #19064 (refactor: Cleanup thread ctor calls by hebasto)\n* #18731 (refactor: Make CCheckQueue RAII-styled by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-11-05T21:12:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-722648327",
      "id" : 722648327,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyMjY0ODMyNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T09:01:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/722648327",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520726209"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You don't need these ctor arguments. Just remove them and call `BasicTestingSetup()` (which will use the default arguments for its constructor).",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-11-10T17:07:12Z",
      "diff_hunk" : "@@ -15,15 +18,62 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+struct ChainTestingSetup : public BasicTestingSetup {\n+    boost::thread_group threadGroup;\n+\n+    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {})",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726209",
      "id" : 520726209,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNjIwOQ==",
      "original_commit_id" : "39387634834a1ef06e587b30fa42a781ce45e460",
      "original_line" : 24,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 527420359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520726209",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520726307"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not needed. Remove.",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-11-10T17:07:21Z",
      "diff_hunk" : "@@ -15,15 +18,62 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+struct ChainTestingSetup : public BasicTestingSetup {\n+    boost::thread_group threadGroup;\n+\n+    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {})\n+        : BasicTestingSetup(chainName, extra_args)\n+    {\n+        // Ideally we'd move all the RPC tests to the functional testing framework\n+        // instead of unit tests, but for now we need these here.\n+        RegisterAllCoreRPCCommands(tableRPC);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726307",
      "id" : 520726307,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNjMwNw==",
      "original_commit_id" : "39387634834a1ef06e587b30fa42a781ce45e460",
      "original_line" : 29,
      "original_position" : 23,
      "original_start_line" : 27,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 527420359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520726307",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520726677"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd suggest moving this below the \"We have to run...\" comment, since it fits with the code there.",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-11-10T17:07:56Z",
      "diff_hunk" : "@@ -15,15 +18,62 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+struct ChainTestingSetup : public BasicTestingSetup {\n+    boost::thread_group threadGroup;\n+\n+    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {})\n+        : BasicTestingSetup(chainName, extra_args)\n+    {\n+        // Ideally we'd move all the RPC tests to the functional testing framework\n+        // instead of unit tests, but for now we need these here.\n+        RegisterAllCoreRPCCommands(tableRPC);\n+\n+        m_node.scheduler = MakeUnique<CScheduler>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726677",
      "id" : 520726677,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNjY3Nw==",
      "original_commit_id" : "39387634834a1ef06e587b30fa42a781ce45e460",
      "original_line" : 31,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 527420359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520726677",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520726782"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Remove this line.",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-11-10T17:08:06Z",
      "diff_hunk" : "@@ -15,15 +18,62 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+struct ChainTestingSetup : public BasicTestingSetup {\n+    boost::thread_group threadGroup;\n+\n+    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {})\n+        : BasicTestingSetup(chainName, extra_args)\n+    {\n+        // Ideally we'd move all the RPC tests to the functional testing framework\n+        // instead of unit tests, but for now we need these here.\n+        RegisterAllCoreRPCCommands(tableRPC);\n+\n+        m_node.scheduler = MakeUnique<CScheduler>();\n+\n+        // We have to run a scheduler thread to prevent ActivateBestChain\n+        // from blocking due to queue overrun.\n+        threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n+        GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n+\n+        pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+\n+        m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator);\n+\n+        m_node.chainman = &::g_chainman;\n+\n+        // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n+        constexpr int script_check_threads = 2;\n+        for (int i = 0; i < script_check_threads; ++i) {\n+            threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+        }\n+        g_parallel_script_checks = true;\n+    }\n+    ~ChainTestingSetup() {\n+        if (m_node.scheduler) m_node.scheduler->stop();\n+        threadGroup.interrupt_all();\n+        threadGroup.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+        m_node.args = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520726782",
      "id" : 520726782,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNjc4Mg==",
      "original_commit_id" : "39387634834a1ef06e587b30fa42a781ce45e460",
      "original_line" : 51,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 527420359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520726782",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520727442"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520727442"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Remove",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-11-10T17:09:05Z",
      "diff_hunk" : "@@ -5,6 +5,9 @@\n #include <chainparams.h>\n #include <consensus/validation.h>\n #include <random.h>\n+#include <rpc/register.h>\n+#include <rpc/server.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520727442",
      "id" : 520727442,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcyNzQ0Mg==",
      "original_commit_id" : "39387634834a1ef06e587b30fa42a781ce45e460",
      "original_line" : 9,
      "original_position" : 5,
      "original_start_line" : 8,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 527420359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520727442",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520802498"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520802498"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I copied this from `~TestingSetup`, is there a reason why this is needed there and not here?",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-11-10T18:59:35Z",
      "diff_hunk" : "@@ -15,15 +18,62 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+struct ChainTestingSetup : public BasicTestingSetup {\n+    boost::thread_group threadGroup;\n+\n+    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {})\n+        : BasicTestingSetup(chainName, extra_args)\n+    {\n+        // Ideally we'd move all the RPC tests to the functional testing framework\n+        // instead of unit tests, but for now we need these here.\n+        RegisterAllCoreRPCCommands(tableRPC);\n+\n+        m_node.scheduler = MakeUnique<CScheduler>();\n+\n+        // We have to run a scheduler thread to prevent ActivateBestChain\n+        // from blocking due to queue overrun.\n+        threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n+        GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n+\n+        pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+\n+        m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator);\n+\n+        m_node.chainman = &::g_chainman;\n+\n+        // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n+        constexpr int script_check_threads = 2;\n+        for (int i = 0; i < script_check_threads; ++i) {\n+            threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+        }\n+        g_parallel_script_checks = true;\n+    }\n+    ~ChainTestingSetup() {\n+        if (m_node.scheduler) m_node.scheduler->stop();\n+        threadGroup.interrupt_all();\n+        threadGroup.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+        m_node.args = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520802498",
      "id" : 520802498,
      "in_reply_to_id" : 520726782,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMjQ5OA==",
      "original_commit_id" : "39387634834a1ef06e587b30fa42a781ce45e460",
      "original_line" : 51,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 527517158,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520802498",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520810288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520810288"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's a bit odd to have the low level code copied here, and require modifying `src/test/validation_chainstatemanager_tests.cpp` whenever the testing setup is upgraded.\r\n\r\nwouldn't it be possible to simply keep using the `TestingSetup` here, like the tests did previously, and then do specific undo-hacks (hopefully less code) to unload the chainstates (and/or whatever else is required)",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-11-10T19:11:05Z",
      "diff_hunk" : "@@ -15,15 +18,62 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+struct ChainTestingSetup : public BasicTestingSetup {\n+    boost::thread_group threadGroup;\n+\n+    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {})\n+        : BasicTestingSetup(chainName, extra_args)\n+    {\n+        // Ideally we'd move all the RPC tests to the functional testing framework\n+        // instead of unit tests, but for now we need these here.\n+        RegisterAllCoreRPCCommands(tableRPC);\n+\n+        m_node.scheduler = MakeUnique<CScheduler>();\n+\n+        // We have to run a scheduler thread to prevent ActivateBestChain\n+        // from blocking due to queue overrun.\n+        threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n+        GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n+\n+        pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+\n+        m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator);\n+\n+        m_node.chainman = &::g_chainman;\n+\n+        // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n+        constexpr int script_check_threads = 2;\n+        for (int i = 0; i < script_check_threads; ++i) {\n+            threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+        }\n+        g_parallel_script_checks = true;\n+    }\n+    ~ChainTestingSetup() {\n+        if (m_node.scheduler) m_node.scheduler->stop();\n+        threadGroup.interrupt_all();\n+        threadGroup.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+        m_node.args = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520810288",
      "id" : 520810288,
      "in_reply_to_id" : 520726782,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxMDI4OA==",
      "original_commit_id" : "39387634834a1ef06e587b30fa42a781ce45e460",
      "original_line" : 51,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 527525530,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520810288",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520821707"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520821707"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oops. My mistake. This should be left. I was confusing it with the RPC registration/deregistration.",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-11-10T19:30:47Z",
      "diff_hunk" : "@@ -15,15 +18,62 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+struct ChainTestingSetup : public BasicTestingSetup {\n+    boost::thread_group threadGroup;\n+\n+    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {})\n+        : BasicTestingSetup(chainName, extra_args)\n+    {\n+        // Ideally we'd move all the RPC tests to the functional testing framework\n+        // instead of unit tests, but for now we need these here.\n+        RegisterAllCoreRPCCommands(tableRPC);\n+\n+        m_node.scheduler = MakeUnique<CScheduler>();\n+\n+        // We have to run a scheduler thread to prevent ActivateBestChain\n+        // from blocking due to queue overrun.\n+        threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n+        GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n+\n+        pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+\n+        m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator);\n+\n+        m_node.chainman = &::g_chainman;\n+\n+        // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n+        constexpr int script_check_threads = 2;\n+        for (int i = 0; i < script_check_threads; ++i) {\n+            threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+        }\n+        g_parallel_script_checks = true;\n+    }\n+    ~ChainTestingSetup() {\n+        if (m_node.scheduler) m_node.scheduler->stop();\n+        threadGroup.interrupt_all();\n+        threadGroup.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+        m_node.args = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520821707",
      "id" : 520821707,
      "in_reply_to_id" : 520726782,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyMTcwNw==",
      "original_commit_id" : "39387634834a1ef06e587b30fa42a781ce45e460",
      "original_line" : 51,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 527539975,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/520821707",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r524803514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/524803514"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke I assume you mean something like:\r\n\r\n```diff\r\ndiff --git a/src/test/validation_chainstatemanager_tests.cpp b/src/test/validation_chainstatemanager_tests.cpp\r\nindex 34e5723964..664405fc5e 100644\r\n--- a/src/test/validation_chainstatemanager_tests.cpp\r\n+++ b/src/test/validation_chainstatemanager_tests.cpp\r\n@@ -17,48 +17,7 @@\r\n \r\n #include <boost/test/unit_test.hpp>\r\n \r\n-struct ChainTestingSetup : public BasicTestingSetup {\r\n-    boost::thread_group threadGroup;\r\n-\r\n-    explicit ChainTestingSetup()\r\n-        : BasicTestingSetup()\r\n-    {\r\n-        // We have to run a scheduler thread to prevent ActivateBestChain\r\n-        // from blocking due to queue overrun.\r\n-        m_node.scheduler = MakeUnique<CScheduler>();\r\n-        threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\r\n-        GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\r\n-\r\n-        pblocktree.reset(new CBlockTreeDB(1 << 20, true));\r\n-\r\n-        m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator);\r\n-\r\n-        m_node.chainman = &::g_chainman;\r\n-\r\n-        // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\r\n-        constexpr int script_check_threads = 2;\r\n-        for (int i = 0; i < script_check_threads; ++i) {\r\n-            threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\r\n-        }\r\n-        g_parallel_script_checks = true;\r\n-    }\r\n-    ~ChainTestingSetup() {\r\n-        if (m_node.scheduler) m_node.scheduler->stop();\r\n-        threadGroup.interrupt_all();\r\n-        threadGroup.join_all();\r\n-        GetMainSignals().FlushBackgroundCallbacks();\r\n-        GetMainSignals().UnregisterBackgroundSignalScheduler();\r\n-        m_node.args = nullptr;\r\n-        UnloadBlockIndex(m_node.mempool.get(), *m_node.chainman);\r\n-        m_node.mempool.reset();\r\n-        m_node.scheduler.reset();\r\n-        m_node.chainman->Reset();\r\n-        m_node.chainman = nullptr;\r\n-        pblocktree.reset();\r\n-    }\r\n-};\r\n-\r\n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, ChainTestingSetup)\r\n+BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\r\n \r\n //! Basic tests for ChainstateManager.\r\n //!\r\n@@ -68,6 +27,9 @@ BOOST_AUTO_TEST_CASE(chainstatemanager)\r\n     ChainstateManager& manager = *m_node.chainman;\r\n     CTxMemPool& mempool = *m_node.mempool;\r\n \r\n+    UnloadBlockIndex(nullptr, manager);\r\n+    manager.Reset();\r\n+\r\n     std::vector<CChainState*> chainstates;\r\n     const CChainParams& chainparams = Params();\r\n \r\n@@ -151,6 +113,9 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\r\n     ChainstateManager& manager = *m_node.chainman;\r\n     CTxMemPool& mempool = *m_node.mempool;\r\n \r\n+    UnloadBlockIndex(nullptr, manager);\r\n+    manager.Reset();\r\n+\r\n     size_t max_cache = 10000;\r\n     manager.m_total_coinsdb_cache = max_cache;\r\n     manager.m_total_coinstip_cache = max_cache;\r\n```\r\n\r\nI found it hard to convince myself that `UnloadBlockIndex` and `Reset` cleanly resets everything exactly to before `ActivateBestChain` is run, which is why I thought repetition wasn't such a bad thing here. Let me know if I'm missing anything though.",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-11-17T00:22:20Z",
      "diff_hunk" : "@@ -15,15 +18,62 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+struct ChainTestingSetup : public BasicTestingSetup {\n+    boost::thread_group threadGroup;\n+\n+    explicit ChainTestingSetup(const std::string& chainName = CBaseChainParams::MAIN, const std::vector<const char*>& extra_args = {})\n+        : BasicTestingSetup(chainName, extra_args)\n+    {\n+        // Ideally we'd move all the RPC tests to the functional testing framework\n+        // instead of unit tests, but for now we need these here.\n+        RegisterAllCoreRPCCommands(tableRPC);\n+\n+        m_node.scheduler = MakeUnique<CScheduler>();\n+\n+        // We have to run a scheduler thread to prevent ActivateBestChain\n+        // from blocking due to queue overrun.\n+        threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n+        GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n+\n+        pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n+\n+        m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator);\n+\n+        m_node.chainman = &::g_chainman;\n+\n+        // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n+        constexpr int script_check_threads = 2;\n+        for (int i = 0; i < script_check_threads; ++i) {\n+            threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+        }\n+        g_parallel_script_checks = true;\n+    }\n+    ~ChainTestingSetup() {\n+        if (m_node.scheduler) m_node.scheduler->stop();\n+        threadGroup.interrupt_all();\n+        threadGroup.join_all();\n+        GetMainSignals().FlushBackgroundCallbacks();\n+        GetMainSignals().UnregisterBackgroundSignalScheduler();\n+        m_node.args = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r524803514",
      "id" : 524803514,
      "in_reply_to_id" : 520726782,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgwMzUxNA==",
      "original_commit_id" : "39387634834a1ef06e587b30fa42a781ce45e460",
      "original_line" : 51,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 531929567,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/524803514",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed a few comments.\r\n\r\n-----\r\n\r\nfuzz CI failing because of https://github.com/bitcoin/bitcoin/pull/20188#issuecomment-728911018.",
      "created_at" : "2020-11-17T17:35:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-729086084",
      "id" : 729086084,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyOTA4NjA4NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-17T17:35:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/729086084",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hopefully as a test-only cleanup PR with a lot of other changes building on top it (#20158), this can be merged soon",
      "created_at" : "2020-12-01T16:38:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-736669735",
      "id" : 736669735,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNjY2OTczNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-01T16:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736669735",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Reason I didn't merge this is that this overlaps with the test changes here: https://github.com/bitcoin/bitcoin/pull/19425#pullrequestreview-534180561. Though there have been outstanding questions and those questions also apply to this pull (in the extent that they overlap).",
      "created_at" : "2020-12-01T16:46:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-736674583",
      "id" : 736674583,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNjY3NDU4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-01T16:46:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736674583",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r533584267"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533584267"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"test: Add new ChainTestingSetup and use it\" (43c880afbcafa9796c838518722594940af69b7d)\r\n\r\nWould suggest using `BOOST_REQUIRE` instead of `assert` or splitting as `bool loaded = c1.LoadGenesisBlock(Params()); assert(loaded);`. Writing code with side effects in an `assert` adds some ambiguity because behavior will depend on value of NDEBUG",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-12-01T17:17:07Z",
      "diff_hunk" : "@@ -122,6 +167,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     {\n         LOCK(::cs_main);\n         c1.InitCoinsCache(1 << 23);\n+        assert(c1.LoadGenesisBlock(Params()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r533584267",
      "id" : 533584267,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU4NDI2Nw==",
      "original_commit_id" : "43c880afbcafa9796c838518722594940af69b7d",
      "original_line" : 170,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 542123958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/533584267",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r535477290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535477290"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh! Didn't know about `NDEBUG`... So when `NDEBUG` is set, the code inside `assert(...)` may be optimized out? Or is it the case that only the result isn't checked/asserted?",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-12-03T18:24:12Z",
      "diff_hunk" : "@@ -122,6 +167,7 @@ BOOST_AUTO_TEST_CASE(chainstatemanager_rebalance_caches)\n     {\n         LOCK(::cs_main);\n         c1.InitCoinsCache(1 << 23);\n+        assert(c1.LoadGenesisBlock(Params()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r535477290",
      "id" : 535477290,
      "in_reply_to_id" : 533584267,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ3NzI5MA==",
      "original_commit_id" : "43c880afbcafa9796c838518722594940af69b7d",
      "original_line" : 170,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544253110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-04T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535477290",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 1319b17e15dfd5a3a6bbf3c67b98fcce72c80812",
      "created_at" : "2020-12-04T11:31:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-738734145",
      "id" : 738734145,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczODczNDE0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-04T11:31:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/738734145",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Pushed 1319b17e15dfd5a3a6bbf3c67b98fcce72c80812 -> 11fac8b2c8001e9aee9debb20df09473b9092b8c:\r\n1. Rebased over master for #20222\r\n2. Changed `assert`s in tests to `BOOST_REQUIRE` as recommended: https://github.com/bitcoin/bitcoin/pull/20323#discussion_r533584267\r\n3. Extracted out testing app initialization and destruction logic into `TestingAppInitSequence` and `TestingAppDestructionSequence` to improve sync and decrease maintenance burden between `ChainTestingSetup` and `TestingSetup` to address: https://github.com/bitcoin/bitcoin/pull/20323#discussion_r520810288\r\n\r\nIn (3), ordering-wise, the script-checking thread initialization was moved up to before the chainstate gets initialized and RPC command registration was moved down. Neither of which should have any tangible effect on the correctness of initialization.\r\n\r\nI can also remove the `bool chain_testing_only` argument to `TestingAppDestructionSequence` as it's a mostly idempotent sequence, somehow I like the self-documentation and symmetry. Let me know what seems better!",
      "created_at" : "2020-12-04T21:40:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-739035976",
      "id" : 739035976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTAzNTk3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-04T21:43:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739035976",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've had a quick look through the new branch and find the `TestingAppInitSequence()` and `TestingAppDestructionSequence()` less clear than the previous version. In general functions that take a bool argument which substantially changes the logic inside that function (in this case `chain_testing_only`), suggest that the abstraction may be wrong.\r\n\r\nWas there an actual problem with the previous branch, or are you just trying to reduce code duplication?",
      "created_at" : "2020-12-07T10:34:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-739830876",
      "id" : 739830876,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTgzMDg3Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-07T10:34:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739830876",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r537405985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537405985"
         }
      },
      "author_association" : "MEMBER",
      "body" : "any reason for the modifications here? reset is idempotent , so doesn't need to be guarded.",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-12-07T10:45:36Z",
      "diff_hunk" : "@@ -124,76 +124,88 @@ BasicTestingSetup::~BasicTestingSetup()\n     ECC_Stop();\n }\n \n-TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n-    : BasicTestingSetup(chainName, extra_args)\n-{\n-    const CChainParams& chainparams = Params();\n-    // Ideally we'd move all the RPC tests to the functional testing framework\n-    // instead of unit tests, but for now we need these here.\n-    RegisterAllCoreRPCCommands(tableRPC);\n-\n-    m_node.scheduler = MakeUnique<CScheduler>();\n-\n+void TestingAppInitSequence(NodeContext& node, boost::thread_group& thread_group, bool chain_testing_only) {\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n-    threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n-    GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n+    node.scheduler = MakeUnique<CScheduler>();\n+    thread_group.create_thread([&] { TraceThread(\"scheduler\", [&] { node.scheduler->serviceQueue(); }); });\n+    GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n \n-    m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator, 1);\n-\n-    m_node.chainman = &::g_chainman;\n-    m_node.chainman->InitializeChainstate(*m_node.mempool);\n-    ::ChainstateActive().InitCoinsDB(\n-        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n-    assert(!::ChainstateActive().CanFlushToDisk());\n-    ::ChainstateActive().InitCoinsCache(1 << 23);\n-    assert(::ChainstateActive().CanFlushToDisk());\n-    if (!LoadGenesisBlock(chainparams)) {\n-        throw std::runtime_error(\"LoadGenesisBlock failed.\");\n-    }\n+    node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator, 1);\n \n-    BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n-        throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n-    }\n+    node.chainman = &::g_chainman;\n \n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n     constexpr int script_check_threads = 2;\n     for (int i = 0; i < script_check_threads; ++i) {\n-        threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+        thread_group.create_thread([i]() { return ThreadScriptCheck(i); });\n     }\n     g_parallel_script_checks = true;\n \n-    m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n-    m_node.peerman = MakeUnique<PeerManager>(chainparams, *m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n-    {\n-        CConnman::Options options;\n-        options.m_msgproc = m_node.peerman.get();\n-        m_node.connman->Init(options);\n+    if (!chain_testing_only) {\n+        const CChainParams& chainparams = Params();\n+        // Ideally we'd move all the RPC tests to the functional testing framework\n+        // instead of unit tests, but for now we need these here.\n+        RegisterAllCoreRPCCommands(tableRPC);\n+\n+        node.chainman->InitializeChainstate(*node.mempool);\n+        ::ChainstateActive().InitCoinsDB(\n+                                         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+        assert(!::ChainstateActive().CanFlushToDisk());\n+        ::ChainstateActive().InitCoinsCache(1 << 23);\n+        assert(::ChainstateActive().CanFlushToDisk());\n+        if (!LoadGenesisBlock(chainparams)) {\n+            throw std::runtime_error(\"LoadGenesisBlock failed.\");\n+        }\n+\n+        BlockValidationState state;\n+        if (!ActivateBestChain(state, chainparams)) {\n+            throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n+        }\n+\n+        node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+        node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n+        node.peerman = MakeUnique<PeerManager>(chainparams, *node.connman, node.banman.get(), *node.scheduler, *node.chainman, *node.mempool);\n+        {\n+            CConnman::Options options;\n+            options.m_msgproc = node.peerman.get();\n+            node.connman->Init(options);\n+        }\n     }\n }\n \n-TestingSetup::~TestingSetup()\n-{\n-    if (m_node.scheduler) m_node.scheduler->stop();\n-    threadGroup.interrupt_all();\n-    threadGroup.join_all();\n+void TestingAppDestructionSequence(NodeContext& node, boost::thread_group& thread_group, bool chain_testing_only) {\n+    if (node.scheduler) node.scheduler->stop();\n+    thread_group.interrupt_all();\n+    thread_group.join_all();\n     GetMainSignals().FlushBackgroundCallbacks();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n-    m_node.connman.reset();\n-    m_node.banman.reset();\n-    m_node.args = nullptr;\n-    UnloadBlockIndex(m_node.mempool.get(), *m_node.chainman);\n-    m_node.mempool.reset();\n-    m_node.scheduler.reset();\n-    m_node.chainman->Reset();\n-    m_node.chainman = nullptr;\n+    if (!chain_testing_only) {\n+        node.connman.reset();\n+        node.banman.reset();\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r537405985",
      "id" : 537405985,
      "line" : 188,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNTk4NQ==",
      "original_commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "original_line" : 188,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.cpp",
      "position" : 114,
      "pull_request_review_id" : 546028109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-07T10:49:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537405985",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r537407409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537407409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Any reason to add this here and not to setup_common? Moving it to setup_common would allow removing the confusing `TestingAppInitSequence` declarations in the header. Also, it would allow other tests to use the `ChainTestingSetup`.",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-12-07T10:47:42Z",
      "diff_hunk" : "@@ -15,15 +17,31 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+struct ChainTestingSetup : public BasicTestingSetup {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r537407409",
      "id" : 537407409,
      "line" : 20,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNzQwOQ==",
      "original_commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "original_line" : 20,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : 14,
      "pull_request_review_id" : 546028109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-07T10:49:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537407409",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r537408230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537408230"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree with john that functions that have a large branch (and a boolean arg) are better split off into two functions",
      "commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "created_at" : "2020-12-07T10:49:06Z",
      "diff_hunk" : "@@ -124,76 +124,88 @@ BasicTestingSetup::~BasicTestingSetup()\n     ECC_Stop();\n }\n \n-TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)\n-    : BasicTestingSetup(chainName, extra_args)\n-{\n-    const CChainParams& chainparams = Params();\n-    // Ideally we'd move all the RPC tests to the functional testing framework\n-    // instead of unit tests, but for now we need these here.\n-    RegisterAllCoreRPCCommands(tableRPC);\n-\n-    m_node.scheduler = MakeUnique<CScheduler>();\n-\n+void TestingAppInitSequence(NodeContext& node, boost::thread_group& thread_group, bool chain_testing_only) {\n     // We have to run a scheduler thread to prevent ActivateBestChain\n     // from blocking due to queue overrun.\n-    threadGroup.create_thread([&] { TraceThread(\"scheduler\", [&] { m_node.scheduler->serviceQueue(); }); });\n-    GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n+    node.scheduler = MakeUnique<CScheduler>();\n+    thread_group.create_thread([&] { TraceThread(\"scheduler\", [&] { node.scheduler->serviceQueue(); }); });\n+    GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n \n-    m_node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator, 1);\n-\n-    m_node.chainman = &::g_chainman;\n-    m_node.chainman->InitializeChainstate(*m_node.mempool);\n-    ::ChainstateActive().InitCoinsDB(\n-        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n-    assert(!::ChainstateActive().CanFlushToDisk());\n-    ::ChainstateActive().InitCoinsCache(1 << 23);\n-    assert(::ChainstateActive().CanFlushToDisk());\n-    if (!LoadGenesisBlock(chainparams)) {\n-        throw std::runtime_error(\"LoadGenesisBlock failed.\");\n-    }\n+    node.mempool = MakeUnique<CTxMemPool>(&::feeEstimator, 1);\n \n-    BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n-        throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n-    }\n+    node.chainman = &::g_chainman;\n \n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n     constexpr int script_check_threads = 2;\n     for (int i = 0; i < script_check_threads; ++i) {\n-        threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n+        thread_group.create_thread([i]() { return ThreadScriptCheck(i); });\n     }\n     g_parallel_script_checks = true;\n \n-    m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n-    m_node.peerman = MakeUnique<PeerManager>(chainparams, *m_node.connman, m_node.banman.get(), *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n-    {\n-        CConnman::Options options;\n-        options.m_msgproc = m_node.peerman.get();\n-        m_node.connman->Init(options);\n+    if (!chain_testing_only) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#discussion_r537408230",
      "id" : 537408230,
      "line" : 147,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwODIzMA==",
      "original_commit_id" : "11fac8b2c8001e9aee9debb20df09473b9092b8c",
      "original_line" : 147,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.cpp",
      "position" : 60,
      "pull_request_review_id" : 546028109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-07T10:49:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537408230",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-12-07T13:04:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-739905471",
      "id" : 739905471,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTkwNTQ3MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-07T13:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739905471",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks everyone for the reviews. The latest push 81137c6 is now rebased over #19485.\r\n\r\nThis PR is intended to just move things around a bit for the rest of the `ChainstateManager` de-globalization to work properly. I believe we've gotten a bit stuck on the intricacies of these `TestingSetup` abstractions.\r\n\r\nPersonally, I don't particularly care how the abstraction works here. The `TestingSetup` classes and their inheritance hierarchy is a somewhat poor abstraction of how our initialization and de-initialization logic work. Therefore, I'd like to just fix this particular problem for now and move on.\r\n\r\nI do fully intend on coming back to the initialization codepaths later, most likely after having moved a couple of mutable statics into classes they logically belong in, and having a larger PR that coalesces and cleans all of this up.\r\n\r\n-----\r\n\r\nIn this latest push I:\r\n\r\n1. Reverted back to my original solution of having this inheritance chain: `TestingSetup` -> `ChainTestingSetup` -> `BasicTestingSetup`. This has the advantage of not having to introduce any new functions.\r\n\tCompared to my last try at making this work, I now take advantage of the idempotency of our teardown sequence and have `~ChainTestingSetup` teardown all application logic while `~TestingSetup` inherits from it.\r\n2. Put `ChainTestingSetup` back in `setup_common` so that future tests can use it as requested [here](https://github.com/bitcoin/bitcoin/pull/20323#discussion_r537407409). (Sorry John, I knew you weren't the biggest fan of this ð)\r\n\r\n-----\r\n\r\n> jnewbery: Was there an actual problem with the previous branch, or are you just trying to reduce code duplication?\r\n\r\nThere wasn't an actual problem with the previous branch, MarcoFalke brought up the concern that it was harder to maintain duplicate codepaths, so this previous push was a (perhaps poorly conceived) attempt at doing so. I agree w/re the bool argument and have since reverted to something similar to how I originally attempted this which avoids using a bool argument.",
      "created_at" : "2020-12-08T20:10:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-740960339",
      "id" : 740960339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MDk2MDMzOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-08T21:08:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/740960339",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for shuffling this around for over a month\r\n\r\nACK 81137c60fe looking excellent now ð©\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 81137c60fe looking excellent now ð©\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjLNQv9G0SWcw2rzItf1EIttkPPy6CX5BxM3WRp4MY+hW42LikQIcTm236LyD9t\r\n/e4homRxM0DT1q6/JKin3RP4y1O4zpLswFaz8nNH7ScmLGyTNdb/HUDxLLNqnynb\r\nTYZYpZP6Md/EWjCoF2kKEBlVmzUeehagq3L9gQ7udXTMZtMu2z1jP6v7/TLe6XxA\r\nHqABCQn9BJYcD5dqHETg4TYBP2hG5bUnh5rmJWHnn0ifdEmnS4cbExtHCL9nxQpF\r\n1evmfgdk6nXzkkEllJsOm2tYVGhacW5Z483w/jFveBPmVJgduYmAO5mddMreqV/5\r\n/1Gegw1YQnb6LmEyHhsD2POxlidXksNTOEAyghOwylFFPN8467R/LQEXr8ltstQ9\r\nNnhkoCNVgSDBuzkdTB+n8S6gfQyTp2T3klrqr3GHJIPlRikRLGI5bOwtjtZsFkGX\r\nj5508lSIANRoUKGv3nbfWL47l8he+dYMfCvpqkLWxRPqGT+MnIQV9aRKKxLcSFIb\r\nczC392Ra\r\n=hAKu\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `1fd492318f7f8e7f0f9f62fce5042d824a2c5c3fcb368e2027f02582ea8ed27e  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401081fd492318f7f8e7f0f9f62fce5042d824a2c5c3fcb368e2027f02582ea8ed27ef0103e3593fed7da326e22d4c7cab47b6a5808fff01060f86268a2ab50023831207e0d17d5c408f1045fd07539f0081526a420059384e10083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff0108a21a35dba35cb523c2d87be010dd57c08f1045fd07539f008e8d8c81035886ace0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff010a7cb02798d158bbec4791e51dc25387f08f1045fd07539f0089607b427ecf873830083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010cf5aa2e6831f77a75373d16afe36cd4f08f1045fd07539f008f6d3a6b761ae1a890083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2020-12-09T06:57:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-741575690",
      "id" : 741575690,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTU3NTY5MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T06:57:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741575690",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> 2. Put ChainTestingSetup back in setup_common so that future tests can use it as requested here. (Sorry John, I knew you weren't the biggest fan of this confused)\r\n\r\nOk, let's wait for @jnewbery 's green light before merge",
      "created_at" : "2020-12-09T07:02:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-741577830",
      "id" : 741577830,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTU3NzgzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T07:02:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741577830",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 81137c60fe6234569e1c5e6760f3a6f016956944",
      "created_at" : "2020-12-09T08:50:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323#issuecomment-741628388",
      "id" : 741628388,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTYyODM4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T08:50:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741628388",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
