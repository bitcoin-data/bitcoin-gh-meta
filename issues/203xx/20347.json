{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "Thanks very much to @achow101 for his patience while I got to the bottom of this.\r\n\r\nThe current `CreateTransaction` logic interacts with branch-and-bound and subtract-fee-from-output in a subtle and slightly-incorrect way, which can cause coin selection to fail sometimes even there are sufficient funds and BnB succeeds. The issue is as follows:\r\n\r\n1. On [line 2915 SelectCoins is called](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L2915), which if it succeeds using BnB, leaves [a \"change\" amount which is always absorbed into fee](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L2940-L2943).\r\n2. We then [check if the resulting fee is sufficient to pass the transaction](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L2984). When subtract-fee-from-output is on, BnB uses exact rather than effective values for all inputs and outputs, so this is fairly unlikely to be the case.\r\n3. This is no big deal; since subtract-fee-from-output is on, we can always correct the fee on the next iteration. So on [line 3039](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L3036-L3040) we turn off `pick_new_inputs`; a few lines later we set `nFeeRet` to `nFeeNeeded`, and we wrap around to the top of the loop. On the next iteration, [we subtract the new `nFeeRet` value from outputs](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L2869-L2878) and don't bother calling `SelectCoins` again. (If the subtraction failed the transaction was impossible to satisfy anyway and so we just bail.)\r\n4. We [recompute nFeeNeeded](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L2977-L2984), which won't have changed since we didn't redo coin selection, and compare `nFeeRet` against it, which will pass since we explicitly assigned it to be equal in the previous iteration. Then on [line 3013](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L3013) we break out of the loop successfully.\r\n\r\nThe problem is in Step 4, where we recompute `nFeeNeeded` and assume that it hasn't changed. In fact, if the BnB \"change\" value was greater than our discard threshold, we will erroneously [add a change output on line 2959](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L2959) and therefore compute a `nFeeNeeded` value that is higher than `nFeeRet`.  We then fail the fee-check on an iteration where we hadn't even done coin selection, which causes [the transaction to fail with a generic error message](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L3015-L3022).\r\n\r\nThe reason we add the erroneous change output is the [check on line 2940](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L2940) which avoids adding change outputs when BnB is used. On the second iteration, because coin selection is overridden by the `pick_new_inputs` variable, [we set `bnb_used` to false](https://github.com/bitcoin/bitcoin/blob/7e373294a5ae819099c39d9d03d1f5a311d63cfc/src/wallet/wallet.cpp#L2928).\r\n\r\nThis bug is pretty hard to trigger under normal circumstances, because it requires BnB to compute a fee greater than our discard threshold but lower than the `cost_of_change` variable it uses to decide whether it can produce a change-less transaction, and usually the intersection of these conditions is empty. But under extreme fee circumstances I think it can happen, and you can also force it to happen by setting `-minrelaytxfee` and `-discardfee` and then trying to fund a transaction whose output amount misses a BnB-findable input amount by a tiny window. I've posted a [regression test which reliably triggers](https://gist.github.com/apoelstra/29ead9c1bd49c50d46129187a79061b7).\r\n\r\nI think the fix is to just not reset `bnb_used` when `pick_new_inputs` is set, but I'm not certain, and in any case @achow101 tells me he has some upcoming refactors which will eliminate this ugly loop entirely.\r\n",
   "closed_at" : "2021-05-25T23:55:59Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   },
   "comments" : 2,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20347/comments",
   "created_at" : "2020-11-09T00:47:21Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20347/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/20347",
   "id" : 738596791,
   "labels" : [
      {
         "color" : "FBBAAB",
         "default" : false,
         "description" : null,
         "id" : 64585,
         "name" : "Bug",
         "node_id" : "MDU6TGFiZWw2NDU4NQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug"
      },
      {
         "color" : "08a781",
         "default" : false,
         "description" : null,
         "id" : 149424,
         "name" : "Wallet",
         "node_id" : "MDU6TGFiZWwxNDk0MjQ=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20347/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU3Mzg1OTY3OTE=",
   "number" : 20347,
   "performed_via_github_app" : null,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Edge case in CreateTransaction causes coin selection to fail sometimes when it shouldn't",
   "updated_at" : "2021-05-25T23:55:59Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20347",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/1351933?v=4",
      "events_url" : "https://api.github.com/users/apoelstra/events{/privacy}",
      "followers_url" : "https://api.github.com/users/apoelstra/followers",
      "following_url" : "https://api.github.com/users/apoelstra/following{/other_user}",
      "gists_url" : "https://api.github.com/users/apoelstra/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/apoelstra",
      "id" : 1351933,
      "login" : "apoelstra",
      "node_id" : "MDQ6VXNlcjEzNTE5MzM=",
      "organizations_url" : "https://api.github.com/users/apoelstra/orgs",
      "received_events_url" : "https://api.github.com/users/apoelstra/received_events",
      "repos_url" : "https://api.github.com/users/apoelstra/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/apoelstra/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/apoelstra/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/apoelstra"
   }
}
