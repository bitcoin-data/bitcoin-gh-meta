{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "This is part 1/n of the effort to [de-globalize `ChainstateManager`](https://github.com/bitcoin/bitcoin/pull/20158)\r\n\r\nReviewers: Looking for tested/Code-Review/plain-ACKs\r\n\r\n### Context\r\n\r\nIn many of our tests, we manually instantiate `NodeContext`s or `ChainstateManager`s in the test code, which is error prone. Instead, we should create or use existing references because:\r\n1. Before we [de-globalize `ChainstateManager`](https://github.com/bitcoin/bitcoin/pull/20158), much of our code still acts on `g_chainman` (our global `ChainstateManager`), sometimes even when you're calling a method on a specific instance of `ChainstateManager`! This means that we may act on two instances of `ChainstateManager`, which is most likely not what we want.\r\n2. Using existing references (initialized by the `{Basic,}TestingSetup` constructors) means that you're acting on objects which are properly initialized, instead of \"just initialized enough for this dang test to pass\". Also, they're already there! It's free!\r\n3. By acting on the right object, we also allow the review-only assertions in future commits of [de-globalize `ChainstateManager`](https://github.com/bitcoin/bitcoin/pull/20158) to work and demonstrate correctness.\r\n\r\nSome more detailed debugging notes can be found in the first commit, reproduced below:\r\n```\r\nPreviously, the validation_chainstatemanager_tests test suite\r\ninstantiated its own duplicate ChainstateManager on which tests were\r\nperformed.\r\n\r\nThis wasn't a problem for the specific actions performed in\r\nthat suite. However, the existence of this duplicate ChainstateManager\r\nand the fact that many of our validation static functions reach for\r\ng_chainman, ::Chain(state|)Active means we may end up acting on two\r\ndifferent CChainStates should we write more extensive tests in the\r\nfuture.\r\n\r\nThis change adds a new ChainTestingSetup which performs all\r\ninitialization previously done by TestingSetup except:\r\n\r\n1. Mempool sanity check frequency setting\r\n2. ChainState initialization\r\n3. Genesis Activation\r\n4. {Ban,Conn,Peer}Man initialization\r\n\r\nMeans that we will no longer need to initialize a duplicate\r\nChainstateManger in order to test the initialization codepaths of\r\nCChainState and ChainstateManager.\r\n\r\nLastly, this change has the additional benefit of allowing for\r\nreview-only assertions meant to show correctness to work in future work\r\nde-globalizing g_chainman.\r\n\r\nIn the test chainstatemanager_rebalance_caches, an additional\r\nLoadGenesisBlock call is added as MaybeReblanaceCaches eventually calls\r\nFlushBlockFile, which tries to access vinfoBlockFile[nLastBlockFile],\r\nwhich is out of bounds when LoadGenesisBlock hasn't been called yet.\r\n\r\n-----\r\n\r\nNote for the future:\r\n\r\nIn a previous version of this change, I put ChainTestingSetup between\r\nBasicTestingSetup and TestingSetup such that TestingSetup inherited from\r\nChainTestingSetup.\r\n\r\nThis was suboptimal, and showed how the class con/destructor inheritance\r\nstructure we have for these TestingSetup classes is probably not the\r\nmost suitable abstraction. In particular, for both TestingSetup and\r\nChainTestingSetup, we need to stop the scheduler first before anything\r\nelse. Otherwise classes depending on the scheduler may be referenced\r\nby the scheduler after said classes are freed. This means that there's\r\nno clear parallel between our teardown code and C++'s destructuring\r\norder for class hierarchies.\r\n\r\nFuture work should strive to coalesce (as much as possible) test and\r\nnon-test init codepaths and perhaps structure it in a more fail-proof\r\nway.\r\n```",
   "closed_at" : "2020-12-09T09:24:41Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 13,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323/comments",
   "created_at" : "2020-11-05T18:56:53Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323",
   "id" : 737185255,
   "labels" : [
      {
         "color" : "d4c5f9",
         "default" : false,
         "description" : null,
         "id" : 62963516,
         "name" : "Tests",
         "node_id" : "MDU6TGFiZWw2Mjk2MzUxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0NTE2MjcxMjMx",
   "number" : 20323,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/20323.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20323",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/20323.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20323"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "tests: Create or use existing properly initialized NodeContexts",
   "updated_at" : "2020-12-09T09:24:41Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20323",
   "user" : {
      "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
      "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
      "followers_url" : "https://api.github.com/users/dongcarl/followers",
      "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/dongcarl",
      "id" : 3445290,
      "login" : "dongcarl",
      "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
      "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
      "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
      "repos_url" : "https://api.github.com/users/dongcarl/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/dongcarl"
   }
}
