[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25426#discussion_r906870139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25426"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906870139"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I just reallize, this is the only use of `getsockname`. We could also add `GetBindAddress` to `Sock` directly?\r\nOr is it better to keep it separate from the `Address` abstraction?",
      "commit_id" : "a8d6abba5ec4ae2a3375e9be0b739f298899eca2",
      "created_at" : "2022-06-26T20:59:43Z",
      "diff_hunk" : "@@ -422,13 +422,13 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n }\n \n /** Get the bind address for a socket as CAddress */\n-static CAddress GetBindAddress(SOCKET sock)\n+static CAddress GetBindAddress(const Sock& sock)\n {\n     CAddress addr_bind;\n     struct sockaddr_storage sockaddr_bind;\n     socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n-    if (sock != INVALID_SOCKET) {\n-        if (!getsockname(sock, (struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+    if (sock.Get() != INVALID_SOCKET) {\n+        if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25426#discussion_r906870139",
      "id" : 906870139,
      "line" : 431,
      "node_id" : "PRRC_kwDOABII5842Db17",
      "original_commit_id" : "a8d6abba5ec4ae2a3375e9be0b739f298899eca2",
      "original_line" : 431,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 13,
      "pull_request_review_id" : 1019477497,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25426",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906870139/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-26T21:00:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906870139",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25426#discussion_r908351406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25426"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908351406"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, the intention of `Sock` is to be a thin wrapper over syscalls and not depend on or use any of the other Bitcoin Core stuff (mostly). Right now `sock.{h,cpp}` does not include any of the `net*` stuff because the `net*` stuff includes `sock.h`. I checked and using `CAddress` in `Sock` does not create a circular dependency, here is the diff:\r\n\r\n<details>\r\n<summary>make GetBindAddress() a Sock method</summary>\r\n\r\n```diff\r\ndiff --git i/src/net.cpp w/src/net.cpp\r\nindex 7499d4c72f..d026770565 100644\r\n--- i/src/net.cpp\r\n+++ w/src/net.cpp\r\n@@ -418,28 +418,12 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\r\n         if (!pnode->fSuccessfullyConnected && !pnode->IsInboundConn() && pnode->GetLocalNonce() == nonce)\r\n             return false;\r\n     }\r\n     return true;\r\n }\r\n \r\n-/** Get the bind address for a socket as CAddress */\r\n-static CAddress GetBindAddress(const Sock& sock)\r\n-{\r\n-    CAddress addr_bind;\r\n-    struct sockaddr_storage sockaddr_bind;\r\n-    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\r\n-    if (sock.Get() != INVALID_SOCKET) {\r\n-        if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\r\n-            addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind);\r\n-        } else {\r\n-            LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\r\n-        }\r\n-    }\r\n-    return addr_bind;\r\n-}\r\n-\r\n CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure, ConnectionType conn_type)\r\n {\r\n     assert(conn_type != ConnectionType::INBOUND);\r\n \r\n     if (pszDest == nullptr) {\r\n         if (IsLocal(addrConnect))\r\n@@ -537,13 +521,13 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\r\n     }\r\n \r\n     // Add node\r\n     NodeId id = GetNewNodeId();\r\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\r\n     if (!addr_bind.IsValid()) {\r\n-        addr_bind = GetBindAddress(*sock);\r\n+        addr_bind = sock->GetBindAddress();\r\n     }\r\n     CNode* pnode = new CNode(id,\r\n                              nLocalServices,\r\n                              std::move(sock),\r\n                              addrConnect,\r\n                              CalculateKeyedNetGroup(addrConnect),\r\n@@ -1151,13 +1135,13 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\r\n     if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {\r\n         LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Unknown socket family\\n\");\r\n     } else {\r\n         addr = CAddress{MaybeFlipIPv6toCJDNS(addr), NODE_NONE};\r\n     }\r\n \r\n-    const CAddress addr_bind{MaybeFlipIPv6toCJDNS(GetBindAddress(*sock)), NODE_NONE};\r\n+    const CAddress addr_bind{MaybeFlipIPv6toCJDNS(sock->GetBindAddress()), NODE_NONE};\r\n \r\n     NetPermissionFlags permissionFlags = NetPermissionFlags::None;\r\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\r\n \r\n     CreateNodeFromAcceptedSocket(std::move(sock), permissionFlags, addr_bind, addr);\r\n }\r\ndiff --git i/src/util/sock.cpp w/src/util/sock.cpp\r\nindex b4c0aa4205..6b77ddd12a 100644\r\n--- i/src/util/sock.cpp\r\n+++ w/src/util/sock.cpp\r\n@@ -1,12 +1,13 @@\r\n // Copyright (c) 2020-2021 The Bitcoin Core developers\r\n // Distributed under the MIT software license, see the accompanying\r\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n \r\n #include <compat.h>\r\n #include <logging.h>\r\n+#include <protocol.h>\r\n #include <threadinterrupt.h>\r\n #include <tinyformat.h>\r\n #include <util/sock.h>\r\n #include <util/syserror.h>\r\n #include <util/system.h>\r\n #include <util/time.h>\r\n@@ -113,12 +114,27 @@ int Sock::SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt\r\n \r\n int Sock::GetSockName(sockaddr* name, socklen_t* name_len) const\r\n {\r\n     return getsockname(m_socket, name, name_len);\r\n }\r\n \r\n+CAddress Sock::GetBindAddress() const\r\n+{\r\n+    CAddress addr_bind;\r\n+    struct sockaddr_storage sockaddr_bind;\r\n+    socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\r\n+    if (m_socket != INVALID_SOCKET) {\r\n+        if (!GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\r\n+            addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind);\r\n+        } else {\r\n+            LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\r\n+        }\r\n+    }\r\n+    return addr_bind;\r\n+}\r\n+\r\n bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\r\n {\r\n     // We need a `shared_ptr` owning `this` for `WaitMany()`, but don't want\r\n     // `this` to be destroyed when the `shared_ptr` goes out of scope at the\r\n     // end of this function. Create it with a custom noop deleter.\r\n     std::shared_ptr<const Sock> shared{this, [](const Sock*) {}};\r\ndiff --git i/src/util/sock.h w/src/util/sock.h\r\nindex 96d0b3b56b..681126cdd2 100644\r\n--- i/src/util/sock.h\r\n+++ w/src/util/sock.h\r\n@@ -3,12 +3,13 @@\r\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n \r\n #ifndef BITCOIN_UTIL_SOCK_H\r\n #define BITCOIN_UTIL_SOCK_H\r\n \r\n #include <compat.h>\r\n+#include <protocol.h>\r\n #include <threadinterrupt.h>\r\n #include <util/time.h>\r\n \r\n #include <chrono>\r\n #include <memory>\r\n #include <string>\r\n@@ -130,12 +131,14 @@ public:\r\n      * getsockname(2) wrapper. Equivalent to\r\n      * `getsockname(this->Get(), name, name_len)`. Code that uses this\r\n      * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\r\n      */\r\n     [[nodiscard]] virtual int GetSockName(sockaddr* name, socklen_t* name_len) const;\r\n \r\n+    [[nodiscard]] virtual CAddress GetBindAddress() const;\r\n+\r\n     using Event = uint8_t;\r\n \r\n     /**\r\n      * If passed to `Wait()`, then it will wait for readiness to read from the socket.\r\n      */\r\n     static constexpr Event RECV = 0b001;\r\n```\r\n</details>\r\n\r\nWhat do you think? Should I include the above patch as a separate commit in this PR?\r\n\r\nOff-scope for this PR: I think the return value of `GetBindAddress()` should be `CService`, not `CAddress`. It is just an IP address and a port.",
      "commit_id" : "a8d6abba5ec4ae2a3375e9be0b739f298899eca2",
      "created_at" : "2022-06-28T11:11:13Z",
      "diff_hunk" : "@@ -422,13 +422,13 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n }\n \n /** Get the bind address for a socket as CAddress */\n-static CAddress GetBindAddress(SOCKET sock)\n+static CAddress GetBindAddress(const Sock& sock)\n {\n     CAddress addr_bind;\n     struct sockaddr_storage sockaddr_bind;\n     socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n-    if (sock != INVALID_SOCKET) {\n-        if (!getsockname(sock, (struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+    if (sock.Get() != INVALID_SOCKET) {\n+        if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25426#discussion_r908351406",
      "id" : 908351406,
      "in_reply_to_id" : 906870139,
      "line" : 431,
      "node_id" : "PRRC_kwDOABII5842JFeu",
      "original_commit_id" : "a8d6abba5ec4ae2a3375e9be0b739f298899eca2",
      "original_line" : 431,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 13,
      "pull_request_review_id" : 1021550170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25426",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908351406/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T11:11:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908351406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25426#discussion_r908372434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25426"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908372434"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, fair enough, i'm fine with keeping it as-is, just wanted to ask in case it was an obvious thing we forgot to consider.\r\n\r\n> Off-scope for this PR: I think the return value of GetBindAddress() should be CService, not CAddress. It is just an IP address and a port.\r\n\r\nI agree! (actually had to look up what is what first the class names are so undescriptive :blush: ).",
      "commit_id" : "a8d6abba5ec4ae2a3375e9be0b739f298899eca2",
      "created_at" : "2022-06-28T11:35:36Z",
      "diff_hunk" : "@@ -422,13 +422,13 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n }\n \n /** Get the bind address for a socket as CAddress */\n-static CAddress GetBindAddress(SOCKET sock)\n+static CAddress GetBindAddress(const Sock& sock)\n {\n     CAddress addr_bind;\n     struct sockaddr_storage sockaddr_bind;\n     socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n-    if (sock != INVALID_SOCKET) {\n-        if (!getsockname(sock, (struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+    if (sock.Get() != INVALID_SOCKET) {\n+        if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25426#discussion_r908372434",
      "id" : 908372434,
      "in_reply_to_id" : 906870139,
      "line" : 431,
      "node_id" : "PRRC_kwDOABII5842JKnS",
      "original_commit_id" : "a8d6abba5ec4ae2a3375e9be0b739f298899eca2",
      "original_line" : 431,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 13,
      "pull_request_review_id" : 1021580275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25426",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908372434/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T11:35:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908372434",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
