[
   {
      "author_association" : "MEMBER",
      "body" : "@ajtowns This should fix the issue you've seen in functional tests, where generating a bunch of blocks at once can result in O(n^2) headers downloads.",
      "created_at" : "2022-06-22T20:26:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1163567385",
      "id" : 1163567385,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
      "node_id" : "IC_kwDOABII585FWqEZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1163567385/reactions"
      },
      "updated_at" : "2022-06-22T20:26:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1163567385",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25515](https://github.com/bitcoin/bitcoin/pull/25515) ([draft] PeerManager unit tests by dergoegge)\n* [#25514](https://github.com/bitcoin/bitcoin/pull/25514) (net processing: Move CNode::nServices and CNode::nLocalServices to Peer by dergoegge)\n* [#25268](https://github.com/bitcoin/bitcoin/pull/25268) (refactor: Introduce EvictionManager by dergoegge)\n* [#25203](https://github.com/bitcoin/bitcoin/pull/25203) (logging: update to severity-based logging by jonatack)\n* [#24571](https://github.com/bitcoin/bitcoin/pull/24571) (p2p: Prevent block index fingerprinting by sending additional getheaders messages by dergoegge)\n* [#24008](https://github.com/bitcoin/bitcoin/pull/24008) (assumeutxo: net_processing changes by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-06-23T03:37:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1163888510",
      "id" : 1163888510,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
      "node_id" : "IC_kwDOABII585FX4d-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1163888510/reactions"
      },
      "updated_at" : "2022-06-30T20:38:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1163888510",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, great catch",
      "created_at" : "2022-06-23T07:56:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1164079513",
      "id" : 1164079513,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
      "node_id" : "IC_kwDOABII585FYnGZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164079513/reactions"
      },
      "updated_at" : "2022-06-23T07:56:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1164079513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905373582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905373582"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe change this log message? because now we send something in response instead of ignoring",
      "commit_id" : "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "created_at" : "2022-06-23T19:13:10Z",
      "diff_hunk" : "@@ -3403,6 +3412,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (m_chainman.ActiveTip() == nullptr ||\n                 (m_chainman.ActiveTip()->nChainWork < nMinimumChainWork && !pfrom.HasPermission(NetPermissionFlags::Download))) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because active chain has too little work\\n\", pfrom.GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905373582",
      "id" : 905373582,
      "line" : 3414,
      "node_id" : "PRRC_kwDOABII58419ueO",
      "original_commit_id" : "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "original_line" : 3414,
      "original_position" : 169,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 169,
      "pull_request_review_id" : 1017522335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905373582/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-23T19:37:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905373582",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905376797"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905376797"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: this looks like an accidental change, or do you have a reasoning for this?",
      "commit_id" : "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "created_at" : "2022-06-23T19:17:46Z",
      "diff_hunk" : "@@ -355,8 +357,11 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n+    /** Time of the last getheaders message to this peer */\n+    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+\n     Peer(NodeId id)\n-        : m_id{id}\n+        : m_id(id)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905376797",
      "id" : 905376797,
      "line" : 364,
      "node_id" : "PRRC_kwDOABII58419vQd",
      "original_commit_id" : "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "original_line" : 364,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 18,
      "pull_request_review_id" : 1017522335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905376797/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-23T19:37:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905376797",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905386665"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905386665"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why did you change it to receive a `CBlockLocator`? I don't think we ever create locators that are not part of the main chain. Also (maybe a bit nitpicky) we dont need to compute the locator if we don't send the `getheaders` message, so doing that inside of `MaybeSendGetHeaders` makes more sense to me.",
      "commit_id" : "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "created_at" : "2022-06-23T19:31:45Z",
      "diff_hunk" : "@@ -2258,23 +2265,19 @@ bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>&\n     return true;\n }\n \n-/*\n- * Continue fetching headers from a given point.\n- * pindexLast should be the last header we learned from a peer in their prior\n- * headers message.\n- *\n- * This is used for headers sync with a peer; even if pindexLast is an ancestor\n- * of a known chain (such as our tip) we don't yet know where the peer's chain\n- * might fork from what we know, so we continue exactly from where the peer\n- * left off.\n- */\n-void PeerManagerImpl::FetchMoreHeaders(CNode& pfrom, const CBlockIndex *pindexLast, const Peer& peer)\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905386665",
      "id" : 905386665,
      "line" : 2268,
      "node_id" : "PRRC_kwDOABII58419xqp",
      "original_commit_id" : "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "original_line" : 2268,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 103,
      "pull_request_review_id" : 1017522335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905386665/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-23T19:37:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905386665",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905542853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905542853"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: could just use `bool received_new_header  = ...` , remove the initialization a few lines above and move this down a few lines to where it is used.",
      "commit_id" : "af850df4093cb4472d0597858bcf9561ff88973f",
      "created_at" : "2022-06-23T22:13:29Z",
      "diff_hunk" : "@@ -2443,15 +2443,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n         return;\n     }\n \n-    {\n-        LOCK(cs_main);\n-\n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash())) {\n-            received_new_header = true;\n-        }\n-    }\n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    received_new_header = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r905542853",
      "id" : 905542853,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841-XzF",
      "original_commit_id" : "64deef68be5afe2161079b7e52d48f43311df0ed",
      "original_line" : 2448,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1017752385,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905542853/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-24T16:20:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/905542853",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906001551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906001551"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The reason I introduced this interface change here is that this branch is a precursor to another change I will be proposing to the headers sync logic, in which we might send getheaders messages based on locators that are not calculated from a single CBlockIndex entry. ",
      "commit_id" : "f2e3f6d732c13faff9de165044ae11e374f0ba0f",
      "created_at" : "2022-06-24T12:10:45Z",
      "diff_hunk" : "@@ -2258,23 +2265,19 @@ bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>&\n     return true;\n }\n \n-/*\n- * Continue fetching headers from a given point.\n- * pindexLast should be the last header we learned from a peer in their prior\n- * headers message.\n- *\n- * This is used for headers sync with a peer; even if pindexLast is an ancestor\n- * of a known chain (such as our tip) we don't yet know where the peer's chain\n- * might fork from what we know, so we continue exactly from where the peer\n- * left off.\n- */\n-void PeerManagerImpl::FetchMoreHeaders(CNode& pfrom, const CBlockIndex *pindexLast, const Peer& peer)\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906001551",
      "id" : 906001551,
      "in_reply_to_id" : 905386665,
      "line" : 2268,
      "node_id" : "PRRC_kwDOABII5842AHyP",
      "original_commit_id" : "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "original_line" : 2268,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 115,
      "pull_request_review_id" : 1018387319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906001551/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-24T12:10:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906001551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906010773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906010773"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep this was a rebase error, fixed!",
      "commit_id" : "f2e3f6d732c13faff9de165044ae11e374f0ba0f",
      "created_at" : "2022-06-24T12:22:49Z",
      "diff_hunk" : "@@ -355,8 +357,11 @@ struct Peer {\n     /** Work queue of items requested by this peer **/\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n+    /** Time of the last getheaders message to this peer */\n+    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+\n     Peer(NodeId id)\n-        : m_id{id}\n+        : m_id(id)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906010773",
      "id" : 906010773,
      "in_reply_to_id" : 905376797,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842AKCV",
      "original_commit_id" : "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "original_line" : 364,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1018402364,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906010773/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-24T12:22:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906010773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906010899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906010899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "f2e3f6d732c13faff9de165044ae11e374f0ba0f",
      "created_at" : "2022-06-24T12:23:00Z",
      "diff_hunk" : "@@ -3403,6 +3412,9 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (m_chainman.ActiveTip() == nullptr ||\n                 (m_chainman.ActiveTip()->nChainWork < nMinimumChainWork && !pfrom.HasPermission(NetPermissionFlags::Download))) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because active chain has too little work\\n\", pfrom.GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906010899",
      "id" : 906010899,
      "in_reply_to_id" : 905373582,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842AKET",
      "original_commit_id" : "f757d2a471f806a384a60f8783ccdebdb25cd403",
      "original_line" : 3414,
      "original_position" : 169,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1018402553,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906010899/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-24T12:23:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906010899",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906192500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906192500"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could this be abused by a peer to evade eviction by making us send `GetHeaders()` from other places (e.g. sending unconnecting CMPCTBLOCK messages) and sometimes sending stale headers? That might restart the `m_last_getheaders_timestamp` timer so that we never get to set `state.m_chain_sync.m_sent_getheaders` and `state.m_chain_sync.m_timeout` here and therefore won't disconnect.",
      "commit_id" : "af850df4093cb4472d0597858bcf9561ff88973f",
      "created_at" : "2022-06-24T15:51:18Z",
      "diff_hunk" : "@@ -4423,16 +4443,17 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, std::chrono::seconds time_in_\n                 pto.fDisconnect = true;\n             } else {\n                 assert(state.m_chain_sync.m_work_header);\n-                LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n-                m_connman.PushMessage(&pto, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n-                state.m_chain_sync.m_sent_getheaders = true;\n-                constexpr auto HEADERS_RESPONSE_TIME{2min};\n-                // Bump the timeout to allow a response, which could clear the timeout\n-                // (if the response shows the peer has synced), reset the timeout (if\n-                // the peer syncs to the required work but not to our tip), or result\n-                // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n-                // has not sufficiently progressed)\n-                state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;\n+                if (MaybeSendGetHeaders(pto,\n+                            m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), *peer)) {\n+                    LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n+                    state.m_chain_sync.m_sent_getheaders = true;\n+                    // Bump the timeout to allow a response, which could clear the timeout\n+                    // (if the response shows the peer has synced), reset the timeout (if\n+                    // the peer syncs to the required work but not to our tip), or result\n+                    // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n+                    // has not sufficiently progressed)\n+                    state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906192500",
      "id" : 906192500,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842A2Z0",
      "original_commit_id" : "f2e3f6d732c13faff9de165044ae11e374f0ba0f",
      "original_line" : 4455,
      "original_position" : 231,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1017752385,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906192500/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-24T16:20:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906192500",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906221757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906221757"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We need to do the calculation here before invoking `ProcessNewBlockHeaders()` because that will cause headers to be added to the block index, but I'll get rid of the declaration at line 2423, as we can just declare and initialize here instead.",
      "commit_id" : "af850df4093cb4472d0597858bcf9561ff88973f",
      "created_at" : "2022-06-24T16:29:52Z",
      "diff_hunk" : "@@ -2443,15 +2443,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n         return;\n     }\n \n-    {\n-        LOCK(cs_main);\n-\n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash())) {\n-            received_new_header = true;\n-        }\n-    }\n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    received_new_header = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906221757",
      "id" : 906221757,
      "in_reply_to_id" : 905542853,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842A9i9",
      "original_commit_id" : "64deef68be5afe2161079b7e52d48f43311df0ed",
      "original_line" : 2448,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1018711161,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906221757/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-24T16:29:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906221757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906228594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906228594"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for thinking about this.  I think you're right to raise this concern, and after re-reviewing this logic, I think the best course of action is to just have this call-site assume the `getheaders` message goes out (rather than branch on the return value) -- because if it doesn't, it means we've already sent a `getheaders`, and so the peer should have provided us with a sufficiently high work chain anyway. \r\n\r\nDoes that reasoning sound right to you as well?\r\n\r\n(Edit: I guess a downside to this is that if a peer is in the middle of big reorg, that this logic might cause them to be evicted, because our timeouts aren't long enough to necessarily deliver a huge reorg -- however that is a pre-existing issue with this strategy, and we have other mitigations in place like protecting some of our outbound peers from eviction under this logic.)",
      "commit_id" : "af850df4093cb4472d0597858bcf9561ff88973f",
      "created_at" : "2022-06-24T16:38:25Z",
      "diff_hunk" : "@@ -4423,16 +4443,17 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, std::chrono::seconds time_in_\n                 pto.fDisconnect = true;\n             } else {\n                 assert(state.m_chain_sync.m_work_header);\n-                LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n-                m_connman.PushMessage(&pto, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n-                state.m_chain_sync.m_sent_getheaders = true;\n-                constexpr auto HEADERS_RESPONSE_TIME{2min};\n-                // Bump the timeout to allow a response, which could clear the timeout\n-                // (if the response shows the peer has synced), reset the timeout (if\n-                // the peer syncs to the required work but not to our tip), or result\n-                // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n-                // has not sufficiently progressed)\n-                state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;\n+                if (MaybeSendGetHeaders(pto,\n+                            m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), *peer)) {\n+                    LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n+                    state.m_chain_sync.m_sent_getheaders = true;\n+                    // Bump the timeout to allow a response, which could clear the timeout\n+                    // (if the response shows the peer has synced), reset the timeout (if\n+                    // the peer syncs to the required work but not to our tip), or result\n+                    // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n+                    // has not sufficiently progressed)\n+                    state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906228594",
      "id" : 906228594,
      "in_reply_to_id" : 906192500,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842A_Ny",
      "original_commit_id" : "f2e3f6d732c13faff9de165044ae11e374f0ba0f",
      "original_line" : 4455,
      "original_position" : 231,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1018720526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906228594/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-24T16:44:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906228594",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906264070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906264070"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Does that reasoning sound right to you as well?\r\n\r\nYes, that's also the solution I had thought of. ",
      "commit_id" : "af850df4093cb4472d0597858bcf9561ff88973f",
      "created_at" : "2022-06-24T17:29:31Z",
      "diff_hunk" : "@@ -4423,16 +4443,17 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, std::chrono::seconds time_in_\n                 pto.fDisconnect = true;\n             } else {\n                 assert(state.m_chain_sync.m_work_header);\n-                LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n-                m_connman.PushMessage(&pto, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n-                state.m_chain_sync.m_sent_getheaders = true;\n-                constexpr auto HEADERS_RESPONSE_TIME{2min};\n-                // Bump the timeout to allow a response, which could clear the timeout\n-                // (if the response shows the peer has synced), reset the timeout (if\n-                // the peer syncs to the required work but not to our tip), or result\n-                // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n-                // has not sufficiently progressed)\n-                state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;\n+                if (MaybeSendGetHeaders(pto,\n+                            m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), *peer)) {\n+                    LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n+                    state.m_chain_sync.m_sent_getheaders = true;\n+                    // Bump the timeout to allow a response, which could clear the timeout\n+                    // (if the response shows the peer has synced), reset the timeout (if\n+                    // the peer syncs to the required work but not to our tip), or result\n+                    // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n+                    // has not sufficiently progressed)\n+                    state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r906264070",
      "id" : 906264070,
      "in_reply_to_id" : 906192500,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842BH4G",
      "original_commit_id" : "f2e3f6d732c13faff9de165044ae11e374f0ba0f",
      "original_line" : 4455,
      "original_position" : 231,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1018773248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906264070/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-24T17:29:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/906264070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-06-27T11:00:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1167207169",
      "id" : 1167207169,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
      "node_id" : "IC_kwDOABII585FkisB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1167207169/reactions"
      },
      "updated_at" : "2022-06-27T11:00:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1167207169",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-06-27T15:15:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1167482733",
      "id" : 1167482733,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
      "node_id" : "IC_kwDOABII585Fll9t",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1167482733/reactions"
      },
      "updated_at" : "2022-06-27T15:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1167482733",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908380211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908380211"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looking at the documentation for `GetTime` it appears that `NodeClock::now()` would be preferred here.",
      "commit_id" : "fa24d37213cede7136ed34d481091b84642c62a6",
      "created_at" : "2022-06-28T11:45:06Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908380211",
      "id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842JMgz",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1021591496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908380211/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T12:46:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908380211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908387486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908387486"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's not clear to me what 2hr rule you are referring to",
      "commit_id" : "fa24d37213cede7136ed34d481091b84642c62a6",
      "created_at" : "2022-06-28T11:53:50Z",
      "diff_hunk" : "@@ -560,6 +565,22 @@ class PeerManagerImpl final : public PeerManager\n                                const std::vector<CBlockHeader>& headers,\n                                bool via_compact_block)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    /** Various helpers for headers processing, invoked by ProcessHeadersMessage() */\n+    /** Deal with state tracking and headers sync for peers that send the\n+     * occasional non-connecting header (this can happen due to BIP 130 headers\n+     * announcements for blocks interacting with the 2hr rule). */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908387486",
      "id" : 908387486,
      "line" : 571,
      "node_id" : "PRRC_kwDOABII5842JOSe",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 571,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 35,
      "pull_request_review_id" : 1021591496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908387486/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T12:46:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908387486",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908392415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908392415"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think a direct call to `Misbehaving()` is better here, see: https://github.com/bitcoin/bitcoin/pull/24571#discussion_r863638047",
      "commit_id" : "fa24d37213cede7136ed34d481091b84642c62a6",
      "created_at" : "2022-06-28T11:59:15Z",
      "diff_hunk" : "@@ -2206,55 +2424,35 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n-        }\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr);\n \n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(peer, 20, \"non-continuous headers sequence\");\n-                return;\n-            }\n-            hashLastBlock = header.GetHash();\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            BlockValidationState state;\n+            state.Invalid(BlockValidationResult::BLOCK_MISSING_PREV, \"prev-blk-not-found\");\n+            MaybePunishNodeForBlock(pfrom.GetId(), state, via_compact_block, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908392415",
      "id" : 908392415,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842JPff",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2441,
      "original_position" : 310,
      "original_start_line" : 2439,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1021591496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908392415/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-06-28T12:46:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908392415",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908396948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908396948"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n```",
      "commit_id" : "fa24d37213cede7136ed34d481091b84642c62a6",
      "created_at" : "2022-06-28T12:04:37Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908396948",
      "id" : 908396948,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842JQmU",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2257,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1021591496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908396948/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T12:46:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908396948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908405682"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908405682"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    bool received_new_header{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr)};\r\n```",
      "commit_id" : "fa24d37213cede7136ed34d481091b84642c62a6",
      "created_at" : "2022-06-28T12:14:38Z",
      "diff_hunk" : "@@ -2206,55 +2424,35 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n-        }\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr);\n \n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(peer, 20, \"non-continuous headers sequence\");\n-                return;\n-            }\n-            hashLastBlock = header.GetHash();\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            BlockValidationState state;\n+            state.Invalid(BlockValidationResult::BLOCK_MISSING_PREV, \"prev-blk-not-found\");\n+            MaybePunishNodeForBlock(pfrom.GetId(), state, via_compact_block, \"invalid header received\");\n         }\n+        return;\n+    }\n \n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(hashLastBlock)) {\n-            received_new_header = true;\n-        }\n+    // At this point, the headers connect to something in our block index.\n+    if (!CheckHeadersAreContinuous(headers)) {\n+        Misbehaving(peer, 20, \"non-continuous headers sequence\");\n+        return;\n     }\n \n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    bool received_new_header = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908405682",
      "id" : 908405682,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842JSuy",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2454,
      "original_position" : 328,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1021591496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908405682/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T12:46:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908405682",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908587356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908587356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, I tried to make this switch in the last commit but it took me several tries to get it to compile, so please review and let me know if I'm using `NodeClock` correctly!",
      "commit_id" : "fa24d37213cede7136ed34d481091b84642c62a6",
      "created_at" : "2022-06-28T14:55:04Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908587356",
      "id" : 908587356,
      "in_reply_to_id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842J_Fc",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1021894446,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908587356/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T14:55:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908587356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908814819"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908814819"
         }
      },
      "author_association" : "MEMBER",
      "body" : "One of the most unusual validation rules is that we don't accept a block that is more than 2 hours in the future, see:\r\n https://github.com/bitcoin/bitcoin/blob/5bf65ec66e5986c9188e3f6234f1c5c0f8dc7f90/src/validation.cpp#L3469",
      "commit_id" : "b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-28T18:30:48Z",
      "diff_hunk" : "@@ -560,6 +565,22 @@ class PeerManagerImpl final : public PeerManager\n                                const std::vector<CBlockHeader>& headers,\n                                bool via_compact_block)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    /** Various helpers for headers processing, invoked by ProcessHeadersMessage() */\n+    /** Deal with state tracking and headers sync for peers that send the\n+     * occasional non-connecting header (this can happen due to BIP 130 headers\n+     * announcements for blocks interacting with the 2hr rule). */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908814819",
      "id" : 908814819,
      "in_reply_to_id" : 908387486,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842K2nj",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 574,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1022219149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908814819/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T18:30:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908814819",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908816037"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908816037"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-28T18:32:12Z",
      "diff_hunk" : "@@ -2206,55 +2424,35 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n-        }\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr);\n \n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(peer, 20, \"non-continuous headers sequence\");\n-                return;\n-            }\n-            hashLastBlock = header.GetHash();\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            BlockValidationState state;\n+            state.Invalid(BlockValidationResult::BLOCK_MISSING_PREV, \"prev-blk-not-found\");\n+            MaybePunishNodeForBlock(pfrom.GetId(), state, via_compact_block, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908816037",
      "id" : 908816037,
      "in_reply_to_id" : 908392415,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842K26l",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2441,
      "original_position" : 310,
      "original_start_line" : 2439,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1022220768,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908816037/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-06-28T18:32:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908816037",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908816540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908816540"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-28T18:32:50Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908816540",
      "id" : 908816540,
      "in_reply_to_id" : 908396948,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842K3Cc",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2257,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1022221449,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908816540/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T18:32:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908816540",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908817213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908817213"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Took this change and also switched to this type of initialization for  `headers_connect_blockindex` as well.",
      "commit_id" : "b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-28T18:33:42Z",
      "diff_hunk" : "@@ -2206,55 +2424,35 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n-        }\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr);\n \n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(peer, 20, \"non-continuous headers sequence\");\n-                return;\n-            }\n-            hashLastBlock = header.GetHash();\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            BlockValidationState state;\n+            state.Invalid(BlockValidationResult::BLOCK_MISSING_PREV, \"prev-blk-not-found\");\n+            MaybePunishNodeForBlock(pfrom.GetId(), state, via_compact_block, \"invalid header received\");\n         }\n+        return;\n+    }\n \n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(hashLastBlock)) {\n-            received_new_header = true;\n-        }\n+    // At this point, the headers connect to something in our block index.\n+    if (!CheckHeadersAreContinuous(headers)) {\n+        Misbehaving(peer, 20, \"non-continuous headers sequence\");\n+        return;\n     }\n \n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    bool received_new_header = WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908817213",
      "id" : 908817213,
      "in_reply_to_id" : 908405682,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842K3M9",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2454,
      "original_position" : 328,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1022222425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908817213/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T18:33:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908817213",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908849115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908849115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Dropping the std::atomic seems to have made things work with both clang and g++, so I think this is probably right now (thanks to @dongcarl and @sipa for helping me sort through this!).",
      "commit_id" : "b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-28T19:15:48Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908849115",
      "id" : 908849115,
      "in_reply_to_id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842K-_b",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1022268771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908849115/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T19:15:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908849115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908862830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908862830"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah ok, thanks for clarifying! Maybe mention the `MAX_FUTURE_BLOCK_TIME` constant here to make it obvious?",
      "commit_id" : "b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-28T19:23:32Z",
      "diff_hunk" : "@@ -560,6 +565,22 @@ class PeerManagerImpl final : public PeerManager\n                                const std::vector<CBlockHeader>& headers,\n                                bool via_compact_block)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    /** Various helpers for headers processing, invoked by ProcessHeadersMessage() */\n+    /** Deal with state tracking and headers sync for peers that send the\n+     * occasional non-connecting header (this can happen due to BIP 130 headers\n+     * announcements for blocks interacting with the 2hr rule). */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908862830",
      "id" : 908862830,
      "in_reply_to_id" : 908387486,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842LCVu",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 574,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1022287381,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908862830/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T19:23:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908862830",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908866897"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908866897"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Interesting, the `std::atomic` version did work for me locally (compiled with clang). What you have now looks good to me!",
      "commit_id" : "b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-28T19:28:57Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908866897",
      "id" : 908866897,
      "in_reply_to_id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842LDVR",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1022293270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908866897/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T19:28:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908866897",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908867081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908867081"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It should be possible to use std::atomic on this (if you want to). Though, you may have to invoke the time_point constructor before assigning a value to the atomic. This can be done, for example, by calling `NodeSeconds{}` from https://github.com/bitcoin/bitcoin/blob/480d8069d7da954301fbb5c96b766e91b139fe5b/src/util/time.h#L25",
      "commit_id" : "b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-28T19:29:15Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908867081",
      "id" : 908867081,
      "in_reply_to_id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842LDYJ",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1022293573,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908867081/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T19:29:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908867081",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908882206"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908882206"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke I think I'll probably give up on trying to use `std::atomic` because all my efforts seem to fail, but if you feel like writing the code and can share a diff that compiles I'd be happy to include it.",
      "commit_id" : "b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-28T19:49:32Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908882206",
      "id" : 908882206,
      "in_reply_to_id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842LHEe",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1022315313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908882206/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T19:49:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908882206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908885764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908885764"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done!",
      "commit_id" : "b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-28T19:54:12Z",
      "diff_hunk" : "@@ -560,6 +565,22 @@ class PeerManagerImpl final : public PeerManager\n                                const std::vector<CBlockHeader>& headers,\n                                bool via_compact_block)\n         EXCLUSIVE_LOCKS_REQUIRED(!m_peer_mutex);\n+    /** Various helpers for headers processing, invoked by ProcessHeadersMessage() */\n+    /** Deal with state tracking and headers sync for peers that send the\n+     * occasional non-connecting header (this can happen due to BIP 130 headers\n+     * announcements for blocks interacting with the 2hr rule). */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r908885764",
      "id" : 908885764,
      "in_reply_to_id" : 908387486,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842LH8E",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 574,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1022320268,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908885764/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-28T19:54:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908885764",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911178979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911178979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I presume the issue was g++-8 in https://cirrus-ci.com/task/5966736871653376?logs=ci#L2017\r\n\r\nI tried my proposal (calling `NodeSeconds{}`) and it worked on top of your commit.\r\n\r\n```diff\r\n# git log -1 && git diff \r\ncommit fa24d37213cede7136ed34d481091b84642c62a6 (HEAD)\r\nAuthor: Suhas Daftuar <sdaftuar@gmail.com>\r\nDate:   Tue Jun 28 10:53:02 2022 -0400\r\n\r\n    Replace GetTime() with NodeClock in MaybeSendGetHeaders()\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex a75e3bd7f..6fc3009cb 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -358,7 +358,7 @@ struct Peer {\r\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\r\n \r\n     /** Time of the last getheaders message to this peer */\r\n-    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{};\r\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};\r\n \r\n     Peer(NodeId id)\r\n         : m_id{id}\r\n```\r\n\r\nAn equivalent would be to call `NodeClock::time_point{}` instead.",
      "commit_id" : "3163b214686dfda36680f1a2f67aeba255ac85ac",
      "created_at" : "2022-06-30T15:40:30Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911178979",
      "id" : 911178979,
      "in_reply_to_id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842T3zj",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1025098765,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911178979/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-30T15:40:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911178979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK b6f63bd991569d45b19c4f2d83b223e6e7cdcff3",
      "created_at" : "2022-06-30T18:43:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1171555243",
      "id" : 1171555243,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
      "node_id" : "IC_kwDOABII585F1IOr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1171555243/reactions"
      },
      "updated_at" : "2022-06-30T18:43:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1171555243",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911834780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911834780"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think the problem here is `std::atomic<T>` requires `T` to be trivially copyable, but unlike `duration`, `time_point` isn't implemented as trivially copyable (and none of `time_point`, `duration`, or the underlying `rep` are specified as being trivially copyable either). Since we already assume `duration` is trivially copyable, last time I messed with this I wrote a wrapper, something like:\r\n\r\n```c++\r\ntemplate<typename TP>\r\nclass atomic_time_point {\r\nprivate:\r\n    using dur = typename TP::duration;\r\n    std::atomic<dur> d;\r\npublic:\r\n    atomic_time_point() noexcept : d{dur{0}} { }\r\n    atomic_time_point(const atomic_time_point&) = delete;\r\n    atomic_time_point(const TP& t) noexcept : d{t.time_since_epoch()} { }\r\n    TP load() { return TP{d.load()}; }\r\n    TP operator=(const TP& t) { d = t.time_since_epoch(); return t; }\r\n};\r\nusing AtomicNodeTime = atomic_time_point<NodeClock::time_point>;\r\nusing AtomicNodeSeconds = atomic_time_point<NodeSeconds>;\r\n```\r\n\r\nwhich would let you write `AtomicNodeTime m_last_getheaders_timestamp{};` without relying on `time_point` implementation details.",
      "commit_id" : "3163b214686dfda36680f1a2f67aeba255ac85ac",
      "created_at" : "2022-07-01T10:23:28Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911834780",
      "id" : 911834780,
      "in_reply_to_id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842WX6c",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1026030833,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911834780/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-01T10:23:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911834780",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911858045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911858045"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> time_point isn't implemented as trivially copyable\r\n\r\nCan you add references to your claim that they are not trivially copyable?\r\n\r\nSee also the cpp program which passes on gcc7/clang5:\r\n\r\n```cpp\r\n#include <chrono>\r\n\r\ntemplate <class T>\r\nvoid CanUseInAtomic() {\r\n    static_assert(std::is_trivially_copyable_v<T>);\r\n    static_assert(std::is_copy_constructible_v<T>);\r\n    static_assert(std::is_move_constructible_v<T>);\r\n    static_assert(std::is_copy_assignable_v<T>);\r\n    static_assert(std::is_move_assignable_v<T>);\r\n}\r\n\r\nint main() {\r\n    CanUseInAtomic<bool>();\r\n    CanUseInAtomic<std::chrono::seconds>();      // duration\r\n    CanUseInAtomic<std::chrono::system_clock::time_point>();  // time_point\r\n}\r\n```\r\n\r\n\r\n\r\nhttps://godbolt.org/z/3nKc43cPv",
      "commit_id" : "3163b214686dfda36680f1a2f67aeba255ac85ac",
      "created_at" : "2022-07-01T10:55:11Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911858045",
      "id" : 911858045,
      "in_reply_to_id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842Wdl9",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1026064291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911858045/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-01T10:55:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911858045",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911914840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911914840"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, fair point. `static_assert(std::is_nothrow_default_constructible_v<T>);` catches it for clang 5, but not for gcc 7.1 for what that's worth.\r\n\r\nBut I don't think the pre-C++20 behaviour of default `std::atomic` initialization is ever what we want anyway? Per https://en.cppreference.com/w/cpp/atomic/atomic/atomic\r\n\r\n> 1) The default constructor is trivial: no initialization takes place other than [zero initialization](https://en.cppreference.com/w/cpp/language/zero_initialization) of static and thread-local objects. [std::atomic_init](https://en.cppreference.com/w/cpp/atomic/atomic_init) may be used to complete initialization.\r\n\r\nthat will just leave things undefined, like `int x;` ?\r\n\r\n(Anyway, no need for further changes in this PR, as far as I can see)",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-01T12:23:35Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911914840",
      "id" : 911914840,
      "in_reply_to_id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842WrdY",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1026148037,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911914840/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-01T12:23:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911914840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911918154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911918154"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I can't say I'm exactly following everything you guys are talking about, but @MarcoFalke thank you -- I updated the PR and the compilers all seem happy now. :). Will squash that last fixup commit now...",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-01T12:28:19Z",
      "diff_hunk" : "@@ -2194,6 +2215,203 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.\n+ *\n+ * Once a headers message is received that is valid and does connect,\n+ * nUnconnectingHeaders gets reset back to 0.\n+ */\n+void PeerManagerImpl::HandleFewUnconnectingHeaders(CNode& pfrom, Peer& peer,\n+        const std::vector<CBlockHeader>& headers)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    LOCK(cs_main);\n+    CNodeState *nodestate = State(pfrom.GetId());\n+\n+    nodestate->nUnconnectingHeaders++;\n+    // Try to fill in the missing headers.\n+    if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), peer)) {\n+        LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+            headers[0].GetHash().ToString(),\n+            headers[0].hashPrevBlock.ToString(),\n+            m_chainman.m_best_header->nHeight,\n+            pfrom.GetId(), nodestate->nUnconnectingHeaders);\n+    }\n+    // Set hashLastUnknownBlock for this peer, so that if we\n+    // eventually get the headers - even from a different peer -\n+    // we can use this peer to download.\n+    UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n+\n+    // The peer may just be broken, so periodically assign DoS points if this\n+    // condition persists.\n+    if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+        Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n+    }\n+    return;\n+}\n+\n+bool PeerManagerImpl::CheckHeadersAreContinuous(const std::vector<CBlockHeader>& headers) const\n+{\n+    uint256 hashLastBlock;\n+    for (const CBlockHeader& header : headers) {\n+        if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+            return false;\n+        }\n+        hashLastBlock = header.GetHash();\n+    }\n+    return true;\n+}\n+\n+bool PeerManagerImpl::MaybeSendGetHeaders(CNode& pfrom, const CBlockLocator& locator, Peer& peer)\n+{\n+    const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n+\n+    const auto current_time = GetTime<std::chrono::seconds>();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r911918154",
      "id" : 911918154,
      "in_reply_to_id" : 908380211,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5842WsRK",
      "original_commit_id" : "e3b2185e70b183a465a2a395ee7d7a0f1383d049",
      "original_line" : 2276,
      "original_position" : 113,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 1026152869,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911918154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-01T12:28:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911918154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @ajtowns This should fix the issue you've seen in functional tests, where generating a bunch of blocks at once can result in O(n^2) headers downloads.\r\n\r\nCan confirm that it seems to fix the problem, and that the debug logs for p2p_blockheaders show much fewer \"getheaders\" requests.",
      "created_at" : "2022-07-04T03:28:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1173298333",
      "id" : 1173298333,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
      "node_id" : "IC_kwDOABII585F7xyd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173298333/reactions"
      },
      "updated_at" : "2022-07-04T03:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173298333",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK 99f4785cad94657dcf349d00fdd6f1d44cac9bb0 ; code review, check over new logic of when to send getheaders messages",
      "created_at" : "2022-07-04T11:46:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1173723141",
      "id" : 1173723141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
      "node_id" : "IC_kwDOABII585F9ZgF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173723141/reactions"
      },
      "updated_at" : "2022-07-04T11:46:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173723141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r912929185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/912929185"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit, typo: \"before *being* given DoS points\" ?",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-04T11:55:19Z",
      "diff_hunk" : "@@ -2194,6 +2199,48 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r912929185",
      "id" : 912929185,
      "line" : 2225,
      "node_id" : "PRRC_kwDOABII5842ajGh",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2209,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 23,
      "pull_request_review_id" : 1027446708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/912929185/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-04T13:25:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/912929185",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913000465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913000465"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: braces are unnecessary, I think.",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-04T13:21:33Z",
      "diff_hunk" : "@@ -82,7 +82,7 @@ def run_test(self):\n         msg.hashstop = 0\n         peer.send_and_ping(msg)\n         time.sleep(5)\n-        assert \"headers\" not in peer.last_message\n+        assert (\"headers\" not in peer.last_message or len(peer.last_message[\"headers\"].headers) == 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913000465",
      "id" : 913000465,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII5842a0gR",
      "original_commit_id" : "abf5d16c24cb08b0451bdbd4d1de63a12930e8f5",
      "original_line" : 85,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/feature_minchainwork.py",
      "position" : 5,
      "pull_request_review_id" : 1027446708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913000465/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-04T13:25:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913000465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK  99f4785cad94657dcf349d00fdd6f1d44cac9bb0 ",
      "created_at" : "2022-07-04T13:40:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1173836249",
      "id" : 1173836249,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
      "node_id" : "IC_kwDOABII585F91HZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173836249/reactions"
      },
      "updated_at" : "2022-07-04T13:40:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173836249",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code Review ACK 99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-04T19:07:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#issuecomment-1174109776",
      "id" : 1174109776,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25454",
      "node_id" : "IC_kwDOABII585F-35Q",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1174109776/reactions"
      },
      "updated_at" : "2022-07-04T19:07:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1174109776",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913493528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913493528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e: Pretty sure this counts the headers mgs, not the headers?",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-05T07:51:39Z",
      "diff_hunk" : "@@ -2194,6 +2199,48 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913493528",
      "id" : 913493528,
      "line" : 2224,
      "node_id" : "PRRC_kwDOABII5842cs4Y",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2208,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 22,
      "pull_request_review_id" : 1028199542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913493528/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-05T12:53:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913493528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913495541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913495541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e It might be good to mention in the commit message that you are changing the points in this \"move\" commit.\r\n\r\nPreviously a non-connecting non-continuous header sequence of size MAX_BLOCKS_TO_ANNOUNCE+1 was assigned 20. Now it is assigned 10, no?",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-05T07:53:50Z",
      "diff_hunk" : "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913495541",
      "id" : 913495541,
      "line" : 2439,
      "node_id" : "PRRC_kwDOABII5842ctX1",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2269,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 104,
      "pull_request_review_id" : 1028199542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913495541/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T12:48:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913495541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913611807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913611807"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ffe87db247b19ffb8bfba329c5dd0be39ef5a53f:  It looks like you are splitting one LOCK of cs_main in master into at least 3 in this pull. It would seem plausible that under no load  this has no impact, as only one thread will be active at most. However at higher load, this may cause net_processing to be (minimally) slowed down with the changes here?\r\n\r\nNot a big deal, but maybe at least this cs_main can be avoided by opportunistically calculating the result in the previous WITH_LOCK ?",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-05T09:54:35Z",
      "diff_hunk" : "@@ -2444,15 +2443,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    {\n-        LOCK(cs_main);\n-\n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash())) {\n-            received_new_header = true;\n-        }\n-    }\n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    bool received_new_header{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r913611807",
      "id" : 913611807,
      "line" : 2452,
      "node_id" : "PRRC_kwDOABII5842dJwf",
      "original_commit_id" : "ffe87db247b19ffb8bfba329c5dd0be39ef5a53f",
      "original_line" : 2448,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 23,
      "pull_request_review_id" : 1028199542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913611807/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-05T12:53:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/913611807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914721953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914721953"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It still gets a score of 20 via `HandleFewUnconnectingHeaders()` when `nCount <= MAX_BLOCKS_TO_ANNOUNCE`; this adds an unavoidable score of 10 for unconnecting headers when `nCount > MAX_BLOCKS_TO_ANNOUNCE` which previously was more or less ignored...",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T11:19:30Z",
      "diff_hunk" : "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914721953",
      "id" : 914721953,
      "in_reply_to_id" : 913495541,
      "line" : 2439,
      "node_id" : "PRRC_kwDOABII5842hYyh",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2269,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 104,
      "pull_request_review_id" : 1029924661,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914721953/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T11:19:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914721953",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914770077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914770077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Previously a non-connecting non-continuous header sequence of size MAX_UNCONNECTING_HEADERS would be submitted to validation through `ProcessNewBlockHeaders()`, since the `if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE)` block would be skipped.\r\n\r\nThat would return `BlockValidationResult::BLOCK_MISSING_PREV`:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/691a08718beff31d1b821b192609ea3bfdb24d41/src/validation.cpp#L3590-L3593\r\n\r\nwhich would result in 10 misbehaviour points in `MaybePunishNodeForBlock`",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T12:19:04Z",
      "diff_hunk" : "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914770077",
      "id" : 914770077,
      "in_reply_to_id" : 913495541,
      "line" : 2439,
      "node_id" : "PRRC_kwDOABII5842hkid",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2269,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 104,
      "pull_request_review_id" : 1029993980,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914770077/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T12:19:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914770077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914819517"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914819517"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> this adds an unavoidable score of 10 for unconnecting headers when nCount > MAX_BLOCKS_TO_ANNOUNCE which previously was more or less ignored...\r\n\r\nCan you explain a bit more why this was \"more or less ignored\"? \r\n\r\nPreviously it was deterministically and consistently assigned a `Misbehaving(peer, 20, \"non-continuous headers sequence\");`.\r\n\r\nNow it is deterministically and consistently assigned a `Misbehaving(peer, 10, \"invalid header received\");`.\r\n\r\n> Previously a non-connecting non-continuous header sequence of size MAX_UNCONNECTING_HEADERS would be submitted to validation through ProcessNewBlockHeaders()\r\n\r\nNo, it wouldn't, as it would be rejected by the `Misbehaving(peer, 20, \"non-continuous headers sequence\");` check?\r\n\r\n\r\nWhat am I missing?\r\n",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T13:09:35Z",
      "diff_hunk" : "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914819517",
      "id" : 914819517,
      "in_reply_to_id" : 913495541,
      "line" : 2439,
      "node_id" : "PRRC_kwDOABII5842hwm9",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2269,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 104,
      "pull_request_review_id" : 1030067842,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914819517/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T13:09:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914819517",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914832494"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914832494"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> What am I missing?\r\n\r\nNothing. I misread non-continuous as continuous. You're right that this would be rejected with `Misbehaving(peer, 20, \"non-continuous headers sequence\")`",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T13:22:11Z",
      "diff_hunk" : "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914832494",
      "id" : 914832494,
      "in_reply_to_id" : 913495541,
      "line" : 2439,
      "node_id" : "PRRC_kwDOABII5842hzxu",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2269,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 104,
      "pull_request_review_id" : 1030087015,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914832494/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T13:22:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914832494",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914871029"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914871029"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is there even a need to make this atomic? In a single threaded environment this is not needed. And if the same peer is served by several threads (for whatever reason) in the future, an atomic may prevent UB, but doesn't seem sufficient to prevent races logically.\r\n\r\n",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T13:55:39Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914871029",
      "id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842h9L1",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1030142634,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914871029/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T13:55:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914871029",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914887154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914887154"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sure, I can update the comment in a followup (there's a sense in which what is written is true, in that we only are checking the first header in a message to see if it connects, but that's probably an overly convoluted way to think about things).",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T14:09:03Z",
      "diff_hunk" : "@@ -2194,6 +2199,48 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914887154",
      "id" : 914887154,
      "in_reply_to_id" : 913493528,
      "line" : 2224,
      "node_id" : "PRRC_kwDOABII5842iBHy",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2208,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 22,
      "pull_request_review_id" : 1030166239,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914887154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T14:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914887154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914892574"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914892574"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hmm that is an interesting point.  My sense was that we don't want to rely on implicit single-threadedness to reason about data races, so it was safer to just throw this into an atomic and not worry about it.\r\n\r\nI also think that having multiple threads servicing the same peer would not really work for a bunch of reasons (including the one you give, about logical errors in code like this).  I would imagine that multithreading network handling in the future would involve different threads servicing different peers.\r\n\r\nI think the most likely form of UB from data races would be if we were to expose this value via RPC in the future.  So to make this future-proof, I'd prefer that we leave this as-is; it doesn't seem like the performance hit of having an atomic here (which is rarely accessed, as `getheaders` messages are not a frequent occurrence, and there are far more effective ways to CPU DoS a node than to trigger a getheaders) is significant enough to warrant making this harder to reason about in the future.",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T14:13:50Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914892574",
      "id" : 914892574,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842iCce",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1030173664,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914892574/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T14:13:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914892574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914899946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914899946"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure what to say here other than that yes, there are minor behavior changes in this PR.  I don't think any are significant as the DoS points here are pretty arbitrary and when checking for different failures, it shouldn't matter too much which order we do things.  I would have been happy to update the commit message as you suggest but now that this is merged there's not much I can do!\r\n\r\nIt should be the case that any failure before that resulted in DoS points would still result in DoS points now, I think -- if that is not the case, then that would be an oversight to fix.  The motivation for making these kinds of minor changes is to make the headers processing easier to reason about, which is also in preparation for another change I'll be proposing to headers sync in the future (which I think will be easier to understand with the headers processing logic that is introduced in this PR).",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T14:20:11Z",
      "diff_hunk" : "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914899946",
      "id" : 914899946,
      "in_reply_to_id" : 913495541,
      "line" : 2439,
      "node_id" : "PRRC_kwDOABII5842iEPq",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2269,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 104,
      "pull_request_review_id" : 1030184400,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914899946/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T14:20:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914899946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914903742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914903742"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I suppose!  My view is that the performance here is extremely minor compared to code readability and organizing the ideas in this function together, so I prefer it this way.",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T14:23:26Z",
      "diff_hunk" : "@@ -2444,15 +2443,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    {\n-        LOCK(cs_main);\n-\n-        // If we don't have the last header, then they'll have given us\n-        // something new (if these headers are valid).\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash())) {\n-            received_new_header = true;\n-        }\n-    }\n+    // If we don't have the last header, then this peer will have given us\n+    // something new (if these headers are valid).\n+    bool received_new_header{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers.back().GetHash()) == nullptr)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914903742",
      "id" : 914903742,
      "in_reply_to_id" : 913611807,
      "line" : 2452,
      "node_id" : "PRRC_kwDOABII5842iFK-",
      "original_commit_id" : "ffe87db247b19ffb8bfba329c5dd0be39ef5a53f",
      "original_line" : 2448,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 23,
      "pull_request_review_id" : 1030190027,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914903742/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T14:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914903742",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914946969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914946969"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, it wasn't meant as a criticism of https://github.com/bitcoin/bitcoin/commit/7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e more as a nit to keep in mind in the future. I think the code changes in this commit are perfectly fine. Generally I just prefer to split behaviour changes from refactoring changes, or at least explain the behaviour changes in the commit message briefly. Otherwise, what seems obvious to the author is easily missed by reviewers. (I think this discussion is supporting evidence enough).\r\n\r\n",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T14:59:09Z",
      "diff_hunk" : "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914946969",
      "id" : 914946969,
      "in_reply_to_id" : 913495541,
      "line" : 2439,
      "node_id" : "PRRC_kwDOABII5842iPuZ",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2269,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 104,
      "pull_request_review_id" : 1030253253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914946969/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T14:59:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914946969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914956474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914956474"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think if this was ever exposed on RPC, we'd also want to think which other fields to return atomically in the response, in which case a per-field atomic isn't enough to prevent logic races. So to me it seems slightly preferable to leave the design of thread safety to when it is needed. Otherwise it may be assumed in the future that this is already perfectly thread safe and can be used as is. Leaving this plain (without atomic) would at least have a thread sanitizer failure hint that the design needs to be re-thought if this was accessed by more than one thread in the future.",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T15:07:13Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914956474",
      "id" : 914956474,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842iSC6",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1030266347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914956474/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T15:07:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914956474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914956922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914956922"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(Other than that, agree that atomic doesn't affect performance)",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T15:07:41Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914956922",
      "id" : 914956922,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842iSJ6",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1030267034,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914956922/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T15:07:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914956922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914957570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914957570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Did that in https://github.com/bitcoin/bitcoin/pull/25555. Feel free to NACK or ACK",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T15:08:16Z",
      "diff_hunk" : "@@ -2194,6 +2199,48 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914957570",
      "id" : 914957570,
      "in_reply_to_id" : 913493528,
      "line" : 2224,
      "node_id" : "PRRC_kwDOABII5842iSUC",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2208,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 22,
      "pull_request_review_id" : 1030268055,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914957570/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T15:08:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914957570",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914988526"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914988526"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Previously a non-connecting non-continuous header sequence of size MAX_BLOCKS_TO_ANNOUNCE+1 was assigned 20. Now it is assigned 10, no?\r\n> Previously it was deterministically and consistently assigned a `Misbehaving(peer, 20, \"non-continuous headers sequence\");`.\r\n\r\nAh, sorry, I was only thinking of the non-connecting continuous case, not the non-connecting, non-continuous case.",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T15:36:48Z",
      "diff_hunk" : "@@ -2208,36 +2255,24 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n \n     bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                     headers[0].GetHash().ToString(),\n-                     headers[0].hashPrevBlock.ToString(),\n-                     m_chainman.m_best_header->nHeight,\n-                     pfrom.GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom.GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(peer, 20, strprintf(\"%d non-connecting headers\", nodestate->nUnconnectingHeaders));\n-            }\n-            return;\n+    // Do these headers connect to something in our block index?\n+    bool headers_connect_blockindex{WITH_LOCK(::cs_main, return m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) != nullptr)};\n+\n+    if (!headers_connect_blockindex) {\n+        if (nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n+            // If this looks like it could be a BIP 130 block announcement, use\n+            // special logic for handling headers that don't connect, as this\n+            // could be benign.\n+            HandleFewUnconnectingHeaders(pfrom, peer, headers);\n+        } else {\n+            Misbehaving(peer, 10, \"invalid header received\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r914988526",
      "id" : 914988526,
      "in_reply_to_id" : 913495541,
      "line" : 2439,
      "node_id" : "PRRC_kwDOABII5842iZ3u",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2269,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 104,
      "pull_request_review_id" : 1030311611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914988526/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T15:36:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/914988526",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r915103219"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915103219"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You know, I think you're right that this atomic is incorrect.  We need to hold a lock throughout `MaybeSendGetHeaders()` because this variable can be accessed in the scheduler thread or in the net processing thread, and if we don't hold a lock throughout that function we can get a data race.  Thanks for asking about this, I'll open a PR to fix.",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T17:42:46Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r915103219",
      "id" : 915103219,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842i13z",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1030482960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915103219/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T17:42:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915103219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r915154998"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915154998"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Addressed in #25557",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-06T18:49:28Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r915154998",
      "id" : 915154998,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842jCg2",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1030555544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915154998/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-06T18:49:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/915154998",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918044113"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918044113"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you elaborate a bit on this? Unless I am missing something `MaybeSendGetHeaders`/`ConsiderEviction` is only called in-thread, not to be confused with `CheckForStaleTipAndEvictPeers`, which is called out-of-thread. What am I missing?",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-11T15:03:51Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918044113",
      "id" : 918044113,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842uD3R",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1034498803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918044113/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-11T15:03:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918044113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918106763"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918106763"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What is \"in-thread\" and \"out-of-thread\"?",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-11T16:00:20Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918106763",
      "id" : 918106763,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842uTKL",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1034586611,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918106763/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-11T16:00:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918106763",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918573866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918573866"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"in-thread\" means running in the thread \"ThreadMessageHandler (b-msghand): Application level message handling (sending and receiving). Almost all net_processing and validation logic runs on this thread.\"",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-12T05:54:46Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918573866",
      "id" : 918573866,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842wFMq",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1035246824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918573866/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-12T05:54:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918573866",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918679389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918679389"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, `m_last_getheaders_timestamp` is accessed from `PeerManagerImpl::MaybeSendGetHeaders()` and `PeerManagerImpl::ProcessMessage()` which are only called from a single thread `ThreadMessageHandler()`.\r\n\r\n> because this variable can be accessed in the scheduler thread or in the net processing thread\r\n\r\n@sdaftuar, I think it is not accessed from the scheduler thread?\r\n\r\nI am in favor of simplicity, in this case meaning to not protect data that is accessed by a single thread. If in the future it is accessed by another thread, then an appropriate protection should be added. That may be an atomic or a mutex just for that variable or a mutex for multiple variables depending on the need. Otherwise we may end up protecting it needlessly now and later to have to rework the protection anyway (or worse - use the available, inappropriate protection, like @MarcoFalke mentioned above \"...it may be assumed in the future that this is already perfectly thread safe...\").",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-12T08:13:16Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r918679389",
      "id" : 918679389,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842we9d",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1035394398,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918679389/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-12T08:13:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/918679389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r919084005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919084005"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Can you elaborate a bit on this? Unless I am missing something MaybeSendGetHeaders/ConsiderEviction is only called in-thread, not to be confused with CheckForStaleTipAndEvictPeers, which is called out-of-thread. What am I missing?\r\n\r\nAh, I guess I misremembered how `ConsiderEviction` is called (and thought it was run in the scheduler thread).  \r\n\r\nI'll update my other PR and drop the mutex/atomic altogether.",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-12T15:03:16Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r919084005",
      "id" : 919084005,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842yBvl",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1035971831,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919084005/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-12T15:03:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919084005",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r919097013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919097013"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I am in favor of simplicity, in this case meaning to not protect data that is accessed by a single thread.\r\n\r\nPossible idea for the future. In theory could have `SingleThread<T>` class similar to the `Synced<T>` class from #25390 that wraps an object and asserts in debug mode that is always accessed from the same thread. I think a solution like that would be overkill here, and I'm struggling to think of cases where it wouldn't be overkill, but it wouldn't be hard to implement and could be useful to help code document assumptions it is making.",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-12T15:14:34Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r919097013",
      "id" : 919097013,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII5842yE61",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1035991112,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919097013/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-12T15:14:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/919097013",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r920866842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920866842"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done as part of https://github.com/bitcoin/bitcoin/pull/25555",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-14T07:57:26Z",
      "diff_hunk" : "@@ -2194,6 +2199,48 @@ void PeerManagerImpl::SendBlockTransactions(CNode& pfrom, Peer& peer, const CBlo\n     m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::BLOCKTXN, resp));\n }\n \n+/**\n+ * Special handling for unconnecting headers that might be part of a block\n+ * announcement.\n+ *\n+ * We'll send a getheaders message in response to try to connect the chain.\n+ *\n+ * The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+ * don't connect before given DoS points.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r920866842",
      "id" : 920866842,
      "in_reply_to_id" : 912929185,
      "line" : 2225,
      "node_id" : "PRRC_kwDOABII584241Aa",
      "original_commit_id" : "7f2450871b3ea0b4d02d56bd2ca365fcc25cf90e",
      "original_line" : 2209,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 23,
      "pull_request_review_id" : 1038452819,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920866842/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-14T07:58:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920866842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r920867311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920867311"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done as part of 8efa73e7ce4ea0c1b7ad5c3947a5ecf9fb6361d3",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-14T07:57:57Z",
      "diff_hunk" : "@@ -82,7 +82,7 @@ def run_test(self):\n         msg.hashstop = 0\n         peer.send_and_ping(msg)\n         time.sleep(5)\n-        assert \"headers\" not in peer.last_message\n+        assert (\"headers\" not in peer.last_message or len(peer.last_message[\"headers\"].headers) == 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r920867311",
      "id" : 920867311,
      "in_reply_to_id" : 913000465,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII584241Hv",
      "original_commit_id" : "abf5d16c24cb08b0451bdbd4d1de63a12930e8f5",
      "original_line" : 85,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/feature_minchainwork.py",
      "position" : 5,
      "pull_request_review_id" : 1038453482,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920867311/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-14T07:57:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920867311",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r920868519"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920868519"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be resolved by 8efa73e7ce4ea0c1b7ad5c3947a5ecf9fb6361d3",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-07-14T07:59:12Z",
      "diff_hunk" : "@@ -358,7 +358,7 @@ struct Peer {\n     std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n \n     /** Time of the last getheaders message to this peer */\n-    std::atomic<std::chrono::seconds> m_last_getheaders_timestamp{0s};\n+    std::atomic<NodeClock::time_point> m_last_getheaders_timestamp{NodeSeconds{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r920868519",
      "id" : 920868519,
      "in_reply_to_id" : 914871029,
      "line" : 361,
      "node_id" : "PRRC_kwDOABII584241an",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 361,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 1038455160,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920868519/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-14T07:59:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/920868519",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r939528345"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939528345"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`msgMaker` is now unused in ProcessHeadersMessage. This is fixed in #25717",
      "commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "created_at" : "2022-08-06T13:24:51Z",
      "diff_hunk" : "@@ -2206,55 +2424,33 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, Peer& peer,\n         return;\n     }\n \n-    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n-    {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom.GetId());\n \n-        // If this looks like it could be a block announcement (nCount <=\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount <= MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), uint256()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25454#discussion_r939528345",
      "id" : 939528345,
      "line" : 2225,
      "node_id" : "PRRC_kwDOABII5844ABCZ",
      "original_commit_id" : "99f4785cad94657dcf349d00fdd6f1d44cac9bb0",
      "original_line" : 2225,
      "original_position" : 275,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 275,
      "pull_request_review_id" : 1064307359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25454",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939528345/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-06T13:25:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939528345",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
