[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18267 (BIP-325: Signet [consensus] by kallewoof)\n* #18152 (qt: Use SynchronizationState enum for signals to GUI by hebasto)\n* #16224 (gui: Bilingual GUI error messages by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-12-12T19:52:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-565159369",
      "id" : 565159369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NTE1OTM2OQ==",
      "updated_at" : "2020-03-30T14:52:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565159369",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357709665"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357709665"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6d1491603f6dfb9f755e60d77685635c35d5a48b: \r\n\r\nIs m_chain.SetTip assumed to be under cs_main? If yes, this should say ` ... = WITH_LOCK(cs_main, return m_chain.Tip());`",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T15:51:26Z",
      "diff_hunk" : "@@ -4908,6 +4908,13 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n     assert(nNodes == forward.size());\n }\n \n+std::string CChainState::ToString()\n+{\n+    CBlockIndex* tip = m_chain.Tip();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357709665",
      "id" : 357709665,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcwOTY2NQ==",
      "original_commit_id" : "6d1491603f6dfb9f755e60d77685635c35d5a48b",
      "original_position" : 6,
      "path" : "src/validation.cpp",
      "position" : 229,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357709665",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357709949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357709949"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6d14916:\r\n\r\nI think the arguments are switched?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T15:52:03Z",
      "diff_hunk" : "@@ -4908,6 +4908,13 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n     assert(nNodes == forward.size());\n }\n \n+std::string CChainState::ToString()\n+{\n+    CBlockIndex* tip = m_chain.Tip();\n+    return strprintf(\"Chainstate [%s] @ height %d\",\n+        tip ? tip->nHeight : -1, tip ? tip->GetBlockHash().ToString() : \"null\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357709949",
      "id" : 357709949,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcwOTk0OQ==",
      "original_commit_id" : "6d1491603f6dfb9f755e60d77685635c35d5a48b",
      "original_position" : 8,
      "path" : "src/validation.cpp",
      "position" : 232,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357709949",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357711715"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357711715"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6b62d2f15397226b273cb87f56b8978404fd415f:\r\n\r\nShould be const to ensure at compile time that we know whether a chainstate was created from a snapshot?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T15:55:41Z",
      "diff_hunk" : "@@ -611,6 +611,13 @@ class CChainState {\n     //! @see CChain, CBlockIndex.\n     CChain m_chain;\n \n+    /**\n+     * The blockhash which is the base of the snapshot this chainstate was created from.\n+     *\n+     * IsNull() if this chainstate was not created from a snapshot.\n+     */\n+    uint256 m_from_snapshot_blockhash{};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357711715",
      "id" : 357711715,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxMTcxNQ==",
      "original_commit_id" : "6b62d2f15397226b273cb87f56b8978404fd415f",
      "original_position" : 18,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357711715",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357712223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357712223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6b62d2f15397226b273cb87f56b8978404fd415f:\r\n\r\nconstructors (especially single arg ones) should be explicit. Otherwise any hash can be passed into a function that accepts a chainstate. Hmmm",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T15:56:44Z",
      "diff_hunk" : "@@ -583,7 +583,7 @@ class CChainState {\n \n public:\n     CChainState(BlockManager& blockman) : m_blockman(blockman) {}\n-    CChainState();\n+    CChainState(uint256 from_snapshot_blockhash = uint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357712223",
      "id" : 357712223,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxMjIyMw==",
      "original_commit_id" : "6b62d2f15397226b273cb87f56b8978404fd415f",
      "original_position" : 5,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357712223",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357712757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357712757"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6b62d2f15397226b273cb87f56b8978404fd415f:\r\n\r\nNow the arguments are correct. Might just squash the commits?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T15:57:52Z",
      "diff_hunk" : "@@ -4908,6 +4908,13 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n     assert(nNodes == forward.size());\n }\n \n+std::string CChainState::ToString()\n+{\n+    CBlockIndex* tip = m_chain.Tip();\n+    return strprintf(\"Chainstate [%s] @ height %d\",\n+        tip ? tip->nHeight : -1, tip ? tip->GetBlockHash().ToString() : \"null\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357712757",
      "id" : 357712757,
      "in_reply_to_id" : 357709949,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxMjc1Nw==",
      "original_commit_id" : "6d1491603f6dfb9f755e60d77685635c35d5a48b",
      "original_position" : 8,
      "path" : "src/validation.cpp",
      "position" : 232,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357712757",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357713099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357713099"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style-nit in 6b62d2f15397226b273cb87f56b8978404fd415f:\r\n\r\nThe colon goes into a new line according to our clang-format",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T15:58:41Z",
      "diff_hunk" : "@@ -1245,7 +1245,9 @@ void CoinsViews::InitCache()\n \n // NOTE: for now m_blockman is set to a global, but this will be changed\n // in a future commit.\n-CChainState::CChainState() : m_blockman(g_blockman) {}\n+CChainState::CChainState(uint256 from_snapshot_blockhash) :",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357713099",
      "id" : 357713099,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxMzA5OQ==",
      "original_commit_id" : "6b62d2f15397226b273cb87f56b8978404fd415f",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357713099",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357716948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357716948"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6a629cfd02:\r\n\r\nWouldn't this need to happen under some chainstate manager lock? Otherwise the chainstate might point to uninitialized memory in case of a race where \" Its contents will be freed when background validation of the snapshot has completed.\"",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T16:07:06Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357716948",
      "id" : 357716948,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxNjk0OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 91,
      "path" : "src/validation.h",
      "position" : 177,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357716948",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357719170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357719170"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6a629cfd029071: \r\n\r\nHow and why is this different from `return !m_ibd_chainstate`?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T16:11:38Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }\n+\n+    //! Is there a snapshot in use and has it been fully validated?\n+    bool IsSnapshotValidated() const { return m_snapshot_validated; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357719170",
      "id" : 357719170,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxOTE3MA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 103,
      "path" : "src/validation.h",
      "position" : 194,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357719170",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357721286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357721286"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6a629cfd02907162ce:\r\n\r\nI wonder if this method needs to happen under some kind of lock. Otherwise there might be a race in validation or net processing where the chainstate is switched down under during a call.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T16:16:07Z",
      "diff_hunk" : "@@ -5116,3 +5116,68 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", snapshot_blockhash.ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357721286",
      "id" : 357721286,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcyMTI4Ng==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357721286",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357723785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357723785"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6a629cfd0290716:\r\n\r\nHow and why is this different from `return m_active_chainstate->m_snapshot_blockhash;`?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T16:21:52Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357723785",
      "id" : 357723785,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcyMzc4NQ==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 100,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357723785",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357727259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357727259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 4813167d989c:\r\n\r\nIs this comment no longer relevant?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-13T16:29:30Z",
      "diff_hunk" : "@@ -1463,8 +1467,7 @@ bool AppInitMain(NodeContext& node)\n             bool is_coinsview_empty;\n             try {\n                 LOCK(cs_main);\n-                // This statement makes ::ChainstateActive() usable.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357727259",
      "id" : 357727259,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcyNzI1OQ==",
      "original_commit_id" : "4813167d989c5777eb8b5133dedd93b12e1cc207",
      "original_position" : 32,
      "path" : "src/init.cpp",
      "position" : 72,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357727259",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357890585"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357890585"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree. Same question for other methods.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-14T02:14:57Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357890585",
      "id" : 357890585,
      "in_reply_to_id" : 357716948,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Nzg5MDU4NQ==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 91,
      "path" : "src/validation.h",
      "position" : 177,
      "pull_request_review_id" : 332189983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357890585",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358506358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358506358"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6b62d2f\r\n\r\nEven if I understand what you mean by an assumed-valid UTXO, I think it may confuse readers try to learn what's the difference is between assume-utxo and assume-valid. Wouldn't be shock by a simple `assume-utxo snapshot`.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-16T22:45:42Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358506358",
      "id" : 358506358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUwNjM1OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 38,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358506358",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358507123"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6b62d2f\r\n\r\nIt's ambiguous here, do you mean a chainstate for which validity is assumed ? Overall, what's the definition of validity w.r.t to chainstates types ? I.e a IBD chainstate is always considered valid (because all consensus checks are done by us) or only when it's out-of-IBD? What's about a assume-valid IBD chainstate ?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-16T22:48:01Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507123",
      "id" : 358507123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUwNzEyMw==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 49,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358507123",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358507922"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6b62d2f\r\n\r\nLogger is weird, given than default activate is true, no blockhash is going to be display, maybe `snapshot_blockhash.IsNull ? \"an IBD one\" : snapshot_blockhash.ToString()`",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-16T22:50:19Z",
      "diff_hunk" : "@@ -5116,3 +5116,68 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", snapshot_blockhash.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507922",
      "id" : 358507922,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUwNzkyMg==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 29,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358507922",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358508803"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358508803"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6b62d2f\r\n\r\nI think consequences of activating a non valid chainstate by mistake can be pretty bad, would be better to have default to false in case of buggy call of this method.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-16T22:52:45Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358508803",
      "id" : 358508803,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUwODgwMw==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 88,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358508803",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358510858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358510858"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree, could be removed in GetAll, if idea is to garbage collect m_ibd_chainstate when foreground utxo get validated",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-16T22:58:22Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }\n+\n+    //! Is there a snapshot in use and has it been fully validated?\n+    bool IsSnapshotValidated() const { return m_snapshot_validated; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358510858",
      "id" : 358510858,
      "in_reply_to_id" : 357719170,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUxMDg1OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 103,
      "path" : "src/validation.h",
      "position" : 194,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358510858",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358511242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358511242"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6a629cf\r\n\r\nnit: you can move body function to validation.cpp, like `IsSnapshotActive`",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-16T22:59:21Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }\n+\n+    //! Is there a snapshot in use and has it been fully validated?\n+    bool IsSnapshotValidated() const { return m_snapshot_validated; }\n+\n+    //! @returns true if this chainstate is being used to validate an active\n+    //!          snapshot in the background.\n+    bool IsBackgroundValidationChainstate(CChainState* chainstate) const\n+    {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358511242",
      "id" : 358511242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUxMTI0Mg==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 108,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358511242",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358511722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358511722"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6a629cf\r\n\r\nMaybe reset `m_snapshot_blockhash` to null and `m_snapshot_validated` to false?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-16T23:00:48Z",
      "diff_hunk" : "@@ -5116,3 +5116,68 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", snapshot_blockhash.ToString());\n+        m_active_chainstate = to_modify.get();\n+    }\n+\n+    return *to_modify.get();\n+}\n+\n+CChain& ChainstateManager::ActiveChain() const\n+{\n+    return m_active_chainstate->m_chain;\n+}\n+\n+bool ChainstateManager::IsSnapshotActive() const\n+{\n+    return m_snapshot_chainstate && m_active_chainstate == m_snapshot_chainstate.get();\n+}\n+\n+CChainState& ChainstateManager::ValidatedChainstate() const\n+{\n+    if (m_snapshot_chainstate && IsSnapshotValidated()) {\n+        return *m_snapshot_chainstate.get();\n+    }\n+    assert(m_ibd_chainstate);\n+    return *m_ibd_chainstate.get();\n+}\n+\n+void ChainstateManager::Unload()\n+{\n+    for (CChainState* chainstate : this->GetAll()) {\n+        chainstate->m_chain.SetTip(nullptr);\n+        chainstate->UnloadBlockIndex();\n+    }\n+}\n+\n+void ChainstateManager::Reset()\n+{\n+    m_ibd_chainstate.reset();\n+    m_snapshot_chainstate.reset();\n+    m_active_chainstate = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358511722",
      "id" : 358511722,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUxMTcyMg==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 67,
      "path" : "src/validation.cpp",
      "position" : 338,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358511722",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358514335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358514335"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "175e570\r\n\r\nI'm not sure if `RewindBlockIndex` is still relevant.\r\n\r\nFollowing Suhas comment https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-257943026, it was added to let upgrading nodes after segwit activation redownload consensus data without redownloading the whole blockchain.\r\n\r\nAccording to sipa in #15402, the rewinding logic \"is probably becoming increasingly unnecessary, as very few pre-0.13.1 nodes remain that would care to upgrade\".\r\n\r\nFurther, it doesn't make sense for the assumed-valid UTXO chainstate to rewind until first insufficiently-validated block, all utxo hash are going to be post segwit. It only makes sense for the ibd chainstate. ",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-16T23:08:56Z",
      "diff_hunk" : "@@ -1566,7 +1566,7 @@ bool AppInitMain(NodeContext& node)\n                 // It both disconnects blocks based on ::ChainActive(), and drops block data in\n                 // BlockIndex() based on lack of available witness data.\n                 uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!RewindBlockIndex(chainparams)) {\n+                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358514335",
      "id" : 358514335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUxNDMzNQ==",
      "original_commit_id" : "175e5704ad6b1ceaaaf7925d36045e7e7700a6ff",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358514335",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358515509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358515509"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "4813167\r\n\r\nJust iterate for the `VerifyDB`, pruning and best block seen by RPC maybe should be common to both chainstates ?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-16T23:12:43Z",
      "diff_hunk" : "@@ -1517,93 +1520,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;\n+                    }\n                 }\n             }\n \n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n-\n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358515509",
      "id" : 358515509,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUxNTUwOQ==",
      "original_commit_id" : "4813167d989c5777eb8b5133dedd93b12e1cc207",
      "original_position" : 181,
      "path" : "src/init.cpp",
      "position" : 225,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358515509",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358853789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358853789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for raising this point. Initially, I had all pointers in the ChainstateManager protected by a private `m_cs` lock. I later found that there were irreconcilable lock inversions that happened during initialization - because a function like `ChainActive()` would necessarily have to acquire `ChainstateManager.m_cs`, there were many tricky inversions that happened between that lock and others like `cs_main` since ChainActive() is used so pervasively throughout the code. \r\n\r\nAs a result, I removed the chainman-specific lock and replaced it with `cs_main` in a later commit (https://github.com/bitcoin/bitcoin/pull/15606/commits/f1fa917e2081dd8d1847cbb23a0eae5a2cded2e5). Because ChainActive() isn't formally annotated as being protected by cs_main, and use of ChainstateManager always happens while under the protection of cs_main, I figured I could forgo adding those annotations now. But now that the point has been raised, I think it's probably worth addressing in this PR. \r\n\r\nSo I'll add the `cs_main` annotations to the relevant ChainManager parts. Though of course this will entail annotating ChainActive() and there will come with many other (mostly trivial) changes.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-17T15:23:30Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358853789",
      "id" : 358853789,
      "in_reply_to_id" : 357716948,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg1Mzc4OQ==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 91,
      "path" : "src/validation.h",
      "position" : 177,
      "pull_request_review_id" : 333356348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358853789",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358858324"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358858324"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also, it's worth noting that the comment you quote is out of date (my fault!). We don't actually free the contents of the background validation chainstate *immediately* when validation completes - [we do it during shutdown](https://github.com/bitcoin/bitcoin/pull/15606/commits/8d6e0c34c32c5b95c126a963b16b5aebf707acbd#diff-24efdb00bfbe56b140fb006b562cc70bR5653-R5679) when `g_chainman.Reset()` is called. \r\n\r\nThe reason I don't do it immediately after validation is complete is so that we can be sure that no other parts of the code are still making reference to that pointer. This also relates to your question below about `IsSnapshotValidated()` - the extra piece of state (`m_snapshot_validated`) is used to track whether or not we need to do this cleanup.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-17T15:30:30Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358858324",
      "id" : 358858324,
      "in_reply_to_id" : 357716948,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg1ODMyNA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 91,
      "path" : "src/validation.h",
      "position" : 177,
      "pull_request_review_id" : 333362196,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358858324",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859057"
         }
      },
      "author_association" : "MEMBER",
      "body" : "See my comment above for background: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358858324. Perhaps we can do this without necessarily needing to maintain extra state (`m_snapshot_validated`) for it. I'll look into it.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-17T15:31:40Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }\n+\n+    //! Is there a snapshot in use and has it been fully validated?\n+    bool IsSnapshotValidated() const { return m_snapshot_validated; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859057",
      "id" : 358859057,
      "in_reply_to_id" : 357719170,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg1OTA1Nw==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 103,
      "path" : "src/validation.h",
      "position" : 194,
      "pull_request_review_id" : 333363176,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859057",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859358"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In practice all usages of this happen under `cs_main`, but as I said above I'll do explicit annotations.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-17T15:32:09Z",
      "diff_hunk" : "@@ -5116,3 +5116,68 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", snapshot_blockhash.ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859358",
      "id" : 358859358,
      "in_reply_to_id" : 357721286,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg1OTM1OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 333363576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859358",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859584"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you're right here, I'll remove this.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-17T15:32:30Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859584",
      "id" : 358859584,
      "in_reply_to_id" : 357723785,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg1OTU4NA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 100,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 333363872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859584",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358860840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358860840"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this method is called so infrequently and has such major effects that it'd be hard to accidentally do anything one way or the other, and the results would be immediately obvious and buggy. But to your point, maybe I should remove the default parameters so that everything has to be explicit.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2019-12-17T15:34:40Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358860840",
      "id" : 358860840,
      "in_reply_to_id" : 358508803,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg2MDg0MA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 88,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 333365587,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358860840",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362555635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362555635"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it was incorrect since we haven't initialized the coins views at that point.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-02T17:21:18Z",
      "diff_hunk" : "@@ -1463,8 +1467,7 @@ bool AppInitMain(NodeContext& node)\n             bool is_coinsview_empty;\n             try {\n                 LOCK(cs_main);\n-                // This statement makes ::ChainstateActive() usable.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362555635",
      "id" : 362555635,
      "in_reply_to_id" : 357727259,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU1NTYzNQ==",
      "original_commit_id" : "4813167d989c5777eb8b5133dedd93b12e1cc207",
      "original_position" : 32,
      "path" : "src/init.cpp",
      "position" : 72,
      "pull_request_review_id" : 337763978,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362555635",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556013"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-02T17:22:26Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556013",
      "id" : 362556013,
      "in_reply_to_id" : 358506358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU1NjAxMw==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 38,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 337764425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556013",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-02T17:23:39Z",
      "diff_hunk" : "@@ -5116,3 +5116,68 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", snapshot_blockhash.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556449",
      "id" : 362556449,
      "in_reply_to_id" : 358507922,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU1NjQ0OQ==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 29,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 337765003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556449",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the default parameters, thanks.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-02T17:24:03Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556568",
      "id" : 362556568,
      "in_reply_to_id" : 358508803,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU1NjU2OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 88,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 337765165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556568",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556744"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree this is worth investigating, but probably not within this PR. I'd rather just preserve existing behavior.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-02T17:24:38Z",
      "diff_hunk" : "@@ -1566,7 +1566,7 @@ bool AppInitMain(NodeContext& node)\n                 // It both disconnects blocks based on ::ChainActive(), and drops block data in\n                 // BlockIndex() based on lack of available witness data.\n                 uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!RewindBlockIndex(chainparams)) {\n+                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556744",
      "id" : 362556744,
      "in_reply_to_id" : 358514335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU1Njc0NA==",
      "original_commit_id" : "175e5704ad6b1ceaaaf7925d36045e7e7700a6ff",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 337765420,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556744",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362648146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362648146"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point - I'm changing this to only report a new tip to RPC for the active chain. The tip/time check is very cheap and doesn't hurt to be done for both. There isn't anything that actually happens for pruning here other than a possible log statement, so I think leaving that as-is should be fine. Thanks!",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-02T22:06:45Z",
      "diff_hunk" : "@@ -1517,93 +1520,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;\n+                    }\n                 }\n             }\n \n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n-\n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362648146",
      "id" : 362648146,
      "in_reply_to_id" : 358515509,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY0ODE0Ng==",
      "original_commit_id" : "4813167d989c5777eb8b5133dedd93b12e1cc207",
      "original_position" : 181,
      "path" : "src/init.cpp",
      "position" : 225,
      "pull_request_review_id" : 337881526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362648146",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362987653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362987653"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "FYI, https://github.com/bitcoin/bitcoin/issues/17862. I had a second look, I think it's safe to maintain logic as it is for this PR even it should be never triggered because both chainstates will belong to segwit nodes. ",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-03T22:54:50Z",
      "diff_hunk" : "@@ -1566,7 +1566,7 @@ bool AppInitMain(NodeContext& node)\n                 // It both disconnects blocks based on ::ChainActive(), and drops block data in\n                 // BlockIndex() based on lack of available witness data.\n                 uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!RewindBlockIndex(chainparams)) {\n+                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362987653",
      "id" : 362987653,
      "in_reply_to_id" : 358514335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NzY1Mw==",
      "original_commit_id" : "175e5704ad6b1ceaaaf7925d36045e7e7700a6ff",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 338308159,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362987653",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2020-01-13T12:29:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-573640391",
      "id" : 573640391,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MzY0MDM5MQ==",
      "updated_at" : "2020-01-13T12:29:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573640391",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Bringing in [this IRC comment](http://www.erisian.com.au/bitcoin-core-dev/log-2020-01-16.html#l-454), if helpful:\r\n\r\n\"recent utxo snapshots for testing are available here: https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-555213164\"",
      "created_at" : "2020-01-16T19:18:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-575302740",
      "id" : 575302740,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NTMwMjc0MA==",
      "updated_at" : "2020-01-16T19:18:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/575302740",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370812356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370812356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 16d20d91b43b1c30333fe14272d69cfb543229b3:\r\n\r\nYou mention that \"// If a snapshot chainstate exists, it will always be our active.\"\r\n\r\nHowever, then you provide code here to activate a ibd chainstate even though a snapshot chainstate might exist. This is confusing and the code should probably not provide such a backdoor.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-24T19:48:07Z",
      "diff_hunk" : "@@ -5139,3 +5147,82 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370812356",
      "id" : 370812356,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxMjM1Ng==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 348185426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370812356",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370815097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370815097"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe a check like `if (m_active_chainstate && to_modify != m_snapshot_chainstate) LogPrintf(\"Error!\"); else ...` or similar could prevent that?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-24T19:54:27Z",
      "diff_hunk" : "@@ -5139,3 +5147,82 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370815097",
      "id" : 370815097,
      "in_reply_to_id" : 370812356,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxNTA5Nw==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 348188967,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370815097",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370819528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370819528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 16d20d91b43b1c30333fe14272d69cfb543229b3:\r\n\r\nShould `assert m_active_chainstate` first?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-24T20:05:05Z",
      "diff_hunk" : "@@ -5139,3 +5147,82 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();\n+    }\n+\n+    return *to_modify.get();\n+}\n+\n+CChain& ChainstateManager::ActiveChain() const\n+{\n+    return m_active_chainstate->m_chain;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370819528",
      "id" : 370819528,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxOTUyOA==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 61,
      "path" : "src/validation.cpp",
      "position" : 302,
      "pull_request_review_id" : 348194679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370819528",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370821538"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370821538"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 16d20d9:\r\n\r\n\"proven invalid\" sounds odd. In normal operation (with the assumevalid hash baked in) an assumevalid chainstate can never be invalid. And if it is, there is no way to recover from this, right? So proving that one or the other chainstate is invalid is impossible with conflicting information. The only way to handle this is to crash the node immediately. I'd say to remove the \"unless proven invalid\" phrase here.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-24T20:10:37Z",
      "diff_hunk" : "@@ -775,6 +782,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumeutxo UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or, if\n+    //! a snapshot is in use, for background validation.\n+    //!\n+    //! Its contents (including on-disk data) will be deleted *upon shutdown*\n+    //! after background validation of the snapshot has completed. We do not\n+    //! free the chainstate contents immediately after it finishes validation\n+    //! to cautiously avoid a case where some other part of the system is still\n+    //! using this pointer (e.g. net_processing).\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370821538",
      "id" : 370821538,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgyMTUzOA==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 77,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 348197553,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370821538",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 16d20d91b43b1c30333fe14272d69cfb543229b3 only, will continue review later on ð\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 16d20d91b43b1c30333fe14272d69cfb543229b3 only, will continue review later on ð\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjn6wv/cGwiv/yWquRmx2FEjuO62k8716JXtWFhx7zE1OcbgSYtOx2i4QAPQJhJ\r\nFYhRtUuVArBrkz9lrn9VSCo3Aueb7w8b/j3/8dGyH/zqUU7IhWgrjC7qlfbdP4lp\r\nDzDGE5ITqlvZlEkYAloI3zMoVRaUHDlGTK+bEHK3WdRnsPL9oR/C+S1UNcPNqq1m\r\nI4G5UrneAHnQnIiWJfjfzpZ0BlXCXCfs3S4BBwKNTQAMlqlgzz1sCQr5R2d8kcW3\r\nmNexZ76vn3IlrmFAyXWNwzQvGvfrGMF4RcIYQiS5OLfcjlzLfZOxSQJjerHzMe7C\r\nEdnUsD+OX6BA6ijgU7eO7k5mdRxSkUVLanAzINUB5dupiw1NscUyZlqsH2J549DT\r\nQ2g6va4jFXAULCFg2Rwx18k3GOQ0spLsRyv6wn/PxpwzEaZnEnSsoCe8pdiwCaOk\r\nSyIJzqx3vzfA3IhEgHVnLHqLN8iYk9F5XXevDDA7fPN1A/KAWDcQXjVEpu3jA03w\r\nnuOXSfZ+\r\n=G8F6\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `7e94e353f869ccf97b1947f28a0c0193a5e2cf8d984598592f1296d23f14168d  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401087e94e353f869ccf97b1947f28a0c0193a5e2cf8d984598592f1296d23f14168df010932f6a93389aee9f66370eb628789b3008fff01004dcbe7b06025934db649ab4347e89ef08f1045e2b516cf008ede39c0dfa042ee40083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0100b1cd423e577a643596a0db531309fae08f1045e2b516df00861dda22d00ab11700083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010b968296e10819ea09540a39ea357315508f1045e2b516df00827bbb6020257f1af0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df010e29ce239459275631a2919133ddc8ea308f1205b9e10df70f3727651768e1846a82711418f1e6299509dde211d4887f2f4162808f1045e2b516cf008882a6ad733fe9ab80083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "created_at" : "2020-01-24T20:20:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-578285881",
      "id" : 578285881,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODI4NTg4MQ==",
      "updated_at" : "2020-01-24T20:20:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578285881",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371446270"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371446270"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, good point.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-27T19:47:06Z",
      "diff_hunk" : "@@ -775,6 +782,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumeutxo UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or, if\n+    //! a snapshot is in use, for background validation.\n+    //!\n+    //! Its contents (including on-disk data) will be deleted *upon shutdown*\n+    //! after background validation of the snapshot has completed. We do not\n+    //! free the chainstate contents immediately after it finishes validation\n+    //! to cautiously avoid a case where some other part of the system is still\n+    //! using this pointer (e.g. net_processing).\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371446270",
      "id" : 371446270,
      "in_reply_to_id" : 370821538,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NjI3MA==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 77,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 348928687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371446270",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371459713"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371459713"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, this is a really good point. Fixed it to only allow a single activation sequence. ",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-27T20:15:42Z",
      "diff_hunk" : "@@ -5139,3 +5147,82 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371459713",
      "id" : 371459713,
      "in_reply_to_id" : 370812356,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1OTcxMw==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 348945798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371459713",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371886443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371886443"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit e89fbd3cf0820ee263a94c49751a97a784acb049:\r\n\r\nI have a hard time following the logic-change.\r\n\r\n* You replace all calls to ChainActive with a for loop over all chainstates\r\n* You only initialize the \"ibd\" chainstate, which will retain all logic as it was before\r\n* However, is_coinsview_empty will be set to the result of whatever chainstate was processed last, and then used (in the next loop) on whatever chainstate is processed first. This seems fragile or at least requires a comment to explain why this can be done.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T15:48:24Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371886443",
      "id" : 371886443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4NjQ0Mw==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 110,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 349483802,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371886443",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371886873"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371886873"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit e89fbd3cf0820ee263a94c49751a97a784acb049:\r\n\r\nPreviously we'd break out, now we continue. Why?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T15:49:07Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371886873",
      "id" : 371886873,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4Njg3Mw==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 152,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 349484380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371886873",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371914209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371914209"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe it's a little hard to see in the diff, but the current value of `is_coinsview_empty` is only ever used within a single loop. In the next loop, the [value is reset](https://github.com/jamesob/bitcoin/blob/1c173812bac34e263ae49e0bc80e45b437e95e8b/src/init.cpp#L1619-L1620) based on the chainstate being worked on.\r\n\r\nIt's safe to reset the value on line 1619 because it's not possible for the coinstip's best block to be set to null between this `is_coinsview_empty = ...` assignment and the one in the next loop.\r\n\r\nTo be extra sure there's no change, I could create a `chainstate_to_coinsview_empty` map and only set the values once, but I'll only do this if you think it's worthwhile.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T16:30:42Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371914209",
      "id" : 371914209,
      "in_reply_to_id" : 371886443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkxNDIwOQ==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 110,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 349520079,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371914209",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371920391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371920391"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Yep, this is a really good point. Fixed it to only allow a single activation sequence.\r\n\r\nIf you're going to do this I think it would be clearer as:\r\n\r\n```\r\nLogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\r\nassert (is_snapshot || !m_active_chainstate);\r\nm_active_chainstate = to_modify.get();\r\n```\r\n\r\nIn current version, it's confusing to mentally reconcile the \"always become active\" comment with the bool condition and the \"unexpected activation\" error string below, instead of having a one shot assertion",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T16:40:22Z",
      "diff_hunk" : "@@ -5139,3 +5147,82 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371920391",
      "id" : 371920391,
      "in_reply_to_id" : 370812356,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkyMDM5MQ==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371920391",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371963531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371963531"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, I missed that the value is reset. Maybe it would help to limit the scope of the variable to make that more clear and avoid this issue accidentally coming up in the future?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T17:57:35Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371963531",
      "id" : 371963531,
      "in_reply_to_id" : 371886443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2MzUzMQ==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 110,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 349583431,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371963531",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371972320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371972320"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit e89fbd3:\r\n\r\nVerifyDB will verify the db based on the active chain. How is this supposed to work when you pass in a db that is not from the active chainstate?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T18:15:00Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;\n+                    }\n                 }\n             }\n \n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n-\n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n+                        if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n+                                MIN_BLOCKS_TO_KEEP);\n+                        }\n+\n+                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n+                        RPCNotifyBlockChange(true, tip);\n+                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                    \"This may be due to your computer's date and time being set incorrectly. \"\n+                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n+                            failed_verification = true;\n+                            break;\n+                        }\n+\n+                        if (!CVerifyDB().VerifyDB(\n+                                chainparams, &chainstate->CoinsDB(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371972320",
      "id" : 371972320,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3MjMyMA==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 202,
      "path" : "src/init.cpp",
      "position" : 247,
      "pull_request_review_id" : 349594651,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371972320",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371994558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371994558"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 1c173812bac34e263ae49e0bc80e45b437e95e8b:\r\n\r\nWhy is this a hack and what should be used instead of the hack? If there is nothing that can be used instead, this is not a hack and the comment should go.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T18:58:20Z",
      "diff_hunk" : "@@ -701,11 +701,21 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n-    BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n-        LogPrintf(\"Failed to connect best block (%s)\\n\", FormatStateMessage(state));\n-        StartShutdown();\n-        return;\n+\n+    // XXX this is kind of a hack to avoid a lock inversion.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371994558",
      "id" : 371994558,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5NDU1OA==",
      "original_commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "original_position" : 10,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 349622592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371994558",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371995471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371995471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here and everywhere else you use the `XXX`",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T19:00:08Z",
      "diff_hunk" : "@@ -1403,7 +1403,15 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     } // release cs_main before calling ActivateBestChain\n     if (need_activate_chain) {\n         BlockValidationState state;\n-        if (!ActivateBestChain(state, Params(), a_recent_block)) {\n+\n+        // XXX this is kind of a hack here to get around the fact that we can't",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371995471",
      "id" : 371995471,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5NTQ3MQ==",
      "original_commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "original_position" : 6,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 349623726,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371995471",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 1c173812bac34e263ae49e0bc80e45b437e95e8b, but it looks like the tests fail ð¢\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 1c173812bac34e263ae49e0bc80e45b437e95e8b, but it looks like the tests fail ð¢\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjFNgwApRAQI5N2D4113l6z1rLjgUjlixBjaHFnZC0rG5naAL/Gu55ofeAmzg5Z\r\nTYF1WvqL9spMC+CDCweOyRGKsWb81Ryv8Ieni+Dn8RE+pu0VLakDu9Lw95+bd43j\r\n1P6RLJYa2NYFlCuJssbs5ziEPJqs3/DlelgWPslfbdgwLXWFT54CvijXuFEF43b/\r\nT9/NBr1OO1ByA0+AEM0eT3iHH55Guna544fuY8UjEDabnjqs8EiatmXArGlqi6Wr\r\nD6U7J33USdtpof1bb+2zR8KLSb4MCFFxezr2yrSREHf5tqqamfN3qJ2dYHazNEMd\r\nS4ka7rOrQqY/c2XIBs4oYD8pxI3thvxuo4nAnsG0sxjxkW0mm4O5OBqTFP/aGilX\r\nNNkR1TTl1DcuqbTFK3FNoiqmG/yuh2OWw3jm0EG6jhEcf3sdf1d2e5RUQ0xKPDRm\r\nh/PVqKPlmRDkEHiT9XoLgWDw6C9fH86HdGh0HLBZmTJ2jOt+sVeIvSXtth7sVznG\r\nvtfM49Wg\r\n=0mLY\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `6a38ed3fc7e109b015b25d8cd883d76b0d7c7f56f8c96dd80e10381889e51bbd  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401086a38ed3fc7e109b015b25d8cd883d76b0d7c7f56f8c96dd80e10381889e51bbdf010aa5fff91763b0cf471495be301eed42608fff0101ef862cc09f5549b6fe9bd6be7aa9ab308f1045e3084fef00840dc1af3f0f867230083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff01060445eda4658bc26a60a7fb78cea975908f1045e3084fdf00843441668b950cb840083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010a59c899827ea8fb57697330aa2dde3cb08f1045e3084fef008291d3bc5bd7b02730083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010d1af961bfb84c92bb1d87fe19689d14e08f1045e3084fdf008ce3f6b62ea653e220083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2020-01-28T19:01:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579403029",
      "id" : 579403029,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTQwMzAyOQ==",
      "updated_at" : "2020-01-28T19:01:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579403029",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372020529"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372020529"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: introduce unused ChainstateManager\" (10837ab1d33e126c4f36221cb5077038ca65f00d)\r\n\r\nWould be nice to drop ambiguity of \"multiple\" chainstates here and say more specifically \"one or two chainstates: an IBD chainstate generated by downloading blocks, and an optional snapshot chainstate loaded from a UTXO snapshot\"",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T19:50:06Z",
      "diff_hunk" : "@@ -775,6 +782,109 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372020529",
      "id" : 372020529,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyMDUyOQ==",
      "original_commit_id" : "10837ab1d33e126c4f36221cb5077038ca65f00d",
      "original_position" : 34,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372020529",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372024285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372024285"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: introduce unused ChainstateManager\" (10837ab1d33e126c4f36221cb5077038ca65f00d)\r\n\r\nThe \"Background validation chainstate\" term seems a little awkward to me, where I guess every background validation chainstate is an IBD chainstate, but an IBD chainstate isn't a background validation chainstate until a separate snapshot chainstate has been loaded.\r\n\r\nIt seems like if you replaced the `IsBackgroundValidationChainstate()` method with plainer `ChainStateManger::IsIBD(chainstate)` and `ChainStateManager::HasSnapshot()` methods you could drop the \"background validation chainstate\" term and method and make things easier to follow.\r\n\r\nOr if having the term is more useful, maybe call it a \"background IBD chainstate\" instead of \"background validation chainstate\" to be more obvious it's always refers to the IBD chain.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T19:57:34Z",
      "diff_hunk" : "@@ -775,6 +782,109 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumeutxo UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372024285",
      "id" : 372024285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyNDI4NQ==",
      "original_commit_id" : "10837ab1d33e126c4f36221cb5077038ca65f00d",
      "original_position" : 56,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372024285",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372035982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372035982"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"validation: introduce unused ChainstateManager\" (10837ab1d33e126c4f36221cb5077038ca65f00d)\r\n\r\nre: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507123\r\n\r\n> It's ambiguous here, do you mean a chainstate for which validity is assumed\r\n\r\nAgree \"whose validity is not assumed\" could be misinterpreted as \"that isn't necessarily valid\" instead of \"that has been validated locally\"\r\n\r\nMaybe define \"Validated chainstate\" as something like \"the most work chainstate which has been validated locally. This will be the snapshot chainstate if a snapshot was loaded and all blocks up to the snapshot starting point have been downloaded and validated, otherwise it will be the IBD chainstate.\"",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T20:23:01Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372035982",
      "id" : 372035982,
      "in_reply_to_id" : 358507123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzNTk4Mg==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 49,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372035982",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372043181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372043181"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Oh, I missed that the value is reset. Maybe it would help to limit the scope of the variable to make that more clear and avoid this issue accidentally coming up in the future?\r\n\r\nI agree it would be clearer to limit the scope of this variable. It's crazy to give a variable a 200 line scope if it should have a 2 line scope.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T20:39:38Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372043181",
      "id" : 372043181,
      "in_reply_to_id" : 371886443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0MzE4MQ==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 110,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372043181",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372046963"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372046963"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"test: add basic tests for ChainstateManager\" (997bf7f38626978cce84a33ee1c6e353a3440e25)\r\n\r\nI think boosts BOOST_CHECK_EQUAL_COLLECTIONS macro might give better error reporting than this function. We're using the macro already in some other tests",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T20:47:53Z",
      "diff_hunk" : "@@ -0,0 +1,113 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <chainparams.h>\n+#include <random.h>\n+#include <uint256.h>\n+#include <consensus/validation.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+\n+\n+template <typename T>\n+void CompareVec(T v1, T v2)\n+{\n+    BOOST_CHECK_EQUAL(v1.size(), v2.size());\n+    for (size_t i = 0; i < v1.size(); ++i) {\n+        BOOST_CHECK_EQUAL(v1[i], v2[i]);\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372046963",
      "id" : 372046963,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0Njk2Mw==",
      "original_commit_id" : "997bf7f38626978cce84a33ee1c6e353a3440e25",
      "original_position" : 27,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372046963",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372047892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372047892"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh good point - looks like I split the commits up a bit out of order. I could pull this (https://github.com/bitcoin/bitcoin/pull/15606/commits/23a074b6630dd75fd4a4a5b6495fe046012f2cc9) in or only do verification for the active chain... any preference?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T20:49:54Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;\n+                    }\n                 }\n             }\n \n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n-\n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n+                        if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n+                                MIN_BLOCKS_TO_KEEP);\n+                        }\n+\n+                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n+                        RPCNotifyBlockChange(true, tip);\n+                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                    \"This may be due to your computer's date and time being set incorrectly. \"\n+                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n+                            failed_verification = true;\n+                            break;\n+                        }\n+\n+                        if (!CVerifyDB().VerifyDB(\n+                                chainparams, &chainstate->CoinsDB(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372047892",
      "id" : 372047892,
      "in_reply_to_id" : 371972320,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0Nzg5Mg==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 202,
      "path" : "src/init.cpp",
      "position" : 247,
      "pull_request_review_id" : 349691677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372047892",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372048958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372048958"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"test: add basic tests for ChainstateManager\" (997bf7f38626978cce84a33ee1c6e353a3440e25)\r\n\r\nNo test for the case where IsSnapshotValidated returns true, I guess. Understandable if it would make the test setup too complicated",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T20:52:03Z",
      "diff_hunk" : "@@ -0,0 +1,113 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <chainparams.h>\n+#include <random.h>\n+#include <uint256.h>\n+#include <consensus/validation.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+\n+\n+template <typename T>\n+void CompareVec(T v1, T v2)\n+{\n+    BOOST_CHECK_EQUAL(v1.size(), v2.size());\n+    for (size_t i = 0; i < v1.size(); ++i) {\n+        BOOST_CHECK_EQUAL(v1[i], v2[i]);\n+    }\n+}\n+\n+\n+//! Basic tests for ChainstateManager.\n+//!\n+//! First create a legacy (IBD) chainstate, then create a snapshot chainstate.\n+BOOST_AUTO_TEST_CASE(chainstatemanager)\n+{\n+    ChainstateManager manager;\n+    std::vector<CChainState*> chainstates;\n+    const CChainParams& chainparams = Params();\n+\n+    // Create a legacy (IBD) chainstate.\n+    //\n+    ENTER_CRITICAL_SECTION(cs_main);\n+    CChainState& c1 = manager.InitializeChainstate();\n+    LEAVE_CRITICAL_SECTION(cs_main);\n+    chainstates.push_back(&c1);\n+    c1.InitCoinsDB(\n+        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+    WITH_LOCK(::cs_main, c1.InitCoinsCache());\n+\n+    BOOST_CHECK(!manager.IsSnapshotActive());\n+    BOOST_CHECK(!manager.IsSnapshotValidated());\n+    BOOST_CHECK(!manager.IsBackgroundValidationChainstate(&c1));\n+    CompareVec(manager.GetAll(), chainstates);\n+\n+    auto& active_chain = manager.ActiveChain();\n+    BOOST_CHECK_EQUAL(&active_chain, &c1.m_chain);\n+\n+    BOOST_CHECK_EQUAL(manager.ActiveHeight(), -1);\n+\n+    auto active_tip = manager.ActiveTip();\n+    auto exp_tip = c1.m_chain.Tip();\n+    BOOST_CHECK_EQUAL(active_tip, exp_tip);\n+\n+    auto& validated_cs = manager.ValidatedChainstate();\n+    BOOST_CHECK_EQUAL(&validated_cs, &c1);\n+\n+    // Create a snapshot-based chainstate.\n+    //\n+    ENTER_CRITICAL_SECTION(cs_main);\n+    CChainState& c2 = manager.InitializeChainstate(GetRandHash());\n+    LEAVE_CRITICAL_SECTION(cs_main);\n+    chainstates.push_back(&c2);\n+    c2.InitCoinsDB(\n+        /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n+    WITH_LOCK(::cs_main, c2.InitCoinsCache());\n+    // Unlike c1, which doesn't have any blocks. Gets us different tip, height.\n+    c2.LoadGenesisBlock(chainparams);\n+    BlockValidationState _;\n+    BOOST_CHECK(c2.ActivateBestChain(_, chainparams, nullptr));\n+\n+    BOOST_CHECK(manager.IsSnapshotActive());\n+    BOOST_CHECK(!manager.IsSnapshotValidated());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372048958",
      "id" : 372048958,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0ODk1OA==",
      "original_commit_id" : "997bf7f38626978cce84a33ee1c6e353a3440e25",
      "original_position" : 81,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : 71,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372048958",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372056833"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372056833"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> in commit [1c17381](https://github.com/bitcoin/bitcoin/commit/1c173812bac34e263ae49e0bc80e45b437e95e8b):\r\n> \r\n> Why is this a hack and what should be used instead of the hack? If there is nothing that can be used instead, this is not a hack and the comment should go.\r\n\r\nTend to agree with Marco that if it is a hack you should say what the specific problem is. Maybe a problem could be that one of the CChainState* pointers in the vector could get deleted before the loop below rolls around to it?\r\n\r\nIf something like this is the problem, you could work around it by replacing the `GetAll` method returning a vector with a `ForEach` method taking a callback like connman's `ForEachNode` or jimpo's `ForEachBlockFilterIndex`. You might also need to add chainstate `m_dont_delete_this_chainstate` or chainstatemanager `m_dont_delete_any_chainstates` variables if the async deletion is actually a real thing.\r\n\r\nUPDATE: Sounds like the lifetime thing is not an issue. It would be good to have a ChainstateManager class comment about lifetime of various chainstate objects is, and specifically what happens if a second UTXO snapshot is loaded",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T21:08:58Z",
      "diff_hunk" : "@@ -701,11 +701,21 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n-    BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n-        LogPrintf(\"Failed to connect best block (%s)\\n\", FormatStateMessage(state));\n-        StartShutdown();\n-        return;\n+\n+    // XXX this is kind of a hack to avoid a lock inversion.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372056833",
      "id" : 372056833,
      "in_reply_to_id" : 371994558,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA1NjgzMw==",
      "original_commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "original_position" : 10,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372056833",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372070692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372070692"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"use ChainstateManager to initialize chainstate\" (e89fbd3cf0820ee263a94c49751a97a784acb049)\r\n\r\nThere's a stray reference to `g_chainstate` a few lines up in a comment which should be updated\r\n\r\nAlso in AppInitMain line 1713 below, PruneAndFlush is only called on active chain, not both chains. I'm probably missing something, but it seem like a loop might be right there as well. Or maybe a comment could say why pruning just one chain makes sense there.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T21:34:52Z",
      "diff_hunk" : "@@ -237,8 +237,10 @@ void Shutdown(NodeContext& node)\n     // may not have been initialized yet.\n     {\n         LOCK(cs_main);\n-        if (g_chainstate && g_chainstate->CanFlushToDisk()) {\n-            g_chainstate->ForceFlushStateToDisk();\n+        for (CChainState* chainstate : g_chainman.GetAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372070692",
      "id" : 372070692,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3MDY5Mg==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 6,
      "path" : "src/init.cpp",
      "position" : 11,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372070692",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372072808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372072808"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"use ChainstateManager to initialize chainstate\" (e89fbd3cf0820ee263a94c49751a97a784acb049)\r\n\r\nShould this line refer to chainstate now instead of ::ChainActive?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T21:39:13Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372072808",
      "id" : 372072808,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3MjgwOA==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 145,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372072808",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372078668"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372078668"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"protect g_chainman with cs_main\" (1c173812bac34e263ae49e0bc80e45b437e95e8b)\r\n\r\nAdding these lock annotations seems to makes these convenience functions a lot less convenient and blow up the size of this commit with lots of new cs_main locks. Would it be bad to lock cs_main inside ChainstateActive(), ChainstateActive(), and BlockIndex() instead of requiring it to be locked beforehand?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T21:51:53Z",
      "diff_hunk" : "@@ -891,16 +891,16 @@ class ChainstateManager\n     void Reset();\n };\n \n-extern ChainstateManager g_chainman;\n+extern ChainstateManager g_chainman GUARDED_BY(::cs_main);\n \n /** @returns the most-work valid chainstate. */\n-CChainState& ChainstateActive();\n+CChainState& ChainstateActive() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372078668",
      "id" : 372078668,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3ODY2OA==",
      "original_commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "original_position" : 18,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 349528251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372078668",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the good reviews! I'll be following up shortly with corresponding changes.",
      "created_at" : "2020-01-28T22:11:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579483360",
      "id" : 579483360,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTQ4MzM2MA==",
      "updated_at" : "2020-01-28T22:11:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579483360",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372099708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372099708"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What gets kind of confusing here is that chainstates created from snapshots still technically go through IBD, since by the time the snapshot is actually used to create a chainstate, it's far enough behind the tip that it technically undergoes IBD (albeit an abbreviated one). So I think referring to what I now call the background validation chainstate as the IBD chainstate might be confusing in that sense.\r\n\r\nBut I agree with you that the naming here isn't ideal. Definitely open to changing this if you have other good ideas.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T22:41:14Z",
      "diff_hunk" : "@@ -775,6 +782,109 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumeutxo UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372099708",
      "id" : 372099708,
      "in_reply_to_id" : 372024285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5OTcwOA==",
      "original_commit_id" : "10837ab1d33e126c4f36221cb5077038ca65f00d",
      "original_position" : 56,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 349756670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372099708",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372116260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372116260"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372099708\r\n\r\nI guess I see that but it would seem more like a reason to avoid the term \"IBD chainstate\" entirely. \r\n\r\nSince chain state manager only has a snapshot chainstate and a non snapshot chainstate, I like the idea of just referring to the two chainstates with the same names consistently, and not muddying the water with other chainstate names and definitions. \"IBD chainstate\" is what you call the non-snapshot chainstate everywhere except in this one method and comment, which is my why first suggestion is delete \"background validation chainstate\" comment and have separate methods replacing IsBackgroundValidationChainstate. Switching to \"Background IBD chainstate\" was just a runner up suggestion.\r\n\r\nI guess also I don't find the \"IBD chainstate\" name to be too confusing because I take IBD chainstate to mean chainstate generated entirely from IBD, not a state with some UTXOs that happened to come from IBD. But for another naming suggestion, maybe an alternative would be to use \"snapshot chainstate\" and \"blocksonly chainstate\" instead of \"snapshot chainstate\" and \"IBD chainstate\"",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-28T23:28:32Z",
      "diff_hunk" : "@@ -775,6 +782,109 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumeutxo UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372116260",
      "id" : 372116260,
      "in_reply_to_id" : 372024285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjExNjI2MA==",
      "original_commit_id" : "10837ab1d33e126c4f36221cb5077038ca65f00d",
      "original_position" : 56,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 349776718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372116260",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372127798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372127798"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If you think that the commit that switches `AppInitMain` to use for-loops is blowing up this pull request too much, you can also leave it for later, I guess. I haven't checked, but it should be correct to just call `g_chainman.InitializeChainstate();` to initialize the \"ibd\" chainstate and then leave all calls as they were previously, i.e. `ChainstateActive()....`",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T00:06:40Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;\n+                    }\n                 }\n             }\n \n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n-\n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n+                        if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n+                                MIN_BLOCKS_TO_KEEP);\n+                        }\n+\n+                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n+                        RPCNotifyBlockChange(true, tip);\n+                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                    \"This may be due to your computer's date and time being set incorrectly. \"\n+                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n+                            failed_verification = true;\n+                            break;\n+                        }\n+\n+                        if (!CVerifyDB().VerifyDB(\n+                                chainparams, &chainstate->CoinsDB(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372127798",
      "id" : 372127798,
      "in_reply_to_id" : 371972320,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyNzc5OA==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 202,
      "path" : "src/init.cpp",
      "position" : 247,
      "pull_request_review_id" : 349790286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372127798",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "[`au.chainman.6`](https://github.com/jamesob/bitcoin/tree/au.chainman.6) -> [`au.chainman.9`](https://github.com/jamesob/bitcoin/tree/au.chainman.9) [(changes)](https://github.com/bitcoin/bitcoin/compare/1c173812bac34e263ae49e0bc80e45b437e95e8b..94ca1e07bb56a1d1d4d21871056144ae00941ef3)\r\n\r\nI've incorporated most if not all of the feedback from @MarcoFalke and @ryanofsky which has nicely reduced the size of the diff. Changes include:\r\n- fixing variable scoping, control flow, omissions in the `init` changes\r\n- acquiring `::cs_main` directly in the chainstate convenience functions (instead of having to annotate calls with `LOCK`)\r\n- clarifying chainstate lifetimes in ChainstateManager documentation\r\n- fixing the unittests for QT use",
      "created_at" : "2020-01-29T15:39:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579817106",
      "id" : 579817106,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTgxNzEwNg==",
      "updated_at" : "2020-01-29T15:39:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579817106",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372459488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372459488"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, using Russ' definition.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:40:10Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372459488",
      "id" : 372459488,
      "in_reply_to_id" : 358507123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ1OTQ4OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 49,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 350205529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372459488",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372459933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372459933"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed by removing the variable entirely and replacing it with a function.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:40:49Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372459933",
      "id" : 372459933,
      "in_reply_to_id" : 371886443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ1OTkzMw==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 110,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 350206104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372459933",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372460119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372460119"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch! Fixed.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:41:07Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372460119",
      "id" : 372460119,
      "in_reply_to_id" : 371886873,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ2MDExOQ==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 152,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 350206344,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372460119",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372460995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372460995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed by cleaning up inline comments and adding documentation to the ChainstateManager pointer definitions.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:42:27Z",
      "diff_hunk" : "@@ -701,11 +701,21 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n-    BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n-        LogPrintf(\"Failed to connect best block (%s)\\n\", FormatStateMessage(state));\n-        StartShutdown();\n-        return;\n+\n+    // XXX this is kind of a hack to avoid a lock inversion.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372460995",
      "id" : 372460995,
      "in_reply_to_id" : 371994558,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ2MDk5NQ==",
      "original_commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "original_position" : 10,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 350207462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372460995",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372461235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372461235"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks!",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:42:51Z",
      "diff_hunk" : "@@ -775,6 +782,109 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372461235",
      "id" : 372461235,
      "in_reply_to_id" : 372020529,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ2MTIzNQ==",
      "original_commit_id" : "10837ab1d33e126c4f36221cb5077038ca65f00d",
      "original_position" : 34,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 350207789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372461235",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462118"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372462118"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Partially (?) fixed by changing `IsBackgroundValidationChainstate()` to `IsBackgroundIBD()`. I think blocksonly is somewhat confusing because there'd be a confusing overlap with the P2P definition of blocksonly, which I think is different or unrelated.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:44:16Z",
      "diff_hunk" : "@@ -775,6 +782,109 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumeutxo UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462118",
      "id" : 372462118,
      "in_reply_to_id" : 372024285,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ2MjExOA==",
      "original_commit_id" : "10837ab1d33e126c4f36221cb5077038ca65f00d",
      "original_position" : 56,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 350208933,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372462118",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462324"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372462324"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:44:36Z",
      "diff_hunk" : "@@ -0,0 +1,113 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <chainparams.h>\n+#include <random.h>\n+#include <uint256.h>\n+#include <consensus/validation.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_chainstatemanager_tests, TestingSetup)\n+\n+\n+template <typename T>\n+void CompareVec(T v1, T v2)\n+{\n+    BOOST_CHECK_EQUAL(v1.size(), v2.size());\n+    for (size_t i = 0; i < v1.size(); ++i) {\n+        BOOST_CHECK_EQUAL(v1[i], v2[i]);\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462324",
      "id" : 372462324,
      "in_reply_to_id" : 372046963,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ2MjMyNA==",
      "original_commit_id" : "997bf7f38626978cce84a33ee1c6e353a3440e25",
      "original_position" : 27,
      "path" : "src/test/validation_chainstatemanager_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 350209219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372462324",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372462476"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catches! Fixed, thanks.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:44:51Z",
      "diff_hunk" : "@@ -237,8 +237,10 @@ void Shutdown(NodeContext& node)\n     // may not have been initialized yet.\n     {\n         LOCK(cs_main);\n-        if (g_chainstate && g_chainstate->CanFlushToDisk()) {\n-            g_chainstate->ForceFlushStateToDisk();\n+        for (CChainState* chainstate : g_chainman.GetAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462476",
      "id" : 372462476,
      "in_reply_to_id" : 372070692,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ2MjQ3Ng==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 6,
      "path" : "src/init.cpp",
      "position" : 11,
      "pull_request_review_id" : 350209436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372462476",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372462677"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:45:11Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372462677",
      "id" : 372462677,
      "in_reply_to_id" : 372072808,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ2MjY3Nw==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 145,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 350209707,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372462677",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372463387"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372463387"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed by taking your suggestion. I didn't initially do this because I thought it created some kind of lock annotation problem, but after trying this change and rebasing the parent PR onto it, clang threw no warnings. Subsequently the diff has contracted a bit - thanks!",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:46:18Z",
      "diff_hunk" : "@@ -891,16 +891,16 @@ class ChainstateManager\n     void Reset();\n };\n \n-extern ChainstateManager g_chainman;\n+extern ChainstateManager g_chainman GUARDED_BY(::cs_main);\n \n /** @returns the most-work valid chainstate. */\n-CChainState& ChainstateActive();\n+CChainState& ChainstateActive() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372463387",
      "id" : 372463387,
      "in_reply_to_id" : 372078668,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ2MzM4Nw==",
      "original_commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "original_position" : 18,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 350210647,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372463387",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372467174"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372467174"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd prefer this to return an `Optional<uint256>` instead of special-casing `00000000000000000000000000000000`.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:52:10Z",
      "diff_hunk" : "@@ -5126,10 +5126,99 @@ class CMainCleanup\n     CMainCleanup() {}\n     ~CMainCleanup() {\n         // block headers\n-        BlockMap::iterator it1 = g_blockman.m_block_index.begin();\n-        for (; it1 != g_blockman.m_block_index.end(); it1++)\n+        BlockMap::iterator it1 = g_chainman.BlockIndex().begin();\n+        for (; it1 != g_chainman.BlockIndex().end(); it1++)\n             delete (*it1).second;\n-        g_blockman.m_block_index.clear();\n+        g_chainman.BlockIndex().clear();\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372467174",
      "id" : 372467174,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ2NzE3NA==",
      "original_commit_id" : "ead4c5fada4246e1a37551469430a07c04d783a7",
      "original_position" : 254,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 350214893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372467174",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372470449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372470449"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"protect g_chainman with cs_main\" (d88f75e495a46ae474d8ad67faaec13ef1950f5e)\r\n\r\nShould keep current style if you prefer it, but it'd be possible to shorten this initializing the `chainstates` variable on one line instead of two lines, or just dropping it:\r\n\r\n```c++\r\nfor (CChainState* chainstate : WITH_LOCK(::cs_main, return g_chainman.GetAll())) {\r\n   ...\r\n}\r\n```",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T15:57:09Z",
      "diff_hunk" : "@@ -698,11 +698,20 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n-    BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n-        LogPrintf(\"Failed to connect best block (%s)\\n\", FormatStateMessage(state));\n-        StartShutdown();\n-        return;\n+\n+    // We can't hold cs_main during ActivateBestChain even though we're accessing\n+    // the g_chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n+    // the relevant pointers before the ABC call.\n+    std::vector<CChainState*> chainstates;\n+    WITH_LOCK(::cs_main, chainstates = g_chainman.GetAll());\n+\n+    for (CChainState* chainstate : chainstates) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372470449",
      "id" : 372470449,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ3MDQ0OQ==",
      "original_commit_id" : "ead4c5fada4246e1a37551469430a07c04d783a7",
      "original_position" : 16,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 350215388,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372470449",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372472680"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372472680"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`to_modify->get()`?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T16:00:26Z",
      "diff_hunk" : "@@ -5126,10 +5126,99 @@ class CMainCleanup\n     CMainCleanup() {}\n     ~CMainCleanup() {\n         // block headers\n-        BlockMap::iterator it1 = g_blockman.m_block_index.begin();\n-        for (; it1 != g_blockman.m_block_index.end(); it1++)\n+        BlockMap::iterator it1 = g_chainman.BlockIndex().begin();\n+        for (; it1 != g_chainman.BlockIndex().end(); it1++)\n             delete (*it1).second;\n-        g_blockman.m_block_index.clear();\n+        g_chainman.BlockIndex().clear();\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blockhash)\n+{\n+    bool is_snapshot = !snapshot_blockhash.IsNull();\n+    std::unique_ptr<CChainState>& to_modify =\n+        is_snapshot ? m_snapshot_chainstate: m_ibd_chainstate;\n+\n+    if (to_modify) {\n+        throw std::logic_error(\"should not be overwriting a chainstate\");\n+    }\n+\n+    to_modify.reset(new CChainState(m_blockman, snapshot_blockhash));\n+\n+    // Snapshot chainstates and initial IBD chaintates always become active.\n+    if (is_snapshot || (!is_snapshot && !m_active_chainstate)) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();\n+    } else {\n+        throw std::logic_error(\"unexpected chainstate activation\");\n+    }\n+\n+    return *to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372472680",
      "id" : 372472680,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ3MjY4MA==",
      "original_commit_id" : "ead4c5fada4246e1a37551469430a07c04d783a7",
      "original_position" : 297,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 350214893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372472680",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "[`au.chainman.9`](https://github.com/jamesob/bitcoin/tree/au.chainman.9) -> [`au.chainman.11`](https://github.com/jamesob/bitcoin/tree/au.chainman.11)\r\n\r\nPushed fixes for some small bugs, @MarcoFalke's `VerifyDB` comment, and [one big embarrassing typo](https://github.com/bitcoin/bitcoin/compare/94ca1e07bb56a1d1d4d21871056144ae00941ef3..ead4c5fada4246e1a37551469430a07c04d783a7).",
      "created_at" : "2020-01-29T16:04:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579829160",
      "id" : 579829160,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTgyOTE2MA==",
      "updated_at" : "2020-01-29T16:04:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579829160",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372480374"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372480374"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"protect g_chainman with cs_main\" (d88f75e495a46ae474d8ad67faaec13ef1950f5e)\r\n\r\nI don't understand the two swaps between `::ActivateBestChain(...)` and `::ChainstateActive().ActivateBestChain(...)` in this commit. They don't seem to do anything, and if I revert them there don't seem to be obvious problems.\r\n\r\nNot specific to this PR but generally it seems confusing to have an instance method and a global function both named `ActivateBestChain`. Would suggest renaming one or the other (this is the reason I like lowercase method names) or maybe just dropping the global function since it is only one line.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T16:13:11Z",
      "diff_hunk" : "@@ -3818,7 +3821,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     NotifyHeaderTip();\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n+    if (!ActivateBestChain(state, chainparams, pblock))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372480374",
      "id" : 372480374,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ4MDM3NA==",
      "original_commit_id" : "d88f75e495a46ae474d8ad67faaec13ef1950f5e",
      "original_position" : 28,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 350215388,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372480374",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372489096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372489096"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"protect g_chainman with cs_main\" (d88f75e495a46ae474d8ad67faaec13ef1950f5e)\r\n\r\nThis doesn't explain what happens if you load two snapshots (one after the other). It seems like `ChainstateManager::InitializeChainstate` explicitly allows this so it would be good to add some clarification here or there.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T16:27:02Z",
      "diff_hunk" : "@@ -822,14 +822,41 @@ class ChainstateManager\n     //! free the chainstate contents immediately after it finishes validation\n     //! to cautiously avoid a case where some other part of the system is still\n     //! using this pointer (e.g. net_processing).\n+    //!\n+    //! Once this pointer is set to a corresponding chainstate, it will not\n+    //! be reset until init.cpp:Shutdown(). This means it is safe to acquire\n+    //! the contents of this pointer with ::cs_main held, release the lock,\n+    //! and then use the reference without concern of it being deconstructed.\n+    //!\n+    //! This is especially important when, e.g., calling ActivateBestChain()\n+    //! on all chainstates because we are not able to hold ::cs_main going into\n+    //! that call.\n     std::unique_ptr<CChainState> m_ibd_chainstate;\n \n     //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n     //! non-null, it is always our active chainstate.\n+    //!\n+    //! Once this pointer is set to a corresponding chainstate, it will not\n+    //! be reset until init.cpp:Shutdown(). This means it is safe to acquire",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372489096",
      "id" : 372489096,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ4OTA5Ng==",
      "original_commit_id" : "d88f75e495a46ae474d8ad67faaec13ef1950f5e",
      "original_position" : 19,
      "path" : "src/validation.h",
      "position" : 133,
      "pull_request_review_id" : 350215388,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372489096",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372512973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372512973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"use ChainstateManager to initialize chainstate\" (741db94e52b51d4df8173d56bfb1258ccf9ddbb3)\r\n\r\nJust to understand, is checking ChainstateActive() == chainstate here an optimization to avoid verifying the same db multiple times? Could update comment, but no need to since hopefully this will be pretty shortlived",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T17:06:50Z",
      "diff_hunk" : "@@ -1519,93 +1521,129 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    if (!is_coinsview_empty(chainstate)) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break; // out of the per-chainstate loop\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    break; // out of the chainstate activation do-while\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            bool failed_rewind{false};\n+\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on the chainstate, and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        failed_rewind = true;\n+                        break; // out of the per-chainstate loop\n+                    }\n                 }\n             }\n \n+            if (failed_rewind) {\n+                break; // out of the chainstate activation do-while\n+            }\n+\n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n \n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n-\n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    if (!is_coinsview_empty(chainstate)) {\n+                        uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n+                        if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n+                                MIN_BLOCKS_TO_KEEP);\n+                        }\n+\n+                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n+                        RPCNotifyBlockChange(true, tip);\n+                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                    \"This may be due to your computer's date and time being set incorrectly. \"\n+                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n+                            failed_verification = true;\n+                            break;\n+                        }\n+\n+                        // Only verify the DB of the active chainstate. This is fixed in later\n+                        // work when we allow VerifyDB to be parameterized by chainstate.\n+                        if (&::ChainstateActive() == chainstate &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372512973",
      "id" : 372512973,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxMjk3Mw==",
      "original_commit_id" : "741db94e52b51d4df8173d56bfb1258ccf9ddbb3",
      "original_position" : 221,
      "path" : "src/init.cpp",
      "position" : 245,
      "pull_request_review_id" : 350275220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372512973",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372552842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372552842"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please remove this hack in the unit tests. It will lead to potentially not resetting global state and preserving a chainstate of previous tests. The test failure is due to a missing reset in the gui tests, which can be fixed with a one-line patch:\r\n\r\n\r\n```diff\r\ndiff --git a/src/qt/test/apptests.cpp b/src/qt/test/apptests.cpp\r\nindex 14a75b23f3..f9eb4cde30 100644\r\n--- a/src/qt/test/apptests.cpp\r\n+++ b/src/qt/test/apptests.cpp\r\n@@ -82,6 +82,7 @@ void AppTests::appTests()\r\n     // Reset global state to avoid interfering with later tests.\r\n     AbortShutdown();\r\n     UnloadBlockIndex();\r\n+    g_chainman.Reset();\r\n }\r\n \r\n //! Entry point for BitcoinGUI tests.\r\n",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T18:24:23Z",
      "diff_hunk" : "@@ -109,7 +109,18 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n-    g_chainstate = MakeUnique<CChainState>();\n+\n+    // During QT tests, we may end up calling this twice (e.g. during RPCNestedTests)\n+    // which throws an excetion. Chainstates should otherwise never be overwritten\n+    // during normal operation.\n+    try {\n+        g_chainman.InitializeChainstate();\n+    } catch (const std::logic_error& e) {\n+        std::string msg = e.what();\n+        if (msg.find(\"overwriting a chainstate\") == std::string::npos) {\n+            throw;\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372552842",
      "id" : 372552842,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1Mjg0Mg==",
      "original_commit_id" : "d88f75e495a46ae474d8ad67faaec13ef1950f5e",
      "original_position" : 16,
      "path" : "src/test/util/setup_common.cpp",
      "position" : null,
      "pull_request_review_id" : 350326250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372552842",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372557456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372557456"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Heh, member access has a higher precedence than indirection (dereference), so this is correct. Though, the same could be written shorter as just `*to_modify`",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T18:33:33Z",
      "diff_hunk" : "@@ -5126,10 +5126,99 @@ class CMainCleanup\n     CMainCleanup() {}\n     ~CMainCleanup() {\n         // block headers\n-        BlockMap::iterator it1 = g_blockman.m_block_index.begin();\n-        for (; it1 != g_blockman.m_block_index.end(); it1++)\n+        BlockMap::iterator it1 = g_chainman.BlockIndex().begin();\n+        for (; it1 != g_chainman.BlockIndex().end(); it1++)\n             delete (*it1).second;\n-        g_blockman.m_block_index.clear();\n+        g_chainman.BlockIndex().clear();\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blockhash)\n+{\n+    bool is_snapshot = !snapshot_blockhash.IsNull();\n+    std::unique_ptr<CChainState>& to_modify =\n+        is_snapshot ? m_snapshot_chainstate: m_ibd_chainstate;\n+\n+    if (to_modify) {\n+        throw std::logic_error(\"should not be overwriting a chainstate\");\n+    }\n+\n+    to_modify.reset(new CChainState(m_blockman, snapshot_blockhash));\n+\n+    // Snapshot chainstates and initial IBD chaintates always become active.\n+    if (is_snapshot || (!is_snapshot && !m_active_chainstate)) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();\n+    } else {\n+        throw std::logic_error(\"unexpected chainstate activation\");\n+    }\n+\n+    return *to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372557456",
      "id" : 372557456,
      "in_reply_to_id" : 372472680,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1NzQ1Ng==",
      "original_commit_id" : "ead4c5fada4246e1a37551469430a07c04d783a7",
      "original_position" : 297,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 350332027,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372557456",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK d88f75e495a46ae474d8ad67faaec13ef1950f5e  will probably do a fresh review some time later ð¶\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK d88f75e495a46ae474d8ad67faaec13ef1950f5e  will probably do a fresh review some time later ð¶\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjJuQv9Fd31SrPN6kA/2g2p3Z99NXkVHa4CFGg9Eo+sCalKZ7YvQ3KwrKsC1AXK\r\nuf9phsF6KBNX3cx7E9MEJ1OUCh5s3zJeBjZ3D6uK8xb9qvqA5ow87xb858h87isY\r\nNRHXWjNYJHYORCitPhoK3hFws5lPxSf8K6K9FbbNISg4PY2zWEeaWGKmmxCPtRF2\r\nho6E5YSK/MyHVxXLUdiWQ3lpv0OEC9CustJ0KtSWOL4Vix5OVQJYlyxJTfnrE4Bn\r\nI7axZLEQ6H0RhJWKha0/+3ntclZS4MC1dO6Qk12pQzxXl7K9tz5ppePXIR9/8dRt\r\nSG38Ht92ff1XMq0ENIaMdiwn/XiH1b78ZZGztuXQuEAkUGj1w/eM+nBTVvSm8Ndj\r\nFu17KtFvE8lbDdKXRhdlvTHLpWEzzeaOkJQHslCMG+QpipzYHOvm4Iu173CHjXDi\r\nPARCm2B9vQ3PDcvSD+kJxkbo53pSStv1uoM5zHyGRAXpjawmpB9PJpWuPdRTrGlx\r\nV/E5uVAQ\r\n=0Exq\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `8e3d2a68db66c60ea8e7ee3a4ff26522646e5da2bf7ceb11af7b3d8750f0973d  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401088e3d2a68db66c60ea8e7ee3a4ff26522646e5da2bf7ceb11af7b3d8750f0973df010c88e86e1b7a4d12cba7eb87a63051a8f08fff01035d4b44f6f5bb494c8ec6191c6fcfef708f1045e31d03ef0080a2d39aabb5059b60083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0104397b6a0acb073454363feb500acb7c608f1045e31d03df008d0f2f500acf7b4e60083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff01063c0edb3771dac86cbc5a35f9fa137b008f1045e31d03ef008ea05635c59ff78900083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010e6e6e1b2100f851df27d2175d7d3bcf608f1045e31d03ef008d3c65b6e03d1c9a60083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6d)\r\n\r\n</details>\r\n",
      "created_at" : "2020-01-29T18:34:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579897660",
      "id" : 579897660,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTg5NzY2MA==",
      "updated_at" : "2020-01-29T18:34:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579897660",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372591004"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point, fixed.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T19:40:02Z",
      "diff_hunk" : "@@ -5126,10 +5126,99 @@ class CMainCleanup\n     CMainCleanup() {}\n     ~CMainCleanup() {\n         // block headers\n-        BlockMap::iterator it1 = g_blockman.m_block_index.begin();\n-        for (; it1 != g_blockman.m_block_index.end(); it1++)\n+        BlockMap::iterator it1 = g_chainman.BlockIndex().begin();\n+        for (; it1 != g_chainman.BlockIndex().end(); it1++)\n             delete (*it1).second;\n-        g_blockman.m_block_index.clear();\n+        g_chainman.BlockIndex().clear();\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591004",
      "id" : 372591004,
      "in_reply_to_id" : 372467174,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MTAwNA==",
      "original_commit_id" : "ead4c5fada4246e1a37551469430a07c04d783a7",
      "original_position" : 254,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 350373978,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372591004",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372591105"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Went with Marco short-form.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T19:40:16Z",
      "diff_hunk" : "@@ -5126,10 +5126,99 @@ class CMainCleanup\n     CMainCleanup() {}\n     ~CMainCleanup() {\n         // block headers\n-        BlockMap::iterator it1 = g_blockman.m_block_index.begin();\n-        for (; it1 != g_blockman.m_block_index.end(); it1++)\n+        BlockMap::iterator it1 = g_chainman.BlockIndex().begin();\n+        for (; it1 != g_chainman.BlockIndex().end(); it1++)\n             delete (*it1).second;\n-        g_blockman.m_block_index.clear();\n+        g_chainman.BlockIndex().clear();\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blockhash)\n+{\n+    bool is_snapshot = !snapshot_blockhash.IsNull();\n+    std::unique_ptr<CChainState>& to_modify =\n+        is_snapshot ? m_snapshot_chainstate: m_ibd_chainstate;\n+\n+    if (to_modify) {\n+        throw std::logic_error(\"should not be overwriting a chainstate\");\n+    }\n+\n+    to_modify.reset(new CChainState(m_blockman, snapshot_blockhash));\n+\n+    // Snapshot chainstates and initial IBD chaintates always become active.\n+    if (is_snapshot || (!is_snapshot && !m_active_chainstate)) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();\n+    } else {\n+        throw std::logic_error(\"unexpected chainstate activation\");\n+    }\n+\n+    return *to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591105",
      "id" : 372591105,
      "in_reply_to_id" : 372472680,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MTEwNQ==",
      "original_commit_id" : "ead4c5fada4246e1a37551469430a07c04d783a7",
      "original_position" : 297,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 350374105,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372591105",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591315"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372591315"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah yeah, that's a nice improvement. Fixed.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T19:40:32Z",
      "diff_hunk" : "@@ -698,11 +698,20 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n-    BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n-        LogPrintf(\"Failed to connect best block (%s)\\n\", FormatStateMessage(state));\n-        StartShutdown();\n-        return;\n+\n+    // We can't hold cs_main during ActivateBestChain even though we're accessing\n+    // the g_chainman unique_ptrs since ABC requires us not to be holding cs_main, so retrieve\n+    // the relevant pointers before the ABC call.\n+    std::vector<CChainState*> chainstates;\n+    WITH_LOCK(::cs_main, chainstates = g_chainman.GetAll());\n+\n+    for (CChainState* chainstate : chainstates) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591315",
      "id" : 372591315,
      "in_reply_to_id" : 372470449,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MTMxNQ==",
      "original_commit_id" : "ead4c5fada4246e1a37551469430a07c04d783a7",
      "original_position" : 16,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 350374283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372591315",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591998"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372591998"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think `InitializeChainstate` allows this because of this check: https://github.com/jamesob/bitcoin/blob/8fe8b2e499ceb61c6fd3b73bf1c5dbc5861ccf62/src/validation.cpp#L5164-L5170\r\n\r\nI wrote it to not allow the initialization of more than one \"kind\" of chainstate.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T19:41:52Z",
      "diff_hunk" : "@@ -822,14 +822,41 @@ class ChainstateManager\n     //! free the chainstate contents immediately after it finishes validation\n     //! to cautiously avoid a case where some other part of the system is still\n     //! using this pointer (e.g. net_processing).\n+    //!\n+    //! Once this pointer is set to a corresponding chainstate, it will not\n+    //! be reset until init.cpp:Shutdown(). This means it is safe to acquire\n+    //! the contents of this pointer with ::cs_main held, release the lock,\n+    //! and then use the reference without concern of it being deconstructed.\n+    //!\n+    //! This is especially important when, e.g., calling ActivateBestChain()\n+    //! on all chainstates because we are not able to hold ::cs_main going into\n+    //! that call.\n     std::unique_ptr<CChainState> m_ibd_chainstate;\n \n     //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n     //! non-null, it is always our active chainstate.\n+    //!\n+    //! Once this pointer is set to a corresponding chainstate, it will not\n+    //! be reset until init.cpp:Shutdown(). This means it is safe to acquire",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372591998",
      "id" : 372591998,
      "in_reply_to_id" : 372489096,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MTk5OA==",
      "original_commit_id" : "d88f75e495a46ae474d8ad67faaec13ef1950f5e",
      "original_position" : 19,
      "path" : "src/validation.h",
      "position" : 133,
      "pull_request_review_id" : 350375102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372591998",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372592637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372592637"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, it's just because `VerifyDB` at the moment makes explicit reference to `ChainActive`: https://github.com/jamesob/bitcoin/blob/8fe8b2e499ceb61c6fd3b73bf1c5dbc5861ccf62/src/validation.cpp#L4224-L4234",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T19:43:09Z",
      "diff_hunk" : "@@ -1519,93 +1521,129 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    if (!is_coinsview_empty(chainstate)) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break; // out of the per-chainstate loop\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    break; // out of the chainstate activation do-while\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            bool failed_rewind{false};\n+\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on the chainstate, and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        failed_rewind = true;\n+                        break; // out of the per-chainstate loop\n+                    }\n                 }\n             }\n \n+            if (failed_rewind) {\n+                break; // out of the chainstate activation do-while\n+            }\n+\n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n \n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n-\n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    if (!is_coinsview_empty(chainstate)) {\n+                        uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n+                        if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n+                                MIN_BLOCKS_TO_KEEP);\n+                        }\n+\n+                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n+                        RPCNotifyBlockChange(true, tip);\n+                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                    \"This may be due to your computer's date and time being set incorrectly. \"\n+                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n+                            failed_verification = true;\n+                            break;\n+                        }\n+\n+                        // Only verify the DB of the active chainstate. This is fixed in later\n+                        // work when we allow VerifyDB to be parameterized by chainstate.\n+                        if (&::ChainstateActive() == chainstate &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372592637",
      "id" : 372592637,
      "in_reply_to_id" : 372512973,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MjYzNw==",
      "original_commit_id" : "741db94e52b51d4df8173d56bfb1258ccf9ddbb3",
      "original_position" : 221,
      "path" : "src/init.cpp",
      "position" : 245,
      "pull_request_review_id" : 350375889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372592637",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372593371"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372593371"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, this was churn from when I was reverting the inline cs_main locking I was initially doing for the last commit. Reverted, good catch. \r\n\r\nI'm for your ActivateBestChain suggestions, but would prefer to do them in a follow-up PR to limit the scope of this one. If anyone thinks that'd be best done here, I'm happy to.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T19:44:41Z",
      "diff_hunk" : "@@ -3818,7 +3821,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     NotifyHeaderTip();\n \n     BlockValidationState state; // Only used to report errors, not invalidity - ignore it\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams, pblock))\n+    if (!ActivateBestChain(state, chainparams, pblock))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372593371",
      "id" : 372593371,
      "in_reply_to_id" : 372480374,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5MzM3MQ==",
      "original_commit_id" : "d88f75e495a46ae474d8ad67faaec13ef1950f5e",
      "original_position" : 28,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 350376865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372593371",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372594059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372594059"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, thanks for the patch. Fixed.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-01-29T19:46:10Z",
      "diff_hunk" : "@@ -109,7 +109,18 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n \n     pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n-    g_chainstate = MakeUnique<CChainState>();\n+\n+    // During QT tests, we may end up calling this twice (e.g. during RPCNestedTests)\n+    // which throws an excetion. Chainstates should otherwise never be overwritten\n+    // during normal operation.\n+    try {\n+        g_chainman.InitializeChainstate();\n+    } catch (const std::logic_error& e) {\n+        std::string msg = e.what();\n+        if (msg.find(\"overwriting a chainstate\") == std::string::npos) {\n+            throw;\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r372594059",
      "id" : 372594059,
      "in_reply_to_id" : 372552842,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NDA1OQ==",
      "original_commit_id" : "d88f75e495a46ae474d8ad67faaec13ef1950f5e",
      "original_position" : 16,
      "path" : "src/test/util/setup_common.cpp",
      "position" : null,
      "pull_request_review_id" : 350377720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372594059",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "[`au.chainman.11`](https://github.com/jamesob/bitcoin/tree/au.chainman.11) -> [`au.chainman.12`](https://github.com/jamesob/bitcoin/tree/au.chainman.12)[(changes)](https://github.com/bitcoin/bitcoin/compare/d88f75e495a46ae474d8ad67faaec13ef1950f5e..8fe8b2e499ceb61c6fd3b73bf1c5dbc5861ccf62)\r\n\r\nThanks for the continued reviews!",
      "created_at" : "2020-01-29T19:47:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579928429",
      "id" : 579928429,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTkyODQyOQ==",
      "updated_at" : "2020-01-29T19:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579928429",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tests fail when compiled with `--enable-debug`",
      "created_at" : "2020-01-29T21:14:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579962488",
      "id" : 579962488,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTk2MjQ4OA==",
      "updated_at" : "2020-01-29T21:14:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579962488",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Code review ACK [8fe8b2e](https://github.com/bitcoin/bitcoin/commit/8fe8b2e499ceb61c6fd3b73bf1c5dbc5861ccf62). Changes since last review: making SnapshotBlockhash return optional, removing qt test workaround, minor style / include tweaks\r\n> \r\n> Are there still problems with tests?\r\n\r\nRunning this locally, I see a simple error in a wallet test that is locking `cs_main` in `ChainActive()` after `cs_wallet` is locked instead of before. Following fix works:\r\n\r\n```diff\r\n--- a/src/wallet/test/wallet_tests.cpp\r\n+++ b/src/wallet/test/wallet_tests.cpp\r\n@@ -456,7 +456,7 @@ public:\r\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\r\n         wallet = MakeUnique<CWallet>(m_chain.get(), WalletLocation(), WalletDatabase::CreateMock());\r\n         {\r\n-            LOCK(wallet->cs_wallet);\r\n+            LOCK2(::cs_main, wallet->cs_wallet);\r\n             wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\r\n         }\r\n         bool firstRun;\r\n```\r\n\r\n```c++\r\n2020-02-07T21:36:34Z POTENTIAL DEADLOCK DETECTED\r\n2020-02-07T21:36:34Z Previous lock order was:\r\n2020-02-07T21:36:34Z  (1)\r\n cs_main interfaces/chain.cpp:239 (in thread )\r\n2020-02-07T21:36:34Z  (2)\r\n cs_wallet wallet/wallet.cpp:2973 (in thread )\r\n2020-02-07T21:36:34Z Current lock order is:\r\n2020-02-07T21:36:34Z  (2)\r\n wallet->cs_wallet wallet/test/wallet_tests.cpp:459 (in thread )\r\n2020-02-07T21:36:34Z  (1)\r\n ::cs_main validation.cpp:92 (in thread )\r\nAssertion failed: detected inconsistent lock order at sync.cpp:119, details in debug log.\r\n```",
      "created_at" : "2020-02-07T21:40:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-583626665",
      "id" : 583626665,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MzYyNjY2NQ==",
      "updated_at" : "2020-02-07T21:40:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/583626665",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "[`au.chainman.12`](https://github.com/jamesob/bitcoin/tree/au.chainman.12) -> [`au.chainman.13`](https://github.com/jamesob/bitcoin/tree/au.chainman.13) [(changes)](https://github.com/bitcoin/bitcoin/compare/8fe8b2e499ceb61c6fd3b73bf1c5dbc5861ccf62..abfc15273f817d30c3f53f910a8b340a72a6377a)\r\n\r\nThanks for the fix, @ryanofsky. Tests are now passing.",
      "created_at" : "2020-02-14T16:50:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-586372113",
      "id" : 586372113,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NjM3MjExMw==",
      "updated_at" : "2020-02-14T16:50:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586372113",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code review ACK abfc15273f817d30c3f53f910a8b340a72a6377a. Changes since last review:\r\n\r\n```diff\r\n+Co-authored-by: Russell Yanofsky <russ@yanofsky.org>\r\n```\r\n\r\nwith my test fix. Waiting for my github royalties to start rolling in.",
      "created_at" : "2020-02-14T21:35:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-586482139",
      "id" : 586482139,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NjQ4MjEzOQ==",
      "updated_at" : "2020-02-14T21:35:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586482139",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385935195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385935195"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "68998ec\r\n\r\nMaybe precise what happens at chainstates intersection. Are they merged altogether, drop away, ... ?\r\n\r\nAlso, is this targeted to be part of libconsensus ? If yes, maybe add same design requirements than CChainState, \"Eventually, the API here is targeted at being exposed externally as a consumable libconsensus library, ...\"",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-02-28T21:40:45Z",
      "diff_hunk" : "@@ -775,6 +783,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with one or two\n+ * chainstates: an IBD chainstate generated by downloading blocks, and\n+ * an optional snapshot chainstate loaded from a UTXO snapshot. Managed\n+ * chainstates can be maintained at different heights simultaneously.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385935195",
      "id" : 385935195,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzNTE5NQ==",
      "original_commit_id" : "68998eca8ea1aa9394e1903e6227ca21ced9faa7",
      "original_position" : 44,
      "path" : "src/validation.h",
      "position" : 78,
      "pull_request_review_id" : 366702119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385935195",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385957152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385957152"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "f349e96\r\n\r\nStill I would prefer only iterate for `VerifyDB` because multiple log/ui messages may be confusing and adding `failed_verification`, it's more control flow. Okay for now, but eager to clean a bit this part aroud parameterize of `VerifyDB`",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-02-28T22:46:59Z",
      "diff_hunk" : "@@ -1517,93 +1520,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;\n+                    }\n                 }\n             }\n \n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n-\n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385957152",
      "id" : 385957152,
      "in_reply_to_id" : 358515509,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1NzE1Mg==",
      "original_commit_id" : "4813167d989c5777eb8b5133dedd93b12e1cc207",
      "original_position" : 181,
      "path" : "src/init.cpp",
      "position" : 225,
      "pull_request_review_id" : 366702119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385957152",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385962192"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385962192"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "abfc152\r\n\r\nIf understand well the new lock model, `g_chainman` content is under `cs_main` but not `CChainState`. If yes, why some `GetAll` access in init.cpp don't use lock for access ?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-02-28T23:05:20Z",
      "diff_hunk" : "@@ -894,7 +921,7 @@ class ChainstateManager\n     void Reset();\n };\n \n-extern ChainstateManager g_chainman;\n+extern ChainstateManager g_chainman GUARDED_BY(::cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385962192",
      "id" : 385962192,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MjE5Mg==",
      "original_commit_id" : "abfc15273f817d30c3f53f910a8b340a72a6377a",
      "original_position" : 47,
      "path" : "src/validation.h",
      "position" : 216,
      "pull_request_review_id" : 366702119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385962192",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385962760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385962760"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "68998ec\r\n\r\nAssert `m_snapshot_chainstate` == `m_active_chainstate` ?",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-02-28T23:07:36Z",
      "diff_hunk" : "@@ -5139,3 +5148,90 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blockhash)\n+{\n+    bool is_snapshot = !snapshot_blockhash.IsNull();\n+    std::unique_ptr<CChainState>& to_modify =\n+        is_snapshot ? m_snapshot_chainstate : m_ibd_chainstate;\n+\n+    if (to_modify) {\n+        throw std::logic_error(\"should not be overwriting a chainstate\");\n+    }\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    // Snapshot chainstates and initial IBD chaintates always become active.\n+    if (is_snapshot || (!is_snapshot && !m_active_chainstate)) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();\n+    } else {\n+        throw std::logic_error(\"unexpected chainstate activation\");\n+    }\n+\n+    return *to_modify;\n+}\n+\n+CChain& ChainstateManager::ActiveChain() const\n+{\n+    assert(m_active_chainstate);\n+    return m_active_chainstate->m_chain;\n+}\n+\n+bool ChainstateManager::IsSnapshotActive() const\n+{\n+    return m_snapshot_chainstate && m_active_chainstate == m_snapshot_chainstate.get();\n+}\n+\n+CChainState& ChainstateManager::ValidatedChainstate() const\n+{\n+    if (m_snapshot_chainstate && IsSnapshotValidated()) {\n+        return *m_snapshot_chainstate.get();\n+    }\n+    assert(m_ibd_chainstate);\n+    return *m_ibd_chainstate.get();\n+}\n+\n+bool ChainstateManager::IsBackgroundIBD(CChainState* chainstate) const\n+{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385962760",
      "id" : 385962760,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2Mjc2MA==",
      "original_commit_id" : "68998eca8ea1aa9394e1903e6227ca21ced9faa7",
      "original_position" : 95,
      "path" : "src/validation.cpp",
      "position" : 320,
      "pull_request_review_id" : 366736438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:22:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/385962760",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2020-03-01T22:06:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-593151609",
      "id" : 593151609,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzE1MTYwOQ==",
      "updated_at" : "2020-03-01T22:06:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593151609",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r393788717"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393788717"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Do you anticipate more than one snapshot to be present? From the rest of the code it seems to me that this will not be the case. Then I think naming the db just \"snapshot\" or so is more intuitive.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-03-17T16:00:08Z",
      "diff_hunk" : "@@ -1254,6 +1256,10 @@ void CChainState::InitCoinsDB(\n     bool should_wipe,\n     std::string leveldb_name)\n {\n+    if (!m_from_snapshot_blockhash.IsNull()) {\n+        leveldb_name += \"_\" + m_from_snapshot_blockhash.ToString();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r393788717",
      "id" : 393788717,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4ODcxNw==",
      "original_commit_id" : "cdf6bee5a41326cd8e0d953a26e7c14887a41895",
      "original_position" : 16,
      "path" : "src/validation.cpp",
      "position" : 69,
      "pull_request_review_id" : 376175088,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:24:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393788717",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r393809388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393809388"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "typo: `chaintates`",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-03-17T16:29:07Z",
      "diff_hunk" : "@@ -5139,3 +5148,90 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+Optional<uint256> ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(const uint256& snapshot_blockhash)\n+{\n+    bool is_snapshot = !snapshot_blockhash.IsNull();\n+    std::unique_ptr<CChainState>& to_modify =\n+        is_snapshot ? m_snapshot_chainstate : m_ibd_chainstate;\n+\n+    if (to_modify) {\n+        throw std::logic_error(\"should not be overwriting a chainstate\");\n+    }\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    // Snapshot chainstates and initial IBD chaintates always become active.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r393809388",
      "id" : 393809388,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwOTM4OA==",
      "original_commit_id" : "68998eca8ea1aa9394e1903e6227ca21ced9faa7",
      "original_position" : 63,
      "path" : "src/validation.cpp",
      "position" : 288,
      "pull_request_review_id" : 376175088,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:24:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393809388",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r393873473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393873473"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: That comment is still relevant to the code below but because of the empty line it seems detached.",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-03-17T18:07:33Z",
      "diff_hunk" : "@@ -698,11 +698,17 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r393873473",
      "id" : 393873473,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MzQ3Mw==",
      "original_commit_id" : "abfc15273f817d30c3f53f910a8b340a72a6377a",
      "original_position" : 3,
      "path" : "src/init.cpp",
      "position" : 36,
      "pull_request_review_id" : 376175088,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-17T18:24:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/393873473",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code Review Re-ACK abfc15273f817d30c3f53f910a8b340a72a6377a",
      "created_at" : "2020-03-17T19:55:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-600267492",
      "id" : 600267492,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDI2NzQ5Mg==",
      "updated_at" : "2020-03-17T19:55:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600267492",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK c9017ce3bc27665594c9d80f395780d40755bb22 ð\r\n\r\nOnly changes since my last review:\r\n\r\n* Fix lock order in tests\r\n* Making the snapshot blockhash optional\r\n\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK c9017ce3bc27665594c9d80f395780d40755bb22 ð\r\n\r\nOnly changes since my last review:\r\n\r\n* Fix lock order in tests\r\n* Making the snapshot blockhash optional\r\n\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjHLQv/RAhLnsTpzdzOpmyvTALXqbxQut9dguj1Tt46DsWnRzIcrwwcsYHbDreU\r\nB3DmuqYHMdcb1o/OWV5IvWiHMnUbY/EbFfD6Zw9/4HNhHxmruCgUrG9+zP+oD1ck\r\nnacI226jyJQWVKEz6XtbuF7uhW1an9J2XyPbnh6EaUywTB+CabLI/mnOFiHerWGd\r\nQ4VwcxSFYeBjmoDP1ekDaTafAphHhDSDO7MaissHBPq+1HliMURndLGgDKpRnT0y\r\nFn7dfmN/fN3bS5JWufUCaatPdYjES5UOWRaDasub0ipmlvBXzTk/Z48lYzqz4QEp\r\nOwa9fl6EoiRrhsQQSMOdEm6Mi2RCkwIXTK85+Ix7VP7ys+uQov/5fJbxel9zhInK\r\n/4nAtO6uum9XscLqWqHi6AFEVGOEVOfYPN+CJbRW1y5PinpR0t1kRVhEjfXgzWag\r\nbZfFWB2qs9bo+pWMCBDB/xeucJbJC2aDfnDqE5Gqpf1Knrg7t2tVbgU7IWJBaQLb\r\n9KZNfpTL\r\n=hs4D\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `f61dcf850f62e4c3ff5ca63de6c032928f672c45311925c6f66a2497f5bc0c48  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108f61dcf850f62e4c3ff5ca63de6c032928f672c45311925c6f66a2497f5bc0c48f010c95c01ec966b9e8599f5555e2d9c1cb508fff01053700317014be9c68812c12798aff0aa08f1045e723940f0088b8c7c3de3b398560083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0106682cfbba41201c9bbd28900494f9d9308f1045e723940f0080a2c3f72c53485980083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010a1e794bc9149f24614109cb95570960d08f1045e723940f00820cf08bc435f6ee10083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6df010b0d51ad27672195ef743b679a9b79b3208f1045e72393ff008bbb3fbea690636b40083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2020-03-18T15:08:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-600677309",
      "id" : 600677309,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDY3NzMwOQ==",
      "updated_at" : "2020-03-18T15:08:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600677309",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fjahr It looks like your commit hash is the same in the re-ACK",
      "created_at" : "2020-03-18T15:10:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-600678437",
      "id" : 600678437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDY3ODQzNw==",
      "updated_at" : "2020-03-18T15:10:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600678437",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @fjahr It looks like your commit hash is the same in the re-ACK\r\n\r\nUgh, how did I do that? I definitely re-reviewed the new code.\r\n\r\nCode Review Re-ACK c9017ce3bc27665594c9d80f395780d40755bb22\r\n\r\n",
      "created_at" : "2020-03-18T15:14:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-600680873",
      "id" : 600680873,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwMDY4MDg3Mw==",
      "updated_at" : "2020-03-18T15:14:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/600680873",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r395205730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395205730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "c9017ce\r\n\r\nIs this LOCK really necessary given we call `::ChainstateActive()` just after ? Doesn't hurt because we use recursive_mutex but still..",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-03-19T17:39:21Z",
      "diff_hunk" : "@@ -81,12 +81,14 @@ ChainstateManager g_chainman;\n \n CChainState& ChainstateActive()\n {\n+    LOCK(::cs_main);\n     assert(g_chainman.m_active_chainstate);\n     return *g_chainman.m_active_chainstate;\n }\n \n CChain& ChainActive()\n {\n+    LOCK(::cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r395205730",
      "id" : 395205730,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNTczMA==",
      "original_commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "original_position" : 11,
      "path" : "src/validation.cpp",
      "position" : 34,
      "pull_request_review_id" : 377949654,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-19T17:41:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/395205730",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r398200231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398200231"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r385962192\r\n\r\n> If understand well the new lock model, `g_chainman` content is under `cs_main` but not `CChainState`. If yes, why some `GetAll` access in init.cpp don't use lock for access ?\r\n\r\nI don't think this is true. Maybe it was resolved? You can add EXCLUSIVE_LOCKS_REQUIRED(cs_main) to the GetAll declaration, and it will only fail in test code using a local chain state manager not tied to the cs_main global\r\n",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-03-25T22:08:15Z",
      "diff_hunk" : "@@ -894,7 +921,7 @@ class ChainstateManager\n     void Reset();\n };\n \n-extern ChainstateManager g_chainman;\n+extern ChainstateManager g_chainman GUARDED_BY(::cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r398200231",
      "id" : 398200231,
      "in_reply_to_id" : 385962192,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwMDIzMQ==",
      "original_commit_id" : "abfc15273f817d30c3f53f910a8b340a72a6377a",
      "original_position" : 47,
      "path" : "src/validation.h",
      "position" : 216,
      "pull_request_review_id" : 381572592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-25T22:30:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398200231",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r398206011"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398206011"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r395205730\r\n\r\n> Is this LOCK really necessary given we call `::ChainstateActive()` just after ? Doesn't hurt because we use recursive_mutex but still..\r\n\r\nAgree it's definitely not necessary (but harmless)",
      "commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "created_at" : "2020-03-25T22:21:33Z",
      "diff_hunk" : "@@ -81,12 +81,14 @@ ChainstateManager g_chainman;\n \n CChainState& ChainstateActive()\n {\n+    LOCK(::cs_main);\n     assert(g_chainman.m_active_chainstate);\n     return *g_chainman.m_active_chainstate;\n }\n \n CChain& ChainActive()\n {\n+    LOCK(::cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r398206011",
      "id" : 398206011,
      "in_reply_to_id" : 395205730,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNjAxMQ==",
      "original_commit_id" : "c9017ce3bc27665594c9d80f395780d40755bb22",
      "original_position" : 11,
      "path" : "src/validation.cpp",
      "position" : 34,
      "pull_request_review_id" : 381572592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-03-25T22:30:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/398206011",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This tip has accumulated a good number of code ACKs, so I'm hesitant to address nits here. If anyone thinks that's the right move though I'm happy to.\r\n\r\nEdit: and thanks for the reviews, everyone!",
      "created_at" : "2020-03-31T16:32:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-606736762",
      "id" : 606736762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNjczNjc2Mg==",
      "updated_at" : "2020-03-31T16:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606736762",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  If anyone thinks that's the right move though I'm happy to.\r\n\r\nI think we can merge this after the 0.20 branch off.",
      "created_at" : "2020-04-01T04:14:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-607019806",
      "id" : 607019806,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwNzAxOTgwNg==",
      "updated_at" : "2020-04-01T04:14:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607019806",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
