[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Specifying the alignment requirement at the prevector level instead of for `prevector::_union` would also work (ie, `class alignas(char*) prevector {`) and would be a smaller change, but it would be more fragile (breaking if `N*sizeof(T)` isn't a multiple of `alignof(size_type)`, or `sizeof(size_type)*2` didn't match `alignof(char*)`) , so keeping the pack pragma covering only the code that it absolutely needs to seems better.",
      "created_at" : "2019-12-10T08:20:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-563920041",
      "id" : 563920041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MzkyMDA0MQ==",
      "updated_at" : "2019-12-10T08:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/563920041",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK: it would be really nice to be able to run with UndefinedBehaviorSanitizer (UBSan) without having to use any suppressions. \r\n\r\nReviewers of this PR are encouraged to review also the related PR #17208 (\"Make all tests pass UBSan without using any UBSan suppressions\").",
      "created_at" : "2019-12-10T09:00:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-563934250",
      "id" : 563934250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MzkzNDI1MA==",
      "updated_at" : "2019-12-10T09:00:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/563934250",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355916325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355916325"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't like statically asserting numbers here. It may differ per platform, architecture.",
      "commit_id" : "5f26855f109af53a336d5f98ed0ae584e7a31f84",
      "created_at" : "2019-12-10T09:09:31Z",
      "diff_hunk" : "@@ -9,6 +9,11 @@\n #include <random.h>\n #include <version.h>\n \n+/* Check structure sizes are nicely packed */\n+static_assert(sizeof(Coin) == 48, \"unexpected sizeof(Coin)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355916325",
      "id" : 355916325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTkxNjMyNQ==",
      "original_commit_id" : "c28770d2a01e3fd364353c8723a81f56558bc626",
      "original_position" : 5,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 329679721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708",
      "updated_at" : "2019-12-10T11:00:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355916325",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK on the prevector.h and ubsan change",
      "created_at" : "2019-12-10T09:10:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-563937703",
      "id" : 563937703,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MzkzNzcwMw==",
      "updated_at" : "2019-12-10T09:10:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/563937703",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355926888"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355926888"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `assert(A && B);` is equivalent to `assert(A); assert(B);`, however the former has the (small) problem that if it fails it is not clear from the message which one of `A` or `B` is false.",
      "commit_id" : "5f26855f109af53a336d5f98ed0ae584e7a31f84",
      "created_at" : "2019-12-10T09:30:22Z",
      "diff_hunk" : "@@ -147,14 +146,20 @@ class prevector {\n     };\n \n private:\n-    size_type _size = 0;\n+#pragma pack(push, 1)\n     union direct_or_indirect {\n         char direct[sizeof(T) * N];\n         struct {\n-            size_type capacity;\n             char* indirect;\n+            size_type capacity;\n         };\n-    } _union = {};\n+    };\n+#pragma pack(pop)\n+    alignas(char*) direct_or_indirect _union = {};\n+    size_type _size = 0;\n+\n+    static_assert(alignof(char*) % alignof(size_type) == 0 && sizeof(char*) % alignof(size_type) == 0, \"size_type cannot have more restrictive alignment requirement than pointer\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355926888",
      "id" : 355926888,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTkyNjg4OA==",
      "original_commit_id" : "0df2f79c0be9baf3ced891617ffd6ce32327f1fe",
      "original_position" : 27,
      "path" : "src/prevector.h",
      "position" : 27,
      "pull_request_review_id" : 329693033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708",
      "updated_at" : "2019-12-10T11:00:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355926888",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK 0df2f79c0, I have tested the code",
      "created_at" : "2019-12-10T09:44:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-563951470",
      "id" : 563951470,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2Mzk1MTQ3MA==",
      "updated_at" : "2019-12-10T09:44:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/563951470",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355936160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355936160"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think it should be a compile error if these are too small or big. This means that for any field added/removed to the structure, or possible for new compilers/architectures, these lines have to be updated.",
      "commit_id" : "5f26855f109af53a336d5f98ed0ae584e7a31f84",
      "created_at" : "2019-12-10T09:47:57Z",
      "diff_hunk" : "@@ -9,6 +9,11 @@\n #include <random.h>\n #include <version.h>\n \n+/* Check structure sizes are nicely packed */\n+static_assert(sizeof(CScript) == 32, \"unexpected sizeof(CScript)\");\n+static_assert(44 <= sizeof(Coin) && sizeof(Coin) <= 48, \"unexpected sizeof(Coin)\");\n+static_assert(48 <= sizeof(CCoinsCacheEntry) && sizeof(CCoinsCacheEntry) <= 56, \"unexpected sizeof(CCoinsCacheEntry)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355936160",
      "id" : 355936160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTkzNjE2MA==",
      "original_commit_id" : "0df2f79c0be9baf3ced891617ffd6ce32327f1fe",
      "original_position" : 7,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 329704715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708",
      "updated_at" : "2019-12-10T11:00:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355936160",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18088 (build: ensure we aren't using GNU extensions by fanquake)\n* #17208 (Make all tests pass UBSan without using any UBSan suppressions by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-12-10T09:49:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-563953994",
      "id" : 563953994,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2Mzk1Mzk5NA==",
      "updated_at" : "2020-02-11T20:52:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/563953994",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355972284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355972284"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree, mostly wanted them in there to check that there weren't any unexpected changes at least on any of the architectures travis checks. (It's 44/48 for 4-byte pointers and 48/56 for 8-byte pointers). Rebased without that commit.",
      "commit_id" : "5f26855f109af53a336d5f98ed0ae584e7a31f84",
      "created_at" : "2019-12-10T11:00:40Z",
      "diff_hunk" : "@@ -9,6 +9,11 @@\n #include <random.h>\n #include <version.h>\n \n+/* Check structure sizes are nicely packed */\n+static_assert(sizeof(CScript) == 32, \"unexpected sizeof(CScript)\");\n+static_assert(44 <= sizeof(Coin) && sizeof(Coin) <= 48, \"unexpected sizeof(Coin)\");\n+static_assert(48 <= sizeof(CCoinsCacheEntry) && sizeof(CCoinsCacheEntry) <= 56, \"unexpected sizeof(CCoinsCacheEntry)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355972284",
      "id" : 355972284,
      "in_reply_to_id" : 355936160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTk3MjI4NA==",
      "original_commit_id" : "0df2f79c0be9baf3ced891617ffd6ce32327f1fe",
      "original_position" : 7,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 329750997,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708",
      "updated_at" : "2019-12-10T11:00:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355972284",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355974938"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355974938"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, it's good for that.\r\nI later realized there could be a case for checking *CScript*'s size because it's supposed to be 32 bytes no matter the architecture (assuming pointer sizes <= 128 bit  :smiley: ), and it's unlikely for fields to be added to it. But I dunno.",
      "commit_id" : "5f26855f109af53a336d5f98ed0ae584e7a31f84",
      "created_at" : "2019-12-10T11:06:48Z",
      "diff_hunk" : "@@ -9,6 +9,11 @@\n #include <random.h>\n #include <version.h>\n \n+/* Check structure sizes are nicely packed */\n+static_assert(sizeof(CScript) == 32, \"unexpected sizeof(CScript)\");\n+static_assert(44 <= sizeof(Coin) && sizeof(Coin) <= 48, \"unexpected sizeof(Coin)\");\n+static_assert(48 <= sizeof(CCoinsCacheEntry) && sizeof(CCoinsCacheEntry) <= 56, \"unexpected sizeof(CCoinsCacheEntry)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355974938",
      "id" : 355974938,
      "in_reply_to_id" : 355936160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTk3NDkzOA==",
      "original_commit_id" : "0df2f79c0be9baf3ced891617ffd6ce32327f1fe",
      "original_position" : 7,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 329754517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708",
      "updated_at" : "2019-12-10T11:15:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355974938",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 5f26855f109af53a336d5f98ed0ae584e7a31f84",
      "created_at" : "2019-12-10T11:07:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-563983915",
      "id" : 563983915,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2Mzk4MzkxNQ==",
      "updated_at" : "2019-12-10T11:07:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/563983915",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355981321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355981321"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "CScript seems like it ought to be reasonably robust, and it's got that `28` constant already. Maybe if #17060 or the like makes progress could add some checks then? Figure it only makes sense to worry about the size of the things you're caching a bazillion of...",
      "commit_id" : "5f26855f109af53a336d5f98ed0ae584e7a31f84",
      "created_at" : "2019-12-10T11:21:43Z",
      "diff_hunk" : "@@ -9,6 +9,11 @@\n #include <random.h>\n #include <version.h>\n \n+/* Check structure sizes are nicely packed */\n+static_assert(sizeof(CScript) == 32, \"unexpected sizeof(CScript)\");\n+static_assert(44 <= sizeof(Coin) && sizeof(Coin) <= 48, \"unexpected sizeof(Coin)\");\n+static_assert(48 <= sizeof(CCoinsCacheEntry) && sizeof(CCoinsCacheEntry) <= 56, \"unexpected sizeof(CCoinsCacheEntry)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r355981321",
      "id" : 355981321,
      "in_reply_to_id" : 355936160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTk4MTMyMQ==",
      "original_commit_id" : "0df2f79c0be9baf3ced891617ffd6ce32327f1fe",
      "original_position" : 7,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 329762637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708",
      "updated_at" : "2019-12-10T11:21:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355981321",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 5f26855f109af53a336d5f98ed0ae584e7a31f84\r\n\r\nVery glad to see two UBSan suppressions go away! :)",
      "created_at" : "2019-12-10T16:17:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-564110088",
      "id" : 564110088,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NDExMDA4OA==",
      "updated_at" : "2019-12-10T16:17:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564110088",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jamesob Might wanna benchmark this one instead of the previous attempt if you haven't already :relaxed:",
      "created_at" : "2019-12-10T17:18:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-564138304",
      "id" : 564138304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NDEzODMwNA==",
      "updated_at" : "2019-12-10T17:18:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564138304",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm pretty sure the change, as it is now, doesn't modify the layout of any of the data structures used in UTXO caching.\r\n\r\nI think the only case where `CScript` ended up non-aligned in practice was on the stack in some cases (esp. the fuzzing tests).",
      "created_at" : "2019-12-12T11:25:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-564967479",
      "id" : 564967479,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NDk2NzQ3OQ==",
      "updated_at" : "2019-12-12T11:25:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/564967479",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r357323996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357323996"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`sizeof(X)` is always a multiple of `alignof(X)`, so I think the second half here is just redundant.",
      "commit_id" : "5f26855f109af53a336d5f98ed0ae584e7a31f84",
      "created_at" : "2019-12-12T19:17:55Z",
      "diff_hunk" : "@@ -147,14 +146,20 @@ class prevector {\n     };\n \n private:\n-    size_type _size = 0;\n+#pragma pack(push, 1)\n     union direct_or_indirect {\n         char direct[sizeof(T) * N];\n         struct {\n-            size_type capacity;\n             char* indirect;\n+            size_type capacity;\n         };\n-    } _union = {};\n+    };\n+#pragma pack(pop)\n+    alignas(char*) direct_or_indirect _union = {};\n+    size_type _size = 0;\n+\n+    static_assert(alignof(char*) % alignof(size_type) == 0 && sizeof(char*) % alignof(size_type) == 0, \"size_type cannot have more restrictive alignment requirement than pointer\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r357323996",
      "id" : 357323996,
      "in_reply_to_id" : 355926888,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzMyMzk5Ng==",
      "original_commit_id" : "0df2f79c0be9baf3ced891617ffd6ce32327f1fe",
      "original_position" : 27,
      "path" : "src/prevector.h",
      "position" : 27,
      "pull_request_review_id" : 331463867,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708",
      "updated_at" : "2019-12-12T19:17:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357323996",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Agree.",
      "created_at" : "2019-12-12T19:24:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-565148154",
      "id" : 565148154,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NTE0ODE1NA==",
      "updated_at" : "2019-12-12T19:24:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565148154",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This just feels like there must be a better solution. What we're trying to accomplish here should be completely legal, and shouldn't require pragma pack at all.\r\n\r\nReally the problem is that we want either (size, size, pointer) or (size, bytearray). If we could have a union between those two, with a guarantee the two first fields are merged, we'd be done. But because the language forces us to construct an explicit type for the ((size, pointer) or (bytearray)) structure, it on itself has a stronger alignment than if it were \"inlined\" so to speak.\r\n\r\nThat said, I see no way to accomplish that that is guaranteed legal, so ACK.",
      "created_at" : "2019-12-12T19:43:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-565155911",
      "id" : 565155911,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NTE1NTkxMQ==",
      "updated_at" : "2019-12-12T19:43:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565155911",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r357456591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357456591"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Actually I think to a degree CScript being 32 is non obvious... e.g. the size could be shifted greater if that were expected to be the \"hot case\" for fitting most CScripts. It does kind of seem like 28 might be too small, and worth re-measuring. P2SH fits in 32, but a segwit output should be 33 bytes long... unless I'm missing some case where 28 is a common size nowadays.",
      "commit_id" : "5f26855f109af53a336d5f98ed0ae584e7a31f84",
      "created_at" : "2019-12-13T02:01:14Z",
      "diff_hunk" : "@@ -9,6 +9,11 @@\n #include <random.h>\n #include <version.h>\n \n+/* Check structure sizes are nicely packed */\n+static_assert(sizeof(CScript) == 32, \"unexpected sizeof(CScript)\");\n+static_assert(44 <= sizeof(Coin) && sizeof(Coin) <= 48, \"unexpected sizeof(Coin)\");\n+static_assert(48 <= sizeof(CCoinsCacheEntry) && sizeof(CCoinsCacheEntry) <= 56, \"unexpected sizeof(CCoinsCacheEntry)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r357456591",
      "id" : 357456591,
      "in_reply_to_id" : 355936160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzQ1NjU5MQ==",
      "original_commit_id" : "0df2f79c0be9baf3ced891617ffd6ce32327f1fe",
      "original_position" : 7,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 331631275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708",
      "updated_at" : "2019-12-13T02:01:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357456591",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm pretty sure that it's valid to just union them and access the first size from either.\r\n\r\nhttps://en.cppreference.com/w/cpp/language/data_members\r\n\r\nC++11 & before\r\n> If a standard-layout union holds two (or more) standard-layout classes as members, and these classes have a common initial sequence of data members, it is well-defined to examine any member of that common initial sequence regardless of which member of the union is active. \r\n\r\nC++14 on\r\n>  In a standard-layout union with an active member of non-union class type T1,\r\n > it is permitted to read a non-static data member m of another union member of \r\n> non-union class type T2 provided m is part of the common initial sequence of T1 \r\n> and T2 (except that reading a volatile member through non-volatile glvalue is undefined). \r\n\r\nTherefore something like:\r\n\r\n```c++\r\nstruct size_field {const size_t s};\r\nstruct direct_t {size_t s; T t[];}\r\nstruct indirect_t {size_t s; size_t s2; T* t;}\r\n\r\nunion {\r\nsize_field s;\r\ndirect_t direct;\r\nindirect_t indirect;\r\n}\r\n```\r\n\r\nreads to me as being standards compliant...\r\n\r\n\r\nedit: made size_field.s const to express that the value should be read-only from size_field\r\nedit: added c++11 spec, which should also be compatible",
      "created_at" : "2019-12-13T02:17:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-565271516",
      "id" : 565271516,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NTI3MTUxNg==",
      "updated_at" : "2019-12-13T02:45:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565271516",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'm pretty sure that it's valid to just union them and access the first size from either.\r\n\r\nYes, my first impulse was also \"move the size into the union\", but the last decade of C++ (often enough, something allowed or even recommended one day becomes UB the next) made me scared of these kind of assumptions. I think we're looking at \"aliasing\" here as there will be two paths to access the same data. \r\n\r\nBut I'm not a language lawyer, and common sense tells me to not depend on such edge cases of the standard. Especially given how critical this data structure is to bitcoin verification.\r\n\r\nSo I'd prefer to merge the current solution. I think it's guaranteed not to make anything *worse* or introduce new UB. It uses the same pragmas as before but in a more contained way.\r\n\r\n(if someone comes up with a better solution that is easy to see is legal then we can always switch around the code again)",
      "created_at" : "2019-12-13T09:33:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-565370069",
      "id" : 565370069,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NTM3MDA2OQ==",
      "updated_at" : "2019-12-13T09:41:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565370069",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It's worth noting that this behavior is very well defined in C99 and C++.\r\n\r\nThe standard seems pretty clear to me:\r\n\r\n>If two union members are standard-layout types, it's well-defined to examine their common subsequence on any compiler. \r\n\r\nhttps://en.cppreference.com/w/cpp/language/union\r\n\r\nThe aliasing rules should only come into play when the field is written to; which we shouldn't have a problem with as we use the size field to switch on direct/indirectness.\r\n\r\n\r\nI have mixed feeling overall on if `#pragma pack` is less edge casey as it in fact *does* exploit compiler-specific & platform-specific behavior, and the access may be problematic on certain platforms. The code also ends up being more confusing to read IMO and less clear on safety (alignas and the new static_asserts required show that). I'm also a little cagey feeling on using a pragma within a class definition (although the struct can be trivially moved outside the class definition to address this).\r\n",
      "created_at" : "2019-12-13T17:37:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-565534743",
      "id" : 565534743,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NTUzNDc0Mw==",
      "updated_at" : "2019-12-13T17:37:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565534743",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I have mixed feeling overall on if #pragma pack is less edge casey as it in fact does exploit compiler-specific \r\n\r\nThe `pragma pack` was there already for years, and as far as we know, never gave any issues.\r\n\r\nI think this PR does not make anything *less* safe than it was before. It adds constraints to make sure the previous usage, which already happened to be safe (due to how the data structures were already happened to be laid out), is made explicit.\r\n\r\nI do not think this warrants making deeper changes to prevector.\r\n\r\nAnd if a compiler were to ignore the `pragma pack` completely it still results in correct behavior, just more memory usage. It's (here) not used to force any binary layout that is relied on.\r\n",
      "created_at" : "2019-12-15T11:23:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-565800387",
      "id" : 565800387,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NTgwMDM4Nw==",
      "updated_at" : "2019-12-15T11:25:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565800387",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Review beg for this PR which currently has three fresh ACKs (@laanwj, @sipa and me) and one stale ACK (@vasild) - anyone else interested in reviewing? :)\r\n\r\nWould be great to have this merged :)",
      "created_at" : "2020-01-06T21:36:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-571325382",
      "id" : 571325382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MTMyNTM4Mg==",
      "updated_at" : "2020-01-06T21:38:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571325382",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r364529016"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364529016"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "p2pkh, p2sh and p2wpkh should all fit; p2wsh won't fit though (and neither will p2taproot if/when it exists)",
      "commit_id" : "5f26855f109af53a336d5f98ed0ae584e7a31f84",
      "created_at" : "2020-01-09T01:58:05Z",
      "diff_hunk" : "@@ -9,6 +9,11 @@\n #include <random.h>\n #include <version.h>\n \n+/* Check structure sizes are nicely packed */\n+static_assert(sizeof(CScript) == 32, \"unexpected sizeof(CScript)\");\n+static_assert(44 <= sizeof(Coin) && sizeof(Coin) <= 48, \"unexpected sizeof(Coin)\");\n+static_assert(48 <= sizeof(CCoinsCacheEntry) && sizeof(CCoinsCacheEntry) <= 56, \"unexpected sizeof(CCoinsCacheEntry)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#discussion_r364529016",
      "id" : 364529016,
      "in_reply_to_id" : 355936160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUyOTAxNg==",
      "original_commit_id" : "0df2f79c0be9baf3ced891617ffd6ce32327f1fe",
      "original_position" : 7,
      "path" : "src/coins.cpp",
      "position" : null,
      "pull_request_review_id" : 340252168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17708",
      "updated_at" : "2020-01-09T01:58:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364529016",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It's worth noting that this behavior is very well defined in C99 and C++.\r\n\r\nFWIW, I think @JeremyRubin is right in that that's both safe and a better approach; but in the short term at least it seems to be a much more intrusive change both to merge `_size` into the union (as `_direct._size` and `_indirect._size` or similar) and more importantly to update the `_size` field in the correct sub-struct (`_direct` or `_indirect`) in each case, since the standard only guarantees reading from either sub-struct works, not writing to either...",
      "created_at" : "2020-01-09T02:10:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-572348343",
      "id" : 572348343,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MjM0ODM0Mw==",
      "updated_at" : "2020-01-09T02:10:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572348343",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I was really hoping to see this fix making it to 0.19.1 :\\\r\n\r\nCan we move forward with this one?\r\n\r\nDoesn't feel good to ship with a known misaligned pointer use in `ProduceSignature(â¦)` :(\r\n\r\nReachability:\r\n\r\n```\r\nprevector.h:453:19: runtime error: reference binding to misaligned address 0x7f24765a4c22 for type 'prevector<28, unsigned char, unsigned int, int>::size_type' (aka 'unsigned int'), which requires 4 byte alignment\r\n    #0 0x55f5cfb48a4e in prevector<28u, unsigned char, unsigned int, int>::swap(prevector<28u, unsigned char, unsigned int, int>&) src/./prevector.h:453:9\r\n    #1 0x55f5cfb4168e in prevector<28u, unsigned char, unsigned int, int>::operator=(prevector<28u, unsigned char, unsigned int, int>&&) src/./prevector.h:273:9\r\n    #2 0x55f5cfb4168e in CScript::operator=(CScript&&) src/./script/script.h:390:7\r\n    #3 0x55f5cfbce2b6 in ProduceSignature(SigningProvider const&, BaseSignatureCreator const&, CScript const&, SignatureData&) src/script/sign.cpp:240:23\r\n```",
      "created_at" : "2020-01-29T21:07:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-579959567",
      "id" : 579959567,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTk1OTU2Nw==",
      "updated_at" : "2020-01-29T21:07:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579959567",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree with @ajtowns above and support moving forward with fixing this (and following up in the future with a pragma free version if needed).",
      "created_at" : "2020-01-29T21:40:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-579972527",
      "id" : 579972527,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTk3MjUyNw==",
      "updated_at" : "2020-01-29T21:40:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579972527",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It seems this had a performance related silent merge conflict.\r\n\r\nThe commit itself increases performance:\r\n\r\n```\r\n$ git log -1 --oneline --no-decorate && ./src/bench/bench_bitcoin --filter=PrevectorDeserializeNontrivial\r\n5f26855f10 test: Remove ubsan alignment suppressions\r\n# Benchmark, evals, iterations, total, min, max, median\r\nPrevectorDeserializeNontrivial, 5, 6800, 2.56196, 7.44051e-05, 7.63586e-05, 7.53984e-05\r\n\r\n$ git log -1 --oneline --no-decorate && ./src/bench/bench_bitcoin --filter=PrevectorDeserializeNontrivial\r\n1189b6acab Merge #17109: tests: Add fuzzing harness for various functions consuming only integrals\r\n# Benchmark, evals, iterations, total, min, max, median\r\nPrevectorDeserializeNontrivial, 5, 6800, 3.03115, 8.75186e-05, 9.02937e-05, 8.95368e-05\r\n```\r\n\r\nHowever, the merge commit decreases performance:\r\n\r\n```\r\n$ git log -1 --oneline --no-decorate && ./src/bench/bench_bitcoin --filter=PrevectorDeserializeNontrivial\r\n2bdc476d4d Merge #17708: prevector: avoid misaligned member accesses\r\n# Benchmark, evals, iterations, total, min, max, median\r\nPrevectorDeserializeNontrivial, 5, 6800, 4.06536, 0.00011926, 0.000120323, 0.000119399\r\n\r\n$ git log -1 --oneline --no-decorate && ./src/bench/bench_bitcoin --filter=PrevectorDeserializeNontrivial\r\nd4fc9aeb8b Merge #18125: doc: remove PPA note from release-process.md\r\n# Benchmark, evals, iterations, total, min, max, median\r\nPrevectorDeserializeNontrivial, 5, 6800, 3.21483, 9.32497e-05, 9.52515e-05, 9.48292e-05\r\n\r\n",
      "created_at" : "2020-04-26T17:53:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-619594531",
      "id" : 619594531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxOTU5NDUzMQ==",
      "updated_at" : "2020-04-26T17:53:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619594531",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It seems this had a performance related silent merge conflict.\r\n\r\nIt makes sense for this to make things worse in the benchmark I think -- the nontrivial constructor prevector in the benchmark is a 116 or 120 byte object (28 4-byte nontrivials, a 4-byte size_t with the number of non-trivials, all aligned to a pointer so padded 4-bytes if pointers are 8-bytes), and the size has moved to the end of that structure rather than the beginning which could well be a different cache line than the first entry or the pointer to the allocated entries.\r\n\r\nCould probably confirm this by seeing if changing `nontrivial_t::x` from `int` to `signed char` makes the performance regression disappear.",
      "created_at" : "2020-05-26T12:41:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17708#issuecomment-633999688",
      "id" : 633999688,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17708",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzk5OTY4OA==",
      "updated_at" : "2020-05-26T12:41:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633999688",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   }
]
