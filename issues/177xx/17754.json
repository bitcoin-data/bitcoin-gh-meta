{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Don't allow resolving of `std::string`:s with embedded `NUL` characters.\r\n\r\nAvoid using C-style `NUL`-terminated strings as arguments in the `netbase` interface\r\n\r\nAdd tests.\r\n\r\nThe only place in where C-style `NUL`-terminated strings are actually needed is here:\r\n\r\n```diff\r\n+    if (!ValidAsCString(name)) {\r\n+        return false;\r\n+    }\r\n...\r\n-    int nErr = getaddrinfo(pszName, nullptr, &aiHint, &aiRes);\r\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\r\n     if (nErr)\r\n         return false;\r\n```\r\n\r\nInterface changes:\r\n\r\n```diff\r\n-bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\r\n+bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\r\n\r\n-bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup);\r\n+bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup);\r\n\r\n-bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup);\r\n+bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup);\r\n\r\n-bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\r\n+bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\r\n\r\n-bool LookupSubNet(const char *pszName, CSubNet& subnet);\r\n+bool LookupSubNet(const std::string& strSubnet, CSubNet& subnet);\r\n\r\n-CService LookupNumeric(const char *pszName, int portDefault = 0);\r\n+CService LookupNumeric(const std::string& name, int portDefault = 0);\r\n\r\n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\r\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocketRet, int nTimeout, bool& outProxyConnectionFailed);\r\n```\r\n\r\nIt should be noted that the `ConnectThroughProxy` change (from `bool *outProxyConnectionFailed` to `bool& outProxyConnectionFailed`) has nothing to do with `NUL` handling but I thought it was worth doing when touching this file :)",
   "closed_at" : "2020-01-22T19:21:21Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
      "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/laanwj/followers",
      "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/laanwj",
      "id" : 126646,
      "login" : "laanwj",
      "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
      "organizations_url" : "https://api.github.com/users/laanwj/orgs",
      "received_events_url" : "https://api.github.com/users/laanwj/received_events",
      "repos_url" : "https://api.github.com/users/laanwj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/laanwj"
   },
   "comments" : 8,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17754/comments",
   "created_at" : "2019-12-16T13:41:59Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17754/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/17754",
   "id" : 538419796,
   "labels" : [
      {
         "color" : "006b75",
         "default" : false,
         "description" : null,
         "id" : 98298007,
         "name" : "P2P",
         "node_id" : "MDU6TGFiZWw5ODI5ODAwNw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17754/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0MzUzNTY4OTk1",
   "number" : 17754,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/17754.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17754",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/17754.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17754"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "net: Don't allow resolving of std::string with embedded NUL characters. Add tests. ",
   "updated_at" : "2020-01-22T19:21:22Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17754",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
