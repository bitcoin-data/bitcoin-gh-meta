{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "### Is your feature request related to a problem? Please describe.\r\n\r\nCurrently, the only stupidly easily accessible backup option is just making a plain copy of the entire `wallet.dat` database. **Comparing to mnemonic words, a piggy `wallet.dat` file is very much less portable**: mnemonic words could be easily written down on paper/carved onto steel plate/assembled by alphanumeric tiles...etc. Furthermore, it could even be memorized into the user's own brain with little effort.\r\n\r\nEven WIF privkeys are still much more portable than the piggy `wallet.dat` file - I think the phenomenon that, up till now, a number of users still have **\"fetish for one single precious WIF privkey\"** (and **address/key reusing**), should really have something to do with this - because WIF is still considered to be the \"battlefield-tested, most straightforward/KISS-compliant, most widely compatible, most reliable, and most secure\" option of backup by those users, I guess.\r\n\r\nTo be clear, I don't think such opinion is completely irrational - so far, there is no unanimously accepted/adopted mnemonic words specification. As a widely adopted proposal, BIP39, seemed to be strongly opposed by some devs in the past, so far it was even marked as \"Unanimously Discourage for implementation\". Therefore, **it's reasonable for a user to feel anxious that his/her carefully preserved mnemonic words may suffer from the annoying \"bit-rot\" issue in the future.**\r\n\r\nBesides, the classical **\"screw-up-by-change-address\"** tragedy might still occassionally repeat in the future. This really seemed to have something to do with this issue - not only with the \"fetish for one single precious WIF privkey\" mentioned above, but also with the current primitive management of wallet.dat contents. (sorry, but I don't know better words) **Bitcoin Core's GUI also lacks persistent backup warning**, as far as I know.\r\n\r\nCurrently Bitcoin Core supports importing of various types of things, including privkeys, pubkeys, addresses. Multi-wallet(.dat) is also supported in newer versions. However, **a `wallet.dat` could still gradually turn to a mess, as more and more messy things got imported.**\r\n\r\nAdditionally, **hardened address derivation** makes the watch-only side for cold storage unable to derive addresses for receiving/change/watching.\r\n\r\n### Describe the solution you'd like\r\n\r\nI really appreciate the BIP32/39/44/49/84 scheme adopted by Trezor. Although I don't think such scheme is ideal either, **I think it should be the priority to deliver an usable solution to the users**, rather than to wait for a nealy-ideal proposal to appear, let alone its implementation & delivery.\r\n\r\nSo far, IMHO, **adopting BIP32/39/44/49/84 scheme seems to be the best choice for Bitcoin Core.**\r\n\r\nTo address the \"messy contents of `wallet.dat`\" problem, I think something like #3314 is missing. The wallet should have **flags/timestamps** to distinguish among various types of its contents, including, but not limited to:\r\n\r\n1. **Observe-only/owned**: the later may contain watch-only addresses for cold storage. Only the later would be counted as available balance, or be used to provide receiving addresses.\r\n\r\n2. **Compromised (or not)**: generally, paper wallets from other people should be considered compromised, since the former owner may still keep a copy of the privkey, therefore, imported (extended) privkeys/mnemonics should be marked as compromised by default, then this flag could be removed by cautious consent by the user, or sweeped into owned address(es) completely.\r\n\r\n3. **Backup required/Last backup at [time]**: since it's a self-custody situation, it seems that no \"silver bullet\" is possible - it's always possible for the crucial data to be destroyed/leaked unexpectedly. Also, if two backup mechanisms (`wallet.dat` or text-based WIF/xprv/mnemonic) co-exist, it might confuse the user, too. In my opinion, the task of backup/recovery should mainly rely on text-based ways, rather than simply making a plain copy of `wallet.dat`, since text is human-readable. There is also an issue like #1666.\r\n\r\n4. **[READ-ONLY] This wallet.dat database was last saved at [time]**: it might be better that an external `wallet.dat` (typically a backup) could be loaded in read-only mode by default. In this mode, the \"backup required\" flag(s) mentioned above might be greyed, so that the confusion between two backup mechanisms could be relieved. If the user wants to sync the wallet, I think Bitcoin Core should create a writable copy for it, in the data directory.\r\n\r\n5. **Derived/independently generated/imported, at [time]**: the wallet should remember the origins of its contents.\r\n\r\n6. **Last exported at [time] for [purpose]**: the reason why hardened address derivation is used by Bitcoin Core is that revealing extended pubkey together with a non extended child privkey would result in revealing the whole chain of keys. Besides the risk mentioned above, it's obvious that **\"one compromised, all compromised\"**, while (extended) privkeys/mnemonics are imported into multiple wallets. Therefore, I think Bitcoin Core should educate/warn its users not to carelessly export private keys.\r\n\r\nOnce there's a classification mechanism, the wallet would then gain the ability to **filter its contents**, by these flags/properties.\r\n\r\n### Why BIP39/44/49/84?\r\n\r\nFirst of all, as far as I know, *[Mastering Bitcoin](https://github.com/bitcoinbook/bitcoinbook)* has been introducing BIP32/39/44 scheme to its readers for many years.\r\n\r\nThere are also so many users who trust Bitcoin Core so deeply that they don't even bother to try any other wallet. Shouldn't these users be taken care of?\r\n\r\nBitcoin Core is also recognized as \"the reference implementation\", that's saying, what Bitcoin Core supported is highly hopeful to be supported by other projects as well, which really seems to be hopeful to relieve the current fragmented situation.\r\n\r\nBTW, I actually googled \"bikeshedding\" for what it means - I learned that it means \"technical disputes over minor, marginal issues conducted while more serious ones are being overlooked.\" Frankly speaking, I think the current fragmented situation of mnemonic seed specification really fits with this definition - sorry for my rudeness, but I would rather to be a rude egoistic d*ck, than just keep silent to watch more and more new recruits joining the army of \"single WIF privkey fetishism\".\r\n\r\n1. It's said that BIP39 has very weak checksum, thus it might deviate into an insecure human-picked brainwallet scheme - then **why couldn't Bitcoin Core itself always securely&randomly generate mnemonic seeds for its user? It could also warn the user about \"don't pick your mnemonic words with your brain\" while importing a BIP39 mnemonic.**\r\n\r\n2. It's said that BIP39 doesn't really have plausible deniability, and, it has a weak KDF - then at least Bitcoin Core could simply refuse to create passphrase while generating a new seed, and, it could also warn the user about the \"inherent linkage\" and \"prone-to-crack\" issues while importing a passphrase-enabled BIP39 mnemonic. (I'm still confused/unconvinced on this topic, to my understanding, it's impossible for BIP39 to generate addresses with any publicly observable linkage - was @gmaxwell [talking](https://bitcointalk.org/index.php?topic=812894.msg10908427#msg10908427) about situations like DreadPirateRoberts being arrested? If so, I don't think this is very convincing either, because as long as ther user's computer got impounded, and the encrypted wallet got unlocked, the difference mentioned by Greg seems to be really litte, **otherwise, almost anything found on a computer could be \"plausibly deniable\".**)\r\n\r\n3. It's said that BIP39 lacks a version number - to be honest, I don't think this should be considered as a \"flaw\", since a seed should be treated essentially as an universal \"root\" backup of everything, for example, a user can upgrade to SegWit anytime (s)he wants, without making a new backup. \r\n\r\n### Describe alternatives you've considered\r\n\r\nWhat if a better proposal come into being? In my opinion, **a standardized proposal** is always the best proposal, far better than a mess of \"improved proposals\" which are **incompatible with each other**.\r\n\r\nI don't think there's completely no hope that a better solution could be come up with, like, *an invertible encoding* that is able to express the BIP32 seed directly, so that any fancy mnemonic could be converted into it - however, in my view, BIP39 has already penetrated deeply into the public mind, that it's very unlikely to replace it.\r\n\r\nAdditionally, BIP39 has already made use of so many common words, that **any potential successor of BIP39 is very likely to face the ambiguity problem**.\r\n\r\nIn one word: I think **it's far more important to make the users feel confident and safe, that their carefully preserved mnemonic words would still be usable in the future (without being \"bit-rotten\")**.\r\n\r\n### Additional context\r\n\r\nhttps://bitcoin.stackexchange.com/questions/88237/is-there-a-reason-to-why-bitcoin-core-does-not-implement-bip39",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17748/comments",
   "created_at" : "2019-12-15T07:47:36Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17748/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/17748",
   "id" : 538016350,
   "labels" : [
      {
         "color" : "7cf575",
         "default" : false,
         "description" : null,
         "id" : 64583,
         "name" : "Feature",
         "node_id" : "MDU6TGFiZWw2NDU4Mw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17748/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU1MzgwMTYzNTA=",
   "number" : 17748,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Adoption of BIP39/44/49/84, and classification of (extended) pub/priv keys, addresses, mnemonics, etc",
   "updated_at" : "2019-12-15T07:47:36Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17748",
   "user" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/4075106?v=4",
      "events_url" : "https://api.github.com/users/andronoob/events{/privacy}",
      "followers_url" : "https://api.github.com/users/andronoob/followers",
      "following_url" : "https://api.github.com/users/andronoob/following{/other_user}",
      "gists_url" : "https://api.github.com/users/andronoob/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/andronoob",
      "id" : 4075106,
      "login" : "andronoob",
      "node_id" : "MDQ6VXNlcjQwNzUxMDY=",
      "organizations_url" : "https://api.github.com/users/andronoob/orgs",
      "received_events_url" : "https://api.github.com/users/andronoob/received_events",
      "repos_url" : "https://api.github.com/users/andronoob/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/andronoob/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/andronoob/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/andronoob"
   }
}
