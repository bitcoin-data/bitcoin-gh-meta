[
   {
      "author_association" : "MEMBER",
      "body" : "@theuni @ryanofsky @ajtowns you might have opinions / thoughts?",
      "created_at" : "2022-02-23T11:51:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24423#issuecomment-1048703452",
      "id" : 1048703452,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24423",
      "node_id" : "IC_kwDOABII584-gfHc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048703452/reactions"
      },
      "updated_at" : "2022-02-23T11:51:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048703452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I guess I'd be curious to see real examples of where it is useful. It seems to me like most of the places where you could use `not_null<T*>` you could use `T&` instead and references seem nicer to me aesthetically, and I like how they limit what you can do with the variable (just access the data not do mess with pointer or ownership). The only cases where `not_null` seems really useful is when when you need the pointer variable to be able change which object it is pointing to. This could be better in some data structures than raw pointers or reference_wrappers (https://stackoverflow.com/questions/33306553/gslnot-nullt-vs-stdreference-wrappert-vs-t), but I don't think these cases are very common in our codebase. \r\n\r\nI think in general replacing `T&` with `not_null<T*>` would be bad, while using `not_null<T*>` in certain data structures could be good. A more neutral case could be replacing things like:\r\n\r\n```c++\r\nconst CChain& active = Assert(m_node.chainman)->ActiveChain();\r\n```\r\n\r\nwith\r\n\r\n```c++\r\nconst CChain& active = m_node.chainman->ActiveChain();\r\n```\r\n\r\nYou get same runtime assert in either case here, but in first case author is clearly stating intention for chainman to be not null **here** at this line of the code, while in second case with `not_null` author is just saying the pointer shouldn't be null any place it is dereferenced, which isn't saying much. I could see people preferring the second version though.",
      "created_at" : "2022-02-23T13:43:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24423#issuecomment-1048795957",
      "id" : 1048795957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24423",
      "node_id" : "IC_kwDOABII584-g1s1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048795957/reactions"
      },
      "updated_at" : "2022-02-23T13:44:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048795957",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I guess I'd be curious to see real examples of where it is useful\r\n\r\nTo turn runtime errors into compile errors #19273 ?",
      "created_at" : "2022-02-23T13:49:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24423#issuecomment-1048800934",
      "id" : 1048800934,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24423",
      "node_id" : "IC_kwDOABII584-g26m",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048800934/reactions"
      },
      "updated_at" : "2022-02-23T13:49:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048800934",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> To turn runtime errors into compile errors #19273 ?\r\n\r\nIs #19273 the right issue? I think point of not_null has more to do with safety around accessing data, not allocating objects.\r\n\r\nTo be clear why I was asking for examples, I don't have any problem not_null, but I do think references are better than not_nulls in most cases and am responding to \"In many such cases, we may want to avoid needing to handle the pointer being null, or make it clear in the function contract that we require a non-null pointer\" in the issue description.",
      "created_at" : "2022-02-23T14:04:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24423#issuecomment-1048814606",
      "id" : 1048814606,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24423",
      "node_id" : "IC_kwDOABII584-g6QO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048814606/reactions"
      },
      "updated_at" : "2022-02-23T14:04:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048814606",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "So you are saying there should be a `UniqueReference` (similar to `std::unique_ptr` when it comes to memory management and similar to `std::reference_wrapper` when it comes to accessing data)?",
      "created_at" : "2022-02-23T14:28:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24423#issuecomment-1048838384",
      "id" : 1048838384,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24423",
      "node_id" : "IC_kwDOABII584-hADw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048838384/reactions"
      },
      "updated_at" : "2022-02-23T14:28:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048838384",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> So you are saying there should be a `UniqueReference` (similar to `std::unique_ptr` when it comes to memory management and similar to `std::reference_wrapper` when it comes to accessing data)?\r\n\r\nI think the point of references is that they are transparent aliases to data somewhere that you should just access and not try to do memory management with. So if you are writing a function that just needs to access data \r\n`f(Data& data)` is better than `f(not_null<Data*> data)` or `f(not_null<unique_ptr<Data>> data)`.  I could imagine `not_null<unique_ptr>`  and `not_null<shared_ptr>` stuff being useful in some places, just not a lot of places, so I'm asking what the motivating examples are to see if they are really calling for `not_null`.",
      "created_at" : "2022-02-23T14:45:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24423#issuecomment-1048859022",
      "id" : 1048859022,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24423",
      "node_id" : "IC_kwDOABII584-hFGO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048859022/reactions"
      },
      "updated_at" : "2022-02-23T14:45:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048859022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I can see how references and reference_wrapper (which I didn't know was zero-cost until today) can solve most of the cases. I do think that `not_null<unique_ptr>` and `not_null<shared_ptr>` are useful when we're passing around (shared) ownership and perhaps we can focus on those use-cases (e.g. `RegisterSharedValidationInterface`)",
      "created_at" : "2022-02-23T19:29:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24423#issuecomment-1049136761",
      "id" : 1049136761,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24423",
      "node_id" : "IC_kwDOABII584-iI55",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1049136761/reactions"
      },
      "updated_at" : "2022-02-23T19:29:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1049136761",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This seems pretty niche, but I like the idea of being extra expressive when possible. I agree with @ryanofsky that references should be generally preferred though.\r\n\r\nI think @dongcarl pointed to a concrete example of where passing a reference or `std::reference_wrapper` won't work as an access model: when inheritance is needed. So, I can imagine `not_null<BaseClass*>` potentially being a useful pattern there.\r\n\r\nI'm curious though, is this better than using the [nonnull](https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html) attribute when needed? In terms of expressiveness, it seems to me that it might be more useful to peg the property to a specific parameter and locale than a storage duration. It wouldn't be correct-by-construction that way, but we could still get warnings/errors.\r\n\r\nSo I guess my question is: is it more useful to enforce as part of the function signature, or storage duration?",
      "created_at" : "2022-02-23T23:46:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24423#issuecomment-1049339003",
      "id" : 1049339003,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24423",
      "node_id" : "IC_kwDOABII584-i6R7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1049339003/reactions"
      },
      "updated_at" : "2022-02-23T23:46:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1049339003",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think @dongcarl pointed to a concrete example of where passing a reference or `std::reference_wrapper` won't work as an access model: when inheritance is needed. So, I can imagine `not_null<BaseClass*>` potentially being a useful pattern there.\r\n\r\nI'm curious about this, but I don't see what it is referring to. It seems like inheritance should be orthogonal to nullability and which pointer or reference mechanism is used.\r\n\r\n> I'm curious though, is this better than using the [nonnull](https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html) attribute when needed? In terms of expressiveness, it seems to me that it might be more useful to peg the property to a specific parameter and locale than a storage duration. It wouldn't be correct-by-construction that way, but we could still get warnings/errors.\r\n> \r\n> So I guess my question is: is it more useful to enforce as part of the function signature, or storage duration?\r\n\r\nIt seems like ideal thing would be for the `not_null` type to automatically apply the `nonnull` compiler hint. Question of which is \"more useful\" is probably hard to answer without knowing specifics of a situation, and what level of analysis and optimization compiler will do, but I think it should be safe to say both are useful, and have some overlapping benefits, and some non-overlapping benefits.\r\n\r\nOn larger issue I definitely think `not_null` is useful in some cases. Just not very many cases I'm aware of. And in most cases where it is possible to use references, I think it is better to use references.",
      "created_at" : "2022-02-24T10:54:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24423#issuecomment-1049734226",
      "id" : 1049734226,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24423",
      "node_id" : "IC_kwDOABII584-kaxS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1049734226/reactions"
      },
      "updated_at" : "2022-02-24T10:55:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1049734226",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "In any case, I think having not_null for `not_null<unqiue_ptr<T>>` is quite useful in itself as we incrementally move towards having clearer ownership semantics.",
      "created_at" : "2022-03-02T17:57:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/24423#issuecomment-1057214321",
      "id" : 1057214321,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24423",
      "node_id" : "IC_kwDOABII584_A89x",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1057214321/reactions"
      },
      "updated_at" : "2022-03-02T17:57:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1057214321",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   }
]
