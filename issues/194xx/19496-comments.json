[
   {
      "author_association" : "MEMBER",
      "body" : "Is this one of those cases where `std::less` is more? :)",
      "created_at" : "2020-07-11T21:53:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-657135963",
      "id" : 657135963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzEzNTk2Mw==",
      "updated_at" : "2020-07-11T21:53:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657135963",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Ha ha ha ð  \r\n\r\nNo, I don't believe so.  :)  (The iterators in question don't define `operator<` .. one would have to actually examine the underlying `.first` perhaps and do `<` on those...)",
      "created_at" : "2020-07-11T23:36:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-657147172",
      "id" : 657147172,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzE0NzE3Mg==",
      "updated_at" : "2020-07-11T23:41:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657147172",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I am not convinced this is UB.\n\nPointer comparison of objects that are not in the same array (or one past it) is unspecified in C++, not undefined. This means the compiler can choose whatever it likes about the order of the two objects, but it's one or the other, and cannot do anything else.\n\nHowever, there is no guaranteed total ordering on unrelated pointers. This means that while not UB, the code in IteratorComparator may in theory not do what it's intended to do. E.g. a<b and b<a might both be simultaneously true.\n\nI'm not sure if this is what @practicalswift was alluding to, but std::less (and friends) when specialized to any given pointer type *is* a well defined total ordering, even when < etc are not.\n\nSo it seems that to be fully compliant, it is sufficient to replace < with std::less in these sorts of operations.",
      "created_at" : "2020-07-12T16:09:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-657242758",
      "id" : 657242758,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzI0Mjc1OA==",
      "updated_at" : "2020-07-12T16:09:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657242758",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa \r\n\r\n> This means that while not UB, the code in IteratorComparator may in theory not do what it's intended to do. E.g. a<b and b<a might both be simultaneously true.\r\n>\r\n> I'm not sure if this is what @practicalswift was alluding to, but std::less (and friends) when specialized to any given pointer type is a well defined total ordering, even when < etc are not.\r\n>\r\n> So it seems that to be fully compliant, it is sufficient to replace < with std::less in these sorts of operations.\r\n\r\nExactly! That's why `std::less` is more :)",
      "created_at" : "2020-07-12T21:07:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-657275236",
      "id" : 657275236,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzI3NTIzNg==",
      "updated_at" : "2020-07-12T21:10:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657275236",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Hmm. In theory `std::less` is supposed to be a demarcation point where the compiler's optimizer \"lays off\" with the assumptions -- there are known bugs in GCC for example (many gcc stdlibcc++'s just default to `<` anyway without any magic given to the optimizer).  The problem is not all compilers do the right thing with `std::less`.. it's not easy.  Here is a relevant blog post about this from 2016 that is quite informative: https://quuxplusone.github.io/blog/2019/01/20/std-less-nightmare/\r\n\r\nBut yes.. it does appear that `std::less` is more.. as @practicalswift originally asserted.  At least in theory. :/\r\n\r\nThere be dragons here...",
      "created_at" : "2020-07-13T08:48:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-657416767",
      "id" : 657416767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzQxNjc2Nw==",
      "updated_at" : "2020-07-13T08:52:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657416767",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@cculianu \r\n\r\nNice find BTW and thanks for reporting!\r\n\r\nMay I ask how you found this case? Static analysis?\r\n\r\n---\r\n\r\nNit: Perhaps \"undefined behaviour\" in the title could be replaced with \"unspecified behaviour\" in order to not confuse readers?\r\n\r\nThe subtle differences between undefined, unspecified and implementation-defined in the C++ standard:\r\n\r\n* **undefined** behavior: \"behavior, upon use of a nonportable or erroneous program construct or of erroneous data, for which this International Standard imposes no requirements.\"\r\n* **unspecified** behavior: \"use of an unspecified value, or other behavior where this International Standard provides two or more possibilities and imposes no further requirements on which is chosen in any instance\"\r\n* **implementation-defined** behavior: \"unspecified behavior where each implementation documents how the choice is made\"",
      "created_at" : "2020-07-13T13:28:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-657560555",
      "id" : 657560555,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzU2MDU1NQ==",
      "updated_at" : "2020-07-13T13:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657560555",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Nice find BTW and thanks for reporting!\r\n\r\n@practicalswift -- My pleasure.  You guys have a lot of influence on what happens in to the Bitcoins* (what BTC people refer to as altcoins such as Bitcoin Cash, Bitcoin SV, Bitcoin Gold, etc) -- so Core software being top notch impacts us all.\r\n\r\n> May I ask how you found this case? Static analysis?\r\n\r\nHa -- strangely the free static analyzers didn't catch this.  I do have a PVS Studio license -- I should try that and see if it catches it.  No.. I used \"Eyeball analysis\".  I'm maintaining a downstream version of your code -- I work for the Bitcoin Cash Node project.  So -- we have a lot of similarities in terms of large parts of the system.  I initially found this in our software then went to the source (you guys) to discuss it.  \r\n\r\n---\r\n\r\nAs for the delineation between UB vs. unspecified -- I'll leave it up to you.  I am not exactly sure either here without reading the \"standardese\" more carefully.  If you like I can modify the title of this issue or you can as well without objection.\r\n",
      "created_at" : "2020-07-13T19:57:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-657760376",
      "id" : 657760376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1Nzc2MDM3Ng==",
      "updated_at" : "2020-07-13T19:57:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657760376",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The problem is not all compilers do the right thing with std::less\r\n\r\nNot sure what to do here then. For now the current code happens to work for some reason and when changing to `std::less` doesn't give additional checks, then it might be best to leave the code as is? Or just change to `std::less` and treat it as upstream bug if something goes wrong?",
      "created_at" : "2022-08-04T10:17:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-1205054127",
      "id" : 1205054127,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "IC_kwDOABII585H06qv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1205054127/reactions"
      },
      "updated_at" : "2022-08-04T10:17:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1205054127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
