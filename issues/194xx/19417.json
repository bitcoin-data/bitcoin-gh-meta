{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Intermittent CI failure: ThreadSanitizer failure (data race) when running `wallet_multiwallet.py --usecli`.\r\n\r\nSee [Travis log](https://travis-ci.org/github/bitcoin/bitcoin/jobs/703334033) for details.\r\n\r\n```\r\nâ¦\r\nwallet_multiwallet.py --usecli        | â Failed  | 241 s\r\nALL                                   | â Failed  | 3896 s (accumulated) \r\nRuntime: 994 s\r\n==================\r\nWARNING: ThreadSanitizer: data race (pid=30325)\r\n  Write of size 8 at 0x7ba0000001e0 by thread T4 (mutexes: write M214):\r\n    #0 closedir <null> (bitcoind+0x75bf6)\r\n    #1 __os_dirlist <null> (bitcoind+0x80992c)\r\n    #2 BerkeleyBatch::VerifyEnvironment(boost::filesystem::path const&, bilingual_str&) <null> (bitcoind+0x45b342)\r\n    #3 WalletBatch::VerifyEnvironment(boost::filesystem::path const&, bilingual_str&) <null> (bitcoind+0x58e2bb)\r\n    #4 CWallet::Verify(interfaces::Chain&, WalletLocation const&, bilingual_str&, std::__1::vector<bilingual_str, std::__1::allocator<bilingual_str> >&) <null> (bitcoind+0x52a6b9)\r\n    #5 LoadWallet(interfaces::Chain&, WalletLocation const&, bilingual_str&, std::__1::vector<bilingual_str, std::__1::allocator<bilingual_str> >&) <null> (bitcoind+0x527901)\r\n    #6 loadwallet(JSONRPCRequest const&) <null> (bitcoind+0x4d2f0f)\r\n    #7 std::__1::__function::__func<CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x243b6d)\r\n    #8 std::__1::__function::__func<interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x43ec6e)\r\n    #9 std::__1::__function::__func<interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x108e42)\r\n    #10 CRPCTable::execute(JSONRPCRequest const&) const <null> (bitcoind+0x2ec756)\r\n    #11 std::__1::__function::__func<StartHTTPRPC(util::Ref const&)::$_0, std::__1::allocator<StartHTTPRPC(util::Ref const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) <null> (bitcoind+0x403cea)\r\n    #12 HTTPWorkItem::operator()() <null> (bitcoind+0x40e3f2)\r\n    #13 WorkQueue<HTTPClosure>::Run() <null> (bitcoind+0x4104f5)\r\n    #14 HTTPWorkQueueRun(WorkQueue<HTTPClosure>*, int) <null> (bitcoind+0x40a5fc)\r\n    #15 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >(void*) <null> (bitcoind+0x410fb8)\r\n  Previous read of size 8 at 0x7ba0000001e0 by thread T3 (mutexes: write M131465):\r\n    #0 epoll_ctl <null> (bitcoind+0x75fa2)\r\n    #1 epoll_apply_one_change <null> (bitcoind+0x8af70e)\r\n    #2 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, bool (*)(event_base*), event_base*> >(void*) <null> (bitcoind+0x410648)\r\n  Location is file descriptor 30 created by main thread at:\r\n    [failed to restore the stack]\r\n  Mutex M214 (0x55ae4f8baba8) created at:\r\n    #0 pthread_mutex_init <null> (bitcoind+0x7172d)\r\n    #1 std::__1::recursive_mutex::recursive_mutex() <null> (libc++.so.1+0x83583)\r\n    #2 __libc_csu_init <null> (bitcoind+0x9501dc)\r\n  Mutex M131465 (0x7b0c00004740) created at:\r\n    #0 pthread_mutex_init <null> (bitcoind+0x7172d)\r\n    #1 evthread_posix_lock_alloc <null> (bitcoind+0x897aaf)\r\n    #2 AppInitMain(util::Ref const&, NodeContext&) <null> (bitcoind+0x11cd57)\r\n    #3 main <null> (bitcoind+0x10000c)\r\n  Thread T4 'b-httpworker.0' (tid=30350, running) created by main thread at:\r\n    #0 pthread_create <null> (bitcoind+0x701ab)\r\n    #1 std::__1::thread::thread<void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&, int&, void>(void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&, int&) <null> (bitcoind+0x410e90)\r\n    #2 void std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread> >::__emplace_back_slow_path<void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&, int&>(void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&, int&) <null> (bitcoind+0x4107f2)\r\n    #3 StartHTTPServer() <null> (bitcoind+0x40a3b8)\r\n    #4 AppInitMain(util::Ref const&, NodeContext&) <null> (bitcoind+0x11cde1)\r\n    #5 main <null> (bitcoind+0x10000c)\r\n  Thread T3 'b-http' (tid=30349, running) created by main thread at:\r\n    #0 pthread_create <null> (bitcoind+0x701ab)\r\n    #1 std::__1::thread::thread<bool (&)(event_base*), event_base*&, void>(bool (&)(event_base*), event_base*&) <null> (bitcoind+0x40dc87)\r\n    #2 StartHTTPServer() <null> (bitcoind+0x40a31c)\r\n    #3 AppInitMain(util::Ref const&, NodeContext&) <null> (bitcoind+0x11cde1)\r\n    #4 main <null> (bitcoind+0x10000c)\r\nSUMMARY: ThreadSanitizer: data race (/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/bitcoind+0x75bf6) in closedir\r\n```",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19417/comments",
   "created_at" : "2020-06-30T06:36:33Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19417/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/19417",
   "id" : 647906812,
   "labels" : [
      {
         "color" : "FBBAAB",
         "default" : false,
         "description" : null,
         "id" : 64585,
         "name" : "Bug",
         "node_id" : "MDU6TGFiZWw2NDU4NQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19417/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU2NDc5MDY4MTI=",
   "number" : 19417,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Intermittent CI failure: ThreadSanitizer failure (data race) when running wallet_multiwallet.py --usecli",
   "updated_at" : "2020-06-30T06:36:33Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19417",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
