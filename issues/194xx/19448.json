{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "https://cirrus-ci.com/task/4919890316361728?command=ci#L3486\r\n\r\nSimilar issues:\r\n- #19211\r\n- #19417\r\n\r\n\r\n<details><summary>log excerpt</summary>\r\n<p>\r\n\r\n```\r\n...\r\n108/159 - mempool_expiry.py failed, Duration: 4 s\r\nstdout:\r\n2020-07-05T12:07:26.964000Z TestFramework (INFO): Initializing test directory /tmp/cirrus-ci-build/ci/scratch/test_runner/test_runner_â¿_ð_20200705_114826/mempool_expiry_49\r\n2020-07-05T12:07:29.624000Z TestFramework (INFO): Test default mempool expiry timeout of 336 hours.\r\n2020-07-05T12:07:30.281000Z TestFramework (INFO): Broadcast child transaction after 7 days, 0:00:00 hours.\r\n2020-07-05T12:07:30.641000Z TestFramework (INFO): Test parent tx not expired after 13 days, 23:59:55 hours.\r\n2020-07-05T12:07:30.765000Z TestFramework (ERROR): Unexpected exception caught during testing\r\nTraceback (most recent call last):\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py\", line 108, in _request\r\n    return self._get_response()\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py\", line 168, in _get_response\r\n    http_response = self.__conn.getresponse()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1332, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 303, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 272, in _read_status\r\n    raise RemoteDisconnected(\"Remote end closed connection without\"\r\nhttp.client.RemoteDisconnected: Remote end closed connection without response\r\nDuring handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_framework.py\", line 117, in main\r\n    self.run_test()\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/mempool_expiry.py\", line 91, in run_test\r\n    self.test_transaction_expiry(DEFAULT_MEMPOOL_EXPIRY)\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/mempool_expiry.py\", line 77, in test_transaction_expiry\r\n    node.sendtoaddress(node.getnewaddress(), 1.0)\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/coverage.py\", line 47, in __call__\r\n    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py\", line 144, in __call__\r\n    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py\", line 113, in _request\r\n    self.__conn.request(method, path, postdata, headers)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1240, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1286, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1235, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1006, in _send_output\r\n    self.send(msg)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 946, in send\r\n    self.connect()\r\n  File \"/usr/lib/python3.8/http/client.py\", line 917, in connect\r\n    self.sock = self._create_connection(\r\n  File \"/usr/lib/python3.8/socket.py\", line 808, in create_connection\r\n    raise err\r\n  File \"/usr/lib/python3.8/socket.py\", line 796, in create_connection\r\n    sock.connect(sa)\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n2020-07-05T12:07:31.091000Z TestFramework (INFO): Stopping nodes\r\n2020-07-05T12:07:31.092000Z TestFramework.node0 (ERROR): Unable to stop node.\r\nTraceback (most recent call last):\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_node.py\", line 319, in stop_node\r\n    self.stop(wait=wait)\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/coverage.py\", line 47, in __call__\r\n    return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py\", line 144, in __call__\r\n    response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py\", line 107, in _request\r\n    self.__conn.request(method, path, postdata, headers)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1240, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1251, in _send_request\r\n    self.putrequest(method, url, **skips)\r\n  File \"/usr/lib/python3.8/http/client.py\", line 1088, in putrequest\r\n    raise CannotSendRequest(self.__state)\r\nhttp.client.CannotSendRequest: Request-sent\r\nstderr:\r\nTraceback (most recent call last):\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/mempool_expiry.py\", line 100, in <module>\r\n    MempoolExpiryTest().main()\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_framework.py\", line 140, in main\r\n    exit_code = self.shutdown()\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_framework.py\", line 264, in shutdown\r\n    self.stop_nodes()\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_framework.py\", line 525, in stop_nodes\r\n    node.wait_until_stopped()\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_node.py\", line 362, in wait_until_stopped\r\n    wait_until(self.is_node_stopped, timeout=timeout, timeout_factor=self.timeout_factor)\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/util.py\", line 241, in wait_until\r\n    if predicate():\r\n  File \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_node.py\", line 352, in is_node_stopped\r\n    assert return_code == 0, self._node_msg(\r\nAssertionError: [node 0] Node returned non-zero exit code (66) when stopping\r\n...\r\nmempool_expiry.py                     | â Failed  | 4 s\r\nALL                                   | â Failed  | 4500 s (accumulated) \r\nRuntime: 1142 s\r\n==================\r\nWARNING: ThreadSanitizer: data race (pid=37561)\r\n  Write of size 1 at 0x7b84000208cc by thread T18 (mutexes: write M132362, write M132877):\r\n    #0 memmove <null> (bitcoind+0x79de7)\r\n    #1 __db_pitem <null> (bitcoind+0x880daf)\r\n    #2 bool BerkeleyBatch::Write<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, CPubKey>, CKeyMetadata>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, CPubKey> const&, CKeyMetadata const&, bool) <null> (bitcoind+0x592efe)\r\n    #3 WalletBatch::WriteKeyMetadata(CKeyMetadata const&, CPubKey const&, bool) <null> (bitcoind+0x57e2d1)\r\n    #4 WalletBatch::WriteKey(CPubKey const&, std::__1::vector<unsigned char, secure_allocator<unsigned char> > const&, CKeyMetadata const&) <null> (bitcoind+0x57e3ca)\r\n    #5 LegacyScriptPubKeyMan::AddKeyPubKeyWithDB(WalletBatch&, CKey const&, CPubKey const&) <null> (bitcoind+0x5026af)\r\n    #6 LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch&, CHDChain&, bool) <null> (bitcoind+0x4fd0d8)\r\n    #7 LegacyScriptPubKeyMan::TopUp(unsigned int) <null> (bitcoind+0x507948)\r\n    #8 CWallet::GetNewDestination(OutputType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::variant<CNoDestination, PKHash, ScriptHash, WitnessV0ScriptHash, WitnessV0KeyHash, WitnessUnknown>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&) <null> (bitcoind+0x551956)\r\n    #9 getnewaddress(JSONRPCRequest const&) <null> (bitcoind+0x4a786a)\r\n    #10 std::__1::__function::__func<CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x281bed)\r\n    #11 std::__1::__function::__func<interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x43b86e)\r\n    #12 std::__1::__function::__func<interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x147722)\r\n    #13 CRPCTable::execute(JSONRPCRequest const&) const <null> (bitcoind+0x32afad)\r\n    #14 std::__1::__function::__func<StartHTTPRPC(util::Ref const&)::$_0, std::__1::allocator<StartHTTPRPC(util::Ref const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) <null> (bitcoind+0x400d2a)\r\n    #15 HTTPWorkItem::operator()() <null> (bitcoind+0x40b072)\r\n    #16 WorkQueue<HTTPClosure>::Run() <null> (bitcoind+0x40d175)\r\n    #17 HTTPWorkQueueRun(WorkQueue<HTTPClosure>*, int) <null> (bitcoind+0x40731c)\r\n    #18 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >(void*) <null> (bitcoind+0x40dc38)\r\n  Previous read of size 8 at 0x7b84000208c8 by thread T16:\r\n    #0 pwrite <null> (bitcoind+0x7bc72)\r\n    #1 __os_io <null> (bitcoind+0x806602)\r\n    #2 BerkeleyBatch::Close() <null> (bitcoind+0x45955d)\r\n    #3 CWallet::chainStateFlushed(CBlockLocator const&) <null> (bitcoind+0x53183c)\r\n    #4 non-virtual thunk to CWallet::chainStateFlushed(CBlockLocator const&) <null> (bitcoind+0x5318ef)\r\n    #5 interfaces::(anonymous namespace)::NotificationsProxy::ChainStateFlushed(CBlockLocator const&) <null> (bitcoind+0x146fb1)\r\n    #6 std::__1::__function::__func<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13, std::__1::allocator<CMainSignals::ChainStateFlushed(CBlockLocator const&)::$_13>, void ()>::operator()() <null> (bitcoind+0x3d1f4e)\r\n    #7 SingleThreadedSchedulerClient::ProcessQueue() <null> (bitcoind+0x632816)\r\n    #8 std::__1::__function::__func<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*>, std::__1::allocator<std::__1::__bind<void (SingleThreadedSchedulerClient::*)(), SingleThreadedSchedulerClient*> >, void ()>::operator()() <null> (bitcoind+0x634736)\r\n    #9 CScheduler::serviceQueue() <null> (bitcoind+0x6317e5)\r\n    #10 boost::detail::thread_data<AppInitMain(util::Ref const&, NodeContext&)::$_4>::run() <null> (bitcoind+0x12354d)\r\n    #11 boost::(anonymous namespace)::thread_proxy(void*) <null> (bitcoind+0x7a289e)\r\n  Location is heap block of size 4184 at 0x7b8400020800 allocated by thread T18:\r\n    #0 malloc <null> (bitcoind+0x6e8e4)\r\n    #1 __os_malloc <null> (bitcoind+0x804b08)\r\n    #2 bool BerkeleyBatch::Write<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, uint256>, CWalletTx>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, uint256> const&, CWalletTx const&, bool) <null> (bitcoind+0x591e32)\r\n    #3 WalletBatch::WriteTx(CWalletTx const&) <null> (bitcoind+0x57e0b1)\r\n    #4 CWallet::AddToWallet(std::__1::shared_ptr<CTransaction const>, CWalletTx::Confirmation const&, std::__1::function<bool (CWalletTx&, bool)> const&, bool) <null> (bitcoind+0x535ec4)\r\n    #5 CWallet::AddToWalletIfInvolvingMe(std::__1::shared_ptr<CTransaction const> const&, CWalletTx::Confirmation, bool) <null> (bitcoind+0x538114)\r\n    #6 CWallet::ScanForWalletTransactions(uint256 const&, int, boost::optional<int>, WalletRescanReserver const&, bool) <null> (bitcoind+0x540262)\r\n    #7 CWallet::RescanFromTime(long, WalletRescanReserver const&, bool) <null> (bitcoind+0x53f236)\r\n    #8 RescanWallet(CWallet&, WalletRescanReserver const&, long, bool) <null> (bitcoind+0x5aa32e)\r\n    #9 importprivkey(JSONRPCRequest const&) <null> (bitcoind+0x5a8ec5)\r\n    #10 std::__1::__function::__func<CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x281bed)\r\n    #11 std::__1::__function::__func<interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x43b86e)\r\n    #12 std::__1::__function::__func<interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x147722)\r\n    #13 CRPCTable::execute(JSONRPCRequest const&) const <null> (bitcoind+0x32aa16)\r\n    #14 std::__1::__function::__func<StartHTTPRPC(util::Ref const&)::$_0, std::__1::allocator<StartHTTPRPC(util::Ref const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) <null> (bitcoind+0x400d2a)\r\n    #15 HTTPWorkItem::operator()() <null> (bitcoind+0x40b072)\r\n    #16 WorkQueue<HTTPClosure>::Run() <null> (bitcoind+0x40d175)\r\n    #17 HTTPWorkQueueRun(WorkQueue<HTTPClosure>*, int) <null> (bitcoind+0x40731c)\r\n    #18 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >(void*) <null> (bitcoind+0x40dc38)\r\n  Mutex M132362 (0x7b5c00020030) created at:\r\n    #0 pthread_mutex_init <null> (bitcoind+0x7172d)\r\n    #1 std::__1::recursive_mutex::recursive_mutex() <null> (libc++.so.1+0x83583)\r\n    #2 CWallet::CreateWalletFromFile(interfaces::Chain&, WalletLocation const&, bilingual_str&, std::__1::vector<bilingual_str, std::__1::allocator<bilingual_str> >&, unsigned long) <null> (bitcoind+0x527e5b)\r\n    #3 CreateWallet(interfaces::Chain&, std::__1::basic_string<char, std::__1::char_traits<char>, secure_allocator<char> > const&, unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bilingual_str&, std::__1::vector<bilingual_str, std::__1::allocator<bilingual_str> >&, std::__1::shared_ptr<CWallet>&) <null> (bitcoind+0x525d41)\r\n    #4 createwallet(JSONRPCRequest const&) <null> (bitcoind+0x4a0267)\r\n    #5 std::__1::__function::__func<CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x281bed)\r\n    #6 std::__1::__function::__func<interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x43b86e)\r\n    #7 std::__1::__function::__func<interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x147722)\r\n    #8 CRPCTable::execute(JSONRPCRequest const&) const <null> (bitcoind+0x32aa16)\r\n    #9 std::__1::__function::__func<StartHTTPRPC(util::Ref const&)::$_0, std::__1::allocator<StartHTTPRPC(util::Ref const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) <null> (bitcoind+0x400d2a)\r\n    #10 HTTPWorkItem::operator()() <null> (bitcoind+0x40b072)\r\n    #11 WorkQueue<HTTPClosure>::Run() <null> (bitcoind+0x40d175)\r\n    #12 HTTPWorkQueueRun(WorkQueue<HTTPClosure>*, int) <null> (bitcoind+0x40731c)\r\n    #13 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >(void*) <null> (bitcoind+0x40dc38)\r\n  Mutex M132877 (0x7b5000010878) created at:\r\n    #0 pthread_mutex_init <null> (bitcoind+0x7172d)\r\n    #1 std::__1::recursive_mutex::recursive_mutex() <null> (libc++.so.1+0x83583)\r\n    #2 CWallet::SetupLegacyScriptPubKeyMan() <null> (bitcoind+0x5556ae)\r\n    #3 CWallet::CreateWalletFromFile(interfaces::Chain&, WalletLocation const&, bilingual_str&, std::__1::vector<bilingual_str, std::__1::allocator<bilingual_str> >&, unsigned long) <null> (bitcoind+0x528359)\r\n    #4 CreateWallet(interfaces::Chain&, std::__1::basic_string<char, std::__1::char_traits<char>, secure_allocator<char> > const&, unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bilingual_str&, std::__1::vector<bilingual_str, std::__1::allocator<bilingual_str> >&, std::__1::shared_ptr<CWallet>&) <null> (bitcoind+0x525d41)\r\n    #5 createwallet(JSONRPCRequest const&) <null> (bitcoind+0x4a0267)\r\n    #6 std::__1::__function::__func<CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x281bed)\r\n    #7 std::__1::__function::__func<interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<interfaces::(anonymous namespace)::WalletClientImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x43b86e)\r\n    #8 std::__1::__function::__func<interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) <null> (bitcoind+0x147722)\r\n    #9 CRPCTable::execute(JSONRPCRequest const&) const <null> (bitcoind+0x32aa16)\r\n    #10 std::__1::__function::__func<StartHTTPRPC(util::Ref const&)::$_0, std::__1::allocator<StartHTTPRPC(util::Ref const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) <null> (bitcoind+0x400d2a)\r\n    #11 HTTPWorkItem::operator()() <null> (bitcoind+0x40b072)\r\n    #12 WorkQueue<HTTPClosure>::Run() <null> (bitcoind+0x40d175)\r\n    #13 HTTPWorkQueueRun(WorkQueue<HTTPClosure>*, int) <null> (bitcoind+0x40731c)\r\n    #14 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >(void*) <null> (bitcoind+0x40dc38)\r\n  Thread T18 'b-httpworker.0' (tid=37580, running) created by main thread at:\r\n    #0 pthread_create <null> (bitcoind+0x701ab)\r\n    #1 std::__1::thread::thread<void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&, int&, void>(void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&, int&) <null> (bitcoind+0x40db10)\r\n    #2 void std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread> >::__emplace_back_slow_path<void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&, int&>(void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&, int&) <null> (bitcoind+0x40d472)\r\n    #3 StartHTTPServer() <null> (bitcoind+0x4070d8)\r\n    #4 AppInitMain(util::Ref const&, NodeContext&) <null> (bitcoind+0x117751)\r\n    #5 main <null> (bitcoind+0x10000c)\r\n  Thread T16 'b-scheduler' (tid=37578, running) created by main thread at:\r\n    #0 pthread_create <null> (bitcoind+0x701ab)\r\n    #1 boost::thread::start_thread_noexcept() <null> (bitcoind+0x7a279d)\r\n    #2 AppInitMain(util::Ref const&, NodeContext&) <null> (bitcoind+0x1171ee)\r\n    #3 main <null> (bitcoind+0x10000c)\r\nSUMMARY: ThreadSanitizer: data race (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/bitcoind+0x79de7) in memmove\r\n==================\r\n```\r\n\r\n</p>\r\n</details>",
   "closed_at" : "2023-02-07T15:51:48Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 4,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19448/comments",
   "created_at" : "2020-07-05T14:13:56Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19448/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/19448",
   "id" : 651077969,
   "labels" : [
      {
         "color" : "FBBAAB",
         "default" : false,
         "description" : null,
         "id" : 64585,
         "name" : "Bug",
         "node_id" : "MDU6TGFiZWw2NDU4NQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19448/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU2NTEwNzc5Njk=",
   "number" : 19448,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19448/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "state_reason" : "completed",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19448/timeline",
   "title" : "qa: Data race detected when running `mempool_expiry.py`",
   "updated_at" : "2023-02-07T15:51:48Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19448",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
      "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
      "followers_url" : "https://api.github.com/users/hebasto/followers",
      "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/hebasto",
      "id" : 32963518,
      "login" : "hebasto",
      "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
      "organizations_url" : "https://api.github.com/users/hebasto/orgs",
      "received_events_url" : "https://api.github.com/users/hebasto/received_events",
      "repos_url" : "https://api.github.com/users/hebasto/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/hebasto"
   }
}
