{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "Currently we have a peculiar data structure in the mempool called maplinks. Maplinks job is to track the in-pool children and parents of each transaction. This PR can be primarily understood and reviewed as a simple refactoring to remove this extra data structure, although it comes with a nice memory and performance improvement for free.\r\n\r\nMaplinks is particularly peculiar because removing it is not as simple as just moving it's inner structure to the owning CTxMempoolEntry. Because TxLinks (the class storing the setEntries for parents and children) store txiters to each entry in the mempool corresponding to the parent or child, it means that the TxLinks type is \"aware\" of the boost multiindex (mapTx) it's coming from, which is in turn, aware of the entry type stored in mapTx. Thus we used maplinks to store this entry associated data we in an entirely separate data structure just to avoid a circular type reference caused by storing a txiter inside a CTxMempoolEntry.\r\n\r\nIt turns out, we can kill this circular reference by making use of iterator_to multiindex function and std::reference_wrapper. This allows us to get rid of the maplinks data structure and move the ownership of the parents/child sets to the entries themselves.\r\n\r\nThe benefit of this good all around, for any of the reasons given below the change would be acceptable, and it doesn't make the code harder to reason about or worse in any respect (as far as I can tell, there's no tradeoff).\r\n\r\n### Simpler ownership model \r\nNo longer having to consistency check that mapLinks did have records for our CTxMempoolEntry, impossible to have a mapLinks entry outlive or incorrectly die before a CTxMempoolEntry.\r\n\r\n### Memory Usage\r\nWe get rid of a O(Transactions) sized map in the mempool, which is a long lived data structure. \r\n\r\n### Performance\r\nIf you have a CTxMemPoolEntry, you immediately know the address of it's children/parents, rather than having to do a O(log(Transactions)) lookup via maplinks (which we do very often). We do it in *so many* places that a true benchmark has to look at a full running node, but it is easy enough to show an improvement in this case.\r\n\r\nThe ComplexMemPool shows a good coherence check that we see the expected result of it being 12.5% faster / 1.14x faster.\r\n```\r\nBefore:\r\n# Benchmark, evals, iterations, total, min, max, median\r\nComplexMemPool, 5, 1, 1.40462, 0.277222, 0.285339, 0.279793\r\n\r\nAfter:\r\n# Benchmark, evals, iterations, total, min, max, median\r\nComplexMemPool, 5, 1, 1.22586, 0.243831, 0.247076, 0.244596\r\n```\r\nThe ComplexMemPool benchmark only checks doing addUnchecked and TrimToSize for 800 transactions. While this bench does a good job of hammering the relevant types of function, it doesn't test everything. \r\n\r\nSubbing in 5000 transactions shows a that the advantage isn't completely wiped out by other asymptotic factors (this isn't the only bottleneck in growing the mempool), but it's only a bit proportionally slower (10.8%, 1.12x), which adds evidence that this will be a good change for performance minded users.\r\n\r\n```\r\n# Benchmark, evals, iterations, total, min, max, median\r\nComplexMemPool, 5, 1, 59.1321, 11.5919, 12.235, 11.7068\r\n\r\n# Benchmark, evals, iterations, total, min, max, median\r\nComplexMemPool, 5, 1, 52.1307, 10.2641, 10.5206, 10.4306\r\n```\r\nI don't think it's possible to come up with an example of where a maplinks based design would have better performance, but it's something for reviewers to consider.\r\n\r\n# Discussion\r\n## Why maplinks in the first place?\r\n\r\nI spoke with the author of mapLinks (sdaftuar) a while back, and my recollection from our conversation was that it was implemented because he did not know how to resolve the circular dependency at the time, and there was no other reason for making it a separate map.\r\n\r\n## Is iterator_to weird?\r\n\r\niterator_to is expressly for this purpose, see https://www.boost.org/doc/libs/1_51_0/libs/multi_index/doc/tutorial/indices.html#iterator_to \r\n\r\n>  iterator_to provides a way to retrieve an iterator to an element from a pointer to the element, thus making iterators and pointers interchangeable for the purposes of element pointing (not so for traversal) in many situations. This notwithstanding, it is not the aim of iterator_to to promote the usage of pointers as substitutes for real iterators: the latter are specifically designed for handling the elements of a container, and not only benefit from the iterator orientation of container interfaces, but are also capable of exposing many more programming bugs than raw pointers, both at compile and run time. iterator_to is thus meant to be used in scenarios where access via iterators is not suitable or desireable:\r\n> \r\n>     - Interoperability with preexisting APIs based on pointers or references.\r\n>     - Publication of pointer-based interfaces (for instance, when designing a C-compatible library).\r\n>     - The exposure of pointers in place of iterators can act as a type erasure barrier effectively decoupling the user of the code from the implementation detail of which particular container is being used. Similar techniques, like the famous Pimpl idiom, are used in large projects to reduce dependencies and build times.\r\n>     - Self-referencing contexts where an element acts upon its owner container and no iterator to itself is available.\r\n\r\nIn other words, iterator_to is the perfect tool for the job by the last reason given. Under the hood it should just be a simple pointer cast and have no major runtime overhead (depending on if the function call is inlined).\r\n\r\nEdit by laanwj: removed at sign from the description",
   "closed_at" : "2020-09-07T10:10:26Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 26,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19478/comments",
   "created_at" : "2020-07-09T20:54:36Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19478/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/19478",
   "id" : 654341795,
   "labels" : [
      {
         "color" : "fef2c0",
         "default" : false,
         "description" : null,
         "id" : 164208572,
         "name" : "Mempool",
         "node_id" : "MDU6TGFiZWwxNjQyMDg1NzI=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool"
      },
      {
         "color" : "E6F6D6",
         "default" : false,
         "description" : null,
         "id" : 135961,
         "name" : "Refactoring",
         "node_id" : "MDU6TGFiZWwxMzU5NjE=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring"
      },
      {
         "color" : "981023",
         "default" : false,
         "description" : null,
         "id" : 326918230,
         "name" : "Resource usage",
         "node_id" : "MDU6TGFiZWwzMjY5MTgyMzA=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Resource%20usage"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19478/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0NDQ3MDg4ODUx",
   "number" : 19478,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/19478.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19478",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/19478.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19478"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Remove CTxMempool::mapLinks data structure member",
   "updated_at" : "2020-09-07T10:11:55Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19478",
   "user" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
      "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
      "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/JeremyRubin",
      "id" : 886523,
      "login" : "JeremyRubin",
      "node_id" : "MDQ6VXNlcjg4NjUyMw==",
      "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
      "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
      "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/JeremyRubin"
   }
}
