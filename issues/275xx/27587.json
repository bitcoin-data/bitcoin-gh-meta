{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "#### Project Board: https://github.com/bitcoin/bitcoin/projects/18\r\n\r\nThis is the tracking issue for the `libbitcoinkernel` project. The original tracking issue is found in https://github.com/bitcoin/bitcoin/issues/24303. This issue contains much of the content written by Carl Dong in the original issue but is more regularly updated.\r\n\r\nThe libbitcoinkernel project is a new attempt at extracting our consensus engine. The kernel part of the name highlights one of the key functional differences from libbitcoinconsensus and in fact, most libraries: it is a stateful library that can spawn threads, do caching, do I/O, and many other things that one may not normally expect from a library.\r\n\r\nThis statefulness is necessary for libbitcoinkernel's decidedly incremental approach to extracting our consensus engine. This approach favors:\r\n\r\n1. Reusing existing code\r\n...which allows us to be continually integrated with Bitcoin Core and benefit from our extensive test suite\r\n    \r\n2. Incremental decoupling instead of building from scratch\r\n ...which allows us to avoid having to prematurely optimize for a \"perfect\" boundary or API (tends to be highly subjective, non-obvious, may lead to unproductive bike-shedding before we've even done anything meaningful)\r\n\r\nThe work of extracting our consensus engine into a library and making the API ergonomic is likely to be a multi-release project involving multiple contributors. The incremental approach takes this into account and respects the sheer size of work (both in writing code and getting it through review) that needs to be undertaken.\r\n\r\n## PRs\r\n\r\nPlease see the project board: https://github.com/bitcoin/bitcoin/projects/18\r\n\r\n\r\n## The Game Plan\r\n\r\n* [ ] Stage 1\r\n    * [x] Step 1\r\n    * [ ] Step 2\r\n    * [ ] Step 3\r\n    * [ ] Step 4\r\n    * [ ] Step 5\r\n* [ ] Stage 2\r\n\r\n### Stage 1: Extracting out a usable `libbitcoinkernel.{so,dylib,dll}`\r\n#### Step 1: Introduce internal `bitcoin-chainstate` and `libbitcoinkernel`\r\n##### a.k.a. What `.cpp` files do we need?\r\n\r\nThis `bitcoin-chainstate` executable uses our consensus engine and its build system code will reveal the minimal set of files we need to link in to use our consensus engine as-is. It is important to note that this list of files will serve as a guiding \"North Star\" for this first stage of the plan: as we decouple more and more modules of the codebase from our consensus engine, this list will grow shorter and shorter.\r\n\r\nThis list of files (the `_SOURCES` in `Automake` speak) then serves as the basis for a `libbitcoinkernel`, which `bitcoin-chainstate` will be linked against.\r\n\r\n**Key Result:** Any further coupling of our consensus engine with non-consensus modules will result in linker errors, preventing this project from becoming a Sisyphean task of battling coupling regressions.\r\n#### Step 2: Decouple most non-consensus code from `libbitcoinkernel`\r\n##### a.k.a. Prune the unnecessary `.cpp` files!\r\n\r\nThere are many modules that do not logically belong in `libbitcoinkernel` (e.g. `index/*.cpp`, `netaddress.cpp`), but are nevertheless necessary to be included in its `_SOURCES` for `bitcoin-chainstate` to link correctly. This is because Bitcoin Core's existing codebase is full of unnecessary dependencies/couplings that need to be untangled/decoupled/broken up.\r\n\r\nThe following list is likely incomplete but notes some of the to be pruned files:\r\n\r\n  1. ~~`netaddress.cpp`~~\r\n  2. ~~Parts of `timedata.cpp`~~\r\n  3. ~~Parts of `init/common.cpp`~~\r\n  4. `ArgsManager` (this one's a doozy)\r\n  5. ~~`index/*.cpp`~~\r\n  6. `shutdown.cpp`\r\n\r\n**Developer Note:** We do not decouple the mempool _yet_ because most users of `libbitcoinkernel` may want to have an embedded mempool with Bitcoin Core's policies and we can decouple it later.\r\n\r\n#### Step 3: Introduce an external `bitcoin-chainstate`\r\n##### a.k.a. What `.h` files do we need?\r\n\r\nBefore this step, `bitcoin-chainstate` has been an internal executable managed by our build system with access to all files and headers. In this step, we add an external `bitcoin-chainstate` with a separate build system to reveal the minimal set of headers we need to ship in order to make the `libbitcoinkernel` library usable.\r\n\r\n#### Step 4: Decouple most non-consensus headers from `libbitcoinkernel`\r\n##### a.k.a. Prune the unnecessary `.h` files!\r\n\r\nSimilar to Step 2, there are lots of small decoupling of the header dependency tree here. A notable piece of this step is to remove `leveldb` includes from our headers to avoid needing to re-ship `leveldb` headers.\r\n\r\n#### Step 5: Use the `libbitcoinkernel` library for internal compilation\r\n\r\nNow that `libbitcoinkernel` contains some minimal set of source files, it should also be used as an internal library for `libbitcoin_node`. The desired library organization is shown in [doc/design/libraries.md](https://github.com/bitcoin/bitcoin/blob/master/doc/design/libraries.md).\r\n\r\n### Stage 2: Polishing the API / Continual De-coupling\r\n\r\nAt this point, we have a usable `libbitcoinkernel` that is _somewhat_ minimally linked. However, it has a very idiosyncratic, Bitcoin Core-specific C++ interface. The goal of this stage is to incrementally make the `libbitcoinkernel` API more ergonomic for users outside of Bitcoin Core. Bindings to other languages (first C, then others) should be introduced. Note though, that there is a possible dichotomy here between optimizing the library interface for external users and for the internal interface within Bitcoin Core.\r\n\r\nIt is crucial that multiple contributors collaboratively lead this stage. Ideally, they would be able to work with users looking to integrate with `libbitcoinkernel` who can give an accurate account of the API ergonomics from the library user's point of view.\r\n\r\n\r\n## Getting `libbitcoinkernel` Through Review\r\n\r\nThe following ground rules were proposed to make this process more streamlined for all parties involved and a few things this tracking issue can help with:\r\n\r\n1. Any outstanding comments/reviews not pertinent to the main thrust of PRs should not delay/block the merging of the core functionality of PRs. Any leftover comments/reviews not tackled in the PR will be taken note of in the TODO section above and then either triaged in an issue or addressed in a separate PR.     \r\n2. Whenever the PR reaches a stage where there are only leftover comments/reviews left, the author should make a comment saying so. This might make it easier for maintainers to determine roughly where the PR is at in its lifecycle.\r\n\r\n\r\n## Action Items\r\n\r\n1. If you have any questions, please post them below!\r\n 2. If you plan on reviewing `libbitcoinkernel` or are a maintainer:       \r\n       1. Please make sure you've read the \"Getting `libbitcoinkernel` Through Review\" section above.\r\n       2. Please let me know if there's anything else I can do to help streamline the review process.\r\n3. If you have any ideas for the future direction of \"Stage 2: Polishing the API / Continual De-coupling\", please leave a comment below, I'd love to talk!\r\n\r\n\r\n## Project-wide TODOs\r\n\r\nThese are suggestions for further cleanup and improvements that came up during review:\r\n\r\n* [ ]  Various followups for [[kernel 2c/n] Introduce `kernel::Context`, encapsulate global init/teardown #25065](https://github.com/bitcoin/bitcoin/pull/25065)\r\n  * [ ]  Marco's post-merge review comments: [[kernel 2c/n] Introduce `kernel::Context`, encapsulate global init/teardown #25065 (review)](https://github.com/bitcoin/bitcoin/pull/25065#pullrequestreview-996614232)\r\n  * [ ]  Cory's `kernel::Context` cleanup suggestions: [[kernel 2c/n] Introduce `kernel::Context`, encapsulate global init/teardown #25065 (comment)](https://github.com/bitcoin/bitcoin/pull/25065#discussion_r882182549)\r\n* [ ]  Ryan's post-merge review comment: [[kernel 2e/n] miner: Make `mempool` optional, stop constructing temporary empty mempools #25223 (comment)](https://github.com/bitcoin/bitcoin/pull/25223#discussion_r898164322)\r\n* [ ]  Various followups for [[kernel 3a/n] Decouple `CTxMemPool` from `ArgsManager` #25290](https://github.com/bitcoin/bitcoin/pull/25290)\r\n  * [ ]  Perform gArgs checking in `ApplyArgsManOptions`: [[kernel 3a/n] Decouple `CTxMemPool` from `ArgsManager` #25290 (comment)](https://github.com/bitcoin/bitcoin/pull/25290#discussion_r907535652)\r\n  * [ ]  Perform `CTxMemPool::Options` checking in `CTxMemPool` constructor: [[kernel 3a/n] Decouple `CTxMemPool` from `ArgsManager` #25290 (comment)](https://github.com/bitcoin/bitcoin/pull/25290#discussion_r900272797)\r\n  * [ ]  Change `CalculateMemPoolAncestors` to take in `CTxMemPool::Limits` instead: [[kernel 3a/n] Decouple `CTxMemPool` from `ArgsManager` #25290 (comment)](https://github.com/bitcoin/bitcoin/pull/25290#discussion_r905260891)\r\n* [ ]  Various followups for [[kernel 3b/n] Decouple `{Dump,Load}Mempool` from `ArgsManager` #25487](https://github.com/bitcoin/bitcoin/pull/25487)\r\n  * [ ]  Improve `DumpMempool`'s mutex: [[kernel 3b/n] Decouple `{Dump,Load}Mempool` from `ArgsManager` #25487 (comment)](https://github.com/bitcoin/bitcoin/pull/25487#discussion_r916228022)\r\n  * [ ]  Change `LoadMempool`'s semantics: [[kernel 3b/n] Decouple `{Dump,Load}Mempool` from `ArgsManager` #25487 (comment)](https://github.com/bitcoin/bitcoin/pull/25487#discussion_r916044902)\r\n  * [ ]  Make LoadMempool less foot-gunny: [[kernel 3b/n] Decouple `{Dump,Load}Mempool` from `ArgsManager` #25487 (comment)](https://github.com/bitcoin/bitcoin/pull/25487#discussion_r921234107), [c4249c1](https://github.com/bitcoin/bitcoin/commit/c4249c1243981f42091950d1295c2be6bd4bf118)\r\n* [ ] Various followups for [refactor, kernel: Decouple ArgsManager from blockstorage #27125](https://github.com/bitcoin/bitcoin/pull/27125)\r\n  * [ ] Marco's request for a minimal iwyu memory include false positive example: https://github.com/bitcoin/bitcoin/pull/27125#discussion_r1184832621\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27587/comments",
   "created_at" : "2023-05-06T08:27:17Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27587/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/27587",
   "id" : 1698534450,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27587/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII585lPZQy",
   "number" : 27587,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27587/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27587/timeline",
   "title" : "Libbitcoinkernel Project Tracking",
   "updated_at" : "2023-05-06T08:28:27Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27587",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
      "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
      "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
      "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
      "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/TheCharlatan",
      "id" : 8421793,
      "login" : "TheCharlatan",
      "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
      "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
      "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
      "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/TheCharlatan"
   }
}
