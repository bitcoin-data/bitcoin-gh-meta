[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27375](https://github.com/bitcoin/bitcoin/pull/27375) (net: support unix domain sockets for -proxy and -onion by pinheadmz)\n* [#27071](https://github.com/bitcoin/bitcoin/pull/27071) (Handle CJDNS from LookupSubNet() by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-05-02T18:28:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#issuecomment-1531950684",
      "id" : 1531950684,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27557",
      "node_id" : "IC_kwDOABII585bT7Zc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1531950684/reactions"
      },
      "updated_at" : "2023-05-02T22:45:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1531950684",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The unit test I added makes a live DNS request for nic.com that test will fail the platform has no DNS\r\n\r\nOr just anytime you don't have an internet connection? We're not going to add \"internet connectivity\" as a requirement to run the unit tests (putting aside all other potential issues with doing this).",
      "created_at" : "2023-05-03T09:03:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#issuecomment-1532679609",
      "id" : 1532679609,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27557",
      "node_id" : "IC_kwDOABII585bWtW5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1532679609/reactions"
      },
      "updated_at" : "2023-05-03T09:04:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1532679609",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1183531240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183531240"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Making actual requests from the unit tests is not great.\r\n\r\nIf you want to add a unit test, you could introduce a way to mock `getaddrinfo` or `AsyncGetAddrInfo` so that you can better test our code in all the relevant scenarios (i.e. getaddrinfo errors/blocking etc.).",
      "commit_id" : "49b909cce78c3d45afc423fe3a148b84dc00cb76",
      "created_at" : "2023-05-03T10:52:59Z",
      "diff_hunk" : "@@ -158,6 +158,19 @@ BOOST_AUTO_TEST_CASE(embedded_test)\n     BOOST_CHECK_EQUAL(addr1.ToStringAddr(), addr2.ToStringAddr());\n }\n \n+BOOST_AUTO_TEST_CASE(dns_lookup)\n+{\n+    CNetAddr addr;\n+    bool ret = LookupHost(\"nic.com\", addr, /*fAllowLookup=*/true);\n+    BOOST_CHECK(ret);\n+    BOOST_CHECK(addr.IsRoutable());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1183531240",
      "id" : 1183531240,
      "line" : 166,
      "node_id" : "PRRC_kwDOABII585Gi0Do",
      "original_commit_id" : "49b909cce78c3d45afc423fe3a148b84dc00cb76",
      "original_line" : 166,
      "original_position" : 9,
      "original_start_line" : 164,
      "path" : "src/test/netbase_tests.cpp",
      "position" : 9,
      "pull_request_review_id" : 1410647298,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183531240/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 164,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-05-03T10:52:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183531240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1183533168"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183533168"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Maybe use https://en.cppreference.com/w/cpp/thread/future/wait_until instead?",
      "commit_id" : "49b909cce78c3d45afc423fe3a148b84dc00cb76",
      "created_at" : "2023-05-03T10:55:13Z",
      "diff_hunk" : "@@ -68,17 +79,49 @@ std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_loo\n     while (ai_trav != nullptr) {\n         if (ai_trav->ai_family == AF_INET) {\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n+            req->vAddr->emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n         }\n         if (ai_trav->ai_family == AF_INET6) {\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\n             const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\n-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+            req->vAddr->emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n         }\n         ai_trav = ai_trav->ai_next;\n     }\n     freeaddrinfo(ai_res);\n \n+    LOCK(gai_mutex);\n+    req->complete = true;\n+}\n+\n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    std::vector<CNetAddr> resolved_addresses;\n+    struct GAIRequest req = {.allow_lookup = allow_lookup, .name = name, .vAddr = &resolved_addresses};\n+\n+    if (allow_lookup) {\n+        // Execute the DNS lookup in another thread and check it periodically for completion.\n+        // After sufficiently waiting, abandon the thread entirely. The user's system\n+        // may wait forever for a DNS response that never returns.\n+        std::thread thread(AsyncGetAddrInfo, &req);\n+        int checks{0};\n+        while (true)\n+        {\n+            {\n+                LOCK(gai_mutex);\n+                if (req.complete) break;\n+            }\n+            // Check every 100ms for 2 seconds\n+            if (++checks > 20) break;\n+            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n+        }\n+        thread.detach();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1183533168",
      "id" : 1183533168,
      "line" : 118,
      "node_id" : "PRRC_kwDOABII585Gi0hw",
      "original_commit_id" : "49b909cce78c3d45afc423fe3a148b84dc00cb76",
      "original_line" : 118,
      "original_position" : 78,
      "original_start_line" : 106,
      "path" : "src/netbase.cpp",
      "position" : 78,
      "pull_request_review_id" : 1410650646,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183533168/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 106,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-05-03T10:55:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183533168",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1183690806"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183690806"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Performance wise, create a new thread per lookup is quite bad. Should use a workers pool instead.\r\n\r\nI have implemented a generic one for #26966 (https://github.com/bitcoin/bitcoin/pull/26966/commits/f448668f473675915fcebf0e1bd3d73dcb1881af) that could also use here. It also support callback futures so you can remove the costly active wait as well.\r\n\r\nGive it a look and if you like it, could decouple it into a standalone PR so we could start using it in both PRs.",
      "commit_id" : "49b909cce78c3d45afc423fe3a148b84dc00cb76",
      "created_at" : "2023-05-03T13:30:09Z",
      "diff_hunk" : "@@ -68,17 +79,49 @@ std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_loo\n     while (ai_trav != nullptr) {\n         if (ai_trav->ai_family == AF_INET) {\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n+            req->vAddr->emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n         }\n         if (ai_trav->ai_family == AF_INET6) {\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\n             const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\n-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+            req->vAddr->emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n         }\n         ai_trav = ai_trav->ai_next;\n     }\n     freeaddrinfo(ai_res);\n \n+    LOCK(gai_mutex);\n+    req->complete = true;\n+}\n+\n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    std::vector<CNetAddr> resolved_addresses;\n+    struct GAIRequest req = {.allow_lookup = allow_lookup, .name = name, .vAddr = &resolved_addresses};\n+\n+    if (allow_lookup) {\n+        // Execute the DNS lookup in another thread and check it periodically for completion.\n+        // After sufficiently waiting, abandon the thread entirely. The user's system\n+        // may wait forever for a DNS response that never returns.\n+        std::thread thread(AsyncGetAddrInfo, &req);\n+        int checks{0};\n+        while (true)\n+        {\n+            {\n+                LOCK(gai_mutex);\n+                if (req.complete) break;\n+            }\n+            // Check every 100ms for 2 seconds\n+            if (++checks > 20) break;\n+            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n+        }\n+        thread.detach();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1183690806",
      "id" : 1183690806,
      "line" : 118,
      "node_id" : "PRRC_kwDOABII585GjbA2",
      "original_commit_id" : "49b909cce78c3d45afc423fe3a148b84dc00cb76",
      "original_line" : 118,
      "original_position" : 78,
      "original_start_line" : 102,
      "path" : "src/netbase.cpp",
      "position" : 78,
      "pull_request_review_id" : 1410903312,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183690806/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 102,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-05-03T13:34:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1183690806",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Still waiting for CI to finish but I removed the need for internet access by looking up the name `\"localhost\"` instead. That is a non-numeric lookup that `getaddrinfo()` can do without the actual DNS. I think I also fixed the ipv6 test issue:\r\n\r\n(run in docker with no ipv6)\r\n\r\n```\r\ntest/netbase_tests.cpp(161): Entering test case \"dns_lookup\"\r\ntest/netbase_tests.cpp(165): info: check LookupHost(\"localhost\", addr, true) has passed\r\ntest/netbase_tests.cpp(169): info: check Lookup(\"127.0.0.1:12345\", serv, 9050, true) has passed\r\ntest/netbase_tests.cpp(176): warning: in \"netbase_tests/dns_lookup\": Skipping IPv6 check\r\ntest/netbase_tests.cpp(161): Leaving test case \"dns_lookup\"; testing time: 217012us\r\n```\r\n\r\nI'm interested in following the worker pool idea to make these requests async as opposed to new threads.",
      "created_at" : "2023-05-03T19:15:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#issuecomment-1533568647",
      "id" : 1533568647,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27557",
      "node_id" : "IC_kwDOABII585baGaH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1533568647/reactions"
      },
      "updated_at" : "2023-05-03T20:02:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1533568647",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1184786408"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1184786408"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Afaict this won't work here, because the thread might not finish and then the pool would just get clogged (see comment about abandoning the thread).\r\n\r\nPerformance should also not really matter here since this doesn't happen that often and startup time for a thread vs. time of a DNS lookup is probably negligible.",
      "commit_id" : "4150942d2820e96d610f7ecab8c8935dcbb2d95a",
      "created_at" : "2023-05-04T09:40:31Z",
      "diff_hunk" : "@@ -68,17 +79,49 @@ std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_loo\n     while (ai_trav != nullptr) {\n         if (ai_trav->ai_family == AF_INET) {\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n+            req->vAddr->emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n         }\n         if (ai_trav->ai_family == AF_INET6) {\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\n             const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\n-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+            req->vAddr->emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n         }\n         ai_trav = ai_trav->ai_next;\n     }\n     freeaddrinfo(ai_res);\n \n+    LOCK(gai_mutex);\n+    req->complete = true;\n+}\n+\n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    std::vector<CNetAddr> resolved_addresses;\n+    struct GAIRequest req = {.allow_lookup = allow_lookup, .name = name, .vAddr = &resolved_addresses};\n+\n+    if (allow_lookup) {\n+        // Execute the DNS lookup in another thread and check it periodically for completion.\n+        // After sufficiently waiting, abandon the thread entirely. The user's system\n+        // may wait forever for a DNS response that never returns.\n+        std::thread thread(AsyncGetAddrInfo, &req);\n+        int checks{0};\n+        while (true)\n+        {\n+            {\n+                LOCK(gai_mutex);\n+                if (req.complete) break;\n+            }\n+            // Check every 100ms for 2 seconds\n+            if (++checks > 20) break;\n+            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n+        }\n+        thread.detach();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1184786408",
      "id" : 1184786408,
      "in_reply_to_id" : 1183690806,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Gnmfo",
      "original_commit_id" : "49b909cce78c3d45afc423fe3a148b84dc00cb76",
      "original_line" : 117,
      "original_position" : 78,
      "original_start_line" : 102,
      "path" : "src/netbase.cpp",
      "position" : null,
      "pull_request_review_id" : 1412727639,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1184786408/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-05-04T09:40:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1184786408",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1186063927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186063927"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Afaict this won't work here, because the thread might not finish and then the pool would just get clogged (see comment about abandoning the thread).\r\n\r\nk, `getaddrinfo` doesn't have a timeout and `getaddrinfo_a` seems to have a segfault. Cool..\r\n\r\n> Performance should also not really matter here since this doesn't happen that often and startup time for a thread vs. time of a DNS lookup is probably negligible.\r\n\r\nI was thinking more about context switching. Isn't this used for `OpenNetworkConnection` too? So, it would create a new thread for every connection attempt? (unless the lookups are numeric, which guess that is the rule here..).\r\n\r\nAnd, following the worst case scenario, what if the user call `addnode` a good number of times? we would get a lot of detached threads? (unless we set a limit for the amount of lookups that can be resolved in parallel).",
      "commit_id" : "4150942d2820e96d610f7ecab8c8935dcbb2d95a",
      "created_at" : "2023-05-05T12:57:18Z",
      "diff_hunk" : "@@ -68,17 +79,49 @@ std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_loo\n     while (ai_trav != nullptr) {\n         if (ai_trav->ai_family == AF_INET) {\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n+            req->vAddr->emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n         }\n         if (ai_trav->ai_family == AF_INET6) {\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\n             const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\n-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+            req->vAddr->emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n         }\n         ai_trav = ai_trav->ai_next;\n     }\n     freeaddrinfo(ai_res);\n \n+    LOCK(gai_mutex);\n+    req->complete = true;\n+}\n+\n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    std::vector<CNetAddr> resolved_addresses;\n+    struct GAIRequest req = {.allow_lookup = allow_lookup, .name = name, .vAddr = &resolved_addresses};\n+\n+    if (allow_lookup) {\n+        // Execute the DNS lookup in another thread and check it periodically for completion.\n+        // After sufficiently waiting, abandon the thread entirely. The user's system\n+        // may wait forever for a DNS response that never returns.\n+        std::thread thread(AsyncGetAddrInfo, &req);\n+        int checks{0};\n+        while (true)\n+        {\n+            {\n+                LOCK(gai_mutex);\n+                if (req.complete) break;\n+            }\n+            // Check every 100ms for 2 seconds\n+            if (++checks > 20) break;\n+            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n+        }\n+        thread.detach();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1186063927",
      "id" : 1186063927,
      "in_reply_to_id" : 1183690806,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585GseY3",
      "original_commit_id" : "49b909cce78c3d45afc423fe3a148b84dc00cb76",
      "original_line" : 117,
      "original_position" : 78,
      "original_start_line" : 102,
      "path" : "src/netbase.cpp",
      "position" : null,
      "pull_request_review_id" : 1414742032,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186063927/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-05-05T12:57:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186063927",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
         "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/furszy/followers",
         "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/furszy",
         "id" : 5377650,
         "login" : "furszy",
         "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
         "organizations_url" : "https://api.github.com/users/furszy/orgs",
         "received_events_url" : "https://api.github.com/users/furszy/received_events",
         "repos_url" : "https://api.github.com/users/furszy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/furszy"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1186077225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186077225"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> k, getaddrinfo doesn't have a timeout and getaddrinfo_a seems to have a segfault. Cool..\r\n\r\nYea one would think that making DNS requests in c++ would be a solved problem.\r\n\r\nAnyway, I'm also not sure about the approach here. The original issue was that we would block indefinitely while joining the DNS thread on shutdown (only happens if the user's system is broken I think?). I suggested to detach the dns thread if it doesn't join in a reasonable amount of time (would be fine, the OS will clean the thread up since we are about to exit anyway).\r\n\r\nThe approach here risks having threads hang around for the lifetime of a node, which seems worse than the occasional shutdown hang on broken systems.",
      "commit_id" : "4150942d2820e96d610f7ecab8c8935dcbb2d95a",
      "created_at" : "2023-05-05T13:10:18Z",
      "diff_hunk" : "@@ -68,17 +79,49 @@ std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_loo\n     while (ai_trav != nullptr) {\n         if (ai_trav->ai_family == AF_INET) {\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n+            req->vAddr->emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\n         }\n         if (ai_trav->ai_family == AF_INET6) {\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\n             const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\n-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n+            req->vAddr->emplace_back(s6->sin6_addr, s6->sin6_scope_id);\n         }\n         ai_trav = ai_trav->ai_next;\n     }\n     freeaddrinfo(ai_res);\n \n+    LOCK(gai_mutex);\n+    req->complete = true;\n+}\n+\n+std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_lookup)\n+{\n+    std::vector<CNetAddr> resolved_addresses;\n+    struct GAIRequest req = {.allow_lookup = allow_lookup, .name = name, .vAddr = &resolved_addresses};\n+\n+    if (allow_lookup) {\n+        // Execute the DNS lookup in another thread and check it periodically for completion.\n+        // After sufficiently waiting, abandon the thread entirely. The user's system\n+        // may wait forever for a DNS response that never returns.\n+        std::thread thread(AsyncGetAddrInfo, &req);\n+        int checks{0};\n+        while (true)\n+        {\n+            {\n+                LOCK(gai_mutex);\n+                if (req.complete) break;\n+            }\n+            // Check every 100ms for 2 seconds\n+            if (++checks > 20) break;\n+            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n+        }\n+        thread.detach();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#discussion_r1186077225",
      "id" : 1186077225,
      "in_reply_to_id" : 1183690806,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Gshop",
      "original_commit_id" : "49b909cce78c3d45afc423fe3a148b84dc00cb76",
      "original_line" : 117,
      "original_position" : 78,
      "original_start_line" : 102,
      "path" : "src/netbase.cpp",
      "position" : null,
      "pull_request_review_id" : 1414764285,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27557",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186077225/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-05-05T13:10:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1186077225",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "added call to `thread.join()` in the \"happy path\" so the only threads we should be abandoning are those that time out. Also setup the unit test to stub in a black hole for `getaddressinfo` to ensure the 2-second timeout is enforced. On my machine at least with thread and memory sanitizers I'm not getting any errors for the abandoned thread. I'm going to try some more experiments with a mainnet node as well.",
      "created_at" : "2023-05-05T17:16:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#issuecomment-1536552393",
      "id" : 1536552393,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27557",
      "node_id" : "IC_kwDOABII585ble3J",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1536552393/reactions"
      },
      "updated_at" : "2023-05-05T17:16:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1536552393",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "...got thread sanitizer errors running locally on main when my local DNS is black-holed. Fixed that with a shared pointer.",
      "created_at" : "2023-05-05T18:37:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27557#issuecomment-1536631559",
      "id" : 1536631559,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27557",
      "node_id" : "IC_kwDOABII585blyMH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1536631559/reactions"
      },
      "updated_at" : "2023-05-05T18:37:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1536631559",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   }
]
