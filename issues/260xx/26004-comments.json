[
   {
      "author_association" : "MEMBER",
      "body" : "cc @ryanofsky ",
      "created_at" : "2022-09-04T21:36:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26004#issuecomment-1236419642",
      "id" : 1236419642,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26004",
      "node_id" : "IC_kwDOABII585JskQ6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236419642/reactions"
      },
      "updated_at" : "2022-09-04T21:36:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236419642",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "(For the mentioned bug, see https://github.com/bitcoin-core/gui/issues/661 and fix in #26005)",
      "created_at" : "2022-09-04T21:39:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26004#issuecomment-1236420006",
      "id" : 1236420006,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26004",
      "node_id" : "IC_kwDOABII585JskWm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236420006/reactions"
      },
      "updated_at" : "2022-09-04T21:39:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236420006",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch, and I think it would be good to do something to prevent this. Few ideas:\r\n\r\n1. Result class could drop `operator bool` and force you to write `if (result.has_value())` instead of `if (result)`. I don't thnk this would really solve problem because `Result<unique_ptr>` could still be assigned `nullptr`, and `result.has_value()` would still return true in that case.\r\n\r\n2. Return type could be changed from `Result<unique_ptr>` to `Result<not_null<unique_ptr>>` or `Result<nn_unique_ptr>` using a not-null helper class like one from https://github.com/bitwizeshift/not_null#references. I think this would be a potentially good solution because it would make it a compile time error to assign a `nullptr` or plain `unique_ptr` to the result. Only a non-nullable pointer could be assigned to avoid the compiler error.\r\n\r\n3. Could introduce `util::NullableResult` to complement `util::Result`. Nullable result class would have the same behavior as normal result class except `operator bool` would be implemented as `return has_value() && value()` instead of `return has_value()`. The name `NullableResult` would clearly communicate that a null result is possible and not an error, and `bool` operator would make it easier to check for.\r\n\r\n4. Could do nothing. `Result<unique_ptr>{nullptr}` being true is not any different from `optional<unique_ptr>{nullptr}` being true or `optional<int>{0}` being true or `const char* s{\"\"}` being true. It's kind of just how indirection works in C/C++ with multiple layers of indirection.\r\n\r\nI tend to think (2) is nicest solution, but I'm not sure if there are other use-cases for non-nullable pointers that would justify the complexity since they don't seem completely trivial to implement. I don't like solution (1) because it creates an unnecessary difference between `std::optional` and `util::Result` and IMO would makes code using the result class look ugly. Solution (3) I think could be implemented in a few lines and I think would be better than the status quo, because it communicates that the value can be null and makes it easy to check for, even if it doesn't prevent null from being assigned.",
      "created_at" : "2022-09-05T11:45:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26004#issuecomment-1236893775",
      "id" : 1236893775,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26004",
      "node_id" : "IC_kwDOABII585JuYBP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236893775/reactions"
      },
      "updated_at" : "2022-09-05T11:45:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236893775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "See also #24423 ",
      "created_at" : "2022-09-05T12:12:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26004#issuecomment-1236923791",
      "id" : 1236923791,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26004",
      "node_id" : "IC_kwDOABII585JufWP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236923791/reactions"
      },
      "updated_at" : "2022-09-05T12:12:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236923791",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> See also #24423\r\n\r\nForgot about that discussion. This does seem like a genuine use-case for `not_null`.\r\n\r\nAnother idea for the list:\r\n\r\n5. Could replace `Result<unique_ptr<Wallet>>` with `ResultPtr<Wallet>` where a new `ResultPtr` class basically acts like `unique_ptr` except it has a `util::Error` constructor so it can hold error information, and is always set to an error or non-null pointer, never a plain null pointer. `ResultPtr<Wallet>` would be semantically equivalent to `Result<not_null<unique_ptr<Wallet>>>` except it would have nicer syntax and not require double dereferencing to call wallet methods.",
      "created_at" : "2022-09-05T14:07:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26004#issuecomment-1237092999",
      "id" : 1237092999,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26004",
      "node_id" : "IC_kwDOABII585JvIqH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1237092999/reactions"
      },
      "updated_at" : "2022-09-05T14:07:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1237092999",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The issue with `not_null` seems to be that in some cases, it might not detect it until runtime, and then throw an exception - which would have been a bug in this case (https://github.com/bitcoin-core/gui/issues/661) too.\r\n\r\nCan we maybe throw an exception in debug builds, but in production builds simply treat nullptr assignments as clearing?",
      "created_at" : "2022-09-05T19:59:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26004#issuecomment-1237424824",
      "id" : 1237424824,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26004",
      "node_id" : "IC_kwDOABII585JwZq4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1237424824/reactions"
      },
      "updated_at" : "2022-09-05T19:59:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1237424824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">5. Could replace Result<unique_ptr<Wallet>> with ResultPtr<Wallet> where a new ResultPtr class basically acts like unique_ptr except it has a util::Error constructor so it can hold error information, and is always set to an error or non-null pointer, never a plain null pointer. ResultPtr<Wallet> would be semantically equivalent to Result<not_null<unique_ptr<Wallet>>> except it would have nicer syntax and not require double dereferencing to call wallet methods.\r\n\r\nWould this impede having a constant `Wallet` object per wallet?",
      "created_at" : "2022-09-05T20:29:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26004#issuecomment-1237441374",
      "id" : 1237441374,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26004",
      "node_id" : "IC_kwDOABII585Jwdte",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1237441374/reactions"
      },
      "updated_at" : "2022-09-05T20:29:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1237441374",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The issue with `not_null` seems to be that in some cases, it might not detect it until runtime, and then throw an exception - which would have been a bug in this case ([bitcoin-core/gui#661](https://github.com/bitcoin-core/gui/issues/661)) too.\r\n\r\nYes, we would want to use a strict not_null implementation that makes it a compile error to try to assign a nullable pointer to a non-nullable one. Strict non_null pointers can only be initialized with special constructors, and if you call those constructors correctly, the compiler can guarantee the pointers are safe to dereference after that. The benefit of this is that it is easier to verify not_null pointers are constructed properly than it is to verify nullable pointers are safe to dereference every place they are  dereferenced.\r\n\r\n> Can we maybe throw an exception in debug builds, but in production builds simply treat nullptr assignments as clearing?\r\n\r\nIt would be an implementation detail of the not_null class, but it could provide a constructor that only throws in debug builds. \r\n\r\n> Would this impede having a constant `Wallet` object per wallet?\r\n\r\nI'm not even sure we have this currently. `interfaces::Wallet` objects are disposable wrappers around a more permanent `wallet::CWallet` object, but I think as long as pointers can be moved from, then object lifetimes / constness should be unaffected by things proposed here.",
      "created_at" : "2022-09-06T16:34:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26004#issuecomment-1238391401",
      "id" : 1238391401,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26004",
      "node_id" : "IC_kwDOABII585J0Fpp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1238391401/reactions"
      },
      "updated_at" : "2022-09-06T16:34:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1238391401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">I'm not even sure we have this currently. interfaces::Wallet objects are disposable wrappers around a more permanent wallet::CWallet object, but I think as long as pointers can be moved from, then object lifetimes / constness should be unaffected by things proposed here.\r\n\r\nWe don't, but I think we should. It would be nice to put the abstraction interface between all accesses - trying to make CWallet itself abstract has proven impractical (trying to add support for a Lightning wallet).",
      "created_at" : "2022-09-06T19:02:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/26004#issuecomment-1238539877",
      "id" : 1238539877,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26004",
      "node_id" : "IC_kwDOABII585J0p5l",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1238539877/reactions"
      },
      "updated_at" : "2022-09-06T19:02:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1238539877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   }
]
