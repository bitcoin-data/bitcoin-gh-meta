[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1735939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1735939"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The result stays DB_LOAD_OK here, so in case of corruptions in non-key/tx records, it silently continues also with the upgrading below at line 458.\nIs this desired behavior? \n\nOr should we set some flag, log a message and show a popup to the user (`uiInterface.ThreadSafeMessageBox`) at the end of the function that recovery has taken place and that some wallet data (such as address book entries, details can be found in debug.log...) might be corrupt?\n",
      "commit_id" : "d0b3e77a084ecffae35961994fc0964b37a79f04",
      "created_at" : "2012-10-02T06:34:32Z",
      "diff_hunk" : "@@ -222,189 +426,39 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 return DB_CORRUPT;\n             }\n \n-            // Unserialize\n-            // Taking advantage of the fact that pair serialization\n-            // is just the two items serialized one after the other\n-            string strType;\n-            ssKey >> strType;\n-            if (strType == \"name\")\n-            {\n-                string strAddress;\n-                ssKey >> strAddress;\n-                ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()];\n-            }\n-            else if (strType == \"tx\")\n-            {\n-                uint256 hash;\n-                ssKey >> hash;\n-                CWalletTx& wtx = pwallet->mapWallet[hash];\n-                ssValue >> wtx;\n-                wtx.BindWallet(pwallet);\n-\n-                if (wtx.GetHash() != hash)\n-                    printf(\"Error in wallet.dat, hash mismatch\\n\");\n-\n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        char fTmp;\n-                        char fUnused;\n-                        ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n-                        printf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\\n\", wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount.c_str(), hash.ToString().c_str());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        printf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString().c_str());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    vWalletUpgrade.push_back(hash);\n-                }\n-\n-                if (wtx.nOrderPos == -1)\n-                    fAnyUnordered = true;\n-\n-                //// debug print\n-                //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n-                //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n-                //    wtx.vout[0].nValue,\n-                //    DateTimeStrFormat(\"%x %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n-                //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n-                //    wtx.mapValue[\"message\"].c_str());\n-            }\n-            else if (strType == \"acentry\")\n-            {\n-                string strAccount;\n-                ssKey >> strAccount;\n-                uint64 nNumber;\n-                ssKey >> nNumber;\n-                if (nNumber > nAccountingEntryNumber)\n-                    nAccountingEntryNumber = nNumber;\n-\n-                if (!fAnyUnordered)\n-                {\n-                    CAccountingEntry acentry;\n-                    ssValue >> acentry;\n-                    if (acentry.nOrderPos == -1)\n-                        fAnyUnordered = true;\n-                }\n-            }\n-            else if (strType == \"key\" || strType == \"wkey\")\n-            {\n-                vector<unsigned char> vchPubKey;\n-                ssKey >> vchPubKey;\n-                CKey key;\n-                if (strType == \"key\")\n-                {\n-                    CPrivKey pkey;\n-                    ssValue >> pkey;\n-                    key.SetPubKey(vchPubKey);\n-                    key.SetPrivKey(pkey);\n-                    if (key.GetPubKey() != vchPubKey)\n-                    {\n-                        printf(\"Error reading wallet database: CPrivKey pubkey inconsistency\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                    if (!key.IsValid())\n-                    {\n-                        printf(\"Error reading wallet database: invalid CPrivKey\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                }\n-                else\n-                {\n-                    CWalletKey wkey;\n-                    ssValue >> wkey;\n-                    key.SetPubKey(vchPubKey);\n-                    key.SetPrivKey(wkey.vchPrivKey);\n-                    if (key.GetPubKey() != vchPubKey)\n-                    {\n-                        printf(\"Error reading wallet database: CWalletKey pubkey inconsistency\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                    if (!key.IsValid())\n-                    {\n-                        printf(\"Error reading wallet database: invalid CWalletKey\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                }\n-                if (!pwallet->LoadKey(key))\n-                {\n-                    printf(\"Error reading wallet database: LoadKey failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-            }\n-            else if (strType == \"mkey\")\n-            {\n-                unsigned int nID;\n-                ssKey >> nID;\n-                CMasterKey kMasterKey;\n-                ssValue >> kMasterKey;\n-                if(pwallet->mapMasterKeys.count(nID) != 0)\n-                {\n-                    printf(\"Error reading wallet database: duplicate CMasterKey id %u\\n\", nID);\n-                    return DB_CORRUPT;\n-                }\n-                pwallet->mapMasterKeys[nID] = kMasterKey;\n-                if (pwallet->nMasterKeyMaxID < nID)\n-                    pwallet->nMasterKeyMaxID = nID;\n-            }\n-            else if (strType == \"ckey\")\n-            {\n-                vector<unsigned char> vchPubKey;\n-                ssKey >> vchPubKey;\n-                vector<unsigned char> vchPrivKey;\n-                ssValue >> vchPrivKey;\n-                if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n-                {\n-                    printf(\"Error reading wallet database: LoadCryptedKey failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-                fIsEncrypted = true;\n-            }\n-            else if (strType == \"defaultkey\")\n-            {\n-                ssValue >> pwallet->vchDefaultKey;\n-            }\n-            else if (strType == \"pool\")\n-            {\n-                int64 nIndex;\n-                ssKey >> nIndex;\n-                pwallet->setKeyPool.insert(nIndex);\n-            }\n-            else if (strType == \"version\")\n-            {\n-                ssValue >> nFileVersion;\n-                if (nFileVersion == 10300)\n-                    nFileVersion = 300;\n-            }\n-            else if (strType == \"cscript\")\n-            {\n-                uint160 hash;\n-                ssKey >> hash;\n-                CScript script;\n-                ssValue >> script;\n-                if (!pwallet->LoadCScript(script))\n-                {\n-                    printf(\"Error reading wallet database: LoadCScript failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-            }\n-            else if (strType == \"orderposnext\")\n+            // Try to be tolerant of single corrupt records:\n+            string strType, strErr;\n+            if (!ReadKeyValue(pwallet, ssKey, ssValue, nFileVersion,\n+                              vWalletUpgrade, fIsEncrypted, fAnyUnordered, strType, strErr))\n             {\n-                ssValue >> pwallet->nOrderPosNext;\n+                // losing keys is considered a catastrophic error, anything else\n+                // we assume the user can live with:\n+                if (IsKeyType(strType))\n+                    result = DB_CORRUPT;\n+                else if (strType == \"tx\")\n+                    // Rescan if there is a bad transaction record:\n+                    SoftSetBoolArg(\"-rescan\", true);\n+                // Leave other errors alone, if we try to fix them we might make things worse.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1735939",
      "id" : 1735939,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzU5Mzk=",
      "original_commit_id" : "959b9ad92694f44e1e234b470ea6539ca8188027",
      "original_line" : null,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/walletdb.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1735939/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-10-08T21:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1735939",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1738639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738639"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "An earlier version of this code extended DBErrors to have different levels of error, but the code started getting complicated and confusing (e.g. you could have a wallet that had a key error, a non-key error, AND needed upgrading... maybe DBErrors should be a bitmask, etc).\n\nBut telling the user that there is something wrong is definitely a good idea, I'll make that so.\n",
      "commit_id" : "d0b3e77a084ecffae35961994fc0964b37a79f04",
      "created_at" : "2012-10-02T13:45:13Z",
      "diff_hunk" : "@@ -222,189 +426,39 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 return DB_CORRUPT;\n             }\n \n-            // Unserialize\n-            // Taking advantage of the fact that pair serialization\n-            // is just the two items serialized one after the other\n-            string strType;\n-            ssKey >> strType;\n-            if (strType == \"name\")\n-            {\n-                string strAddress;\n-                ssKey >> strAddress;\n-                ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()];\n-            }\n-            else if (strType == \"tx\")\n-            {\n-                uint256 hash;\n-                ssKey >> hash;\n-                CWalletTx& wtx = pwallet->mapWallet[hash];\n-                ssValue >> wtx;\n-                wtx.BindWallet(pwallet);\n-\n-                if (wtx.GetHash() != hash)\n-                    printf(\"Error in wallet.dat, hash mismatch\\n\");\n-\n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        char fTmp;\n-                        char fUnused;\n-                        ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n-                        printf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\\n\", wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount.c_str(), hash.ToString().c_str());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        printf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString().c_str());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    vWalletUpgrade.push_back(hash);\n-                }\n-\n-                if (wtx.nOrderPos == -1)\n-                    fAnyUnordered = true;\n-\n-                //// debug print\n-                //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n-                //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n-                //    wtx.vout[0].nValue,\n-                //    DateTimeStrFormat(\"%x %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n-                //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n-                //    wtx.mapValue[\"message\"].c_str());\n-            }\n-            else if (strType == \"acentry\")\n-            {\n-                string strAccount;\n-                ssKey >> strAccount;\n-                uint64 nNumber;\n-                ssKey >> nNumber;\n-                if (nNumber > nAccountingEntryNumber)\n-                    nAccountingEntryNumber = nNumber;\n-\n-                if (!fAnyUnordered)\n-                {\n-                    CAccountingEntry acentry;\n-                    ssValue >> acentry;\n-                    if (acentry.nOrderPos == -1)\n-                        fAnyUnordered = true;\n-                }\n-            }\n-            else if (strType == \"key\" || strType == \"wkey\")\n-            {\n-                vector<unsigned char> vchPubKey;\n-                ssKey >> vchPubKey;\n-                CKey key;\n-                if (strType == \"key\")\n-                {\n-                    CPrivKey pkey;\n-                    ssValue >> pkey;\n-                    key.SetPubKey(vchPubKey);\n-                    key.SetPrivKey(pkey);\n-                    if (key.GetPubKey() != vchPubKey)\n-                    {\n-                        printf(\"Error reading wallet database: CPrivKey pubkey inconsistency\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                    if (!key.IsValid())\n-                    {\n-                        printf(\"Error reading wallet database: invalid CPrivKey\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                }\n-                else\n-                {\n-                    CWalletKey wkey;\n-                    ssValue >> wkey;\n-                    key.SetPubKey(vchPubKey);\n-                    key.SetPrivKey(wkey.vchPrivKey);\n-                    if (key.GetPubKey() != vchPubKey)\n-                    {\n-                        printf(\"Error reading wallet database: CWalletKey pubkey inconsistency\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                    if (!key.IsValid())\n-                    {\n-                        printf(\"Error reading wallet database: invalid CWalletKey\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                }\n-                if (!pwallet->LoadKey(key))\n-                {\n-                    printf(\"Error reading wallet database: LoadKey failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-            }\n-            else if (strType == \"mkey\")\n-            {\n-                unsigned int nID;\n-                ssKey >> nID;\n-                CMasterKey kMasterKey;\n-                ssValue >> kMasterKey;\n-                if(pwallet->mapMasterKeys.count(nID) != 0)\n-                {\n-                    printf(\"Error reading wallet database: duplicate CMasterKey id %u\\n\", nID);\n-                    return DB_CORRUPT;\n-                }\n-                pwallet->mapMasterKeys[nID] = kMasterKey;\n-                if (pwallet->nMasterKeyMaxID < nID)\n-                    pwallet->nMasterKeyMaxID = nID;\n-            }\n-            else if (strType == \"ckey\")\n-            {\n-                vector<unsigned char> vchPubKey;\n-                ssKey >> vchPubKey;\n-                vector<unsigned char> vchPrivKey;\n-                ssValue >> vchPrivKey;\n-                if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n-                {\n-                    printf(\"Error reading wallet database: LoadCryptedKey failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-                fIsEncrypted = true;\n-            }\n-            else if (strType == \"defaultkey\")\n-            {\n-                ssValue >> pwallet->vchDefaultKey;\n-            }\n-            else if (strType == \"pool\")\n-            {\n-                int64 nIndex;\n-                ssKey >> nIndex;\n-                pwallet->setKeyPool.insert(nIndex);\n-            }\n-            else if (strType == \"version\")\n-            {\n-                ssValue >> nFileVersion;\n-                if (nFileVersion == 10300)\n-                    nFileVersion = 300;\n-            }\n-            else if (strType == \"cscript\")\n-            {\n-                uint160 hash;\n-                ssKey >> hash;\n-                CScript script;\n-                ssValue >> script;\n-                if (!pwallet->LoadCScript(script))\n-                {\n-                    printf(\"Error reading wallet database: LoadCScript failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-            }\n-            else if (strType == \"orderposnext\")\n+            // Try to be tolerant of single corrupt records:\n+            string strType, strErr;\n+            if (!ReadKeyValue(pwallet, ssKey, ssValue, nFileVersion,\n+                              vWalletUpgrade, fIsEncrypted, fAnyUnordered, strType, strErr))\n             {\n-                ssValue >> pwallet->nOrderPosNext;\n+                // losing keys is considered a catastrophic error, anything else\n+                // we assume the user can live with:\n+                if (IsKeyType(strType))\n+                    result = DB_CORRUPT;\n+                else if (strType == \"tx\")\n+                    // Rescan if there is a bad transaction record:\n+                    SoftSetBoolArg(\"-rescan\", true);\n+                // Leave other errors alone, if we try to fix them we might make things worse.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1738639",
      "id" : 1738639,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzg2Mzk=",
      "original_commit_id" : "959b9ad92694f44e1e234b470ea6539ca8188027",
      "original_line" : null,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/walletdb.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738639/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-10-08T21:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1738639",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1740914"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740914"
         }
      },
      "author_association" : "NONE",
      "body" : "I like the idea to have bitmasks to handle error codes btw.\n",
      "commit_id" : "d0b3e77a084ecffae35961994fc0964b37a79f04",
      "created_at" : "2012-10-02T17:01:52Z",
      "diff_hunk" : "@@ -222,189 +426,39 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 return DB_CORRUPT;\n             }\n \n-            // Unserialize\n-            // Taking advantage of the fact that pair serialization\n-            // is just the two items serialized one after the other\n-            string strType;\n-            ssKey >> strType;\n-            if (strType == \"name\")\n-            {\n-                string strAddress;\n-                ssKey >> strAddress;\n-                ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()];\n-            }\n-            else if (strType == \"tx\")\n-            {\n-                uint256 hash;\n-                ssKey >> hash;\n-                CWalletTx& wtx = pwallet->mapWallet[hash];\n-                ssValue >> wtx;\n-                wtx.BindWallet(pwallet);\n-\n-                if (wtx.GetHash() != hash)\n-                    printf(\"Error in wallet.dat, hash mismatch\\n\");\n-\n-                // Undo serialize changes in 31600\n-                if (31404 <= wtx.fTimeReceivedIsTxTime && wtx.fTimeReceivedIsTxTime <= 31703)\n-                {\n-                    if (!ssValue.empty())\n-                    {\n-                        char fTmp;\n-                        char fUnused;\n-                        ssValue >> fTmp >> fUnused >> wtx.strFromAccount;\n-                        printf(\"LoadWallet() upgrading tx ver=%d %d '%s' %s\\n\", wtx.fTimeReceivedIsTxTime, fTmp, wtx.strFromAccount.c_str(), hash.ToString().c_str());\n-                        wtx.fTimeReceivedIsTxTime = fTmp;\n-                    }\n-                    else\n-                    {\n-                        printf(\"LoadWallet() repairing tx ver=%d %s\\n\", wtx.fTimeReceivedIsTxTime, hash.ToString().c_str());\n-                        wtx.fTimeReceivedIsTxTime = 0;\n-                    }\n-                    vWalletUpgrade.push_back(hash);\n-                }\n-\n-                if (wtx.nOrderPos == -1)\n-                    fAnyUnordered = true;\n-\n-                //// debug print\n-                //printf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n-                //printf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n-                //    wtx.vout[0].nValue,\n-                //    DateTimeStrFormat(\"%x %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n-                //    wtx.hashBlock.ToString().substr(0,20).c_str(),\n-                //    wtx.mapValue[\"message\"].c_str());\n-            }\n-            else if (strType == \"acentry\")\n-            {\n-                string strAccount;\n-                ssKey >> strAccount;\n-                uint64 nNumber;\n-                ssKey >> nNumber;\n-                if (nNumber > nAccountingEntryNumber)\n-                    nAccountingEntryNumber = nNumber;\n-\n-                if (!fAnyUnordered)\n-                {\n-                    CAccountingEntry acentry;\n-                    ssValue >> acentry;\n-                    if (acentry.nOrderPos == -1)\n-                        fAnyUnordered = true;\n-                }\n-            }\n-            else if (strType == \"key\" || strType == \"wkey\")\n-            {\n-                vector<unsigned char> vchPubKey;\n-                ssKey >> vchPubKey;\n-                CKey key;\n-                if (strType == \"key\")\n-                {\n-                    CPrivKey pkey;\n-                    ssValue >> pkey;\n-                    key.SetPubKey(vchPubKey);\n-                    key.SetPrivKey(pkey);\n-                    if (key.GetPubKey() != vchPubKey)\n-                    {\n-                        printf(\"Error reading wallet database: CPrivKey pubkey inconsistency\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                    if (!key.IsValid())\n-                    {\n-                        printf(\"Error reading wallet database: invalid CPrivKey\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                }\n-                else\n-                {\n-                    CWalletKey wkey;\n-                    ssValue >> wkey;\n-                    key.SetPubKey(vchPubKey);\n-                    key.SetPrivKey(wkey.vchPrivKey);\n-                    if (key.GetPubKey() != vchPubKey)\n-                    {\n-                        printf(\"Error reading wallet database: CWalletKey pubkey inconsistency\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                    if (!key.IsValid())\n-                    {\n-                        printf(\"Error reading wallet database: invalid CWalletKey\\n\");\n-                        return DB_CORRUPT;\n-                    }\n-                }\n-                if (!pwallet->LoadKey(key))\n-                {\n-                    printf(\"Error reading wallet database: LoadKey failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-            }\n-            else if (strType == \"mkey\")\n-            {\n-                unsigned int nID;\n-                ssKey >> nID;\n-                CMasterKey kMasterKey;\n-                ssValue >> kMasterKey;\n-                if(pwallet->mapMasterKeys.count(nID) != 0)\n-                {\n-                    printf(\"Error reading wallet database: duplicate CMasterKey id %u\\n\", nID);\n-                    return DB_CORRUPT;\n-                }\n-                pwallet->mapMasterKeys[nID] = kMasterKey;\n-                if (pwallet->nMasterKeyMaxID < nID)\n-                    pwallet->nMasterKeyMaxID = nID;\n-            }\n-            else if (strType == \"ckey\")\n-            {\n-                vector<unsigned char> vchPubKey;\n-                ssKey >> vchPubKey;\n-                vector<unsigned char> vchPrivKey;\n-                ssValue >> vchPrivKey;\n-                if (!pwallet->LoadCryptedKey(vchPubKey, vchPrivKey))\n-                {\n-                    printf(\"Error reading wallet database: LoadCryptedKey failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-                fIsEncrypted = true;\n-            }\n-            else if (strType == \"defaultkey\")\n-            {\n-                ssValue >> pwallet->vchDefaultKey;\n-            }\n-            else if (strType == \"pool\")\n-            {\n-                int64 nIndex;\n-                ssKey >> nIndex;\n-                pwallet->setKeyPool.insert(nIndex);\n-            }\n-            else if (strType == \"version\")\n-            {\n-                ssValue >> nFileVersion;\n-                if (nFileVersion == 10300)\n-                    nFileVersion = 300;\n-            }\n-            else if (strType == \"cscript\")\n-            {\n-                uint160 hash;\n-                ssKey >> hash;\n-                CScript script;\n-                ssValue >> script;\n-                if (!pwallet->LoadCScript(script))\n-                {\n-                    printf(\"Error reading wallet database: LoadCScript failed\\n\");\n-                    return DB_CORRUPT;\n-                }\n-            }\n-            else if (strType == \"orderposnext\")\n+            // Try to be tolerant of single corrupt records:\n+            string strType, strErr;\n+            if (!ReadKeyValue(pwallet, ssKey, ssValue, nFileVersion,\n+                              vWalletUpgrade, fIsEncrypted, fAnyUnordered, strType, strErr))\n             {\n-                ssValue >> pwallet->nOrderPosNext;\n+                // losing keys is considered a catastrophic error, anything else\n+                // we assume the user can live with:\n+                if (IsKeyType(strType))\n+                    result = DB_CORRUPT;\n+                else if (strType == \"tx\")\n+                    // Rescan if there is a bad transaction record:\n+                    SoftSetBoolArg(\"-rescan\", true);\n+                // Leave other errors alone, if we try to fix them we might make things worse.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1740914",
      "id" : 1740914,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDA5MTQ=",
      "original_commit_id" : "959b9ad92694f44e1e234b470ea6539ca8188027",
      "original_line" : null,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/walletdb.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740914/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-10-08T21:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1740914",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=4",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "node_id" : "MDQ6VXNlcjE0MTk2NDk=",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1752512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752512"
         }
      },
      "author_association" : "NONE",
      "body" : "If this process takes a few seconds (or more), it's IMO worth adding a `uiInterface.InitMessage(_(\"Verifying database integrity...\"));` message here.\n",
      "commit_id" : "d0b3e77a084ecffae35961994fc0964b37a79f04",
      "created_at" : "2012-10-03T17:07:55Z",
      "diff_hunk" : "@@ -480,7 +489,34 @@ bool AppInit2()\n \n     int64 nStart;\n \n-    // ********************************************************* Step 5: network initialization\n+    // ********************************************************* Step 5: verify database integrity\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1752512",
      "id" : 1752512,
      "line" : 492,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1MTI=",
      "original_commit_id" : "648e148a7ef97251befc7592dc3c3f62a6a78c24",
      "original_line" : null,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 52,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752512/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-10-08T21:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1752512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=4",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "node_id" : "MDQ6VXNlcjE0MTk2NDk=",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I know you will for sure dislike the following comment, but I'll try for the last time (you won't get any further comments on strings in your pulls, if you want) as the brave knight for unified string usage ^^. Can you change your Warning messages to the following format:\n\n\"Warning: First sentence! Second sentence.\"\n- start with `Warning:`\n- First sentence (if a sentence) finished with a `!`\n- Further sentences finished with a `.`\n",
      "created_at" : "2012-10-03T17:15:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9114236",
      "id" : 9114236,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1895",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDkxMTQyMzY=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9114236/reactions"
      },
      "updated_at" : "2012-10-03T17:15:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9114236",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=4",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "node_id" : "MDQ6VXNlcjE0MTk2NDk=",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Diapolo : good idea on the Verifying message.  And ok, I'll change the first period to an exclamation mark.\n\nI'm finding serious bugs doing more testing; writing here so I don't lose track of them:\n\n1) Getting a crash on my main wallet, bdb complaining about out of memory (out of mutexes).\n\n2) Getting this weirdness switching from newer bitcoind to older:\n 10/04/12 14:16:00 nFileVersion = 70003\n 10/04/12 14:16:00 Performing wallet upgrade to 60000\n\n3) Crash-at-shutdown due to the printf-in-global-destructor bug\n",
      "created_at" : "2012-10-04T14:36:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9143425",
      "id" : 9143425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1895",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDkxNDM0MjU=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9143425/reactions"
      },
      "updated_at" : "2012-10-04T14:36:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9143425",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated to not \"pre-verify\" blkindex.dat which fixes the 'out of mutexes' problem (looks like bdb does not clean up after a ->verify() ?), pick up some changes from @jgarzik version of DBEnv::RemoveDB (kept RemoveDB as the name, though, since it removes a database not a dbenv), and tweaked Warning! messages.\n\nI'll investigate the downgrade weirdness separately, I'm afraid that might be another bug introduced in 0.7.0.\n",
      "created_at" : "2012-10-04T19:45:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9154474",
      "id" : 9154474,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1895",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDkxNTQ0NzQ=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9154474/reactions"
      },
      "updated_at" : "2012-10-04T19:58:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9154474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1767049"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767049"
         }
      },
      "author_association" : "MEMBER",
      "body" : "My god... is that was is necessary to recover from BDB? Manually parse the hex dump created by a library?\n\nI want to get rid of BDB yesterday.\n",
      "commit_id" : "d0b3e77a084ecffae35961994fc0964b37a79f04",
      "created_at" : "2012-10-04T21:08:59Z",
      "diff_hunk" : "@@ -141,6 +141,75 @@ void CDBEnv::MakeMock()\n     fMockDb = true;\n }\n \n+CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDBEnv& dbenv, std::string strFile))\n+{\n+    LOCK(cs_db);\n+    assert(mapFileUseCount.count(strFile) == 0);\n+\n+    try {\n+        Db db(&dbenv, 0);\n+        int result = db.verify(strFile.c_str(), NULL, NULL, 0);\n+        if (result == 0)\n+            return VERIFY_OK;\n+    }\n+    catch (DbException &e) {\n+        if (recoverFunc == NULL)\n+            return RECOVER_FAIL;\n+    }\n+\n+    // Try to recover:\n+    bool fRecovered = (*recoverFunc)(*this, strFile);\n+    return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n+}\n+\n+bool CDBEnv::Salvage(std::string strFile, bool fAggressive,\n+                     std::vector<CDBEnv::KeyValPair >& vResult)\n+{\n+    LOCK(cs_db);\n+    assert(mapFileUseCount.count(strFile) == 0);\n+\n+    u_int32_t flags = DB_SALVAGE;\n+    if (fAggressive) flags |= DB_AGGRESSIVE;\n+\n+    stringstream strDump;\n+\n+    int result = 0;\n+    try {\n+        Db db(&dbenv, 0);\n+        result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n+    }\n+    catch (DbException& e) {\n+        printf(\"ERROR: db salvage failed\\n\");\n+        return false;\n+    }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1767049",
      "id" : 1767049,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NjcwNDk=",
      "original_commit_id" : "86d793ba8d2ab487354269ca3430d3bba1216655",
      "original_line" : null,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/db.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767049/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-10-08T21:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1767049",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1769967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Recovery is never a nice process, if things are broken enough you always get to a level where you have to look at hexdumps of the raw file to salvage anything. At least you still get delimited keys/values here. \n\nIs it any prettier for leveldb, for example?\n",
      "commit_id" : "d0b3e77a084ecffae35961994fc0964b37a79f04",
      "created_at" : "2012-10-05T05:51:29Z",
      "diff_hunk" : "@@ -141,6 +141,75 @@ void CDBEnv::MakeMock()\n     fMockDb = true;\n }\n \n+CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDBEnv& dbenv, std::string strFile))\n+{\n+    LOCK(cs_db);\n+    assert(mapFileUseCount.count(strFile) == 0);\n+\n+    try {\n+        Db db(&dbenv, 0);\n+        int result = db.verify(strFile.c_str(), NULL, NULL, 0);\n+        if (result == 0)\n+            return VERIFY_OK;\n+    }\n+    catch (DbException &e) {\n+        if (recoverFunc == NULL)\n+            return RECOVER_FAIL;\n+    }\n+\n+    // Try to recover:\n+    bool fRecovered = (*recoverFunc)(*this, strFile);\n+    return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n+}\n+\n+bool CDBEnv::Salvage(std::string strFile, bool fAggressive,\n+                     std::vector<CDBEnv::KeyValPair >& vResult)\n+{\n+    LOCK(cs_db);\n+    assert(mapFileUseCount.count(strFile) == 0);\n+\n+    u_int32_t flags = DB_SALVAGE;\n+    if (fAggressive) flags |= DB_AGGRESSIVE;\n+\n+    stringstream strDump;\n+\n+    int result = 0;\n+    try {\n+        Db db(&dbenv, 0);\n+        result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n+    }\n+    catch (DbException& e) {\n+        printf(\"ERROR: db salvage failed\\n\");\n+        return false;\n+    }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1769967",
      "id" : 1769967,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Njk5Njc=",
      "original_commit_id" : "86d793ba8d2ab487354269ca3430d3bba1216655",
      "original_line" : null,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/db.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769967/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-10-08T21:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1769967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1770805"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770805"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There are no leveldb tools; I think 'recovery' is the same as 'opening', and 'crashing' is the same as 'closing' in LevelDB. There are a few flags to set the degree of checksum verification or paranoidness when opening, though.\n",
      "commit_id" : "d0b3e77a084ecffae35961994fc0964b37a79f04",
      "created_at" : "2012-10-05T08:45:06Z",
      "diff_hunk" : "@@ -141,6 +141,75 @@ void CDBEnv::MakeMock()\n     fMockDb = true;\n }\n \n+CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDBEnv& dbenv, std::string strFile))\n+{\n+    LOCK(cs_db);\n+    assert(mapFileUseCount.count(strFile) == 0);\n+\n+    try {\n+        Db db(&dbenv, 0);\n+        int result = db.verify(strFile.c_str(), NULL, NULL, 0);\n+        if (result == 0)\n+            return VERIFY_OK;\n+    }\n+    catch (DbException &e) {\n+        if (recoverFunc == NULL)\n+            return RECOVER_FAIL;\n+    }\n+\n+    // Try to recover:\n+    bool fRecovered = (*recoverFunc)(*this, strFile);\n+    return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n+}\n+\n+bool CDBEnv::Salvage(std::string strFile, bool fAggressive,\n+                     std::vector<CDBEnv::KeyValPair >& vResult)\n+{\n+    LOCK(cs_db);\n+    assert(mapFileUseCount.count(strFile) == 0);\n+\n+    u_int32_t flags = DB_SALVAGE;\n+    if (fAggressive) flags |= DB_AGGRESSIVE;\n+\n+    stringstream strDump;\n+\n+    int result = 0;\n+    try {\n+        Db db(&dbenv, 0);\n+        result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n+    }\n+    catch (DbException& e) {\n+        printf(\"ERROR: db salvage failed\\n\");\n+        return false;\n+    }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#discussion_r1770805",
      "id" : 1770805,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzA4MDU=",
      "original_commit_id" : "86d793ba8d2ab487354269ca3430d3bba1216655",
      "original_line" : null,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/db.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/1895",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770805/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2012-10-08T21:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1770805",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@gavinandresen Do you consider this pull ready now? \n",
      "created_at" : "2012-10-07T13:16:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9207890",
      "id" : 9207890,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1895",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDkyMDc4OTA=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207890/reactions"
      },
      "updated_at" : "2012-10-07T13:16:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207890",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, this is pull-ready now.\n\nI'd like some help with more thorough testing.\n",
      "created_at" : "2012-10-07T16:27:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9209597",
      "id" : 9209597,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1895",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDkyMDk1OTc=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209597/reactions"
      },
      "updated_at" : "2012-10-07T16:27:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209597",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "So, this can just cause your balance to go to zero with no notice if you're not watching the logs/console output carefully. Perhaps get getinfo error field should get something?\n\nHere is what I tested: \n\nUsing gavin's testnet-in-a-box wallet.\nzzuf -I 'wallet.dat' -s 0:1000 ./bitcoind -daemon=0\n\nSeed 0 fails with Db::open: Invalid argument.  In log I see Salvage(aggressive) found 2372 records.\nRestarting without fuzzing gives me a successful start but zero balance.\n\nRecover original wallet, then run starting with seed 1:\nzzuf -I 'wallet.dat' -s 1:1000 ./bitcoind -daemon=0\n\nFails at seed 1 with \"DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery\"\nNo salvage run.\n\nStarting without fuzzing gives the correct balance.\n\nStarting again at seed 2:\nzzuf -I 'wallet.dat' -s 2:1000 ./bitcoind -daemon=0\nThrows \"Bitcoin: Warning: wallet.dat corrupt, data salvaged! Original wallet.dat saved as wallet.{timestamp}.bak in /home/gmaxwell/.bitcoin/testnet3; if your balance or transactions are incorrect you should restore from a backup.\" at the console. (first time I've seen that)\n\nLog shows: Renamed wallet.dat to wallet.1349630310.bak\nSalvage(aggressive) found 2372 records\n\nAnd a bunch of nice addwallets.\n\nBut calling getinfo triggers segfault.\n\n-- still, this pull is a massive improvement over default.   Now that we've got a case where there could be backup wallet files laying around perhaps we should go all the way and keep a couple wallet rotation even when there isn't corruption?\n\nPerhaps the fuzzing is a little too nasty to be a realistic test.  Though if we ever change to our own append only format, I absolutely expect it to survive this kind of test.\n",
      "created_at" : "2012-10-07T17:23:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9210115",
      "id" : 9210115,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1895",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDkyMTAxMTU=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9210115/reactions"
      },
      "updated_at" : "2012-10-07T17:23:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9210115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "How does this handle encrypted wallets?\n",
      "created_at" : "2012-10-07T17:26:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9210153",
      "id" : 9210153,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1895",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDkyMTAxNTM=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9210153/reactions"
      },
      "updated_at" : "2012-10-07T17:26:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9210153",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@luke-jr it handles encrypted wallets as well as might be expected. It works on the bdb level, salvaging as many key/value pairs as it can from the backed-up wallet.dat.  If it encounters a database-level error reading keys (private keys, encrypted or not, or master keys) it tells the user to try to recover from a backup.\n",
      "created_at" : "2012-10-08T21:28:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9240885",
      "id" : 9240885,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1895",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDkyNDA4ODU=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9240885/reactions"
      },
      "updated_at" : "2012-10-08T21:28:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9240885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased on top of #1917; changed error handling from bdb methods from exceptions to returned error codes.\n",
      "created_at" : "2012-10-08T23:59:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/1895#issuecomment-9244733",
      "id" : 9244733,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/1895",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDkyNDQ3MzM=",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9244733/reactions"
      },
      "updated_at" : "2012-10-08T23:59:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9244733",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=4",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "node_id" : "MDQ6VXNlcjMzMTk5Nw==",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   }
]
