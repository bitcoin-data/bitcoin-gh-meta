[
   {
      "author_association" : "MEMBER",
      "body" : "Thanks // Concept ACK, code looks good to me at first glance but ofcourse needs manual testing (as it's not tested by the test framework).",
      "created_at" : "2018-07-10T15:17:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-403860536",
      "id" : 403860536,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwMzg2MDUzNg==",
      "updated_at" : "2018-07-10T15:17:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/403860536",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Could remove the bash script in the same commit?",
      "created_at" : "2018-07-10T15:45:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-403870751",
      "id" : 403870751,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwMzg3MDc1MQ==",
      "updated_at" : "2018-07-10T15:45:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/403870751",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #13643 (Switch to NSIS 3.03 to avoid DLL hijacking by h4x3rotab)\n* #13368 (Update gitian-build.sh for docker by achow101)\n* #13171 (Change gitian-descriptors to use bionic instead by ken2812221)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-07-10T16:27:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-403884743",
      "id" : 403884743,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwMzg4NDc0Mw==",
      "updated_at" : "2018-07-14T00:23:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/403884743",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2018-07-10T20:18:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-403952339",
      "id" : 403952339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwMzk1MjMzOQ==",
      "updated_at" : "2018-07-10T20:18:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/403952339",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1008458?v=4",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "node_id" : "MDQ6VXNlcjEwMDg0NTg=",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "As `gitian-build.sh` is mostly calling other executables, I think `bash/sh` is still the most sensible/readable/least-dependencies choice. According to https://github.com/bitcoin/bitcoin/issues/13620 there are edge cases to fix, sure, but I'm not convinced that there's a need for a python rewrite.\r\n\r\nStatic analysis tools run against shell scripts in the check pipeline can eliminate/mitigate edge cases. I'd recommend: https://github.com/koalaman/shellcheck",
      "created_at" : "2018-07-10T21:07:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-403966145",
      "id" : 403966145,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwMzk2NjE0NQ==",
      "updated_at" : "2018-07-10T21:07:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/403966145",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> As gitian-build.sh is mostly calling other executables, I think bash/sh is still the most sensible/readable/least-dependencies choice.\r\n\r\nThe point is that most of the developers in this project have a much easier time reviewing and maintaining python code. Shell script has turned out to be a continuous struggle against shell differences, bad performance, bugs and other edge cases due to obscure quoting practices, and so on.\r\n\r\nYou might disagree personally--obviously everything *is* possible with shell script as well, but porting this to python is more of a social consensus.\r\n(as for dependencies, I don't think that is a big thing here, Python 3 is already required to build the project and this requires no external modules)",
      "created_at" : "2018-07-11T11:34:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-404137825",
      "id" : 404137825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNDEzNzgyNQ==",
      "updated_at" : "2018-07-11T18:28:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/404137825",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Also, the resulting python script is a lot shorter. Means less code weight to maintain in the future :)",
      "created_at" : "2018-07-11T11:37:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-404138553",
      "id" : 404138553,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNDEzODU1Mw==",
      "updated_at" : "2018-07-11T11:37:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/404138553",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r201760924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/201760924"
         }
      },
      "author_association" : "NONE",
      "body" : "You can add the parameter nargs=1 to make signer and version mandatory and skip lines 155-162. It will produce a list of one item. See https://docs.python.org/3/library/argparse.html#nargs",
      "commit_id" : "78f06e4af76b6e4550b8eed5a521684140a4fc5f",
      "created_at" : "2018-07-11T16:34:24Z",
      "diff_hunk" : "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'apache2', 'git', 'apt-cacher-ng']\n+    if args.kvm:\n+        programs += ['python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    else:\n+        programs += ['lxc']\n+    subprocess.check_call(['sudo', 'apt-get', 'install'] + programs)\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64']\n+    if not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+\n+    os.chdir(workdir)\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default=2, help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default=2000, help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-d', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', help='GPG signer to sign each build assert file')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r201760924",
      "id" : 201760924,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTc2MDkyNA==",
      "original_commit_id" : "bc284da7f0e759e163c65082c9155563c0f9be89",
      "original_position" : 130,
      "path" : "contrib/gitian-build.py",
      "position" : null,
      "pull_request_review_id" : 136324737,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623",
      "updated_at" : "2018-07-16T13:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/201760924",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/15388116?v=4",
         "events_url" : "https://api.github.com/users/mcdallas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mcdallas/followers",
         "following_url" : "https://api.github.com/users/mcdallas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mcdallas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mcdallas",
         "id" : 15388116,
         "login" : "mcdallas",
         "node_id" : "MDQ6VXNlcjE1Mzg4MTE2",
         "organizations_url" : "https://api.github.com/users/mcdallas/orgs",
         "received_events_url" : "https://api.github.com/users/mcdallas/received_events",
         "repos_url" : "https://api.github.com/users/mcdallas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mcdallas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mcdallas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mcdallas"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r201843933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/201843933"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This isn't necessary since signer and version are positional arguments so if they aren't provided then an error will always be thrown. The checks later are still necessary since you can still pass in the empty string as an argument regardless of nargs.",
      "commit_id" : "78f06e4af76b6e4550b8eed5a521684140a4fc5f",
      "created_at" : "2018-07-11T21:24:02Z",
      "diff_hunk" : "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'apache2', 'git', 'apt-cacher-ng']\n+    if args.kvm:\n+        programs += ['python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    else:\n+        programs += ['lxc']\n+    subprocess.check_call(['sudo', 'apt-get', 'install'] + programs)\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64']\n+    if not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+\n+    os.chdir(workdir)\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default=2, help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default=2000, help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-d', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', help='GPG signer to sign each build assert file')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r201843933",
      "id" : 201843933,
      "in_reply_to_id" : 201760924,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTg0MzkzMw==",
      "original_commit_id" : "bc284da7f0e759e163c65082c9155563c0f9be89",
      "original_position" : 130,
      "path" : "contrib/gitian-build.py",
      "position" : null,
      "pull_request_review_id" : 136427554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623",
      "updated_at" : "2018-07-16T13:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/201843933",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r201853660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/201853660"
         }
      },
      "author_association" : "NONE",
      "body" : "Oh I missed the point of the checks. Still if we want to guard against empty string we can use the `type`  argument with a custom callable (saves a few lines)",
      "commit_id" : "78f06e4af76b6e4550b8eed5a521684140a4fc5f",
      "created_at" : "2018-07-11T22:00:44Z",
      "diff_hunk" : "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'apache2', 'git', 'apt-cacher-ng']\n+    if args.kvm:\n+        programs += ['python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    else:\n+        programs += ['lxc']\n+    subprocess.check_call(['sudo', 'apt-get', 'install'] + programs)\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64']\n+    if not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+\n+    os.chdir(workdir)\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default=2, help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default=2000, help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-d', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', help='GPG signer to sign each build assert file')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r201853660",
      "id" : 201853660,
      "in_reply_to_id" : 201760924,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMTg1MzY2MA==",
      "original_commit_id" : "bc284da7f0e759e163c65082c9155563c0f9be89",
      "original_position" : 130,
      "path" : "contrib/gitian-build.py",
      "position" : null,
      "pull_request_review_id" : 136438720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623",
      "updated_at" : "2018-07-16T13:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/201853660",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/15388116?v=4",
         "events_url" : "https://api.github.com/users/mcdallas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mcdallas/followers",
         "following_url" : "https://api.github.com/users/mcdallas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mcdallas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mcdallas",
         "id" : 15388116,
         "login" : "mcdallas",
         "node_id" : "MDQ6VXNlcjE1Mzg4MTE2",
         "organizations_url" : "https://api.github.com/users/mcdallas/orgs",
         "received_events_url" : "https://api.github.com/users/mcdallas/received_events",
         "repos_url" : "https://api.github.com/users/mcdallas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mcdallas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mcdallas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mcdallas"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Update: exit 1 if signer or version is empty.",
      "created_at" : "2018-07-12T02:45:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-404372061",
      "id" : 404372061,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNDM3MjA2MQ==",
      "updated_at" : "2018-07-12T02:45:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/404372061",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202251072"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202251072"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "is this option necessary? if there's a v you could just include it in the argument. I found this confusing when I ran the command, it was trying to checkout `vmaster` because I didn't have the `--commit` option.",
      "commit_id" : "78f06e4af76b6e4550b8eed5a521684140a4fc5f",
      "created_at" : "2018-07-13T06:05:14Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'apache2', 'git', 'apt-cacher-ng']\n+    if args.kvm:\n+        programs += ['python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    else:\n+        programs += ['lxc']\n+    subprocess.check_call(['sudo', 'apt-get', 'install'] + programs)\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64']\n+    if not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+\n+    os.chdir(workdir)\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default=2, help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default=2000, help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-d', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', help='GPG signer to sign each build assert file')\n+    parser.add_argument('version', help='Version number, commit, or branch to build. If building a commit or branch, the -c option must be specified')\n+\n+    args = parser.parse_args()\n+    workdir = os.getcwd()\n+\n+    args.linux = 'l' in args.os\n+    args.windows = 'w' in args.os\n+    args.macos = 'm' in args.os\n+\n+    if args.buildsign:\n+        args.build=True\n+        args.sign=True\n+\n+    args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n+\n+    # Set enviroment variable USE_LXC, let gitian-builder know that we use lxc\n+    if not args.kvm:\n+        os.environ['USE_LXC'] = '1'\n+\n+    # Disable for MacOS if no SDK found\n+    if args.macos and not os.path.isfile('gitian-builder/inputs/MacOSX10.11.sdk.tar.gz'):\n+        print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n+        args.macos = False\n+\n+    script_name = os.path.basename(sys.argv[0])\n+    # Signer and version shouldn't be empty\n+    if args.signer == '':\n+        print(script_name+': Missing signer.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+    if args.version == '':\n+        print(script_name+': Missing version.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+\n+    # Add leading 'v' for tags",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202251072",
      "id" : 202251072,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjI1MTA3Mg==",
      "original_commit_id" : "a67812d15e1b680fba6ddc385df0b56f1c530310",
      "original_position" : 166,
      "path" : "contrib/gitian-build.py",
      "position" : 179,
      "pull_request_review_id" : 136914496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623",
      "updated_at" : "2018-07-16T13:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202251072",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202251223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202251223"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this assumes you would be running the command from outside the bitcoin directory. is this correct? I found I had to cd .. and then run ./bitcoin/contrib/gitian-builder.py to make the command work?",
      "commit_id" : "78f06e4af76b6e4550b8eed5a521684140a4fc5f",
      "created_at" : "2018-07-13T06:06:16Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'apache2', 'git', 'apt-cacher-ng']\n+    if args.kvm:\n+        programs += ['python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    else:\n+        programs += ['lxc']\n+    subprocess.check_call(['sudo', 'apt-get', 'install'] + programs)\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64']\n+    if not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+\n+    os.chdir(workdir)\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default=2, help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default=2000, help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-d', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', help='GPG signer to sign each build assert file')\n+    parser.add_argument('version', help='Version number, commit, or branch to build. If building a commit or branch, the -c option must be specified')\n+\n+    args = parser.parse_args()\n+    workdir = os.getcwd()\n+\n+    args.linux = 'l' in args.os\n+    args.windows = 'w' in args.os\n+    args.macos = 'm' in args.os\n+\n+    if args.buildsign:\n+        args.build=True\n+        args.sign=True\n+\n+    args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n+\n+    # Set enviroment variable USE_LXC, let gitian-builder know that we use lxc\n+    if not args.kvm:\n+        os.environ['USE_LXC'] = '1'\n+\n+    # Disable for MacOS if no SDK found\n+    if args.macos and not os.path.isfile('gitian-builder/inputs/MacOSX10.11.sdk.tar.gz'):\n+        print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n+        args.macos = False\n+\n+    script_name = os.path.basename(sys.argv[0])\n+    # Signer and version shouldn't be empty\n+    if args.signer == '':\n+        print(script_name+': Missing signer.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+    if args.version == '':\n+        print(script_name+': Missing version.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+\n+    # Add leading 'v' for tags\n+    args.commit = ('' if args.commit else 'v') + args.version\n+    print(args.commit)\n+\n+    if args.setup:\n+        setup()\n+\n+    os.chdir('bitcoin')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202251223",
      "id" : 202251223,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjI1MTIyMw==",
      "original_commit_id" : "a67812d15e1b680fba6ddc385df0b56f1c530310",
      "original_position" : 173,
      "path" : "contrib/gitian-build.py",
      "position" : 186,
      "pull_request_review_id" : 136914496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623",
      "updated_at" : "2018-07-16T13:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202251223",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202251915"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202251915"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "perhaps we could default to build? or at least throw an error when all three are not selected?",
      "commit_id" : "78f06e4af76b6e4550b8eed5a521684140a4fc5f",
      "created_at" : "2018-07-13T06:11:17Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'apache2', 'git', 'apt-cacher-ng']\n+    if args.kvm:\n+        programs += ['python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    else:\n+        programs += ['lxc']\n+    subprocess.check_call(['sudo', 'apt-get', 'install'] + programs)\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64']\n+    if not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+\n+    os.chdir(workdir)\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default=2, help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default=2000, help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-d', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', help='GPG signer to sign each build assert file')\n+    parser.add_argument('version', help='Version number, commit, or branch to build. If building a commit or branch, the -c option must be specified')\n+\n+    args = parser.parse_args()\n+    workdir = os.getcwd()\n+\n+    args.linux = 'l' in args.os\n+    args.windows = 'w' in args.os\n+    args.macos = 'm' in args.os\n+\n+    if args.buildsign:\n+        args.build=True\n+        args.sign=True\n+\n+    args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n+\n+    # Set enviroment variable USE_LXC, let gitian-builder know that we use lxc\n+    if not args.kvm:\n+        os.environ['USE_LXC'] = '1'\n+\n+    # Disable for MacOS if no SDK found\n+    if args.macos and not os.path.isfile('gitian-builder/inputs/MacOSX10.11.sdk.tar.gz'):\n+        print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n+        args.macos = False\n+\n+    script_name = os.path.basename(sys.argv[0])\n+    # Signer and version shouldn't be empty\n+    if args.signer == '':\n+        print(script_name+': Missing signer.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+    if args.version == '':\n+        print(script_name+': Missing version.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+\n+    # Add leading 'v' for tags\n+    args.commit = ('' if args.commit else 'v') + args.version\n+    print(args.commit)\n+\n+    if args.setup:\n+        setup()\n+\n+    os.chdir('bitcoin')\n+    subprocess.check_call(['git', 'fetch'])\n+    subprocess.check_call(['git', 'checkout', args.commit])\n+    os.chdir(workdir)\n+\n+    if args.build:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202251915",
      "id" : 202251915,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjI1MTkxNQ==",
      "original_commit_id" : "a67812d15e1b680fba6ddc385df0b56f1c530310",
      "original_position" : 178,
      "path" : "contrib/gitian-build.py",
      "position" : 191,
      "pull_request_review_id" : 136914496,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623",
      "updated_at" : "2018-07-16T13:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202251915",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202254416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202254416"
         }
      },
      "author_association" : "MEMBER",
      "body" : "From the instruction from https://github.com/bitcoin-core/docs/blob/master/gitian-building.md , you should copy the script to the same level as bitcoin folder",
      "commit_id" : "78f06e4af76b6e4550b8eed5a521684140a4fc5f",
      "created_at" : "2018-07-13T06:28:10Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'apache2', 'git', 'apt-cacher-ng']\n+    if args.kvm:\n+        programs += ['python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    else:\n+        programs += ['lxc']\n+    subprocess.check_call(['sudo', 'apt-get', 'install'] + programs)\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64']\n+    if not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+\n+    os.chdir(workdir)\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default=2, help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default=2000, help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-d', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', help='GPG signer to sign each build assert file')\n+    parser.add_argument('version', help='Version number, commit, or branch to build. If building a commit or branch, the -c option must be specified')\n+\n+    args = parser.parse_args()\n+    workdir = os.getcwd()\n+\n+    args.linux = 'l' in args.os\n+    args.windows = 'w' in args.os\n+    args.macos = 'm' in args.os\n+\n+    if args.buildsign:\n+        args.build=True\n+        args.sign=True\n+\n+    args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n+\n+    # Set enviroment variable USE_LXC, let gitian-builder know that we use lxc\n+    if not args.kvm:\n+        os.environ['USE_LXC'] = '1'\n+\n+    # Disable for MacOS if no SDK found\n+    if args.macos and not os.path.isfile('gitian-builder/inputs/MacOSX10.11.sdk.tar.gz'):\n+        print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n+        args.macos = False\n+\n+    script_name = os.path.basename(sys.argv[0])\n+    # Signer and version shouldn't be empty\n+    if args.signer == '':\n+        print(script_name+': Missing signer.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+    if args.version == '':\n+        print(script_name+': Missing version.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+\n+    # Add leading 'v' for tags\n+    args.commit = ('' if args.commit else 'v') + args.version\n+    print(args.commit)\n+\n+    if args.setup:\n+        setup()\n+\n+    os.chdir('bitcoin')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202254416",
      "id" : 202254416,
      "in_reply_to_id" : 202251223,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjI1NDQxNg==",
      "original_commit_id" : "a67812d15e1b680fba6ddc385df0b56f1c530310",
      "original_position" : 173,
      "path" : "contrib/gitian-build.py",
      "position" : 186,
      "pull_request_review_id" : 136918236,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623",
      "updated_at" : "2018-07-16T13:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202254416",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202260922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202260922"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The version without 'v' prefix is still used in gsign.",
      "commit_id" : "78f06e4af76b6e4550b8eed5a521684140a4fc5f",
      "created_at" : "2018-07-13T07:07:29Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'apache2', 'git', 'apt-cacher-ng']\n+    if args.kvm:\n+        programs += ['python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    else:\n+        programs += ['lxc']\n+    subprocess.check_call(['sudo', 'apt-get', 'install'] + programs)\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64']\n+    if not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+\n+    os.chdir(workdir)\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default=2, help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default=2000, help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-d', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', help='GPG signer to sign each build assert file')\n+    parser.add_argument('version', help='Version number, commit, or branch to build. If building a commit or branch, the -c option must be specified')\n+\n+    args = parser.parse_args()\n+    workdir = os.getcwd()\n+\n+    args.linux = 'l' in args.os\n+    args.windows = 'w' in args.os\n+    args.macos = 'm' in args.os\n+\n+    if args.buildsign:\n+        args.build=True\n+        args.sign=True\n+\n+    args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n+\n+    # Set enviroment variable USE_LXC, let gitian-builder know that we use lxc\n+    if not args.kvm:\n+        os.environ['USE_LXC'] = '1'\n+\n+    # Disable for MacOS if no SDK found\n+    if args.macos and not os.path.isfile('gitian-builder/inputs/MacOSX10.11.sdk.tar.gz'):\n+        print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n+        args.macos = False\n+\n+    script_name = os.path.basename(sys.argv[0])\n+    # Signer and version shouldn't be empty\n+    if args.signer == '':\n+        print(script_name+': Missing signer.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+    if args.version == '':\n+        print(script_name+': Missing version.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+\n+    # Add leading 'v' for tags",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202260922",
      "id" : 202260922,
      "in_reply_to_id" : 202251072,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjI2MDkyMg==",
      "original_commit_id" : "a67812d15e1b680fba6ddc385df0b56f1c530310",
      "original_position" : 166,
      "path" : "contrib/gitian-build.py",
      "position" : 179,
      "pull_request_review_id" : 136925825,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623",
      "updated_at" : "2018-07-16T13:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202260922",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Using a67812d  if I pass `--setup` and already have one of the required repos cloned I see:\r\n```\r\nProcessing triggers for ureadahead (0.100.0-20) ...\r\nProcessing triggers for ufw (0.35-5) ...\r\nfatal: destination path 'gitian.sigs' already exists and is not an empty directory.\r\nTraceback (most recent call last):\r\n  File \"./gitian-build.py\", line 188, in <module>\r\n    main()\r\n  File \"./gitian-build.py\", line 171, in main\r\n    setup()\r\n  File \"./gitian-build.py\", line 16, in setup\r\n    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\r\n  File \"/usr/lib/python3.6/subprocess.py\", line 291, in check_call\r\n    raise CalledProcessError(retcode, cmd)\r\nsubprocess.CalledProcessError: Command '['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git']' returned non-zero exit status 128.\r\nubuntu@ubuntu:~$ ls\r\n```\r\nRemoved the repos and re-ran with `--setup`:\r\n```\r\n|               E |\r\n+----[SHA256]-----+\r\nsudo: debootstrap: command not found\r\nTraceback (most recent call last):\r\n  File \"./gitian-build.py\", line 188, in <module>\r\n    main()\r\n  File \"./gitian-build.py\", line 171, in main\r\n    setup()\r\n  File \"./gitian-build.py\", line 23, in setup\r\n    subprocess.check_call(make_image_prog)\r\n  File \"/usr/lib/python3.6/subprocess.py\", line 291, in check_call\r\n    raise CalledProcessError(retcode, cmd)\r\nsubprocess.CalledProcessError: Command '['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64', '--lxc']' returned non-zero exit status 1.\r\n```\r\n\r\n`--setup --kvm`\r\n```\r\ninvoke-rc.d: policy-rc.d denied execution of restart.\r\n\r\nConfiguration file '/etc/sudoers'\r\n ==> Modified (by you or by a script) since installation.\r\n ==> Package distributor has shipped an updated version.\r\n   What would you like to do about it ?  Your options are:\r\n    Y or I  : install the package maintainer's version\r\n    N or O  : keep your currently-installed version\r\n      D     : show the differences between the versions\r\n      Z     : start a shell to examine the situation\r\n The default action is to keep your current version.\r\n*** sudoers (Y/I/N/O/D/Z) [default=N] ? dpkg: error processing package sudo (--configure):\r\n EOF on stdin at conffile prompt\r\ninvoke-rc.d: policy-rc.d denied execution of restart.\r\nErrors were encountered while processing:\r\n sudo\r\nE: Sub-process /usr/bin/dpkg returned an error code (1)\r\n\r\nTraceback (most recent call last):\r\n  File \"./gitian-build.py\", line 188, in <module>\r\n    main()\r\n  File \"./gitian-build.py\", line 171, in main\r\n    setup()\r\n  File \"./gitian-build.py\", line 23, in setup\r\n    subprocess.check_call(make_image_prog)\r\n  File \"/usr/lib/python3.6/subprocess.py\", line 291, in check_call\r\n    raise CalledProcessError(retcode, cmd)\r\nsubprocess.CalledProcessError: Command '['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64']' returned non-zero exit status 1.\r\n```",
      "created_at" : "2018-07-13T09:57:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-404786692",
      "id" : 404786692,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNDc4NjY5Mg==",
      "updated_at" : "2018-07-13T10:17:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/404786692",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I don't know how to deal with KVM errors since I haven't used KVM ever, I just follow the same command with the original script. Can anyone give a hint?",
      "created_at" : "2018-07-13T11:48:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-404810268",
      "id" : 404810268,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNDgxMDI2OA==",
      "updated_at" : "2018-07-13T11:48:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/404810268",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202413597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202413597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ah ok thanks",
      "commit_id" : "78f06e4af76b6e4550b8eed5a521684140a4fc5f",
      "created_at" : "2018-07-13T16:59:35Z",
      "diff_hunk" : "@@ -0,0 +1,188 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'apache2', 'git', 'apt-cacher-ng']\n+    if args.kvm:\n+        programs += ['python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    else:\n+        programs += ['lxc']\n+    subprocess.check_call(['sudo', 'apt-get', 'install'] + programs)\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'trusty', '--arch', 'amd64']\n+    if not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+\n+    os.chdir(workdir)\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default=2, help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default=2000, help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-d', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', help='GPG signer to sign each build assert file')\n+    parser.add_argument('version', help='Version number, commit, or branch to build. If building a commit or branch, the -c option must be specified')\n+\n+    args = parser.parse_args()\n+    workdir = os.getcwd()\n+\n+    args.linux = 'l' in args.os\n+    args.windows = 'w' in args.os\n+    args.macos = 'm' in args.os\n+\n+    if args.buildsign:\n+        args.build=True\n+        args.sign=True\n+\n+    args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n+\n+    # Set enviroment variable USE_LXC, let gitian-builder know that we use lxc\n+    if not args.kvm:\n+        os.environ['USE_LXC'] = '1'\n+\n+    # Disable for MacOS if no SDK found\n+    if args.macos and not os.path.isfile('gitian-builder/inputs/MacOSX10.11.sdk.tar.gz'):\n+        print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n+        args.macos = False\n+\n+    script_name = os.path.basename(sys.argv[0])\n+    # Signer and version shouldn't be empty\n+    if args.signer == '':\n+        print(script_name+': Missing signer.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+    if args.version == '':\n+        print(script_name+': Missing version.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+\n+    # Add leading 'v' for tags\n+    args.commit = ('' if args.commit else 'v') + args.version\n+    print(args.commit)\n+\n+    if args.setup:\n+        setup()\n+\n+    os.chdir('bitcoin')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#discussion_r202413597",
      "id" : 202413597,
      "in_reply_to_id" : 202251223,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQxMzU5Nw==",
      "original_commit_id" : "a67812d15e1b680fba6ddc385df0b56f1c530310",
      "original_position" : 173,
      "path" : "contrib/gitian-build.py",
      "position" : 186,
      "pull_request_review_id" : 137114985,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13623",
      "updated_at" : "2018-07-16T13:01:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202413597",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ken2812221 Now that #13368 has been merged, can you update the new Python script to add Docker support. I will retest the changes here shortly.",
      "created_at" : "2018-07-15T23:44:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-405127096",
      "id" : 405127096,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNTEyNzA5Ng==",
      "updated_at" : "2018-07-15T23:44:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/405127096",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-07-16T11:16:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-405215696",
      "id" : 405215696,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNTIxNTY5Ng==",
      "updated_at" : "2018-07-16T11:16:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/405215696",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This is great, especially not having to worry about the exact sequence of arguments (the bash script had some quirks).\r\n\r\nI'm trying to sign `master` on a Bionic VM (haven't tried a Debian 9 host).\r\n\r\n```sh\r\n# git clone bitcoin, gitian.sigs, etc\r\ncp bitcoin/contrib/gitian-build.py .\r\n# add MacOS stuff \r\npython3 gitian-build.py --setup sjors -c master\r\npython3 gitian-build.py --detach-sign --no-commit -b sjors -c master\r\n```\r\n\r\nThis throws an error for me, see #13623. The original bash script also throws that error, so probably not related. Just means I can't test the rest of the process on this VM.\r\n\r\nWhen running `--setup --docker` it throws an error:\r\n```\r\nERRO[0000] failed to dial gRPC: cannot connect to the Docker daemon. Is 'docker daemon' running on this host?: dial unix /var/run/docker.sock: connect: permission denied \r\n```\r\n\r\n`docker ps` also throws a permission error; `sudo docker ps` works. `sudo usermod -aG docker $USER` solves the problem. It creates an image `base-bionic-amd64`.\r\n\r\nTrying to build with Docker complains:\r\n\r\n```\r\nCompiling master Linux\r\n--- Building for bionic amd64 ---\r\nStopping target if it is up\r\nMaking a new image copy\r\nError: No such container: gitian-target\r\n```\r\n\r\nThe bash script throws the same complaint, so that's not related.\r\n\r\nWhen running gitian-build.py without arguments, it should probably just return ` --help` (or otherwise point out that this exists).\r\n\r\nIs there a corresponding PR to update the instructions? (mostly just renaming `.sh` to `.py`)\r\n\r\nCan you add `make` to the dependencies installed during `--setup`?\r\n\r\nFor another PR: having a config flag to get a Trusty base image can be useful when building backports.",
      "created_at" : "2018-07-17T16:17:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-405640830",
      "id" : 405640830,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNTY0MDgzMA==",
      "updated_at" : "2018-07-17T16:18:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/405640830",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">Compiling master Linux\r\n--- Building for bionic amd64 ---\r\nStopping target if it is up\r\nMaking a new image copy\r\nError: No such container: gitian-target\r\n\r\nI believe the docker problem is already exist on gitian-build.sh because I saw the same error trying to use gitian-build.sh to create docker image.\r\n\r\n>Can you add make to the dependencies installed during --setup?\r\n\r\nWhy?",
      "created_at" : "2018-07-17T17:37:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-405664909",
      "id" : 405664909,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNTY2NDkwOQ==",
      "updated_at" : "2018-07-17T17:37:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/405664909",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/11154118?v=4",
         "events_url" : "https://api.github.com/users/ken2812221/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ken2812221/followers",
         "following_url" : "https://api.github.com/users/ken2812221/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ken2812221/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ken2812221",
         "id" : 11154118,
         "login" : "ken2812221",
         "node_id" : "MDQ6VXNlcjExMTU0MTE4",
         "organizations_url" : "https://api.github.com/users/ken2812221/orgs",
         "received_events_url" : "https://api.github.com/users/ken2812221/received_events",
         "repos_url" : "https://api.github.com/users/ken2812221/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ken2812221/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ken2812221"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Correct, it happens both with bash and python.\r\n\r\nWithout \"make\" setup throws an error on a fresh Bionic machine (unless you install all dependencies recommended in the docs, which is overkill).",
      "created_at" : "2018-07-17T17:53:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-405670021",
      "id" : 405670021,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNTY3MDAyMQ==",
      "updated_at" : "2018-07-17T17:53:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/405670021",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 78f06e4af76b6e4550b8eed5a521684140a4",
      "created_at" : "2018-07-17T18:02:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-405672988",
      "id" : 405672988,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNTY3Mjk4OA==",
      "updated_at" : "2018-07-17T18:02:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/405672988",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "On Debian 9, when trying to `--setup` with `--docker`, I'm getting `Package 'docker.io' has no installation candidate`.\r\n\r\nSo I installed Docker [manually](https://linuxconfig.org/package-docker-io-has-no-installation-candidate-debian-jessie), but get the same error. Disabling `programs += ['docker.io']` does the trick.",
      "created_at" : "2018-07-17T18:35:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13623#issuecomment-405684241",
      "id" : 405684241,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13623",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQwNTY4NDI0MQ==",
      "updated_at" : "2018-07-17T18:36:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/405684241",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
